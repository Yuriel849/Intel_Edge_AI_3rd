
13.PHOTORESISTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc8  08008cc8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc8  08008cc8  00018cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd0  08008cd0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000c24  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c8c  20000c8c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c7d5  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003975  00000000  00000000  0003c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  00040228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001363  00000000  00000000  00041ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004969  00000000  00000000  00042e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e945  00000000  00000000  0004779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa2f2  00000000  00000000  000660e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007198  00000000  00000000  001603d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0016756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b9c 	.word	0x08008b9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08008b9c 	.word	0x08008b9c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_SYSTICK_Handler+0x18>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_SYSTICK_Handler+0x18>)
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	20000ab8 	.word	0x20000ab8

080005a8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f006 f830 	bl	800661e <HAL_UART_Transmit>

  return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000518 	.word	0x20000518

080005cc <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d109      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005e6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005f0:	6013      	str	r3, [r2, #0]
	}
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40014400 	.word	0x40014400
 8000604:	20000ab0 	.word	0x20000ab0
 8000608:	20000ab4 	.word	0x20000ab4

0800060c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_ADC_ConvCpltCallback+0x30>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d109      	bne.n	8000632 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc_value[0] = HAL_ADC_GetValue(&hadc1);
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HAL_ADC_ConvCpltCallback+0x34>)
 8000620:	f001 fe78 	bl	8002314 <HAL_ADC_GetValue>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_ADC_ConvCpltCallback+0x38>)
 800062a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <HAL_ADC_ConvCpltCallback+0x34>)
 800062e:	f001 fc83 	bl	8001f38 <HAL_ADC_Start_IT>
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40012000 	.word	0x40012000
 8000640:	200001fc 	.word	0x200001fc
 8000644:	20000abc 	.word	0x20000abc

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 fb9a 	bl	8001d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f868 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fc48 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000658:	f000 fbc4 	bl	8000de4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065c:	f000 fc16 	bl	8000e8c <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000660:	f000 fbea 	bl	8000e38 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000664:	f000 fb76 	bl	8000d54 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000668:	f000 fb98 	bl	8000d9c <MX_TIM11_Init>
  MX_TIM3_Init();
 800066c:	f000 fa5a 	bl	8000b24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000670:	f000 faac 	bl	8000bcc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000674:	f000 f9fc 	bl	8000a70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000678:	f000 f9a0 	bl	80009bc <MX_RTC_Init>
  MX_TIM5_Init();
 800067c:	f000 faf4 	bl	8000c68 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000680:	f000 f95c 	bl	800093c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000684:	f000 f8ba 	bl	80007fc <MX_ADC1_Init>
  MX_ETH_Init();
 8000688:	f000 f90a 	bl	80008a0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 800068c:	2201      	movs	r2, #1
 800068e:	4917      	ldr	r1, [pc, #92]	; (80006ec <main+0xa4>)
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <main+0xa8>)
 8000692:	f006 f856 	bl	8006742 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000696:	2201      	movs	r2, #1
 8000698:	4916      	ldr	r1, [pc, #88]	; (80006f4 <main+0xac>)
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <main+0xb0>)
 800069c:	f006 f851 	bl	8006742 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 80006a0:	4816      	ldr	r0, [pc, #88]	; (80006fc <main+0xb4>)
 80006a2:	f004 faff 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0xb8>)
 80006a8:	f004 fafc 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <main+0xbc>)
 80006b0:	f004 fde6 	bl	8005280 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 80006b4:	2100      	movs	r1, #0
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <main+0xc0>)
 80006b8:	f004 fc7c 	bl	8004fb4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 80006bc:	2100      	movs	r1, #0
 80006be:	4813      	ldr	r0, [pc, #76]	; (800070c <main+0xc4>)
 80006c0:	f004 fbb0 	bl	8004e24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 80006c4:	210c      	movs	r1, #12
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <main+0xc8>)
 80006c8:	f004 fbac 	bl	8004e24 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <main+0xcc>)
 80006ce:	f001 fc33 	bl	8001f38 <HAL_ADC_Start_IT>

//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <main+0xd0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("CDS sensor value: %d\n", adc_value[0]);
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0xd4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0xd8>)
 80006e0:	f007 fb8c 	bl	8007dfc <iprintf>
//	  if(adc_value[0] < )
	  HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f001 fbbf 	bl	8001e68 <HAL_Delay>
	  printf("CDS sensor value: %d\n", adc_value[0]);
 80006ea:	e7f5      	b.n	80006d8 <main+0x90>
 80006ec:	20000aac 	.word	0x20000aac
 80006f0:	20000518 	.word	0x20000518
 80006f4:	20000aad 	.word	0x20000aad
 80006f8:	2000055c 	.word	0x2000055c
 80006fc:	20000488 	.word	0x20000488
 8000700:	200004d0 	.word	0x200004d0
 8000704:	200003b0 	.word	0x200003b0
 8000708:	200003f8 	.word	0x200003f8
 800070c:	20000368 	.word	0x20000368
 8000710:	20000440 	.word	0x20000440
 8000714:	200001fc 	.word	0x200001fc
 8000718:	20000ab0 	.word	0x20000ab0
 800071c:	20000abc 	.word	0x20000abc
 8000720:	08008bb4 	.word	0x08008bb4

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 fca8 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <SystemClock_Config+0xd4>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000780:	2309      	movs	r3, #9
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000784:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	; 0xa8
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 f99d 	bl	8003aec <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 fcce 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fbfe 	bl	8003fdc <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 fcb7 	bl	8001158 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_ADC1_Init+0x98>)
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <MX_ADC1_Init+0x9c>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_ADC1_Init+0x98>)
 8000816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800081a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_ADC1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_ADC1_Init+0x98>)
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_ADC1_Init+0xa0>)
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_ADC1_Init+0x98>)
 800084a:	2201      	movs	r2, #1
 800084c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_ADC1_Init+0x98>)
 8000858:	2201      	movs	r2, #1
 800085a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_ADC1_Init+0x98>)
 800085e:	f001 fb27 	bl	8001eb0 <HAL_ADC_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fc76 	bl	8001158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086c:	2304      	movs	r3, #4
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000874:	2307      	movs	r3, #7
 8000876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_ADC1_Init+0x98>)
 800087e:	f001 fd6b 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000888:	f000 fc66 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001fc 	.word	0x200001fc
 8000898:	40012000 	.word	0x40012000
 800089c:	0f000001 	.word	0x0f000001

080008a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ETH_Init+0x84>)
 80008a6:	4a20      	ldr	r2, [pc, #128]	; (8000928 <MX_ETH_Init+0x88>)
 80008a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ETH_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ETH_Init+0x8c>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ETH_Init+0x8c>)
 80008b8:	22e1      	movs	r2, #225	; 0xe1
 80008ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ETH_Init+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ETH_Init+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ETH_Init+0x8c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_ETH_Init+0x84>)
 80008d0:	4a16      	ldr	r2, [pc, #88]	; (800092c <MX_ETH_Init+0x8c>)
 80008d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_ETH_Init+0x84>)
 80008d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ETH_Init+0x84>)
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <MX_ETH_Init+0x90>)
 80008e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_ETH_Init+0x84>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x94>)
 80008e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_ETH_Init+0x84>)
 80008ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_ETH_Init+0x84>)
 80008f2:	f002 f90d 	bl	8002b10 <HAL_ETH_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 fc2c 	bl	8001158 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000900:	2238      	movs	r2, #56	; 0x38
 8000902:	2100      	movs	r1, #0
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x98>)
 8000906:	f007 fbbf 	bl	8008088 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_ETH_Init+0x98>)
 800090c:	2221      	movs	r2, #33	; 0x21
 800090e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_ETH_Init+0x98>)
 8000912:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000916:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_ETH_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000244 	.word	0x20000244
 8000928:	40028000 	.word	0x40028000
 800092c:	20000ac4 	.word	0x20000ac4
 8000930:	2000015c 	.word	0x2000015c
 8000934:	200000bc 	.word	0x200000bc
 8000938:	20000084 	.word	0x20000084

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_I2C1_Init+0x74>)
 800097a:	f002 fddb 	bl	8003534 <HAL_I2C_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 fbe8 	bl	8001158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x74>)
 800098c:	f002 ff16 	bl	80037bc <HAL_I2CEx_ConfigAnalogFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000996:	f000 fbdf 	bl	8001158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_I2C1_Init+0x74>)
 800099e:	f002 ff49 	bl	8003834 <HAL_I2CEx_ConfigDigitalFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 fbd6 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200002f4 	.word	0x200002f4
 80009b4:	40005400 	.word	0x40005400
 80009b8:	000186a0 	.word	0x000186a0

080009bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_RTC_Init+0xac>)
 80009d6:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <MX_RTC_Init+0xb0>)
 80009d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_RTC_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_RTC_Init+0xac>)
 80009e2:	227f      	movs	r2, #127	; 0x7f
 80009e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_RTC_Init+0xac>)
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_RTC_Init+0xac>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_RTC_Init+0xac>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_RTC_Init+0xac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fe:	481a      	ldr	r0, [pc, #104]	; (8000a68 <MX_RTC_Init+0xac>)
 8000a00:	f003 fecc 	bl	800479c <HAL_RTC_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 fba5 	bl	8001158 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000a0e:	2309      	movs	r3, #9
 8000a10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000a12:	2338      	movs	r3, #56	; 0x38
 8000a14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2201      	movs	r2, #1
 8000a26:	4619      	mov	r1, r3
 8000a28:	480f      	ldr	r0, [pc, #60]	; (8000a68 <MX_RTC_Init+0xac>)
 8000a2a:	f003 ff2d 	bl	8004888 <HAL_RTC_SetTime>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 fb90 	bl	8001158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000a40:	2316      	movs	r3, #22
 8000a42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000a44:	2323      	movs	r3, #35	; 0x23
 8000a46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_RTC_Init+0xac>)
 8000a50:	f003 ffb4 	bl	80049bc <HAL_RTC_SetDate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a5a:	f000 fb7d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000348 	.word	0x20000348
 8000a6c:	40002800 	.word	0x40002800

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000a9c:	f240 628f 	movw	r2, #1679	; 0x68f
 8000aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000abc:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000abe:	f004 f961 	bl	8004d84 <HAL_TIM_PWM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fb46 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000adc:	f005 fcc2 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ae6:	f000 fb37 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aea:	2360      	movs	r3, #96	; 0x60
 8000aec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000aee:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000b04:	f004 fe88 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b0e:	f000 fb23 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <MX_TIM2_Init+0xb0>)
 8000b14:	f000 fdca 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000368 	.word	0x20000368

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b42:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <MX_TIM3_Init+0xa4>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b48:	2253      	movs	r2, #83	; 0x53
 8000b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b66:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b68:	f004 fb3a 	bl	80051e0 <HAL_TIM_IC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 faf1 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000b86:	f005 fc6d 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 fae2 	bl	8001158 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b94:	230a      	movs	r3, #10
 8000b96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_TIM3_Init+0xa0>)
 8000bac:	f004 fd98 	bl	80056e0 <HAL_TIM_IC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f000 facf 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200003b0 	.word	0x200003b0
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <MX_TIM4_Init+0x98>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000bf0:	f240 3247 	movw	r2, #839	; 0x347
 8000bf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000bfe:	2263      	movs	r2, #99	; 0x63
 8000c00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000c10:	f003 fff9 	bl	8004c06 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 fa9d 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000c2c:	f004 feb6 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fa8f 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_TIM4_Init+0x94>)
 8000c48:	f005 fc0c 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c52:	f000 fa81 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200003f8 	.word	0x200003f8
 8000c64:	40000800 	.word	0x40000800

08000c68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	; (8000d50 <MX_TIM5_Init+0xe8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000ca0:	2233      	movs	r2, #51	; 0x33
 8000ca2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cac:	f240 128f 	movw	r2, #399	; 0x18f
 8000cb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cbe:	4823      	ldr	r0, [pc, #140]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cc0:	f003 ffa1 	bl	8004c06 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000cca:	f000 fa45 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481c      	ldr	r0, [pc, #112]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cdc:	f004 fe5e 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000ce6:	f000 fa37 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000cea:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000cec:	f004 f84a 	bl	8004d84 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000cf6:	f000 fa2f 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000d0a:	f005 fbab 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000d14:	f000 fa20 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000d1c:	23c7      	movs	r3, #199	; 0xc7
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000d30:	f004 fd72 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000d3a:	f000 fa0d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <MX_TIM5_Init+0xe4>)
 8000d40:	f000 fcb4 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3738      	adds	r7, #56	; 0x38
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000440 	.word	0x20000440
 8000d50:	40000c00 	.word	0x40000c00

08000d54 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <MX_TIM10_Init+0x44>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d60:	22a7      	movs	r2, #167	; 0xa7
 8000d62:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d70:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM10_Init+0x40>)
 8000d80:	f003 ff41 	bl	8004c06 <HAL_TIM_Base_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000d8a:	f000 f9e5 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000488 	.word	0x20000488
 8000d98:	40014400 	.word	0x40014400

08000d9c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <MX_TIM11_Init+0x44>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000da8:	22a7      	movs	r2, #167	; 0xa7
 8000daa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dc8:	f003 ff1d 	bl	8004c06 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000dd2:	f000 f9c1 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200004d0 	.word	0x200004d0
 8000de0:	40014800 	.word	0x40014800

08000de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART3_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e1c:	f005 fbb2 	bl	8006584 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f997 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000518 	.word	0x20000518
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_USART6_UART_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART6_UART_Init+0x4c>)
 8000e70:	f005 fb88 	bl	8006584 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f96d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000055c 	.word	0x2000055c
 8000e88:	40011400 	.word	0x40011400

08000e8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed0:	f002 fcef 	bl	80038b2 <HAL_PCD_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f93d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200005a0 	.word	0x200005a0

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a8c      	ldr	r2, [pc, #560]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	4b86      	ldr	r3, [pc, #536]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a85      	ldr	r2, [pc, #532]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b83      	ldr	r3, [pc, #524]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a77      	ldr	r2, [pc, #476]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b75      	ldr	r3, [pc, #468]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b71      	ldr	r3, [pc, #452]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a70      	ldr	r2, [pc, #448]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b6e      	ldr	r3, [pc, #440]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a69      	ldr	r2, [pc, #420]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <MX_GPIO_Init+0x250>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a62      	ldr	r2, [pc, #392]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b60      	ldr	r3, [pc, #384]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a5b      	ldr	r2, [pc, #364]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b59      	ldr	r3, [pc, #356]	; (8001138 <MX_GPIO_Init+0x250>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000fe4:	4855      	ldr	r0, [pc, #340]	; (800113c <MX_GPIO_Init+0x254>)
 8000fe6:	f002 fa67 	bl	80034b8 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4854      	ldr	r0, [pc, #336]	; (8001140 <MX_GPIO_Init+0x258>)
 8000ff0:	f002 fa62 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ffa:	4852      	ldr	r0, [pc, #328]	; (8001144 <MX_GPIO_Init+0x25c>)
 8000ffc:	f002 fa5c 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	4850      	ldr	r0, [pc, #320]	; (8001148 <MX_GPIO_Init+0x260>)
 8001008:	f002 fa56 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001012:	484e      	ldr	r0, [pc, #312]	; (800114c <MX_GPIO_Init+0x264>)
 8001014:	f002 fa50 	bl	80034b8 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	484c      	ldr	r0, [pc, #304]	; (8001150 <MX_GPIO_Init+0x268>)
 800101e:	f002 fa4b 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001022:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4840      	ldr	r0, [pc, #256]	; (800113c <MX_GPIO_Init+0x254>)
 800103c:	f002 f890 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	483f      	ldr	r0, [pc, #252]	; (8001154 <MX_GPIO_Init+0x26c>)
 8001058:	f002 f882 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800105c:	2301      	movs	r3, #1
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4833      	ldr	r0, [pc, #204]	; (8001140 <MX_GPIO_Init+0x258>)
 8001074:	f002 f874 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001078:	f244 0381 	movw	r3, #16513	; 0x4081
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	482c      	ldr	r0, [pc, #176]	; (8001144 <MX_GPIO_Init+0x25c>)
 8001092:	f002 f865 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4826      	ldr	r0, [pc, #152]	; (8001148 <MX_GPIO_Init+0x260>)
 80010b0:	f002 f856 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80010b4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <MX_GPIO_Init+0x254>)
 80010ca:	f002 f849 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80010ce:	f647 03ff 	movw	r3, #30975	; 0x78ff
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_GPIO_Init+0x264>)
 80010e8:	f002 f83a 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_GPIO_Init+0x268>)
 8001104:	f002 f82c 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_GPIO_Init+0x268>)
 800111c:	f002 f820 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2028      	movs	r0, #40	; 0x28
 8001126:	f001 fc2a 	bl	800297e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112a:	2028      	movs	r0, #40	; 0x28
 800112c:	f001 fc43 	bl	80029b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	40021000 	.word	0x40021000
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40021400 	.word	0x40021400
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021800 	.word	0x40021800
 8001154:	40020800 	.word	0x40020800

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_MspInit+0x4c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_ADC_MspInit+0x8c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12f      	bne.n	8001236 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_ADC_MspInit+0x90>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_ADC_MspInit+0x90>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_ADC_MspInit+0x90>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_ADC_MspInit+0x90>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_ADC_MspInit+0x90>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_ADC_MspInit+0x90>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800120e:	2310      	movs	r3, #16
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_ADC_MspInit+0x94>)
 8001222:	f001 ff9d 	bl	8003160 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2012      	movs	r0, #18
 800122c:	f001 fba7 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001230:	2012      	movs	r0, #18
 8001232:	f001 fbc0 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012000 	.word	0x40012000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a55      	ldr	r2, [pc, #340]	; (80013c0 <HAL_ETH_MspInit+0x174>)
 800126a:	4293      	cmp	r3, r2
 800126c:	f040 80a4 	bne.w	80013b8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 800127a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a3d      	ldr	r2, [pc, #244]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a36      	ldr	r2, [pc, #216]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_ETH_MspInit+0x178>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001334:	2332      	movs	r3, #50	; 0x32
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	481e      	ldr	r0, [pc, #120]	; (80013c8 <HAL_ETH_MspInit+0x17c>)
 8001350:	f001 ff06 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001354:	2386      	movs	r3, #134	; 0x86
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4817      	ldr	r0, [pc, #92]	; (80013cc <HAL_ETH_MspInit+0x180>)
 8001370:	f001 fef6 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001386:	230b      	movs	r3, #11
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <HAL_ETH_MspInit+0x184>)
 8001392:	f001 fee5 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001396:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a8:	230b      	movs	r3, #11
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80013b4:	f001 fed4 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3738      	adds	r7, #56	; 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40028000 	.word	0x40028000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40021800 	.word	0x40021800

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_I2C_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12c      	bne.n	8001454 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	480c      	ldr	r0, [pc, #48]	; (8001464 <HAL_I2C_MspInit+0x8c>)
 8001434:	f001 fe94 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2230      	movs	r2, #48	; 0x30
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f006 fe05 	bl	8008088 <memset>
  if(hrtc->Instance==RTC)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_RTC_MspInit+0x4c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d111      	bne.n	80014ac <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001488:	2320      	movs	r3, #32
 800148a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4618      	mov	r0, r3
 8001498:	f002 ffc0 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014a2:	f7ff fe59 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_RTC_MspInit+0x50>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40002800 	.word	0x40002800
 80014b8:	42470e3c 	.word	0x42470e3c

080014bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d115      	bne.n	80014fa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_PWM_MspInit+0x48>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_TIM_PWM_MspInit+0x48>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_PWM_MspInit+0x48>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201c      	movs	r0, #28
 80014f0:	f001 fa45 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f001 fa5e 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_TIM_IC_MspInit+0x94>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d133      	bne.n	8001592 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_TIM_IC_MspInit+0x98>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001572:	2302      	movs	r3, #2
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_TIM_IC_MspInit+0x9c>)
 800157e:	f001 fdef 	bl	8003160 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	201d      	movs	r0, #29
 8001588:	f001 f9f9 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800158c:	201d      	movs	r0, #29
 800158e:	f001 fa12 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40000400 	.word	0x40000400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a38      	ldr	r2, [pc, #224]	; (8001698 <HAL_TIM_Base_MspInit+0xf0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d116      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201e      	movs	r0, #30
 80015dc:	f001 f9cf 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015e0:	201e      	movs	r0, #30
 80015e2:	f001 f9e8 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80015e6:	e052      	b.n	800168e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <HAL_TIM_Base_MspInit+0xf8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d116      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2032      	movs	r0, #50	; 0x32
 8001614:	f001 f9b3 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001618:	2032      	movs	r0, #50	; 0x32
 800161a:	f001 f9cc 	bl	80029b6 <HAL_NVIC_EnableIRQ>
}
 800161e:	e036      	b.n	800168e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <HAL_TIM_Base_MspInit+0xfc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d116      	bne.n	8001658 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2019      	movs	r0, #25
 800164c:	f001 f997 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001650:	2019      	movs	r0, #25
 8001652:	f001 f9b0 	bl	80029b6 <HAL_NVIC_EnableIRQ>
}
 8001656:	e01a      	b.n	800168e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_TIM_Base_MspInit+0x100>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d115      	bne.n	800168e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_TIM_Base_MspInit+0xf4>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201a      	movs	r0, #26
 8001684:	f001 f97b 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001688:	201a      	movs	r0, #26
 800168a:	f001 f994 	bl	80029b6 <HAL_NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40000800 	.word	0x40000800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40000c00 	.word	0x40000c00
 80016a4:	40014400 	.word	0x40014400
 80016a8:	40014800 	.word	0x40014800

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d11e      	bne.n	800170c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 80016ea:	2320      	movs	r3, #32
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <HAL_TIM_MspPostInit+0xb4>)
 8001706:	f001 fd2b 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800170a:	e022      	b.n	8001752 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_TIM_MspPostInit+0xb8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d11d      	bne.n	8001752 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_TIM_MspPostInit+0xb0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001732:	2308      	movs	r3, #8
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001742:	2302      	movs	r3, #2
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <HAL_TIM_MspPostInit+0xb4>)
 800174e:	f001 fd07 	bl	8003160 <HAL_GPIO_Init>
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40000c00 	.word	0x40000c00

08001768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <HAL_UART_MspInit+0x108>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d135      	bne.n	80017f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_UART_MspInit+0x10c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_UART_MspInit+0x10c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_UART_MspInit+0x10c>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_UART_MspInit+0x10c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d4:	2307      	movs	r3, #7
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	4826      	ldr	r0, [pc, #152]	; (8001878 <HAL_UART_MspInit+0x110>)
 80017e0:	f001 fcbe 	bl	8003160 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2027      	movs	r0, #39	; 0x27
 80017ea:	f001 f8c8 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ee:	2027      	movs	r0, #39	; 0x27
 80017f0:	f001 f8e1 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017f4:	e038      	b.n	8001868 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_UART_MspInit+0x114>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d133      	bne.n	8001868 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <HAL_UART_MspInit+0x10c>)
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	6453      	str	r3, [r2, #68]	; 0x44
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_UART_MspInit+0x10c>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_UART_MspInit+0x10c>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001838:	23c0      	movs	r3, #192	; 0xc0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001848:	2308      	movs	r3, #8
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <HAL_UART_MspInit+0x118>)
 8001854:	f001 fc84 	bl	8003160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2047      	movs	r0, #71	; 0x47
 800185e:	f001 f88e 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001862:	2047      	movs	r0, #71	; 0x47
 8001864:	f001 f8a7 	bl	80029b6 <HAL_NVIC_EnableIRQ>
}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40004800 	.word	0x40004800
 8001874:	40023800 	.word	0x40023800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40011400 	.word	0x40011400
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a4:	d13f      	bne.n	8001926 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_PCD_MspInit+0xac>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a20      	ldr	r2, [pc, #128]	; (8001930 <HAL_PCD_MspInit+0xac>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_PCD_MspInit+0xac>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d4:	230a      	movs	r3, #10
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4815      	ldr	r0, [pc, #84]	; (8001934 <HAL_PCD_MspInit+0xb0>)
 80018e0:	f001 fc3e 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <HAL_PCD_MspInit+0xb0>)
 80018fa:	f001 fc31 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_PCD_MspInit+0xac>)
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_PCD_MspInit+0xac>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6353      	str	r3, [r2, #52]	; 0x34
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_PCD_MspInit+0xac>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_PCD_MspInit+0xac>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_PCD_MspInit+0xac>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 fa50 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001988:	f7fe fe00 	bl	800058c <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <ADC_IRQHandler+0x10>)
 8001996:	f000 fbad 	bl	80020f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001fc 	.word	0x200001fc

080019a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019aa:	f003 fd91 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000488 	.word	0x20000488

080019b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80019be:	f003 fd87 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004d0 	.word	0x200004d0

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM2_IRQHandler+0x10>)
 80019d2:	f003 fd7d 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000368 	.word	0x20000368

080019e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM3_IRQHandler+0x10>)
 80019e6:	f003 fd73 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003b0 	.word	0x200003b0

080019f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM4_IRQHandler+0x10>)
 80019fa:	f003 fd69 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200003f8 	.word	0x200003f8

08001a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART3_IRQHandler+0x10>)
 8001a0e:	f004 fec9 	bl	80067a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000518 	.word	0x20000518

08001a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a24:	f001 fd62 	bl	80034ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM5_IRQHandler+0x10>)
 8001a32:	f003 fd4d 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000440 	.word	0x20000440

08001a40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <USART6_IRQHandler+0x10>)
 8001a46:	f004 fead 	bl	80067a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000055c 	.word	0x2000055c

08001a54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
  }

  return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd7d 	bl	80005a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
  }
  return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
  return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f006 fae0 	bl	8008124 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20030000 	.word	0x20030000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000acc 	.word	0x20000acc
 8001b98:	20000c90 	.word	0x20000c90

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <HAL_UART_RxCpltCallback+0xd4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d12c      	bne.n	8001c2a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b27      	cmp	r3, #39	; 0x27
 8001bd6:	dc1d      	bgt.n	8001c14 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_UART_RxCpltCallback+0xdc>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d003      	beq.n	8001be8 <HAL_UART_RxCpltCallback+0x28>
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_UART_RxCpltCallback+0xdc>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b0d      	cmp	r3, #13
 8001be6:	d10b      	bne.n	8001c00 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <HAL_UART_RxCpltCallback+0xe0>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_UART_RxCpltCallback+0xe4>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00f      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001c08:	600a      	str	r2, [r1, #0]
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_UART_RxCpltCallback+0xdc>)
 8001c0c:	7811      	ldrb	r1, [r2, #0]
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_UART_RxCpltCallback+0xe0>)
 8001c10:	54d1      	strb	r1, [r2, r3]
 8001c12:	e005      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001c1a:	4823      	ldr	r0, [pc, #140]	; (8001ca8 <HAL_UART_RxCpltCallback+0xe8>)
 8001c1c:	f006 f954 	bl	8007ec8 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <HAL_UART_RxCpltCallback+0xdc>)
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <HAL_UART_RxCpltCallback+0xd4>)
 8001c26:	f004 fd8c 	bl	8006742 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_UART_RxCpltCallback+0xec>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12c      	bne.n	8001c8c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_UART_RxCpltCallback+0xf0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b27      	cmp	r3, #39	; 0x27
 8001c38:	dc1d      	bgt.n	8001c76 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_UART_RxCpltCallback+0xf4>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b0a      	cmp	r3, #10
 8001c40:	d003      	beq.n	8001c4a <HAL_UART_RxCpltCallback+0x8a>
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_UART_RxCpltCallback+0xf4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b0d      	cmp	r3, #13
 8001c48:	d10b      	bne.n	8001c62 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_UART_RxCpltCallback+0xd8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_UART_RxCpltCallback+0xf8>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_UART_RxCpltCallback+0xfc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_RxCpltCallback+0xf0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e00f      	b.n	8001c82 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_UART_RxCpltCallback+0xf0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	4911      	ldr	r1, [pc, #68]	; (8001cb0 <HAL_UART_RxCpltCallback+0xf0>)
 8001c6a:	600a      	str	r2, [r1, #0]
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_UART_RxCpltCallback+0xf4>)
 8001c6e:	7811      	ldrb	r1, [r2, #0]
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_UART_RxCpltCallback+0xf8>)
 8001c72:	54d1      	strb	r1, [r2, r3]
 8001c74:	e005      	b.n	8001c82 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_UART_RxCpltCallback+0xf0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001c7c:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <HAL_UART_RxCpltCallback+0x100>)
 8001c7e:	f006 f923 	bl	8007ec8 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <HAL_UART_RxCpltCallback+0xf4>)
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <HAL_UART_RxCpltCallback+0xec>)
 8001c88:	f004 fd5b 	bl	8006742 <HAL_UART_Receive_IT>
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000518 	.word	0x20000518
 8001c98:	20000af8 	.word	0x20000af8
 8001c9c:	20000aac 	.word	0x20000aac
 8001ca0:	20000ad0 	.word	0x20000ad0
 8001ca4:	20000afc 	.word	0x20000afc
 8001ca8:	08008bcc 	.word	0x08008bcc
 8001cac:	2000055c 	.word	0x2000055c
 8001cb0:	20000b28 	.word	0x20000b28
 8001cb4:	20000aad 	.word	0x20000aad
 8001cb8:	20000b00 	.word	0x20000b00
 8001cbc:	20000b2c 	.word	0x20000b2c
 8001cc0:	08008be4 	.word	0x08008be4

08001cc4 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11f      	bne.n	8001d16 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001cee:	e012      	b.n	8001d16 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f003 ff12 	bl	8005b2c <HAL_TIM_ReadCapturedValue>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d0e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40000400 	.word	0x40000400
 8001d24:	20000b38 	.word	0x20000b38
 8001d28:	20000b30 	.word	0x20000b30
 8001d2c:	20000b34 	.word	0x20000b34

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d36:	490e      	ldr	r1, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d4c:	4c0b      	ldr	r4, [pc, #44]	; (8001d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5a:	f7ff ff1f 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f006 f9e7 	bl	8008130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7fe fc71 	bl	8000648 <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d74:	08008cd8 	.word	0x08008cd8
  ldr r2, =_sbss
 8001d78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d7c:	20000c8c 	.word	0x20000c8c

08001d80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <CAN1_RX0_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 fddb 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff f9d4 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fdf3 	bl	80029d2 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f000 fdbb 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000b3c 	.word	0x20000b3c

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000b3c 	.word	0x20000b3c

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e033      	b.n	8001f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff f970 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d118      	bne.n	8001f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ef6:	f023 0302 	bic.w	r3, r3, #2
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fb5a 	bl	80025bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start_IT+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0bd      	b.n	80020ce <HAL_ADC_Start_IT+0x196>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f78:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_ADC_Start_IT+0x1a4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_ADC_Start_IT+0x1a8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9a      	lsrs	r2, r3, #18
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 8085 	bne.w	80020b4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f023 0206 	bic.w	r2, r3, #6
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff6:	e002      	b.n	8001ffe <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 8002008:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002012:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12a      	bne.n	800208a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_ADC_Start_IT+0x1b0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d015      	beq.n	800206a <HAL_ADC_Start_IT+0x132>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_ADC_Start_IT+0x1b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d105      	bne.n	8002054 <HAL_ADC_Start_IT+0x11c>
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <HAL_ADC_Start_IT+0x1b8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d136      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d130      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d129      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e020      	b.n	80020cc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_ADC_Start_IT+0x1b0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d11b      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d114      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	e00b      	b.n	80020cc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0210 	orr.w	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	40012300 	.word	0x40012300
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40012100 	.word	0x40012100
 80020f0:	40012200 	.word	0x40012200

080020f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d049      	beq.n	80021be <HAL_ADC_IRQHandler+0xca>
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d12b      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d127      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fa2c 	bl	800060c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0212 	mvn.w	r2, #18
 80021bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d057      	beq.n	8002284 <HAL_ADC_IRQHandler+0x190>
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d054      	beq.n	8002284 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d139      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12b      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d124      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11d      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d119      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fa9d 	bl	80027b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 020c 	mvn.w	r2, #12
 8002282:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d014      	beq.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f837 	bl	800232e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0201 	mvn.w	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_ADC_IRQHandler+0x218>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0220 	mvn.w	r2, #32
 80022fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f820 	bl	8002342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0220 	mvn.w	r2, #32
 800230a:	601a      	str	r2, [r3, #0]
  }
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1c>
 8002370:	2302      	movs	r3, #2
 8002372:	e113      	b.n	800259c <HAL_ADC_ConfigChannel+0x244>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d925      	bls.n	80023d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43da      	mvns	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	400a      	ands	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4403      	add	r3, r0
 80023c2:	3b1e      	subs	r3, #30
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	e022      	b.n	8002416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	2207      	movs	r2, #7
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4403      	add	r3, r0
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d824      	bhi.n	8002468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b05      	subs	r3, #5
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b05      	subs	r3, #5
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
 8002466:	e04c      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d824      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b23      	subs	r3, #35	; 0x23
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b23      	subs	r3, #35	; 0x23
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
 80024b8:	e023      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	; 0x41
 80024cc:	221f      	movs	r2, #31
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b41      	subs	r3, #65	; 0x41
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_ADC_ConfigChannel+0x250>)
 8002504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <HAL_ADC_ConfigChannel+0x254>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10f      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1d8>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b12      	cmp	r3, #18
 8002516:	d10b      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_ADC_ConfigChannel+0x254>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12b      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x23a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_ADC_ConfigChannel+0x258>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <HAL_ADC_ConfigChannel+0x1f4>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b11      	cmp	r3, #17
 800254a:	d122      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <HAL_ADC_ConfigChannel+0x258>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_ADC_ConfigChannel+0x260>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9a      	lsrs	r2, r3, #18
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002584:	e002      	b.n	800258c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40012300 	.word	0x40012300
 80025ac:	40012000 	.word	0x40012000
 80025b0:	10000012 	.word	0x10000012
 80025b4:	20000000 	.word	0x20000000
 80025b8:	431bde83 	.word	0x431bde83

080025bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c4:	4b79      	ldr	r3, [pc, #484]	; (80027ac <ADC_Init+0x1f0>)
 80025c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <ADC_Init+0x1f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d022      	beq.n	800269a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6899      	ldr	r1, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e00f      	b.n	80026ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0202 	bic.w	r2, r2, #2
 80026c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e1b      	ldrb	r3, [r3, #24]
 80026d4:	005a      	lsls	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01b      	beq.n	8002720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	3b01      	subs	r3, #1
 8002714:	035a      	lsls	r2, r3, #13
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	e007      	b.n	8002730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	3b01      	subs	r3, #1
 800274c:	051a      	lsls	r2, r3, #20
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002772:	025a      	lsls	r2, r3, #9
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	029a      	lsls	r2, r3, #10
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40012300 	.word	0x40012300
 80027b0:	0f000001 	.word	0x0f000001

080027b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <__NVIC_EnableIRQ+0x38>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
         );
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff8e 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff29 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff3e 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff8e 	bl	80028bc <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff31 	bl	800282c <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa2 	bl	8002924 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff fa2a 	bl	8001e50 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d008      	beq.n	8002a1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e052      	b.n	8002ac2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0216 	bic.w	r2, r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_DMA_Abort+0x62>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0208 	bic.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6c:	e013      	b.n	8002a96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6e:	f7ff f9ef 	bl	8001e50 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d90c      	bls.n	8002a96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e015      	b.n	8002ac2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e4      	bne.n	8002a6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	223f      	movs	r2, #63	; 0x3f
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d004      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e00c      	b.n	8002b02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06c      	b.n	8002bfc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2223      	movs	r2, #35	; 0x23
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fb89 	bl	800124c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_ETH_Init+0xf4>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <HAL_ETH_Init+0xf4>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_ETH_Init+0xf4>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_ETH_Init+0xf8>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_ETH_Init+0xf8>)
 8002b5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b60:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_ETH_Init+0xf8>)
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4927      	ldr	r1, [pc, #156]	; (8002c08 <HAL_ETH_Init+0xf8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_ETH_Init+0xf8>)
 8002b72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff f960 	bl	8001e50 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b92:	e011      	b.n	8002bb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b94:	f7ff f95c 	bl	8001e50 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ba2:	d909      	bls.n	8002bb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	22e0      	movs	r2, #224	; 0xe0
 8002bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e021      	b.n	8002bfc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e4      	bne.n	8002b94 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f958 	bl	8002e80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9ff 	bl	8002fd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa55 	bl	8003086 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	461a      	mov	r2, r3
 8002be2:	2100      	movs	r1, #0
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9bd 	bl	8002f64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40013800 	.word	0x40013800

08002c0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <ETH_SetMACConfig+0x15c>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7c1b      	ldrb	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <ETH_SetMACConfig+0x28>
 8002c2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c32:	e000      	b.n	8002c36 <ETH_SetMACConfig+0x2a>
 8002c34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7c5b      	ldrb	r3, [r3, #17]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <ETH_SetMACConfig+0x38>
 8002c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c42:	e000      	b.n	8002c46 <ETH_SetMACConfig+0x3a>
 8002c44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	7fdb      	ldrb	r3, [r3, #31]
 8002c52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	7f92      	ldrb	r2, [r2, #30]
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d102      	bne.n	8002c6a <ETH_SetMACConfig+0x5e>
 8002c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c68:	e000      	b.n	8002c6c <ETH_SetMACConfig+0x60>
 8002c6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	7f1b      	ldrb	r3, [r3, #28]
 8002c72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	791b      	ldrb	r3, [r3, #4]
 8002c80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	d102      	bne.n	8002c94 <ETH_SetMACConfig+0x88>
 8002c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c92:	e000      	b.n	8002c96 <ETH_SetMACConfig+0x8a>
 8002c94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	7bdb      	ldrb	r3, [r3, #15]
 8002c9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ca4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7ff f8ce 	bl	8001e68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	d101      	bne.n	8002cfa <ETH_SetMACConfig+0xee>
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	e000      	b.n	8002cfc <ETH_SetMACConfig+0xf0>
 8002cfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cfc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002d0a:	2a01      	cmp	r2, #1
 8002d0c:	d101      	bne.n	8002d12 <ETH_SetMACConfig+0x106>
 8002d0e:	2208      	movs	r2, #8
 8002d10:	e000      	b.n	8002d14 <ETH_SetMACConfig+0x108>
 8002d12:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002d1c:	2a01      	cmp	r2, #1
 8002d1e:	d101      	bne.n	8002d24 <ETH_SetMACConfig+0x118>
 8002d20:	2204      	movs	r2, #4
 8002d22:	e000      	b.n	8002d26 <ETH_SetMACConfig+0x11a>
 8002d24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002d2e:	2a01      	cmp	r2, #1
 8002d30:	d101      	bne.n	8002d36 <ETH_SetMACConfig+0x12a>
 8002d32:	2202      	movs	r2, #2
 8002d34:	e000      	b.n	8002d38 <ETH_SetMACConfig+0x12c>
 8002d36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7ff f889 	bl	8001e68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	ff20810f 	.word	0xff20810f

08002d6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <ETH_SetDMAConfig+0x110>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7b1b      	ldrb	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <ETH_SetDMAConfig+0x2c>
 8002d92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d96:	e000      	b.n	8002d9a <ETH_SetDMAConfig+0x2e>
 8002d98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	7b5b      	ldrb	r3, [r3, #13]
 8002d9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002da0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	7f52      	ldrb	r2, [r2, #29]
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	d102      	bne.n	8002db0 <ETH_SetDMAConfig+0x44>
 8002daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dae:	e000      	b.n	8002db2 <ETH_SetDMAConfig+0x46>
 8002db0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002db2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7b9b      	ldrb	r3, [r3, #14]
 8002db8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002dba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002dc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	7f1b      	ldrb	r3, [r3, #28]
 8002dc6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002dc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	7f9b      	ldrb	r3, [r3, #30]
 8002dce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dd0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002dd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dde:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002de0:	4313      	orrs	r3, r2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df0:	461a      	mov	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7ff f830 	bl	8001e68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e10:	461a      	mov	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002e36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff f801 	bl	8001e68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	f8de3f23 	.word	0xf8de3f23

08002e80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0a6      	sub	sp, #152	; 0x98
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ef4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fe86 	bl	8002c0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff08 	bl	8002d6c <ETH_SetDMAConfig>
}
 8002f5c:	bf00      	nop
 8002f5e:	3798      	adds	r7, #152	; 0x98
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3305      	adds	r3, #5
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	3204      	adds	r2, #4
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <ETH_MACAddressConfig+0x68>)
 8002f86:	4413      	add	r3, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3303      	adds	r3, #3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	061a      	lsls	r2, r3, #24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <ETH_MACAddressConfig+0x6c>)
 8002fb6:	4413      	add	r3, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40028040 	.word	0x40028040
 8002fd0:	40028044 	.word	0x40028044

08002fd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e03e      	b.n	8003060 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	3206      	adds	r2, #6
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d80c      	bhi.n	8003044 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	e004      	b.n	800304e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d9bd      	bls.n	8002fe2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e046      	b.n	8003122 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6919      	ldr	r1, [r3, #16]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80030d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	3212      	adds	r2, #18
 80030ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d80c      	bhi.n	8003112 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	461a      	mov	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e004      	b.n	800311c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d9b5      	bls.n	8003094 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003152:	60da      	str	r2, [r3, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e177      	b.n	800346c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8166 	bne.w	8003466 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80c0 	beq.w	8003466 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_GPIO_Init+0x328>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_GPIO_Init+0x32c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d037      	beq.n	800339e <HAL_GPIO_Init+0x23e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a57      	ldr	r2, [pc, #348]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <HAL_GPIO_Init+0x23a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a56      	ldr	r2, [pc, #344]	; (8003494 <HAL_GPIO_Init+0x334>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02b      	beq.n	8003396 <HAL_GPIO_Init+0x236>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a55      	ldr	r2, [pc, #340]	; (8003498 <HAL_GPIO_Init+0x338>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d025      	beq.n	8003392 <HAL_GPIO_Init+0x232>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a54      	ldr	r2, [pc, #336]	; (800349c <HAL_GPIO_Init+0x33c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a53      	ldr	r2, [pc, #332]	; (80034a0 <HAL_GPIO_Init+0x340>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_GPIO_Init+0x344>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_GPIO_Init+0x348>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a50      	ldr	r2, [pc, #320]	; (80034ac <HAL_GPIO_Init+0x34c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4f      	ldr	r2, [pc, #316]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x21a>
 8003376:	2309      	movs	r3, #9
 8003378:	e012      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800337a:	230a      	movs	r3, #10
 800337c:	e010      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800337e:	2308      	movs	r3, #8
 8003380:	e00e      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003382:	2307      	movs	r3, #7
 8003384:	e00c      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003386:	2306      	movs	r3, #6
 8003388:	e00a      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800338a:	2305      	movs	r3, #5
 800338c:	e008      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800338e:	2304      	movs	r3, #4
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003392:	2303      	movs	r3, #3
 8003394:	e004      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003396:	2302      	movs	r3, #2
 8003398:	e002      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800339e:	2300      	movs	r3, #0
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	f002 0203 	and.w	r2, r2, #3
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	4093      	lsls	r3, r2
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b0:	4935      	ldr	r1, [pc, #212]	; (8003488 <HAL_GPIO_Init+0x328>)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_GPIO_Init+0x354>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003412:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_GPIO_Init+0x354>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	f67f ae84 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	40013800 	.word	0x40013800
 800348c:	40020000 	.word	0x40020000
 8003490:	40020400 	.word	0x40020400
 8003494:	40020800 	.word	0x40020800
 8003498:	40020c00 	.word	0x40020c00
 800349c:	40021000 	.word	0x40021000
 80034a0:	40021400 	.word	0x40021400
 80034a4:	40021800 	.word	0x40021800
 80034a8:	40021c00 	.word	0x40021c00
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40022400 	.word	0x40022400
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003502:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f806 	bl	800351c <HAL_GPIO_EXTI_Callback>
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e12b      	b.n	800379e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd ff3c 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003598:	f000 ff18 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a81      	ldr	r2, [pc, #516]	; (80037a8 <HAL_I2C_Init+0x274>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d807      	bhi.n	80035b8 <HAL_I2C_Init+0x84>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_I2C_Init+0x278>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf94      	ite	ls
 80035b0:	2301      	movls	r3, #1
 80035b2:	2300      	movhi	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e006      	b.n	80035c6 <HAL_I2C_Init+0x92>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a7d      	ldr	r2, [pc, #500]	; (80037b0 <HAL_I2C_Init+0x27c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	bf94      	ite	ls
 80035c0:	2301      	movls	r3, #1
 80035c2:	2300      	movhi	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0e7      	b.n	800379e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a78      	ldr	r2, [pc, #480]	; (80037b4 <HAL_I2C_Init+0x280>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0c9b      	lsrs	r3, r3, #18
 80035d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <HAL_I2C_Init+0x274>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <HAL_I2C_Init+0xd4>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3301      	adds	r3, #1
 8003606:	e009      	b.n	800361c <HAL_I2C_Init+0xe8>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	4a69      	ldr	r2, [pc, #420]	; (80037b8 <HAL_I2C_Init+0x284>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	3301      	adds	r3, #1
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	430b      	orrs	r3, r1
 8003622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800362e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	495c      	ldr	r1, [pc, #368]	; (80037a8 <HAL_I2C_Init+0x274>)
 8003638:	428b      	cmp	r3, r1
 800363a:	d819      	bhi.n	8003670 <HAL_I2C_Init+0x13c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e59      	subs	r1, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fbb1 f3f3 	udiv	r3, r1, r3
 800364a:	1c59      	adds	r1, r3, #1
 800364c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003650:	400b      	ands	r3, r1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_I2C_Init+0x138>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e59      	subs	r1, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fbb1 f3f3 	udiv	r3, r1, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366a:	e051      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 800366c:	2304      	movs	r3, #4
 800366e:	e04f      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_I2C_Init+0x168>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e58      	subs	r0, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e012      	b.n	80036c2 <HAL_I2C_Init+0x18e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	0099      	lsls	r1, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x196>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10e      	bne.n	80036f0 <HAL_I2C_Init+0x1bc>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e58      	subs	r0, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	440b      	add	r3, r1
 80036e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ee:	e00f      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6809      	ldr	r1, [r1, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800373e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6911      	ldr	r1, [r2, #16]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	000186a0 	.word	0x000186a0
 80037ac:	001e847f 	.word	0x001e847f
 80037b0:	003d08ff 	.word	0x003d08ff
 80037b4:	431bde83 	.word	0x431bde83
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d129      	bne.n	8003826 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2224      	movs	r2, #36	; 0x24
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d12a      	bne.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2224      	movs	r2, #36	; 0x24
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	f023 030f 	bic.w	r3, r3, #15
 8003874:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b29a      	uxth	r2, r3
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	4313      	orrs	r3, r2
 800387e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	89fa      	ldrh	r2, [r7, #14]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b4:	b08f      	sub	sp, #60	; 0x3c
 80038b6:	af0a      	add	r7, sp, #40	; 0x28
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e10f      	b.n	8003ae4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd ffd0 	bl	8001884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 ff17 	bl	8007736 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	687e      	ldr	r6, [r7, #4]
 8003910:	466d      	mov	r5, sp
 8003912:	f106 0410 	add.w	r4, r6, #16
 8003916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003922:	e885 0003 	stmia.w	r5, {r0, r1}
 8003926:	1d33      	adds	r3, r6, #4
 8003928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	f003 fea2 	bl	8007674 <USB_CoreInit>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0d0      	b.n	8003ae4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f003 ff05 	bl	8007758 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e04a      	b.n	80039ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	333d      	adds	r3, #61	; 0x3d
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	333c      	adds	r3, #60	; 0x3c
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	b298      	uxth	r0, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3344      	adds	r3, #68	; 0x44
 8003990:	4602      	mov	r2, r0
 8003992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3340      	adds	r3, #64	; 0x40
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3348      	adds	r3, #72	; 0x48
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334c      	adds	r3, #76	; 0x4c
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3354      	adds	r3, #84	; 0x54
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	3301      	adds	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3af      	bcc.n	8003954 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e044      	b.n	8003a84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	3301      	adds	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3b5      	bcc.n	80039fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	687e      	ldr	r6, [r7, #4]
 8003a96:	466d      	mov	r5, sp
 8003a98:	f106 0410 	add.w	r4, r6, #16
 8003a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aac:	1d33      	adds	r3, r6, #4
 8003aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f003 fe9d 	bl	80077f0 <USB_DevInit>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00d      	b.n	8003ae4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 f868 	bl	8007bb2 <USB_DevDisconnect>

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e267      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d075      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d112      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05b      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x108>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d157      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e242      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d106      	bne.n	8003b60 <HAL_RCC_OscConfig+0x74>
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e01d      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b6a:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6f      	ldr	r2, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6c      	ldr	r2, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b84:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a68      	ldr	r2, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f954 	bl	8001e50 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe f950 	bl	8001e50 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e207      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0xc0>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe f940 	bl	8001e50 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fe f93c 	bl	8001e50 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1f3      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xe8>
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d11c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e1c7      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e03a      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <HAL_RCC_OscConfig+0x244>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fe f8f5 	bl	8001e50 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fe f8f1 	bl	8001e50 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e1a8      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4925      	ldr	r1, [pc, #148]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x244>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f8d4 	bl	8001e50 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cac:	f7fe f8d0 	bl	8001e50 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e187      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d036      	beq.n	8003d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCC_OscConfig+0x248>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f8b4 	bl	8001e50 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe f8b0 	bl	8001e50 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e167      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x240>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x200>
 8003d0a:	e01b      	b.n	8003d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_OscConfig+0x248>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe f89d 	bl	8001e50 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	e00e      	b.n	8003d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe f899 	bl	8001e50 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d907      	bls.n	8003d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e150      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470000 	.word	0x42470000
 8003d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ea      	bne.n	8003d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8097 	beq.w	8003e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b81      	ldr	r3, [pc, #516]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10f      	bne.n	8003d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a7c      	ldr	r2, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8e:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a73      	ldr	r2, [pc, #460]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f859 	bl	8001e50 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da2:	f7fe f855 	bl	8001e50 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e10c      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_OscConfig+0x474>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x2ea>
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCC_OscConfig+0x324>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x30c>
 8003dde:	4b5f      	ldr	r3, [pc, #380]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a5e      	ldr	r2, [pc, #376]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dea:	4b5c      	ldr	r3, [pc, #368]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a5b      	ldr	r2, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0x324>
 8003df8:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	4b55      	ldr	r3, [pc, #340]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a54      	ldr	r2, [pc, #336]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 0304 	bic.w	r3, r3, #4
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fe f81a 	bl	8001e50 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e20:	f7fe f816 	bl	8001e50 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0cb      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e36:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0ee      	beq.n	8003e20 <HAL_RCC_OscConfig+0x334>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe f804 	bl	8001e50 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fe f800 	bl	8001e50 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0b5      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e62:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ee      	bne.n	8003e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80a1 	beq.w	8003fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e8a:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d05c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d141      	bne.n	8003f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd ffd4 	bl	8001e50 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd ffd0 	bl	8001e50 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e087      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	491b      	ldr	r1, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fd ffa9 	bl	8001e50 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fd ffa5 	bl	8001e50 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e05c      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x416>
 8003f20:	e054      	b.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_OscConfig+0x478>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fd ff92 	bl	8001e50 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd ff8e 	bl	8001e50 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e045      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x470>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x444>
 8003f4e:	e03d      	b.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e038      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000
 8003f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x4ec>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d028      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d121      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d11a      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800

08003fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0cc      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d90c      	bls.n	8004018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0b8      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d020      	beq.n	8004066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800403a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	494d      	ldr	r1, [pc, #308]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d044      	beq.n	80040fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d119      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d003      	beq.n	800409a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	2b03      	cmp	r3, #3
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e06f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e067      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4934      	ldr	r1, [pc, #208]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fd fec0 	bl	8001e50 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fd febc 	bl	8001e50 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e04f      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d20c      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e032      	b.n	800418a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4916      	ldr	r1, [pc, #88]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004162:	f000 f821 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	5ccb      	ldrb	r3, [r1, r3]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd fe20 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023c00 	.word	0x40023c00
 8004198:	40023800 	.word	0x40023800
 800419c:	08008c7c 	.word	0x08008c7c
 80041a0:	20000000 	.word	0x20000000
 80041a4:	20000004 	.word	0x20000004

080041a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ac:	b094      	sub	sp, #80	; 0x50
 80041ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
 80041b4:	2300      	movs	r3, #0
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	2300      	movs	r3, #0
 80041ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d00d      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x40>
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	f200 80e1 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x34>
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041da:	e0db      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_GetSysClockFreq+0x204>)
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041e0:	e0db      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e2:	4b73      	ldr	r3, [pc, #460]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041e6:	e0d8      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e8:	4b6f      	ldr	r3, [pc, #444]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d063      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	099b      	lsrs	r3, r3, #6
 8004204:	2200      	movs	r2, #0
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
 8004208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
 8004212:	2300      	movs	r3, #0
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	f04f 0000 	mov.w	r0, #0
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	0159      	lsls	r1, r3, #5
 8004228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422c:	0150      	lsls	r0, r2, #5
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4621      	mov	r1, r4
 8004234:	1a51      	subs	r1, r2, r1
 8004236:	6139      	str	r1, [r7, #16]
 8004238:	4629      	mov	r1, r5
 800423a:	eb63 0301 	sbc.w	r3, r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	018b      	lsls	r3, r1, #6
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004256:	4651      	mov	r1, sl
 8004258:	018a      	lsls	r2, r1, #6
 800425a:	4651      	mov	r1, sl
 800425c:	ebb2 0801 	subs.w	r8, r2, r1
 8004260:	4659      	mov	r1, fp
 8004262:	eb63 0901 	sbc.w	r9, r3, r1
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427a:	4690      	mov	r8, r2
 800427c:	4699      	mov	r9, r3
 800427e:	4623      	mov	r3, r4
 8004280:	eb18 0303 	adds.w	r3, r8, r3
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	462b      	mov	r3, r5
 8004288:	eb49 0303 	adc.w	r3, r9, r3
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800429a:	4629      	mov	r1, r5
 800429c:	024b      	lsls	r3, r1, #9
 800429e:	4621      	mov	r1, r4
 80042a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a4:	4621      	mov	r1, r4
 80042a6:	024a      	lsls	r2, r1, #9
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	2200      	movs	r2, #0
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b8:	f7fb ffea 	bl	8000290 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4613      	mov	r3, r2
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	e058      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	2200      	movs	r2, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	4611      	mov	r1, r2
 80042d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
 80042dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	0159      	lsls	r1, r3, #5
 80042ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f2:	0150      	lsls	r0, r2, #5
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4641      	mov	r1, r8
 80042fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80042fe:	4649      	mov	r1, r9
 8004300:	eb63 0b01 	sbc.w	fp, r3, r1
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004318:	ebb2 040a 	subs.w	r4, r2, sl
 800431c:	eb63 050b 	sbc.w	r5, r3, fp
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	00eb      	lsls	r3, r5, #3
 800432a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	4614      	mov	r4, r2
 8004332:	461d      	mov	r5, r3
 8004334:	4643      	mov	r3, r8
 8004336:	18e3      	adds	r3, r4, r3
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	464b      	mov	r3, r9
 800433c:	eb45 0303 	adc.w	r3, r5, r3
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800434e:	4629      	mov	r1, r5
 8004350:	028b      	lsls	r3, r1, #10
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004358:	4621      	mov	r1, r4
 800435a:	028a      	lsls	r2, r1, #10
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004362:	2200      	movs	r2, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436c:	f7fb ff90 	bl	8000290 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800439c:	4618      	mov	r0, r3
 800439e:	3750      	adds	r7, #80	; 0x50
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	007a1200 	.word	0x007a1200

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000000 	.word	0x20000000

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d0:	f7ff fff0 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a9b      	lsrs	r3, r3, #10
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	08008c8c 	.word	0x08008c8c

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043f8:	f7ff ffdc 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0b5b      	lsrs	r3, r3, #13
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	08008c8c 	.word	0x08008c8c

0800441c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800444c:	2b00      	cmp	r3, #0
 800444e:	d075      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004450:	4b91      	ldr	r3, [pc, #580]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004456:	f7fd fcfb 	bl	8001e50 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800445e:	f7fd fcf7 	bl	8001e50 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e189      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004470:	4b8a      	ldr	r3, [pc, #552]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	019a      	lsls	r2, r3, #6
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	071b      	lsls	r3, r3, #28
 8004494:	4981      	ldr	r1, [pc, #516]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044a8:	4b7c      	ldr	r3, [pc, #496]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	0f1b      	lsrs	r3, r3, #28
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	019a      	lsls	r2, r3, #6
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	431a      	orrs	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	071b      	lsls	r3, r3, #28
 80044c8:	4974      	ldr	r1, [pc, #464]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044d0:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d6:	f023 021f 	bic.w	r2, r3, #31
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	3b01      	subs	r3, #1
 80044e0:	496e      	ldr	r1, [pc, #440]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	019a      	lsls	r2, r3, #6
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	071b      	lsls	r3, r3, #28
 8004508:	4964      	ldr	r1, [pc, #400]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004516:	f7fd fc9b 	bl	8001e50 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800451e:	f7fd fc97 	bl	8001e50 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e129      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004530:	4b5a      	ldr	r3, [pc, #360]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004550:	2b00      	cmp	r3, #0
 8004552:	d079      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004554:	4b52      	ldr	r3, [pc, #328]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800455a:	f7fd fc79 	bl	8001e50 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004562:	f7fd fc75 	bl	8001e50 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e107      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004574:	4b49      	ldr	r3, [pc, #292]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d0ef      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d020      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	0f1b      	lsrs	r3, r3, #28
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	019a      	lsls	r2, r3, #6
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	431a      	orrs	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	071b      	lsls	r3, r3, #28
 80045ae:	493b      	ldr	r1, [pc, #236]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	4934      	ldr	r1, [pc, #208]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0e1b      	lsrs	r3, r3, #24
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	071b      	lsls	r3, r3, #28
 80045fc:	4927      	ldr	r1, [pc, #156]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004604:	4b25      	ldr	r3, [pc, #148]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	4922      	ldr	r1, [pc, #136]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004620:	f7fd fc16 	bl	8001e50 <HAL_GetTick>
 8004624:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004628:	f7fd fc12 	bl	8001e50 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0a4      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004646:	d1ef      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 808b 	beq.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a0f      	ldr	r2, [pc, #60]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800467e:	f7fd fbe7 	bl	8001e50 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004684:	e010      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004686:	f7fd fbe3 	bl	8001e50 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d909      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e075      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004698:	42470068 	.word	0x42470068
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470070 	.word	0x42470070
 80046a4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0e8      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b4:	4b36      	ldr	r3, [pc, #216]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02f      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d028      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046dc:	4b2d      	ldr	r3, [pc, #180]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046e8:	4a29      	ldr	r2, [pc, #164]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d114      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd fba9 	bl	8001e50 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fba5 	bl	8001e50 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e035      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004730:	d10d      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	4912      	ldr	r1, [pc, #72]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]
 800474c:	e005      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004754:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004758:	6093      	str	r3, [r2, #8]
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800475c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	490a      	ldr	r1, [pc, #40]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004768:	4313      	orrs	r3, r2
 800476a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004780:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40007000 	.word	0x40007000
 8004790:	40023800 	.word	0x40023800
 8004794:	42470e40 	.word	0x42470e40
 8004798:	424711e0 	.word	0x424711e0

0800479c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e066      	b.n	8004880 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7f5b      	ldrb	r3, [r3, #29]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fe50 	bl	8001468 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	22ca      	movs	r2, #202	; 0xca
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2253      	movs	r2, #83	; 0x53
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f998 	bl	8004b14 <RTC_EnterInitMode>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d12c      	bne.n	8004848 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004800:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68d2      	ldr	r2, [r2, #12]
 8004828:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	041a      	lsls	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f99f 	bl	8004b82 <RTC_ExitInitMode>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d113      	bne.n	8004876 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	7f1b      	ldrb	r3, [r3, #28]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_RTC_SetTime+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e087      	b.n	80049b4 <HAL_RTC_SetTime+0x12c>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2202      	movs	r2, #2
 80048ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d126      	bne.n	8004904 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f97c 	bl	8004bcc <RTC_ByteToBcd2>
 80048d4:	4603      	mov	r3, r0
 80048d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f975 	bl	8004bcc <RTC_ByteToBcd2>
 80048e2:	4603      	mov	r3, r0
 80048e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	789b      	ldrb	r3, [r3, #2]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f96d 	bl	8004bcc <RTC_ByteToBcd2>
 80048f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e018      	b.n	8004936 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004924:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800492a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	22ca      	movs	r2, #202	; 0xca
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2253      	movs	r2, #83	; 0x53
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f8e4 	bl	8004b14 <RTC_EnterInitMode>
 800494c:	4603      	mov	r3, r0
 800494e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d120      	bne.n	8004998 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004960:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004964:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f8f7 	bl	8004b82 <RTC_ExitInitMode>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	22ff      	movs	r2, #255	; 0xff
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]

  return status;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	7f1b      	ldrb	r3, [r3, #28]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_RTC_SetDate+0x1c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e071      	b.n	8004abc <HAL_RTC_SetDate+0x100>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2202      	movs	r2, #2
 80049e2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10e      	bne.n	8004a08 <HAL_RTC_SetDate+0x4c>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	330a      	adds	r3, #10
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11c      	bne.n	8004a48 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	78db      	ldrb	r3, [r3, #3]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f8da 	bl	8004bcc <RTC_ByteToBcd2>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f8d3 	bl	8004bcc <RTC_ByteToBcd2>
 8004a26:	4603      	mov	r3, r0
 8004a28:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a2a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	789b      	ldrb	r3, [r3, #2]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f8cb 	bl	8004bcc <RTC_ByteToBcd2>
 8004a36:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a38:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e00e      	b.n	8004a66 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	78db      	ldrb	r3, [r3, #3]
 8004a4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a54:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ca      	movs	r2, #202	; 0xca
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2253      	movs	r2, #83	; 0x53
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f84c 	bl	8004b14 <RTC_EnterInitMode>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f873 	bl	8004b82 <RTC_ExitInitMode>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]

  return status;
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ade:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae0:	f7fd f9b6 	bl	8001e50 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ae6:	e009      	b.n	8004afc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ae8:	f7fd f9b2 	bl	8001e50 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004af6:	d901      	bls.n	8004afc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e007      	b.n	8004b0c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ee      	beq.n	8004ae8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d122      	bne.n	8004b78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b42:	f7fd f985 	bl	8001e50 <HAL_GetTick>
 8004b46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b48:	e00c      	b.n	8004b64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b4a:	f7fd f981 	bl	8001e50 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b58:	d904      	bls.n	8004b64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <RTC_EnterInitMode+0x64>
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1e8      	bne.n	8004b4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff89 	bl	8004ac4 <HAL_RTC_WaitForSynchro>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2204      	movs	r2, #4
 8004bbc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004bda:	e005      	b.n	8004be8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	3301      	adds	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	3b0a      	subs	r3, #10
 8004be6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d8f6      	bhi.n	8004bdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b2db      	uxtb	r3, r3
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e041      	b.n	8004c9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc fcbb 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f000 ffd3 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e04e      	b.n	8004d5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x80>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d111      	bne.n	8004d48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d010      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d46:	e007      	b.n	8004d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40010400 	.word	0x40010400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800

08004d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fb86 	bl	80014bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 ff14 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x24>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e022      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x3e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e015      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x58>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07c      	b.n	8004f90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x82>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea4:	e013      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0x92>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xa2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec4:	e003      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fa9e 	bl	8006418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2d      	ldr	r2, [pc, #180]	; (8004f98 <HAL_TIM_PWM_Start+0x174>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_PWM_Start+0xcc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <HAL_TIM_PWM_Start+0x178>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0xd0>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xd2>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <HAL_TIM_PWM_Start+0x174>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d01d      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <HAL_TIM_PWM_Start+0x17c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_TIM_PWM_Start+0x180>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <HAL_TIM_PWM_Start+0x184>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <HAL_TIM_PWM_Start+0x178>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_TIM_PWM_Start+0x188>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_TIM_PWM_Start+0x18c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d010      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e007      	b.n	8004f8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40001800 	.word	0x40001800

08004fb4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_TIM_PWM_Start_IT+0x28>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e022      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0x6e>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d109      	bne.n	8004ff6 <HAL_TIM_PWM_Start_IT+0x42>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	bf14      	ite	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	2300      	moveq	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	e015      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0x6e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d109      	bne.n	8005010 <HAL_TIM_PWM_Start_IT+0x5c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e008      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0x6e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0c7      	b.n	80051ba <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start_IT+0x86>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005038:	e013      	b.n	8005062 <HAL_TIM_PWM_Start_IT+0xae>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start_IT+0x96>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	e00b      	b.n	8005062 <HAL_TIM_PWM_Start_IT+0xae>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start_IT+0xa6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005058:	e003      	b.n	8005062 <HAL_TIM_PWM_Start_IT+0xae>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d841      	bhi.n	80050ec <HAL_TIM_PWM_Start_IT+0x138>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_TIM_PWM_Start_IT+0xbc>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050ed 	.word	0x080050ed
 8005078:	080050ed 	.word	0x080050ed
 800507c:	080050ed 	.word	0x080050ed
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050ed 	.word	0x080050ed
 8005088:	080050ed 	.word	0x080050ed
 800508c:	080050ed 	.word	0x080050ed
 8005090:	080050c9 	.word	0x080050c9
 8005094:	080050ed 	.word	0x080050ed
 8005098:	080050ed 	.word	0x080050ed
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050db 	.word	0x080050db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0202 	orr.w	r2, r2, #2
 80050b2:	60da      	str	r2, [r3, #12]
      break;
 80050b4:	e01d      	b.n	80050f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0204 	orr.w	r2, r2, #4
 80050c4:	60da      	str	r2, [r3, #12]
      break;
 80050c6:	e014      	b.n	80050f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	60da      	str	r2, [r3, #12]
      break;
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0210 	orr.w	r2, r2, #16
 80050e8:	60da      	str	r2, [r3, #12]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d15f      	bne.n	80051b8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f001 f989 	bl	8006418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2e      	ldr	r2, [pc, #184]	; (80051c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIM_PWM_Start_IT+0x166>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <HAL_TIM_PWM_Start_IT+0x214>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Start_IT+0x16a>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_TIM_PWM_Start_IT+0x16c>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005132:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d01d      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_PWM_Start_IT+0x218>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIM_PWM_Start_IT+0x220>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <HAL_TIM_PWM_Start_IT+0x214>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIM_PWM_Start_IT+0x224>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIM_PWM_Start_IT+0x1d0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIM_PWM_Start_IT+0x228>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d010      	beq.n	80051b8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40001800 	.word	0x40001800

080051e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e041      	b.n	8005276 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc f97e 	bl	8001508 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fce6 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <HAL_TIM_IC_Start_IT+0x1e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e013      	b.n	80052c6 <HAL_TIM_IC_Start_IT+0x46>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0x2e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e00b      	b.n	80052c6 <HAL_TIM_IC_Start_IT+0x46>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d104      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x3e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e003      	b.n	80052c6 <HAL_TIM_IC_Start_IT+0x46>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_IC_Start_IT+0x58>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e013      	b.n	8005300 <HAL_TIM_IC_Start_IT+0x80>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IC_Start_IT+0x68>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e00b      	b.n	8005300 <HAL_TIM_IC_Start_IT+0x80>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d104      	bne.n	80052f8 <HAL_TIM_IC_Start_IT+0x78>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e003      	b.n	8005300 <HAL_TIM_IC_Start_IT+0x80>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005308:	7b7b      	ldrb	r3, [r7, #13]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e0cc      	b.n	80054ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start_IT+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005320:	e013      	b.n	800534a <HAL_TIM_IC_Start_IT+0xca>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0xb2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005330:	e00b      	b.n	800534a <HAL_TIM_IC_Start_IT+0xca>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start_IT+0xc2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005340:	e003      	b.n	800534a <HAL_TIM_IC_Start_IT+0xca>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start_IT+0xda>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005358:	e013      	b.n	8005382 <HAL_TIM_IC_Start_IT+0x102>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d104      	bne.n	800536a <HAL_TIM_IC_Start_IT+0xea>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005368:	e00b      	b.n	8005382 <HAL_TIM_IC_Start_IT+0x102>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d104      	bne.n	800537a <HAL_TIM_IC_Start_IT+0xfa>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005378:	e003      	b.n	8005382 <HAL_TIM_IC_Start_IT+0x102>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d841      	bhi.n	800540c <HAL_TIM_IC_Start_IT+0x18c>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <HAL_TIM_IC_Start_IT+0x110>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053c5 	.word	0x080053c5
 8005394:	0800540d 	.word	0x0800540d
 8005398:	0800540d 	.word	0x0800540d
 800539c:	0800540d 	.word	0x0800540d
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	0800540d 	.word	0x0800540d
 80053a8:	0800540d 	.word	0x0800540d
 80053ac:	0800540d 	.word	0x0800540d
 80053b0:	080053e9 	.word	0x080053e9
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	0800540d 	.word	0x0800540d
 80053c0:	080053fb 	.word	0x080053fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0202 	orr.w	r2, r2, #2
 80053d2:	60da      	str	r2, [r3, #12]
      break;
 80053d4:	e01d      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0204 	orr.w	r2, r2, #4
 80053e4:	60da      	str	r2, [r3, #12]
      break;
 80053e6:	e014      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	60da      	str	r2, [r3, #12]
      break;
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0210 	orr.w	r2, r2, #16
 8005408:	60da      	str	r2, [r3, #12]
      break;
 800540a:	e002      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
      break;
 8005410:	bf00      	nop
  }

  if (status == HAL_OK)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d148      	bne.n	80054aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fff9 	bl	8006418 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <HAL_TIM_IC_Start_IT+0x234>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d01d      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <HAL_TIM_IC_Start_IT+0x238>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_TIM_IC_Start_IT+0x23c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIM_IC_Start_IT+0x240>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <HAL_TIM_IC_Start_IT+0x244>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIM_IC_Start_IT+0x248>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIM_IC_Start_IT+0x1f6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIM_IC_Start_IT+0x24c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d111      	bne.n	800549a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d010      	beq.n	80054aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	e007      	b.n	80054aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	40010400 	.word	0x40010400
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40001800 	.word	0x40001800

080054d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0202 	mvn.w	r2, #2
 80054fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fbd6 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb4a 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb51 	bl	8005bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0204 	mvn.w	r2, #4
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fbac 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fb20 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fb27 	bl	8005bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b08      	cmp	r3, #8
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0208 	mvn.w	r2, #8
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fb82 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 faf6 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fafd 	bl	8005bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0210 	mvn.w	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2208      	movs	r2, #8
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc fb58 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 facc 	bl	8005bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fad3 	bl	8005bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10e      	bne.n	8005654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0201 	mvn.w	r2, #1
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fa ffbc 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ff78 	bl	8006570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa98 	bl	8005bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0220 	mvn.w	r2, #32
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 ff42 	bl	800655c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e088      	b.n	8005810 <HAL_TIM_IC_ConfigChannel+0x130>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f000 fcb8 	bl	8006090 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 020c 	bic.w	r2, r2, #12
 800572e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
 8005742:	e060      	b.n	8005806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d11c      	bne.n	8005784 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f000 fd3c 	bl	80061d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800576c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6999      	ldr	r1, [r3, #24]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	021a      	lsls	r2, r3, #8
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	619a      	str	r2, [r3, #24]
 8005782:	e040      	b.n	8005806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b08      	cmp	r3, #8
 8005788:	d11b      	bne.n	80057c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f000 fd89 	bl	80062b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 020c 	bic.w	r2, r2, #12
 80057ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	61da      	str	r2, [r3, #28]
 80057c0:	e021      	b.n	8005806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d11c      	bne.n	8005802 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f000 fda6 	bl	8006328 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69d9      	ldr	r1, [r3, #28]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	61da      	str	r2, [r3, #28]
 8005800:	e001      	b.n	8005806 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005832:	2302      	movs	r3, #2
 8005834:	e0ae      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	f200 809f 	bhi.w	8005984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005881 	.word	0x08005881
 8005850:	08005985 	.word	0x08005985
 8005854:	08005985 	.word	0x08005985
 8005858:	08005985 	.word	0x08005985
 800585c:	080058c1 	.word	0x080058c1
 8005860:	08005985 	.word	0x08005985
 8005864:	08005985 	.word	0x08005985
 8005868:	08005985 	.word	0x08005985
 800586c:	08005903 	.word	0x08005903
 8005870:	08005985 	.word	0x08005985
 8005874:	08005985 	.word	0x08005985
 8005878:	08005985 	.word	0x08005985
 800587c:	08005943 	.word	0x08005943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fa52 	bl	8005d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	619a      	str	r2, [r3, #24]
      break;
 80058be:	e064      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 faa2 	bl	8005e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	619a      	str	r2, [r3, #24]
      break;
 8005900:	e043      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 faf7 	bl	8005efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0208 	orr.w	r2, r2, #8
 800591c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0204 	bic.w	r2, r2, #4
 800592c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69d9      	ldr	r1, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	61da      	str	r2, [r3, #28]
      break;
 8005940:	e023      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fb4b 	bl	8005fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	61da      	str	r2, [r3, #28]
      break;
 8005982:	e002      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_ConfigClockSource+0x1c>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e0b4      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x186>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d03e      	beq.n	8005a70 <HAL_TIM_ConfigClockSource+0xd4>
 80059f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f6:	f200 8087 	bhi.w	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fe:	f000 8086 	beq.w	8005b0e <HAL_TIM_ConfigClockSource+0x172>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	d87f      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b70      	cmp	r3, #112	; 0x70
 8005a0a:	d01a      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0xa6>
 8005a0c:	2b70      	cmp	r3, #112	; 0x70
 8005a0e:	d87b      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b60      	cmp	r3, #96	; 0x60
 8005a12:	d050      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d877      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b50      	cmp	r3, #80	; 0x50
 8005a1a:	d03c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xfa>
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d873      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d058      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d86f      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b30      	cmp	r3, #48	; 0x30
 8005a2a:	d064      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	2b30      	cmp	r3, #48	; 0x30
 8005a2e:	d86b      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d060      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d867      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d05a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	e062      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f000 fcc1 	bl	80063d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
      break;
 8005a6e:	e04f      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f000 fcaa 	bl	80063d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a92:	609a      	str	r2, [r3, #8]
      break;
 8005a94:	e03c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fb68 	bl	8006178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2150      	movs	r1, #80	; 0x50
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fc77 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e02c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fbc4 	bl	8006250 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2160      	movs	r1, #96	; 0x60
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fc67 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e01c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fb48 	bl	8006178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fc57 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005af4:	e00c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f000 fc4e 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005b06:	e003      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0c:	e000      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d831      	bhi.n	8005ba4 <HAL_TIM_ReadCapturedValue+0x78>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005b87 	.word	0x08005b87
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005b9b 	.word	0x08005b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	60fb      	str	r3, [r7, #12]

      break;
 8005b84:	e00f      	b.n	8005ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	60fb      	str	r3, [r7, #12]

      break;
 8005b8e:	e00a      	b.n	8005ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	60fb      	str	r3, [r7, #12]

      break;
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	60fb      	str	r3, [r7, #12]

      break;
 8005ba2:	e000      	b.n	8005ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ba4:	bf00      	nop
  }

  return tmpreg;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a40      	ldr	r2, [pc, #256]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d00f      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <TIM_Base_SetConfig+0x118>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <TIM_Base_SetConfig+0x11c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <TIM_Base_SetConfig+0x120>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02b      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c50:	d027      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2c      	ldr	r2, [pc, #176]	; (8005d08 <TIM_Base_SetConfig+0x118>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d023      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2b      	ldr	r2, [pc, #172]	; (8005d0c <TIM_Base_SetConfig+0x11c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01f      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <TIM_Base_SetConfig+0x120>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01b      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d017      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <TIM_Base_SetConfig+0x128>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <TIM_Base_SetConfig+0x130>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <TIM_Base_SetConfig+0x134>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a24      	ldr	r2, [pc, #144]	; (8005d28 <TIM_Base_SetConfig+0x138>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <TIM_Base_SetConfig+0x13c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d108      	bne.n	8005cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40010400 	.word	0x40010400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800
 8005d24:	40001800 	.word	0x40001800
 8005d28:	40001c00 	.word	0x40001c00
 8005d2c:	40002000 	.word	0x40002000

08005d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f023 0201 	bic.w	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 0302 	bic.w	r3, r3, #2
 8005d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <TIM_OC1_SetConfig+0xd8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_OC1_SetConfig+0x64>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <TIM_OC1_SetConfig+0xdc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0308 	bic.w	r3, r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <TIM_OC1_SetConfig+0xd8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC1_SetConfig+0x8e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <TIM_OC1_SetConfig+0xdc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d111      	bne.n	8005de2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	621a      	str	r2, [r3, #32]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40010400 	.word	0x40010400

08005e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0210 	bic.w	r2, r3, #16
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0320 	bic.w	r3, r3, #32
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <TIM_OC2_SetConfig+0xe4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC2_SetConfig+0x68>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <TIM_OC2_SetConfig+0xe8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10d      	bne.n	8005e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <TIM_OC2_SetConfig+0xe4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC2_SetConfig+0x94>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a16      	ldr	r2, [pc, #88]	; (8005ef8 <TIM_OC2_SetConfig+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d113      	bne.n	8005ecc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40010400 	.word	0x40010400

08005efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <TIM_OC3_SetConfig+0xe0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_OC3_SetConfig+0x66>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <TIM_OC3_SetConfig+0xe4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10d      	bne.n	8005f7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC3_SetConfig+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0x92>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d113      	bne.n	8005fb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40010400 	.word	0x40010400

08005fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800602e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	031b      	lsls	r3, r3, #12
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a12      	ldr	r2, [pc, #72]	; (8006088 <TIM_OC4_SetConfig+0xa4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC4_SetConfig+0x68>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a11      	ldr	r2, [pc, #68]	; (800608c <TIM_OC4_SetConfig+0xa8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d109      	bne.n	8006060 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	019b      	lsls	r3, r3, #6
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000
 800608c:	40010400 	.word	0x40010400

08006090 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a28      	ldr	r2, [pc, #160]	; (800615c <TIM_TI1_SetConfig+0xcc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01b      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d017      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a25      	ldr	r2, [pc, #148]	; (8006160 <TIM_TI1_SetConfig+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a24      	ldr	r2, [pc, #144]	; (8006164 <TIM_TI1_SetConfig+0xd4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00f      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a23      	ldr	r2, [pc, #140]	; (8006168 <TIM_TI1_SetConfig+0xd8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <TIM_TI1_SetConfig+0xdc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a21      	ldr	r2, [pc, #132]	; (8006170 <TIM_TI1_SetConfig+0xe0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_TI1_SetConfig+0x66>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <TIM_TI1_SetConfig+0xe4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <TIM_TI1_SetConfig+0x6a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <TIM_TI1_SetConfig+0x6c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e003      	b.n	800611a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	b2db      	uxtb	r3, r3
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 030a 	and.w	r3, r3, #10
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40010400 	.word	0x40010400
 8006170:	40014000 	.word	0x40014000
 8006174:	40001800 	.word	0x40001800

08006178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0201 	bic.w	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 030a 	bic.w	r3, r3, #10
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b087      	sub	sp, #28
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f023 0210 	bic.w	r2, r3, #16
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	b29b      	uxth	r3, r3
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006228:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f023 0210 	bic.w	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800627a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	031b      	lsls	r3, r3, #12
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800628c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 0303 	bic.w	r3, r3, #3
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006300:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	621a      	str	r2, [r3, #32]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006354:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006366:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	031b      	lsls	r3, r3, #12
 800636c:	b29b      	uxth	r3, r3
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800637a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	031b      	lsls	r3, r3, #12
 8006380:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	f043 0307 	orr.w	r3, r3, #7
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2201      	movs	r2, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006478:	2302      	movs	r3, #2
 800647a:	e05a      	b.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c8:	d01d      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d10c      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e03f      	b.n	8006616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb f8dc 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fddf 	bl	800718c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b08a      	sub	sp, #40	; 0x28
 8006622:	af02      	add	r7, sp, #8
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b20      	cmp	r3, #32
 800663c:	d17c      	bne.n	8006738 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_Transmit+0x2c>
 8006644:	88fb      	ldrh	r3, [r7, #6]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e075      	b.n	800673a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_UART_Transmit+0x3e>
 8006658:	2302      	movs	r3, #2
 800665a:	e06e      	b.n	800673a <HAL_UART_Transmit+0x11c>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2221      	movs	r2, #33	; 0x21
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006672:	f7fb fbed 	bl	8001e50 <HAL_GetTick>
 8006676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	88fa      	ldrh	r2, [r7, #6]
 8006682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d108      	bne.n	80066a0 <HAL_UART_Transmit+0x82>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e003      	b.n	80066a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066b0:	e02a      	b.n	8006708 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fb1f 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e036      	b.n	800673a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	3302      	adds	r3, #2
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e007      	b.n	80066fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	3301      	adds	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1cf      	bne.n	80066b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	2140      	movs	r1, #64	; 0x40
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 faef 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e006      	b.n	800673a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b20      	cmp	r3, #32
 800675a:	d11d      	bne.n	8006798 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_UART_Receive_IT+0x26>
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e016      	b.n	800679a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_UART_Receive_IT+0x38>
 8006776:	2302      	movs	r3, #2
 8006778:	e00f      	b.n	800679a <HAL_UART_Receive_IT+0x58>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	461a      	mov	r2, r3
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fb24 	bl	8006ddc <UART_Start_Receive_IT>
 8006794:	4603      	mov	r3, r0
 8006796:	e000      	b.n	800679a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b0ba      	sub	sp, #232	; 0xe8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10f      	bne.n	800680a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_UART_IRQHandler+0x66>
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fc07 	bl	8007016 <UART_Receive_IT>
      return;
 8006808:	e256      	b.n	8006cb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800680a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80de 	beq.w	80069d0 <HAL_UART_IRQHandler+0x22c>
 8006814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80d1 	beq.w	80069d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xae>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0201 	orr.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <HAL_UART_IRQHandler+0xd2>
 800685e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f043 0202 	orr.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_UART_IRQHandler+0xf6>
 8006882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d011      	beq.n	80068ca <HAL_UART_IRQHandler+0x126>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d105      	bne.n	80068be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f043 0208 	orr.w	r2, r3, #8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 81ed 	beq.w	8006cae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x14e>
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb92 	bl	8007016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_UART_IRQHandler+0x17a>
 8006916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d04f      	beq.n	80069be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa9a 	bl	8006e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d141      	bne.n	80069b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800694c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800695e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800696a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1d9      	bne.n	8006932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	4a7d      	ldr	r2, [pc, #500]	; (8006b80 <HAL_UART_IRQHandler+0x3dc>)
 800698c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc f899 	bl	8002aca <HAL_DMA_Abort_IT>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	e00e      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f990 	bl	8006cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	e00a      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f98c 	bl	8006cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	e006      	b.n	80069cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f988 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069ca:	e170      	b.n	8006cae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	bf00      	nop
    return;
 80069ce:	e16e      	b.n	8006cae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 814a 	bne.w	8006c6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8143 	beq.w	8006c6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 813c 	beq.w	8006c6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	f040 80b4 	bne.w	8006b84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8140 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f080 8139 	bcs.w	8006cb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	f000 8088 	beq.w	8006b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1d9      	bne.n	8006a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e1      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e3      	bne.n	8006ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b48:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e3      	bne.n	8006b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fb ff42 	bl	80029ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8b6 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b7c:	e099      	b.n	8006cb2 <HAL_UART_IRQHandler+0x50e>
 8006b7e:	bf00      	nop
 8006b80:	08006f1f 	.word	0x08006f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 808b 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8086 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bce:	647a      	str	r2, [r7, #68]	; 0x44
 8006bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e3      	bne.n	8006baa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c06:	633a      	str	r2, [r7, #48]	; 0x30
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e3      	bne.n	8006be2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0310 	bic.w	r3, r3, #16
 8006c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c4c:	61fa      	str	r2, [r7, #28]
 8006c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	69b9      	ldr	r1, [r7, #24]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	617b      	str	r3, [r7, #20]
   return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e3      	bne.n	8006c28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f83e 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c6c:	e023      	b.n	8006cb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_IRQHandler+0x4ea>
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f95d 	bl	8006f46 <UART_Transmit_IT>
    return;
 8006c8c:	e014      	b.n	8006cb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x514>
 8006c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d008      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f99d 	bl	8006fe6 <UART_EndTransmit_IT>
    return;
 8006cac:	e004      	b.n	8006cb8 <HAL_UART_IRQHandler+0x514>
    return;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8006cb6:	bf00      	nop
  }
}
 8006cb8:	37e8      	adds	r7, #232	; 0xe8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop

08006cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b090      	sub	sp, #64	; 0x40
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	e050      	b.n	8006db4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d04c      	beq.n	8006db4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d20:	f7fb f896 	bl	8001e50 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d241      	bcs.n	8006db4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d50:	637a      	str	r2, [r7, #52]	; 0x34
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	613b      	str	r3, [r7, #16]
   return(result);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3314      	adds	r3, #20
 8006d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d84:	623a      	str	r2, [r7, #32]
 8006d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	69f9      	ldr	r1, [r7, #28]
 8006d8a:	6a3a      	ldr	r2, [r7, #32]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e00f      	b.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2301      	moveq	r3, #1
 8006dc6:	2300      	movne	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d09f      	beq.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3740      	adds	r7, #64	; 0x40
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2222      	movs	r2, #34	; 0x22
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0220 	orr.w	r2, r2, #32
 8006e48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b095      	sub	sp, #84	; 0x54
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e80:	643a      	str	r2, [r7, #64]	; 0x40
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d119      	bne.n	8006f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef0:	61ba      	str	r2, [r7, #24]
 8006ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6979      	ldr	r1, [r7, #20]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	613b      	str	r3, [r7, #16]
   return(result);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f12:	bf00      	nop
 8006f14:	3754      	adds	r7, #84	; 0x54
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff fecb 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b21      	cmp	r3, #33	; 0x21
 8006f58:	d13e      	bne.n	8006fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f62:	d114      	bne.n	8006f8e <UART_Transmit_IT+0x48>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d110      	bne.n	8006f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]
 8006f8c:	e008      	b.n	8006fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6211      	str	r1, [r2, #32]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4619      	mov	r1, r3
 8006fae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10f      	bne.n	8006fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe5a 	bl	8006cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b08c      	sub	sp, #48	; 0x30
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b22      	cmp	r3, #34	; 0x22
 8007028:	f040 80ab 	bne.w	8007182 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d117      	bne.n	8007066 <UART_Receive_IT+0x50>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d113      	bne.n	8007066 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007054:	b29a      	uxth	r2, r3
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
 8007064:	e026      	b.n	80070b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007078:	d007      	beq.n	800708a <UART_Receive_IT+0x74>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <UART_Receive_IT+0x82>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e008      	b.n	80070aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d15a      	bne.n	800717e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0220 	bic.w	r2, r2, #32
 80070d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	2b01      	cmp	r3, #1
 8007106:	d135      	bne.n	8007174 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	613b      	str	r3, [r7, #16]
   return(result);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	623a      	str	r2, [r7, #32]
 8007130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	69f9      	ldr	r1, [r7, #28]
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	61bb      	str	r3, [r7, #24]
   return(result);
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d10a      	bne.n	8007166 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fdbb 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
 8007172:	e002      	b.n	800717a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fa fd23 	bl	8001bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	e002      	b.n	8007184 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e000      	b.n	8007184 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007182:	2302      	movs	r3, #2
  }
}
 8007184:	4618      	mov	r0, r3
 8007186:	3730      	adds	r7, #48	; 0x30
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800718c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007190:	b0c0      	sub	sp, #256	; 0x100
 8007192:	af00      	add	r7, sp, #0
 8007194:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	68d9      	ldr	r1, [r3, #12]
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	ea40 0301 	orr.w	r3, r0, r1
 80071b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071e4:	f021 010c 	bic.w	r1, r1, #12
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071f2:	430b      	orrs	r3, r1
 80071f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007206:	6999      	ldr	r1, [r3, #24]
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	ea40 0301 	orr.w	r3, r0, r1
 8007212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b8f      	ldr	r3, [pc, #572]	; (8007458 <UART_SetConfig+0x2cc>)
 800721c:	429a      	cmp	r2, r3
 800721e:	d005      	beq.n	800722c <UART_SetConfig+0xa0>
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4b8d      	ldr	r3, [pc, #564]	; (800745c <UART_SetConfig+0x2d0>)
 8007228:	429a      	cmp	r2, r3
 800722a:	d104      	bne.n	8007236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fd f8e2 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8007230:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007234:	e003      	b.n	800723e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007236:	f7fd f8c9 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 800723a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007248:	f040 810c 	bne.w	8007464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800724c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007250:	2200      	movs	r2, #0
 8007252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007256:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800725a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	1891      	adds	r1, r2, r2
 8007264:	65b9      	str	r1, [r7, #88]	; 0x58
 8007266:	415b      	adcs	r3, r3
 8007268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800726a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800726e:	4621      	mov	r1, r4
 8007270:	eb12 0801 	adds.w	r8, r2, r1
 8007274:	4629      	mov	r1, r5
 8007276:	eb43 0901 	adc.w	r9, r3, r1
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800728a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800728e:	4690      	mov	r8, r2
 8007290:	4699      	mov	r9, r3
 8007292:	4623      	mov	r3, r4
 8007294:	eb18 0303 	adds.w	r3, r8, r3
 8007298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800729c:	462b      	mov	r3, r5
 800729e:	eb49 0303 	adc.w	r3, r9, r3
 80072a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ba:	460b      	mov	r3, r1
 80072bc:	18db      	adds	r3, r3, r3
 80072be:	653b      	str	r3, [r7, #80]	; 0x50
 80072c0:	4613      	mov	r3, r2
 80072c2:	eb42 0303 	adc.w	r3, r2, r3
 80072c6:	657b      	str	r3, [r7, #84]	; 0x54
 80072c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072d0:	f7f8 ffde 	bl	8000290 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4b61      	ldr	r3, [pc, #388]	; (8007460 <UART_SetConfig+0x2d4>)
 80072da:	fba3 2302 	umull	r2, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	011c      	lsls	r4, r3, #4
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	1891      	adds	r1, r2, r2
 80072fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80072fc:	415b      	adcs	r3, r3
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007304:	4641      	mov	r1, r8
 8007306:	eb12 0a01 	adds.w	sl, r2, r1
 800730a:	4649      	mov	r1, r9
 800730c:	eb43 0b01 	adc.w	fp, r3, r1
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800731c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007324:	4692      	mov	sl, r2
 8007326:	469b      	mov	fp, r3
 8007328:	4643      	mov	r3, r8
 800732a:	eb1a 0303 	adds.w	r3, sl, r3
 800732e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007332:	464b      	mov	r3, r9
 8007334:	eb4b 0303 	adc.w	r3, fp, r3
 8007338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007348:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800734c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007350:	460b      	mov	r3, r1
 8007352:	18db      	adds	r3, r3, r3
 8007354:	643b      	str	r3, [r7, #64]	; 0x40
 8007356:	4613      	mov	r3, r2
 8007358:	eb42 0303 	adc.w	r3, r2, r3
 800735c:	647b      	str	r3, [r7, #68]	; 0x44
 800735e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007366:	f7f8 ff93 	bl	8000290 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4611      	mov	r1, r2
 8007370:	4b3b      	ldr	r3, [pc, #236]	; (8007460 <UART_SetConfig+0x2d4>)
 8007372:	fba3 2301 	umull	r2, r3, r3, r1
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	2264      	movs	r2, #100	; 0x64
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	1acb      	subs	r3, r1, r3
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007386:	4b36      	ldr	r3, [pc, #216]	; (8007460 <UART_SetConfig+0x2d4>)
 8007388:	fba3 2302 	umull	r2, r3, r3, r2
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007394:	441c      	add	r4, r3
 8007396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739a:	2200      	movs	r2, #0
 800739c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	1891      	adds	r1, r2, r2
 80073ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80073b0:	415b      	adcs	r3, r3
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073b8:	4641      	mov	r1, r8
 80073ba:	1851      	adds	r1, r2, r1
 80073bc:	6339      	str	r1, [r7, #48]	; 0x30
 80073be:	4649      	mov	r1, r9
 80073c0:	414b      	adcs	r3, r1
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073d0:	4659      	mov	r1, fp
 80073d2:	00cb      	lsls	r3, r1, #3
 80073d4:	4651      	mov	r1, sl
 80073d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073da:	4651      	mov	r1, sl
 80073dc:	00ca      	lsls	r2, r1, #3
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	4642      	mov	r2, r8
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ec:	464b      	mov	r3, r9
 80073ee:	460a      	mov	r2, r1
 80073f0:	eb42 0303 	adc.w	r3, r2, r3
 80073f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007404:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800740c:	460b      	mov	r3, r1
 800740e:	18db      	adds	r3, r3, r3
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
 8007412:	4613      	mov	r3, r2
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800741e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007422:	f7f8 ff35 	bl	8000290 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <UART_SetConfig+0x2d4>)
 800742c:	fba3 1302 	umull	r1, r3, r3, r2
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	2164      	movs	r1, #100	; 0x64
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	3332      	adds	r3, #50	; 0x32
 800743e:	4a08      	ldr	r2, [pc, #32]	; (8007460 <UART_SetConfig+0x2d4>)
 8007440:	fba2 2303 	umull	r2, r3, r2, r3
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4422      	add	r2, r4
 8007452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007454:	e106      	b.n	8007664 <UART_SetConfig+0x4d8>
 8007456:	bf00      	nop
 8007458:	40011000 	.word	0x40011000
 800745c:	40011400 	.word	0x40011400
 8007460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800746e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007476:	4642      	mov	r2, r8
 8007478:	464b      	mov	r3, r9
 800747a:	1891      	adds	r1, r2, r2
 800747c:	6239      	str	r1, [r7, #32]
 800747e:	415b      	adcs	r3, r3
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
 8007482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007486:	4641      	mov	r1, r8
 8007488:	1854      	adds	r4, r2, r1
 800748a:	4649      	mov	r1, r9
 800748c:	eb43 0501 	adc.w	r5, r3, r1
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	00eb      	lsls	r3, r5, #3
 800749a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800749e:	00e2      	lsls	r2, r4, #3
 80074a0:	4614      	mov	r4, r2
 80074a2:	461d      	mov	r5, r3
 80074a4:	4643      	mov	r3, r8
 80074a6:	18e3      	adds	r3, r4, r3
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ac:	464b      	mov	r3, r9
 80074ae:	eb45 0303 	adc.w	r3, r5, r3
 80074b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074d2:	4629      	mov	r1, r5
 80074d4:	008b      	lsls	r3, r1, #2
 80074d6:	4621      	mov	r1, r4
 80074d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074dc:	4621      	mov	r1, r4
 80074de:	008a      	lsls	r2, r1, #2
 80074e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074e4:	f7f8 fed4 	bl	8000290 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4b60      	ldr	r3, [pc, #384]	; (8007670 <UART_SetConfig+0x4e4>)
 80074ee:	fba3 2302 	umull	r2, r3, r3, r2
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	011c      	lsls	r4, r3, #4
 80074f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007500:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	1891      	adds	r1, r2, r2
 800750e:	61b9      	str	r1, [r7, #24]
 8007510:	415b      	adcs	r3, r3
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007518:	4641      	mov	r1, r8
 800751a:	1851      	adds	r1, r2, r1
 800751c:	6139      	str	r1, [r7, #16]
 800751e:	4649      	mov	r1, r9
 8007520:	414b      	adcs	r3, r1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007530:	4659      	mov	r1, fp
 8007532:	00cb      	lsls	r3, r1, #3
 8007534:	4651      	mov	r1, sl
 8007536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753a:	4651      	mov	r1, sl
 800753c:	00ca      	lsls	r2, r1, #3
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	4603      	mov	r3, r0
 8007544:	4642      	mov	r2, r8
 8007546:	189b      	adds	r3, r3, r2
 8007548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800754c:	464b      	mov	r3, r9
 800754e:	460a      	mov	r2, r1
 8007550:	eb42 0303 	adc.w	r3, r2, r3
 8007554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	67bb      	str	r3, [r7, #120]	; 0x78
 8007562:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007570:	4649      	mov	r1, r9
 8007572:	008b      	lsls	r3, r1, #2
 8007574:	4641      	mov	r1, r8
 8007576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757a:	4641      	mov	r1, r8
 800757c:	008a      	lsls	r2, r1, #2
 800757e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007582:	f7f8 fe85 	bl	8000290 <__aeabi_uldivmod>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4611      	mov	r1, r2
 800758c:	4b38      	ldr	r3, [pc, #224]	; (8007670 <UART_SetConfig+0x4e4>)
 800758e:	fba3 2301 	umull	r2, r3, r3, r1
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	2264      	movs	r2, #100	; 0x64
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	1acb      	subs	r3, r1, r3
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	3332      	adds	r3, #50	; 0x32
 80075a0:	4a33      	ldr	r2, [pc, #204]	; (8007670 <UART_SetConfig+0x4e4>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ac:	441c      	add	r4, r3
 80075ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b2:	2200      	movs	r2, #0
 80075b4:	673b      	str	r3, [r7, #112]	; 0x70
 80075b6:	677a      	str	r2, [r7, #116]	; 0x74
 80075b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075bc:	4642      	mov	r2, r8
 80075be:	464b      	mov	r3, r9
 80075c0:	1891      	adds	r1, r2, r2
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	415b      	adcs	r3, r3
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075cc:	4641      	mov	r1, r8
 80075ce:	1851      	adds	r1, r2, r1
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	4649      	mov	r1, r9
 80075d4:	414b      	adcs	r3, r1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075e4:	4659      	mov	r1, fp
 80075e6:	00cb      	lsls	r3, r1, #3
 80075e8:	4651      	mov	r1, sl
 80075ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ee:	4651      	mov	r1, sl
 80075f0:	00ca      	lsls	r2, r1, #3
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	4642      	mov	r2, r8
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075fe:	464b      	mov	r3, r9
 8007600:	460a      	mov	r2, r1
 8007602:	eb42 0303 	adc.w	r3, r2, r3
 8007606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	663b      	str	r3, [r7, #96]	; 0x60
 8007612:	667a      	str	r2, [r7, #100]	; 0x64
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007620:	4649      	mov	r1, r9
 8007622:	008b      	lsls	r3, r1, #2
 8007624:	4641      	mov	r1, r8
 8007626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762a:	4641      	mov	r1, r8
 800762c:	008a      	lsls	r2, r1, #2
 800762e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007632:	f7f8 fe2d 	bl	8000290 <__aeabi_uldivmod>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <UART_SetConfig+0x4e4>)
 800763c:	fba3 1302 	umull	r1, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2164      	movs	r1, #100	; 0x64
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	3332      	adds	r3, #50	; 0x32
 800764e:	4a08      	ldr	r2, [pc, #32]	; (8007670 <UART_SetConfig+0x4e4>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 020f 	and.w	r2, r3, #15
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4422      	add	r2, r4
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800766a:	46bd      	mov	sp, r7
 800766c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007670:	51eb851f 	.word	0x51eb851f

08007674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007674:	b084      	sub	sp, #16
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	f107 001c 	add.w	r0, r7, #28
 8007682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b01      	cmp	r3, #1
 800768a:	d122      	bne.n	80076d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d105      	bne.n	80076c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 faa2 	bl	8007c10 <USB_CoreReset>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e01a      	b.n	8007708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa96 	bl	8007c10 <USB_CoreReset>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	639a      	str	r2, [r3, #56]	; 0x38
 80076fa:	e005      	b.n	8007708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10b      	bne.n	8007726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f043 0206 	orr.w	r2, r3, #6
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f043 0220 	orr.w	r2, r3, #32
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007732:	b004      	add	sp, #16
 8007734:	4770      	bx	lr

08007736 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 0201 	bic.w	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d115      	bne.n	80077a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007786:	2001      	movs	r0, #1
 8007788:	f7fa fb6e 	bl	8001e68 <HAL_Delay>
      ms++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa2e 	bl	8007bf4 <USB_GetMode>
 8007798:	4603      	mov	r3, r0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d01e      	beq.n	80077dc <USB_SetCurrentMode+0x84>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b31      	cmp	r3, #49	; 0x31
 80077a2:	d9f0      	bls.n	8007786 <USB_SetCurrentMode+0x2e>
 80077a4:	e01a      	b.n	80077dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d115      	bne.n	80077d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077b8:	2001      	movs	r0, #1
 80077ba:	f7fa fb55 	bl	8001e68 <HAL_Delay>
      ms++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa15 	bl	8007bf4 <USB_GetMode>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <USB_SetCurrentMode+0x84>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b31      	cmp	r3, #49	; 0x31
 80077d4:	d9f0      	bls.n	80077b8 <USB_SetCurrentMode+0x60>
 80077d6:	e001      	b.n	80077dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e005      	b.n	80077e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b32      	cmp	r3, #50	; 0x32
 80077e0:	d101      	bne.n	80077e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077f0:	b084      	sub	sp, #16
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	e009      	b.n	8007824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3340      	adds	r3, #64	; 0x40
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b0e      	cmp	r3, #14
 8007828:	d9f2      	bls.n	8007810 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11c      	bne.n	800786a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783e:	f043 0302 	orr.w	r3, r3, #2
 8007842:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
 8007868:	e00b      	b.n	8007882 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007888:	461a      	mov	r2, r3
 800788a:	2300      	movs	r3, #0
 800788c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	4619      	mov	r1, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789c:	461a      	mov	r2, r3
 800789e:	680b      	ldr	r3, [r1, #0]
 80078a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10c      	bne.n	80078c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f965 	bl	8007b80 <USB_SetDevSpeed>
 80078b6:	e008      	b.n	80078ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f960 	bl	8007b80 <USB_SetDevSpeed>
 80078c0:	e003      	b.n	80078ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f95b 	bl	8007b80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ca:	2110      	movs	r1, #16
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8f3 	bl	8007ab8 <USB_FlushTxFifo>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f91f 	bl	8007b20 <USB_FlushRxFifo>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	461a      	mov	r2, r3
 80078f4:	2300      	movs	r3, #0
 80078f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	461a      	mov	r2, r3
 8007900:	2300      	movs	r3, #0
 8007902:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790a:	461a      	mov	r2, r3
 800790c:	2300      	movs	r3, #0
 800790e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	e043      	b.n	800799e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800792c:	d118      	bne.n	8007960 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	461a      	mov	r2, r3
 8007942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	e013      	b.n	8007972 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	461a      	mov	r2, r3
 8007958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e008      	b.n	8007972 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797e:	461a      	mov	r2, r3
 8007980:	2300      	movs	r3, #0
 8007982:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	461a      	mov	r2, r3
 8007992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007996:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3301      	adds	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d3b7      	bcc.n	8007916 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e043      	b.n	8007a34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c2:	d118      	bne.n	80079f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d6:	461a      	mov	r2, r3
 80079d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e013      	b.n	8007a08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	461a      	mov	r2, r3
 80079ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e008      	b.n	8007a08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	461a      	mov	r2, r3
 8007a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3301      	adds	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d3b7      	bcc.n	80079ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f043 0210 	orr.w	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <USB_DevInit+0x2c4>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f043 0208 	orr.w	r2, r3, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d107      	bne.n	8007aa4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a9c:	f043 0304 	orr.w	r3, r3, #4
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ab0:	b004      	add	sp, #16
 8007ab2:	4770      	bx	lr
 8007ab4:	803c3800 	.word	0x803c3800

08007ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <USB_FlushTxFifo+0x64>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d901      	bls.n	8007ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01b      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	daf2      	bge.n	8007ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	019b      	lsls	r3, r3, #6
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <USB_FlushTxFifo+0x64>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e006      	b.n	8007b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d0f0      	beq.n	8007af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	00030d40 	.word	0x00030d40

08007b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4a11      	ldr	r2, [pc, #68]	; (8007b7c <USB_FlushRxFifo+0x5c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d901      	bls.n	8007b3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e018      	b.n	8007b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	daf2      	bge.n	8007b2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <USB_FlushRxFifo+0x5c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d901      	bls.n	8007b62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e006      	b.n	8007b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d0f0      	beq.n	8007b50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	00030d40 	.word	0x00030d40

08007b80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bcc:	f023 0303 	bic.w	r3, r3, #3
 8007bd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be0:	f043 0302 	orr.w	r3, r3, #2
 8007be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0301 	and.w	r3, r3, #1
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <USB_CoreReset+0x64>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d901      	bls.n	8007c2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e01b      	b.n	8007c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	daf2      	bge.n	8007c1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f043 0201 	orr.w	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <USB_CoreReset+0x64>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d901      	bls.n	8007c58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e006      	b.n	8007c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d0f0      	beq.n	8007c46 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	00030d40 	.word	0x00030d40

08007c78 <std>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c86:	6083      	str	r3, [r0, #8]
 8007c88:	8181      	strh	r1, [r0, #12]
 8007c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c8c:	81c2      	strh	r2, [r0, #14]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	; 0x5c
 8007c96:	f000 f9f7 	bl	8008088 <memset>
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <std+0x58>)
 8007c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <std+0x5c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <std+0x60>)
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <std+0x64>)
 8007ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <std+0x68>)
 8007cac:	6224      	str	r4, [r4, #32]
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d006      	beq.n	8007cc0 <std+0x48>
 8007cb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cb6:	4294      	cmp	r4, r2
 8007cb8:	d002      	beq.n	8007cc0 <std+0x48>
 8007cba:	33d0      	adds	r3, #208	; 0xd0
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d105      	bne.n	8007ccc <std+0x54>
 8007cc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc8:	f000 ba56 	b.w	8008178 <__retarget_lock_init_recursive>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	08007ed9 	.word	0x08007ed9
 8007cd4:	08007efb 	.word	0x08007efb
 8007cd8:	08007f33 	.word	0x08007f33
 8007cdc:	08007f57 	.word	0x08007f57
 8007ce0:	20000b40 	.word	0x20000b40

08007ce4 <stdio_exit_handler>:
 8007ce4:	4a02      	ldr	r2, [pc, #8]	; (8007cf0 <stdio_exit_handler+0xc>)
 8007ce6:	4903      	ldr	r1, [pc, #12]	; (8007cf4 <stdio_exit_handler+0x10>)
 8007ce8:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <stdio_exit_handler+0x14>)
 8007cea:	f000 b869 	b.w	8007dc0 <_fwalk_sglue>
 8007cee:	bf00      	nop
 8007cf0:	2000000c 	.word	0x2000000c
 8007cf4:	08008a25 	.word	0x08008a25
 8007cf8:	20000018 	.word	0x20000018

08007cfc <cleanup_stdio>:
 8007cfc:	6841      	ldr	r1, [r0, #4]
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <cleanup_stdio+0x34>)
 8007d00:	4299      	cmp	r1, r3
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	d001      	beq.n	8007d0c <cleanup_stdio+0x10>
 8007d08:	f000 fe8c 	bl	8008a24 <_fflush_r>
 8007d0c:	68a1      	ldr	r1, [r4, #8]
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <cleanup_stdio+0x38>)
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <cleanup_stdio+0x1e>
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fe85 	bl	8008a24 <_fflush_r>
 8007d1a:	68e1      	ldr	r1, [r4, #12]
 8007d1c:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <cleanup_stdio+0x3c>)
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	d004      	beq.n	8007d2c <cleanup_stdio+0x30>
 8007d22:	4620      	mov	r0, r4
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d28:	f000 be7c 	b.w	8008a24 <_fflush_r>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000b40 	.word	0x20000b40
 8007d34:	20000ba8 	.word	0x20000ba8
 8007d38:	20000c10 	.word	0x20000c10

08007d3c <global_stdio_init.part.0>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <global_stdio_init.part.0+0x30>)
 8007d40:	4c0b      	ldr	r4, [pc, #44]	; (8007d70 <global_stdio_init.part.0+0x34>)
 8007d42:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <global_stdio_init.part.0+0x38>)
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	4620      	mov	r0, r4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	f7ff ff94 	bl	8007c78 <std>
 8007d50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d54:	2201      	movs	r2, #1
 8007d56:	2109      	movs	r1, #9
 8007d58:	f7ff ff8e 	bl	8007c78 <std>
 8007d5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d60:	2202      	movs	r2, #2
 8007d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d66:	2112      	movs	r1, #18
 8007d68:	f7ff bf86 	b.w	8007c78 <std>
 8007d6c:	20000c78 	.word	0x20000c78
 8007d70:	20000b40 	.word	0x20000b40
 8007d74:	08007ce5 	.word	0x08007ce5

08007d78 <__sfp_lock_acquire>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__sfp_lock_acquire+0x8>)
 8007d7a:	f000 b9fe 	b.w	800817a <__retarget_lock_acquire_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20000c81 	.word	0x20000c81

08007d84 <__sfp_lock_release>:
 8007d84:	4801      	ldr	r0, [pc, #4]	; (8007d8c <__sfp_lock_release+0x8>)
 8007d86:	f000 b9f9 	b.w	800817c <__retarget_lock_release_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	20000c81 	.word	0x20000c81

08007d90 <__sinit>:
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7ff fff0 	bl	8007d78 <__sfp_lock_acquire>
 8007d98:	6a23      	ldr	r3, [r4, #32]
 8007d9a:	b11b      	cbz	r3, 8007da4 <__sinit+0x14>
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	f7ff bff0 	b.w	8007d84 <__sfp_lock_release>
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <__sinit+0x28>)
 8007da6:	6223      	str	r3, [r4, #32]
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <__sinit+0x2c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f5      	bne.n	8007d9c <__sinit+0xc>
 8007db0:	f7ff ffc4 	bl	8007d3c <global_stdio_init.part.0>
 8007db4:	e7f2      	b.n	8007d9c <__sinit+0xc>
 8007db6:	bf00      	nop
 8007db8:	08007cfd 	.word	0x08007cfd
 8007dbc:	20000c78 	.word	0x20000c78

08007dc0 <_fwalk_sglue>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	4688      	mov	r8, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	2600      	movs	r6, #0
 8007dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd4:	d505      	bpl.n	8007de2 <_fwalk_sglue+0x22>
 8007dd6:	6824      	ldr	r4, [r4, #0]
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d1f7      	bne.n	8007dcc <_fwalk_sglue+0xc>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d907      	bls.n	8007df8 <_fwalk_sglue+0x38>
 8007de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dec:	3301      	adds	r3, #1
 8007dee:	d003      	beq.n	8007df8 <_fwalk_sglue+0x38>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c0      	blx	r8
 8007df6:	4306      	orrs	r6, r0
 8007df8:	3568      	adds	r5, #104	; 0x68
 8007dfa:	e7e9      	b.n	8007dd0 <_fwalk_sglue+0x10>

08007dfc <iprintf>:
 8007dfc:	b40f      	push	{r0, r1, r2, r3}
 8007dfe:	b507      	push	{r0, r1, r2, lr}
 8007e00:	4906      	ldr	r1, [pc, #24]	; (8007e1c <iprintf+0x20>)
 8007e02:	ab04      	add	r3, sp, #16
 8007e04:	6808      	ldr	r0, [r1, #0]
 8007e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0a:	6881      	ldr	r1, [r0, #8]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	f000 fad9 	bl	80083c4 <_vfiprintf_r>
 8007e12:	b003      	add	sp, #12
 8007e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e18:	b004      	add	sp, #16
 8007e1a:	4770      	bx	lr
 8007e1c:	20000064 	.word	0x20000064

08007e20 <_puts_r>:
 8007e20:	6a03      	ldr	r3, [r0, #32]
 8007e22:	b570      	push	{r4, r5, r6, lr}
 8007e24:	6884      	ldr	r4, [r0, #8]
 8007e26:	4605      	mov	r5, r0
 8007e28:	460e      	mov	r6, r1
 8007e2a:	b90b      	cbnz	r3, 8007e30 <_puts_r+0x10>
 8007e2c:	f7ff ffb0 	bl	8007d90 <__sinit>
 8007e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e32:	07db      	lsls	r3, r3, #31
 8007e34:	d405      	bmi.n	8007e42 <_puts_r+0x22>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	0598      	lsls	r0, r3, #22
 8007e3a:	d402      	bmi.n	8007e42 <_puts_r+0x22>
 8007e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e3e:	f000 f99c 	bl	800817a <__retarget_lock_acquire_recursive>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0719      	lsls	r1, r3, #28
 8007e46:	d513      	bpl.n	8007e70 <_puts_r+0x50>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	b18b      	cbz	r3, 8007e70 <_puts_r+0x50>
 8007e4c:	3e01      	subs	r6, #1
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	b9e9      	cbnz	r1, 8007e96 <_puts_r+0x76>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da2e      	bge.n	8007ebc <_puts_r+0x9c>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	210a      	movs	r1, #10
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f87b 	bl	8007f5e <__swbuf_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d007      	beq.n	8007e7c <_puts_r+0x5c>
 8007e6c:	250a      	movs	r5, #10
 8007e6e:	e007      	b.n	8007e80 <_puts_r+0x60>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 f8b0 	bl	8007fd8 <__swsetup_r>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d0e7      	beq.n	8007e4c <_puts_r+0x2c>
 8007e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e82:	07da      	lsls	r2, r3, #31
 8007e84:	d405      	bmi.n	8007e92 <_puts_r+0x72>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	059b      	lsls	r3, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_puts_r+0x72>
 8007e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8e:	f000 f975 	bl	800817c <__retarget_lock_release_recursive>
 8007e92:	4628      	mov	r0, r5
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da04      	bge.n	8007ea4 <_puts_r+0x84>
 8007e9a:	69a2      	ldr	r2, [r4, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	dc06      	bgt.n	8007eae <_puts_r+0x8e>
 8007ea0:	290a      	cmp	r1, #10
 8007ea2:	d004      	beq.n	8007eae <_puts_r+0x8e>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	7019      	strb	r1, [r3, #0]
 8007eac:	e7cf      	b.n	8007e4e <_puts_r+0x2e>
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 f854 	bl	8007f5e <__swbuf_r>
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d1c9      	bne.n	8007e4e <_puts_r+0x2e>
 8007eba:	e7df      	b.n	8007e7c <_puts_r+0x5c>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	250a      	movs	r5, #10
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	6022      	str	r2, [r4, #0]
 8007ec4:	701d      	strb	r5, [r3, #0]
 8007ec6:	e7db      	b.n	8007e80 <_puts_r+0x60>

08007ec8 <puts>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <puts+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7ff bfa7 	b.w	8007e20 <_puts_r>
 8007ed2:	bf00      	nop
 8007ed4:	20000064 	.word	0x20000064

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 f8fc 	bl	80080dc <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	05db      	lsls	r3, r3, #23
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f10:	2302      	movs	r3, #2
 8007f12:	2200      	movs	r2, #0
 8007f14:	f000 f8d0 	bl	80080b8 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b8e7 	b.w	8008100 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f000 f8bd 	bl	80080b8 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b89d 	b.w	8008098 <_close_r>

08007f5e <__swbuf_r>:
 8007f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f60:	460e      	mov	r6, r1
 8007f62:	4614      	mov	r4, r2
 8007f64:	4605      	mov	r5, r0
 8007f66:	b118      	cbz	r0, 8007f70 <__swbuf_r+0x12>
 8007f68:	6a03      	ldr	r3, [r0, #32]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <__swbuf_r+0x12>
 8007f6c:	f7ff ff10 	bl	8007d90 <__sinit>
 8007f70:	69a3      	ldr	r3, [r4, #24]
 8007f72:	60a3      	str	r3, [r4, #8]
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	071a      	lsls	r2, r3, #28
 8007f78:	d525      	bpl.n	8007fc6 <__swbuf_r+0x68>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	b31b      	cbz	r3, 8007fc6 <__swbuf_r+0x68>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	6922      	ldr	r2, [r4, #16]
 8007f82:	1a98      	subs	r0, r3, r2
 8007f84:	6963      	ldr	r3, [r4, #20]
 8007f86:	b2f6      	uxtb	r6, r6
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	4637      	mov	r7, r6
 8007f8c:	dc04      	bgt.n	8007f98 <__swbuf_r+0x3a>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 fd47 	bl	8008a24 <_fflush_r>
 8007f96:	b9e0      	cbnz	r0, 8007fd2 <__swbuf_r+0x74>
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	60a3      	str	r3, [r4, #8]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	6022      	str	r2, [r4, #0]
 8007fa4:	701e      	strb	r6, [r3, #0]
 8007fa6:	6962      	ldr	r2, [r4, #20]
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d004      	beq.n	8007fb8 <__swbuf_r+0x5a>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	07db      	lsls	r3, r3, #31
 8007fb2:	d506      	bpl.n	8007fc2 <__swbuf_r+0x64>
 8007fb4:	2e0a      	cmp	r6, #10
 8007fb6:	d104      	bne.n	8007fc2 <__swbuf_r+0x64>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 fd32 	bl	8008a24 <_fflush_r>
 8007fc0:	b938      	cbnz	r0, 8007fd2 <__swbuf_r+0x74>
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 f805 	bl	8007fd8 <__swsetup_r>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0d5      	beq.n	8007f7e <__swbuf_r+0x20>
 8007fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8007fd6:	e7f4      	b.n	8007fc2 <__swbuf_r+0x64>

08007fd8 <__swsetup_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <__swsetup_r+0xac>)
 8007fdc:	4605      	mov	r5, r0
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	b118      	cbz	r0, 8007fec <__swsetup_r+0x14>
 8007fe4:	6a03      	ldr	r3, [r0, #32]
 8007fe6:	b90b      	cbnz	r3, 8007fec <__swsetup_r+0x14>
 8007fe8:	f7ff fed2 	bl	8007d90 <__sinit>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ff2:	0718      	lsls	r0, r3, #28
 8007ff4:	d422      	bmi.n	800803c <__swsetup_r+0x64>
 8007ff6:	06d9      	lsls	r1, r3, #27
 8007ff8:	d407      	bmi.n	800800a <__swsetup_r+0x32>
 8007ffa:	2309      	movs	r3, #9
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e034      	b.n	8008074 <__swsetup_r+0x9c>
 800800a:	0758      	lsls	r0, r3, #29
 800800c:	d512      	bpl.n	8008034 <__swsetup_r+0x5c>
 800800e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008010:	b141      	cbz	r1, 8008024 <__swsetup_r+0x4c>
 8008012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008016:	4299      	cmp	r1, r3
 8008018:	d002      	beq.n	8008020 <__swsetup_r+0x48>
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f8b0 	bl	8008180 <_free_r>
 8008020:	2300      	movs	r3, #0
 8008022:	6363      	str	r3, [r4, #52]	; 0x34
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	2300      	movs	r3, #0
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f043 0308 	orr.w	r3, r3, #8
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	b94b      	cbnz	r3, 8008054 <__swsetup_r+0x7c>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800804a:	d003      	beq.n	8008054 <__swsetup_r+0x7c>
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 fd36 	bl	8008ac0 <__smakebuf_r>
 8008054:	89a0      	ldrh	r0, [r4, #12]
 8008056:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800805a:	f010 0301 	ands.w	r3, r0, #1
 800805e:	d00a      	beq.n	8008076 <__swsetup_r+0x9e>
 8008060:	2300      	movs	r3, #0
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	6963      	ldr	r3, [r4, #20]
 8008066:	425b      	negs	r3, r3
 8008068:	61a3      	str	r3, [r4, #24]
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	b943      	cbnz	r3, 8008080 <__swsetup_r+0xa8>
 800806e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008072:	d1c4      	bne.n	8007ffe <__swsetup_r+0x26>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	0781      	lsls	r1, r0, #30
 8008078:	bf58      	it	pl
 800807a:	6963      	ldrpl	r3, [r4, #20]
 800807c:	60a3      	str	r3, [r4, #8]
 800807e:	e7f4      	b.n	800806a <__swsetup_r+0x92>
 8008080:	2000      	movs	r0, #0
 8008082:	e7f7      	b.n	8008074 <__swsetup_r+0x9c>
 8008084:	20000064 	.word	0x20000064

08008088 <memset>:
 8008088:	4402      	add	r2, r0
 800808a:	4603      	mov	r3, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <_close_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	; (80080b4 <_close_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7f9 fd0f 	bl	8001ac6 <_close>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_close_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_close_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20000c7c 	.word	0x20000c7c

080080b8 <_lseek_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	; (80080d8 <_lseek_r+0x20>)
 80080bc:	4604      	mov	r4, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	4611      	mov	r1, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f7f9 fd24 	bl	8001b14 <_lseek>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_lseek_r+0x1e>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_lseek_r+0x1e>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20000c7c 	.word	0x20000c7c

080080dc <_read_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d07      	ldr	r5, [pc, #28]	; (80080fc <_read_r+0x20>)
 80080e0:	4604      	mov	r4, r0
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7f9 fcb2 	bl	8001a54 <_read>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_read_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_read_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20000c7c 	.word	0x20000c7c

08008100 <_write_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d07      	ldr	r5, [pc, #28]	; (8008120 <_write_r+0x20>)
 8008104:	4604      	mov	r4, r0
 8008106:	4608      	mov	r0, r1
 8008108:	4611      	mov	r1, r2
 800810a:	2200      	movs	r2, #0
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f7f9 fcbd 	bl	8001a8e <_write>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_write_r+0x1e>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_write_r+0x1e>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20000c7c 	.word	0x20000c7c

08008124 <__errno>:
 8008124:	4b01      	ldr	r3, [pc, #4]	; (800812c <__errno+0x8>)
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000064 	.word	0x20000064

08008130 <__libc_init_array>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	4d0d      	ldr	r5, [pc, #52]	; (8008168 <__libc_init_array+0x38>)
 8008134:	4c0d      	ldr	r4, [pc, #52]	; (800816c <__libc_init_array+0x3c>)
 8008136:	1b64      	subs	r4, r4, r5
 8008138:	10a4      	asrs	r4, r4, #2
 800813a:	2600      	movs	r6, #0
 800813c:	42a6      	cmp	r6, r4
 800813e:	d109      	bne.n	8008154 <__libc_init_array+0x24>
 8008140:	4d0b      	ldr	r5, [pc, #44]	; (8008170 <__libc_init_array+0x40>)
 8008142:	4c0c      	ldr	r4, [pc, #48]	; (8008174 <__libc_init_array+0x44>)
 8008144:	f000 fd2a 	bl	8008b9c <_init>
 8008148:	1b64      	subs	r4, r4, r5
 800814a:	10a4      	asrs	r4, r4, #2
 800814c:	2600      	movs	r6, #0
 800814e:	42a6      	cmp	r6, r4
 8008150:	d105      	bne.n	800815e <__libc_init_array+0x2e>
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	f855 3b04 	ldr.w	r3, [r5], #4
 8008158:	4798      	blx	r3
 800815a:	3601      	adds	r6, #1
 800815c:	e7ee      	b.n	800813c <__libc_init_array+0xc>
 800815e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008162:	4798      	blx	r3
 8008164:	3601      	adds	r6, #1
 8008166:	e7f2      	b.n	800814e <__libc_init_array+0x1e>
 8008168:	08008cd0 	.word	0x08008cd0
 800816c:	08008cd0 	.word	0x08008cd0
 8008170:	08008cd0 	.word	0x08008cd0
 8008174:	08008cd4 	.word	0x08008cd4

08008178 <__retarget_lock_init_recursive>:
 8008178:	4770      	bx	lr

0800817a <__retarget_lock_acquire_recursive>:
 800817a:	4770      	bx	lr

0800817c <__retarget_lock_release_recursive>:
 800817c:	4770      	bx	lr
	...

08008180 <_free_r>:
 8008180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008182:	2900      	cmp	r1, #0
 8008184:	d044      	beq.n	8008210 <_free_r+0x90>
 8008186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818a:	9001      	str	r0, [sp, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f1a1 0404 	sub.w	r4, r1, #4
 8008192:	bfb8      	it	lt
 8008194:	18e4      	addlt	r4, r4, r3
 8008196:	f000 f8df 	bl	8008358 <__malloc_lock>
 800819a:	4a1e      	ldr	r2, [pc, #120]	; (8008214 <_free_r+0x94>)
 800819c:	9801      	ldr	r0, [sp, #4]
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	b933      	cbnz	r3, 80081b0 <_free_r+0x30>
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	b003      	add	sp, #12
 80081a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ac:	f000 b8da 	b.w	8008364 <__malloc_unlock>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d908      	bls.n	80081c6 <_free_r+0x46>
 80081b4:	6825      	ldr	r5, [r4, #0]
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	e7ed      	b.n	80081a2 <_free_r+0x22>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x50>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x46>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1855      	adds	r5, r2, r1
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x70>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	4421      	add	r1, r4
 80081dc:	1854      	adds	r4, r2, r1
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1e0      	bne.n	80081a6 <_free_r+0x26>
 80081e4:	681c      	ldr	r4, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	440c      	add	r4, r1
 80081ec:	6014      	str	r4, [r2, #0]
 80081ee:	e7da      	b.n	80081a6 <_free_r+0x26>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x78>
 80081f2:	230c      	movs	r3, #12
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	e7d6      	b.n	80081a6 <_free_r+0x26>
 80081f8:	6825      	ldr	r5, [r4, #0]
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1949      	addeq	r1, r1, r5
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7ca      	b.n	80081a6 <_free_r+0x26>
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	20000c84 	.word	0x20000c84

08008218 <sbrk_aligned>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4e0e      	ldr	r6, [pc, #56]	; (8008254 <sbrk_aligned+0x3c>)
 800821c:	460c      	mov	r4, r1
 800821e:	6831      	ldr	r1, [r6, #0]
 8008220:	4605      	mov	r5, r0
 8008222:	b911      	cbnz	r1, 800822a <sbrk_aligned+0x12>
 8008224:	f000 fcaa 	bl	8008b7c <_sbrk_r>
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 fca5 	bl	8008b7c <_sbrk_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d00a      	beq.n	800824c <sbrk_aligned+0x34>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d007      	beq.n	8008250 <sbrk_aligned+0x38>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4628      	mov	r0, r5
 8008244:	f000 fc9a 	bl	8008b7c <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d101      	bne.n	8008250 <sbrk_aligned+0x38>
 800824c:	f04f 34ff 	mov.w	r4, #4294967295
 8008250:	4620      	mov	r0, r4
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	20000c88 	.word	0x20000c88

08008258 <_malloc_r>:
 8008258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800825c:	1ccd      	adds	r5, r1, #3
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	2d00      	cmp	r5, #0
 800826c:	4607      	mov	r7, r0
 800826e:	db01      	blt.n	8008274 <_malloc_r+0x1c>
 8008270:	42a9      	cmp	r1, r5
 8008272:	d905      	bls.n	8008280 <_malloc_r+0x28>
 8008274:	230c      	movs	r3, #12
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	2600      	movs	r6, #0
 800827a:	4630      	mov	r0, r6
 800827c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008354 <_malloc_r+0xfc>
 8008284:	f000 f868 	bl	8008358 <__malloc_lock>
 8008288:	f8d8 3000 	ldr.w	r3, [r8]
 800828c:	461c      	mov	r4, r3
 800828e:	bb5c      	cbnz	r4, 80082e8 <_malloc_r+0x90>
 8008290:	4629      	mov	r1, r5
 8008292:	4638      	mov	r0, r7
 8008294:	f7ff ffc0 	bl	8008218 <sbrk_aligned>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	4604      	mov	r4, r0
 800829c:	d155      	bne.n	800834a <_malloc_r+0xf2>
 800829e:	f8d8 4000 	ldr.w	r4, [r8]
 80082a2:	4626      	mov	r6, r4
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	d145      	bne.n	8008334 <_malloc_r+0xdc>
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	d048      	beq.n	800833e <_malloc_r+0xe6>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	4631      	mov	r1, r6
 80082b0:	4638      	mov	r0, r7
 80082b2:	eb04 0903 	add.w	r9, r4, r3
 80082b6:	f000 fc61 	bl	8008b7c <_sbrk_r>
 80082ba:	4581      	cmp	r9, r0
 80082bc:	d13f      	bne.n	800833e <_malloc_r+0xe6>
 80082be:	6821      	ldr	r1, [r4, #0]
 80082c0:	1a6d      	subs	r5, r5, r1
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ffa7 	bl	8008218 <sbrk_aligned>
 80082ca:	3001      	adds	r0, #1
 80082cc:	d037      	beq.n	800833e <_malloc_r+0xe6>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	442b      	add	r3, r5
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	f8d8 3000 	ldr.w	r3, [r8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d038      	beq.n	800834e <_malloc_r+0xf6>
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	42a2      	cmp	r2, r4
 80082e0:	d12b      	bne.n	800833a <_malloc_r+0xe2>
 80082e2:	2200      	movs	r2, #0
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	e00f      	b.n	8008308 <_malloc_r+0xb0>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	1b52      	subs	r2, r2, r5
 80082ec:	d41f      	bmi.n	800832e <_malloc_r+0xd6>
 80082ee:	2a0b      	cmp	r2, #11
 80082f0:	d917      	bls.n	8008322 <_malloc_r+0xca>
 80082f2:	1961      	adds	r1, r4, r5
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	6025      	str	r5, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	6059      	strne	r1, [r3, #4]
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	bf08      	it	eq
 8008300:	f8c8 1000 	streq.w	r1, [r8]
 8008304:	5162      	str	r2, [r4, r5]
 8008306:	604b      	str	r3, [r1, #4]
 8008308:	4638      	mov	r0, r7
 800830a:	f104 060b 	add.w	r6, r4, #11
 800830e:	f000 f829 	bl	8008364 <__malloc_unlock>
 8008312:	f026 0607 	bic.w	r6, r6, #7
 8008316:	1d23      	adds	r3, r4, #4
 8008318:	1af2      	subs	r2, r6, r3
 800831a:	d0ae      	beq.n	800827a <_malloc_r+0x22>
 800831c:	1b9b      	subs	r3, r3, r6
 800831e:	50a3      	str	r3, [r4, r2]
 8008320:	e7ab      	b.n	800827a <_malloc_r+0x22>
 8008322:	42a3      	cmp	r3, r4
 8008324:	6862      	ldr	r2, [r4, #4]
 8008326:	d1dd      	bne.n	80082e4 <_malloc_r+0x8c>
 8008328:	f8c8 2000 	str.w	r2, [r8]
 800832c:	e7ec      	b.n	8008308 <_malloc_r+0xb0>
 800832e:	4623      	mov	r3, r4
 8008330:	6864      	ldr	r4, [r4, #4]
 8008332:	e7ac      	b.n	800828e <_malloc_r+0x36>
 8008334:	4634      	mov	r4, r6
 8008336:	6876      	ldr	r6, [r6, #4]
 8008338:	e7b4      	b.n	80082a4 <_malloc_r+0x4c>
 800833a:	4613      	mov	r3, r2
 800833c:	e7cc      	b.n	80082d8 <_malloc_r+0x80>
 800833e:	230c      	movs	r3, #12
 8008340:	603b      	str	r3, [r7, #0]
 8008342:	4638      	mov	r0, r7
 8008344:	f000 f80e 	bl	8008364 <__malloc_unlock>
 8008348:	e797      	b.n	800827a <_malloc_r+0x22>
 800834a:	6025      	str	r5, [r4, #0]
 800834c:	e7dc      	b.n	8008308 <_malloc_r+0xb0>
 800834e:	605b      	str	r3, [r3, #4]
 8008350:	deff      	udf	#255	; 0xff
 8008352:	bf00      	nop
 8008354:	20000c84 	.word	0x20000c84

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_lock+0x8>)
 800835a:	f7ff bf0e 	b.w	800817a <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20000c80 	.word	0x20000c80

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_unlock+0x8>)
 8008366:	f7ff bf09 	b.w	800817c <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20000c80 	.word	0x20000c80

08008370 <__sfputc_r>:
 8008370:	6893      	ldr	r3, [r2, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	b410      	push	{r4}
 8008378:	6093      	str	r3, [r2, #8]
 800837a:	da08      	bge.n	800838e <__sfputc_r+0x1e>
 800837c:	6994      	ldr	r4, [r2, #24]
 800837e:	42a3      	cmp	r3, r4
 8008380:	db01      	blt.n	8008386 <__sfputc_r+0x16>
 8008382:	290a      	cmp	r1, #10
 8008384:	d103      	bne.n	800838e <__sfputc_r+0x1e>
 8008386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800838a:	f7ff bde8 	b.w	8007f5e <__swbuf_r>
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	1c58      	adds	r0, r3, #1
 8008392:	6010      	str	r0, [r2, #0]
 8008394:	7019      	strb	r1, [r3, #0]
 8008396:	4608      	mov	r0, r1
 8008398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800839c:	4770      	bx	lr

0800839e <__sfputs_r>:
 800839e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a0:	4606      	mov	r6, r0
 80083a2:	460f      	mov	r7, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	18d5      	adds	r5, r2, r3
 80083a8:	42ac      	cmp	r4, r5
 80083aa:	d101      	bne.n	80083b0 <__sfputs_r+0x12>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e007      	b.n	80083c0 <__sfputs_r+0x22>
 80083b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b4:	463a      	mov	r2, r7
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7ff ffda 	bl	8008370 <__sfputc_r>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d1f3      	bne.n	80083a8 <__sfputs_r+0xa>
 80083c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083c4 <_vfiprintf_r>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	460d      	mov	r5, r1
 80083ca:	b09d      	sub	sp, #116	; 0x74
 80083cc:	4614      	mov	r4, r2
 80083ce:	4698      	mov	r8, r3
 80083d0:	4606      	mov	r6, r0
 80083d2:	b118      	cbz	r0, 80083dc <_vfiprintf_r+0x18>
 80083d4:	6a03      	ldr	r3, [r0, #32]
 80083d6:	b90b      	cbnz	r3, 80083dc <_vfiprintf_r+0x18>
 80083d8:	f7ff fcda 	bl	8007d90 <__sinit>
 80083dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d405      	bmi.n	80083ee <_vfiprintf_r+0x2a>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_vfiprintf_r+0x2a>
 80083e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ea:	f7ff fec6 	bl	800817a <__retarget_lock_acquire_recursive>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	071b      	lsls	r3, r3, #28
 80083f2:	d501      	bpl.n	80083f8 <_vfiprintf_r+0x34>
 80083f4:	692b      	ldr	r3, [r5, #16]
 80083f6:	b99b      	cbnz	r3, 8008420 <_vfiprintf_r+0x5c>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff fdec 	bl	8007fd8 <__swsetup_r>
 8008400:	b170      	cbz	r0, 8008420 <_vfiprintf_r+0x5c>
 8008402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008404:	07dc      	lsls	r4, r3, #31
 8008406:	d504      	bpl.n	8008412 <_vfiprintf_r+0x4e>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	b01d      	add	sp, #116	; 0x74
 800840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	0598      	lsls	r0, r3, #22
 8008416:	d4f7      	bmi.n	8008408 <_vfiprintf_r+0x44>
 8008418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800841a:	f7ff feaf 	bl	800817c <__retarget_lock_release_recursive>
 800841e:	e7f3      	b.n	8008408 <_vfiprintf_r+0x44>
 8008420:	2300      	movs	r3, #0
 8008422:	9309      	str	r3, [sp, #36]	; 0x24
 8008424:	2320      	movs	r3, #32
 8008426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800842a:	f8cd 800c 	str.w	r8, [sp, #12]
 800842e:	2330      	movs	r3, #48	; 0x30
 8008430:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085e4 <_vfiprintf_r+0x220>
 8008434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008438:	f04f 0901 	mov.w	r9, #1
 800843c:	4623      	mov	r3, r4
 800843e:	469a      	mov	sl, r3
 8008440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008444:	b10a      	cbz	r2, 800844a <_vfiprintf_r+0x86>
 8008446:	2a25      	cmp	r2, #37	; 0x25
 8008448:	d1f9      	bne.n	800843e <_vfiprintf_r+0x7a>
 800844a:	ebba 0b04 	subs.w	fp, sl, r4
 800844e:	d00b      	beq.n	8008468 <_vfiprintf_r+0xa4>
 8008450:	465b      	mov	r3, fp
 8008452:	4622      	mov	r2, r4
 8008454:	4629      	mov	r1, r5
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff ffa1 	bl	800839e <__sfputs_r>
 800845c:	3001      	adds	r0, #1
 800845e:	f000 80a9 	beq.w	80085b4 <_vfiprintf_r+0x1f0>
 8008462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008464:	445a      	add	r2, fp
 8008466:	9209      	str	r2, [sp, #36]	; 0x24
 8008468:	f89a 3000 	ldrb.w	r3, [sl]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80a1 	beq.w	80085b4 <_vfiprintf_r+0x1f0>
 8008472:	2300      	movs	r3, #0
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800847c:	f10a 0a01 	add.w	sl, sl, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008488:	931a      	str	r3, [sp, #104]	; 0x68
 800848a:	4654      	mov	r4, sl
 800848c:	2205      	movs	r2, #5
 800848e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008492:	4854      	ldr	r0, [pc, #336]	; (80085e4 <_vfiprintf_r+0x220>)
 8008494:	f7f7 feac 	bl	80001f0 <memchr>
 8008498:	9a04      	ldr	r2, [sp, #16]
 800849a:	b9d8      	cbnz	r0, 80084d4 <_vfiprintf_r+0x110>
 800849c:	06d1      	lsls	r1, r2, #27
 800849e:	bf44      	itt	mi
 80084a0:	2320      	movmi	r3, #32
 80084a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a6:	0713      	lsls	r3, r2, #28
 80084a8:	bf44      	itt	mi
 80084aa:	232b      	movmi	r3, #43	; 0x2b
 80084ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b0:	f89a 3000 	ldrb.w	r3, [sl]
 80084b4:	2b2a      	cmp	r3, #42	; 0x2a
 80084b6:	d015      	beq.n	80084e4 <_vfiprintf_r+0x120>
 80084b8:	9a07      	ldr	r2, [sp, #28]
 80084ba:	4654      	mov	r4, sl
 80084bc:	2000      	movs	r0, #0
 80084be:	f04f 0c0a 	mov.w	ip, #10
 80084c2:	4621      	mov	r1, r4
 80084c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c8:	3b30      	subs	r3, #48	; 0x30
 80084ca:	2b09      	cmp	r3, #9
 80084cc:	d94d      	bls.n	800856a <_vfiprintf_r+0x1a6>
 80084ce:	b1b0      	cbz	r0, 80084fe <_vfiprintf_r+0x13a>
 80084d0:	9207      	str	r2, [sp, #28]
 80084d2:	e014      	b.n	80084fe <_vfiprintf_r+0x13a>
 80084d4:	eba0 0308 	sub.w	r3, r0, r8
 80084d8:	fa09 f303 	lsl.w	r3, r9, r3
 80084dc:	4313      	orrs	r3, r2
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	46a2      	mov	sl, r4
 80084e2:	e7d2      	b.n	800848a <_vfiprintf_r+0xc6>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d19      	adds	r1, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9103      	str	r1, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfbb      	ittet	lt
 80084f0:	425b      	neglt	r3, r3
 80084f2:	f042 0202 	orrlt.w	r2, r2, #2
 80084f6:	9307      	strge	r3, [sp, #28]
 80084f8:	9307      	strlt	r3, [sp, #28]
 80084fa:	bfb8      	it	lt
 80084fc:	9204      	strlt	r2, [sp, #16]
 80084fe:	7823      	ldrb	r3, [r4, #0]
 8008500:	2b2e      	cmp	r3, #46	; 0x2e
 8008502:	d10c      	bne.n	800851e <_vfiprintf_r+0x15a>
 8008504:	7863      	ldrb	r3, [r4, #1]
 8008506:	2b2a      	cmp	r3, #42	; 0x2a
 8008508:	d134      	bne.n	8008574 <_vfiprintf_r+0x1b0>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	1d1a      	adds	r2, r3, #4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	9203      	str	r2, [sp, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfb8      	it	lt
 8008516:	f04f 33ff 	movlt.w	r3, #4294967295
 800851a:	3402      	adds	r4, #2
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085f4 <_vfiprintf_r+0x230>
 8008522:	7821      	ldrb	r1, [r4, #0]
 8008524:	2203      	movs	r2, #3
 8008526:	4650      	mov	r0, sl
 8008528:	f7f7 fe62 	bl	80001f0 <memchr>
 800852c:	b138      	cbz	r0, 800853e <_vfiprintf_r+0x17a>
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	eba0 000a 	sub.w	r0, r0, sl
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	4082      	lsls	r2, r0
 8008538:	4313      	orrs	r3, r2
 800853a:	3401      	adds	r4, #1
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008542:	4829      	ldr	r0, [pc, #164]	; (80085e8 <_vfiprintf_r+0x224>)
 8008544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008548:	2206      	movs	r2, #6
 800854a:	f7f7 fe51 	bl	80001f0 <memchr>
 800854e:	2800      	cmp	r0, #0
 8008550:	d03f      	beq.n	80085d2 <_vfiprintf_r+0x20e>
 8008552:	4b26      	ldr	r3, [pc, #152]	; (80085ec <_vfiprintf_r+0x228>)
 8008554:	bb1b      	cbnz	r3, 800859e <_vfiprintf_r+0x1da>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	3307      	adds	r3, #7
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	3308      	adds	r3, #8
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	443b      	add	r3, r7
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	e768      	b.n	800843c <_vfiprintf_r+0x78>
 800856a:	fb0c 3202 	mla	r2, ip, r2, r3
 800856e:	460c      	mov	r4, r1
 8008570:	2001      	movs	r0, #1
 8008572:	e7a6      	b.n	80084c2 <_vfiprintf_r+0xfe>
 8008574:	2300      	movs	r3, #0
 8008576:	3401      	adds	r4, #1
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	4619      	mov	r1, r3
 800857c:	f04f 0c0a 	mov.w	ip, #10
 8008580:	4620      	mov	r0, r4
 8008582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008586:	3a30      	subs	r2, #48	; 0x30
 8008588:	2a09      	cmp	r2, #9
 800858a:	d903      	bls.n	8008594 <_vfiprintf_r+0x1d0>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0c6      	beq.n	800851e <_vfiprintf_r+0x15a>
 8008590:	9105      	str	r1, [sp, #20]
 8008592:	e7c4      	b.n	800851e <_vfiprintf_r+0x15a>
 8008594:	fb0c 2101 	mla	r1, ip, r1, r2
 8008598:	4604      	mov	r4, r0
 800859a:	2301      	movs	r3, #1
 800859c:	e7f0      	b.n	8008580 <_vfiprintf_r+0x1bc>
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <_vfiprintf_r+0x22c>)
 80085a6:	a904      	add	r1, sp, #16
 80085a8:	4630      	mov	r0, r6
 80085aa:	f3af 8000 	nop.w
 80085ae:	4607      	mov	r7, r0
 80085b0:	1c78      	adds	r0, r7, #1
 80085b2:	d1d6      	bne.n	8008562 <_vfiprintf_r+0x19e>
 80085b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d405      	bmi.n	80085c6 <_vfiprintf_r+0x202>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_vfiprintf_r+0x202>
 80085c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085c2:	f7ff fddb 	bl	800817c <__retarget_lock_release_recursive>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	065b      	lsls	r3, r3, #25
 80085ca:	f53f af1d 	bmi.w	8008408 <_vfiprintf_r+0x44>
 80085ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d0:	e71c      	b.n	800840c <_vfiprintf_r+0x48>
 80085d2:	ab03      	add	r3, sp, #12
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	462a      	mov	r2, r5
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <_vfiprintf_r+0x22c>)
 80085da:	a904      	add	r1, sp, #16
 80085dc:	4630      	mov	r0, r6
 80085de:	f000 f879 	bl	80086d4 <_printf_i>
 80085e2:	e7e4      	b.n	80085ae <_vfiprintf_r+0x1ea>
 80085e4:	08008c94 	.word	0x08008c94
 80085e8:	08008c9e 	.word	0x08008c9e
 80085ec:	00000000 	.word	0x00000000
 80085f0:	0800839f 	.word	0x0800839f
 80085f4:	08008c9a 	.word	0x08008c9a

080085f8 <_printf_common>:
 80085f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	4616      	mov	r6, r2
 80085fe:	4699      	mov	r9, r3
 8008600:	688a      	ldr	r2, [r1, #8]
 8008602:	690b      	ldr	r3, [r1, #16]
 8008604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008608:	4293      	cmp	r3, r2
 800860a:	bfb8      	it	lt
 800860c:	4613      	movlt	r3, r2
 800860e:	6033      	str	r3, [r6, #0]
 8008610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008614:	4607      	mov	r7, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b10a      	cbz	r2, 800861e <_printf_common+0x26>
 800861a:	3301      	adds	r3, #1
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	0699      	lsls	r1, r3, #26
 8008622:	bf42      	ittt	mi
 8008624:	6833      	ldrmi	r3, [r6, #0]
 8008626:	3302      	addmi	r3, #2
 8008628:	6033      	strmi	r3, [r6, #0]
 800862a:	6825      	ldr	r5, [r4, #0]
 800862c:	f015 0506 	ands.w	r5, r5, #6
 8008630:	d106      	bne.n	8008640 <_printf_common+0x48>
 8008632:	f104 0a19 	add.w	sl, r4, #25
 8008636:	68e3      	ldr	r3, [r4, #12]
 8008638:	6832      	ldr	r2, [r6, #0]
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	42ab      	cmp	r3, r5
 800863e:	dc26      	bgt.n	800868e <_printf_common+0x96>
 8008640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008644:	1e13      	subs	r3, r2, #0
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	bf18      	it	ne
 800864a:	2301      	movne	r3, #1
 800864c:	0692      	lsls	r2, r2, #26
 800864e:	d42b      	bmi.n	80086a8 <_printf_common+0xb0>
 8008650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008654:	4649      	mov	r1, r9
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	3001      	adds	r0, #1
 800865c:	d01e      	beq.n	800869c <_printf_common+0xa4>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	6922      	ldr	r2, [r4, #16]
 8008662:	f003 0306 	and.w	r3, r3, #6
 8008666:	2b04      	cmp	r3, #4
 8008668:	bf02      	ittt	eq
 800866a:	68e5      	ldreq	r5, [r4, #12]
 800866c:	6833      	ldreq	r3, [r6, #0]
 800866e:	1aed      	subeq	r5, r5, r3
 8008670:	68a3      	ldr	r3, [r4, #8]
 8008672:	bf0c      	ite	eq
 8008674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008678:	2500      	movne	r5, #0
 800867a:	4293      	cmp	r3, r2
 800867c:	bfc4      	itt	gt
 800867e:	1a9b      	subgt	r3, r3, r2
 8008680:	18ed      	addgt	r5, r5, r3
 8008682:	2600      	movs	r6, #0
 8008684:	341a      	adds	r4, #26
 8008686:	42b5      	cmp	r5, r6
 8008688:	d11a      	bne.n	80086c0 <_printf_common+0xc8>
 800868a:	2000      	movs	r0, #0
 800868c:	e008      	b.n	80086a0 <_printf_common+0xa8>
 800868e:	2301      	movs	r3, #1
 8008690:	4652      	mov	r2, sl
 8008692:	4649      	mov	r1, r9
 8008694:	4638      	mov	r0, r7
 8008696:	47c0      	blx	r8
 8008698:	3001      	adds	r0, #1
 800869a:	d103      	bne.n	80086a4 <_printf_common+0xac>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a4:	3501      	adds	r5, #1
 80086a6:	e7c6      	b.n	8008636 <_printf_common+0x3e>
 80086a8:	18e1      	adds	r1, r4, r3
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	2030      	movs	r0, #48	; 0x30
 80086ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086b2:	4422      	add	r2, r4
 80086b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086bc:	3302      	adds	r3, #2
 80086be:	e7c7      	b.n	8008650 <_printf_common+0x58>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4622      	mov	r2, r4
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d0e6      	beq.n	800869c <_printf_common+0xa4>
 80086ce:	3601      	adds	r6, #1
 80086d0:	e7d9      	b.n	8008686 <_printf_common+0x8e>
	...

080086d4 <_printf_i>:
 80086d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	7e0f      	ldrb	r7, [r1, #24]
 80086da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086dc:	2f78      	cmp	r7, #120	; 0x78
 80086de:	4691      	mov	r9, r2
 80086e0:	4680      	mov	r8, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	469a      	mov	sl, r3
 80086e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ea:	d807      	bhi.n	80086fc <_printf_i+0x28>
 80086ec:	2f62      	cmp	r7, #98	; 0x62
 80086ee:	d80a      	bhi.n	8008706 <_printf_i+0x32>
 80086f0:	2f00      	cmp	r7, #0
 80086f2:	f000 80d4 	beq.w	800889e <_printf_i+0x1ca>
 80086f6:	2f58      	cmp	r7, #88	; 0x58
 80086f8:	f000 80c0 	beq.w	800887c <_printf_i+0x1a8>
 80086fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008704:	e03a      	b.n	800877c <_printf_i+0xa8>
 8008706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800870a:	2b15      	cmp	r3, #21
 800870c:	d8f6      	bhi.n	80086fc <_printf_i+0x28>
 800870e:	a101      	add	r1, pc, #4	; (adr r1, 8008714 <_printf_i+0x40>)
 8008710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008714:	0800876d 	.word	0x0800876d
 8008718:	08008781 	.word	0x08008781
 800871c:	080086fd 	.word	0x080086fd
 8008720:	080086fd 	.word	0x080086fd
 8008724:	080086fd 	.word	0x080086fd
 8008728:	080086fd 	.word	0x080086fd
 800872c:	08008781 	.word	0x08008781
 8008730:	080086fd 	.word	0x080086fd
 8008734:	080086fd 	.word	0x080086fd
 8008738:	080086fd 	.word	0x080086fd
 800873c:	080086fd 	.word	0x080086fd
 8008740:	08008885 	.word	0x08008885
 8008744:	080087ad 	.word	0x080087ad
 8008748:	0800883f 	.word	0x0800883f
 800874c:	080086fd 	.word	0x080086fd
 8008750:	080086fd 	.word	0x080086fd
 8008754:	080088a7 	.word	0x080088a7
 8008758:	080086fd 	.word	0x080086fd
 800875c:	080087ad 	.word	0x080087ad
 8008760:	080086fd 	.word	0x080086fd
 8008764:	080086fd 	.word	0x080086fd
 8008768:	08008847 	.word	0x08008847
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	602a      	str	r2, [r5, #0]
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800877c:	2301      	movs	r3, #1
 800877e:	e09f      	b.n	80088c0 <_printf_i+0x1ec>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	0607      	lsls	r7, r0, #24
 8008786:	f103 0104 	add.w	r1, r3, #4
 800878a:	6029      	str	r1, [r5, #0]
 800878c:	d501      	bpl.n	8008792 <_printf_i+0xbe>
 800878e:	681e      	ldr	r6, [r3, #0]
 8008790:	e003      	b.n	800879a <_printf_i+0xc6>
 8008792:	0646      	lsls	r6, r0, #25
 8008794:	d5fb      	bpl.n	800878e <_printf_i+0xba>
 8008796:	f9b3 6000 	ldrsh.w	r6, [r3]
 800879a:	2e00      	cmp	r6, #0
 800879c:	da03      	bge.n	80087a6 <_printf_i+0xd2>
 800879e:	232d      	movs	r3, #45	; 0x2d
 80087a0:	4276      	negs	r6, r6
 80087a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a6:	485a      	ldr	r0, [pc, #360]	; (8008910 <_printf_i+0x23c>)
 80087a8:	230a      	movs	r3, #10
 80087aa:	e012      	b.n	80087d2 <_printf_i+0xfe>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	6820      	ldr	r0, [r4, #0]
 80087b0:	1d19      	adds	r1, r3, #4
 80087b2:	6029      	str	r1, [r5, #0]
 80087b4:	0605      	lsls	r5, r0, #24
 80087b6:	d501      	bpl.n	80087bc <_printf_i+0xe8>
 80087b8:	681e      	ldr	r6, [r3, #0]
 80087ba:	e002      	b.n	80087c2 <_printf_i+0xee>
 80087bc:	0641      	lsls	r1, r0, #25
 80087be:	d5fb      	bpl.n	80087b8 <_printf_i+0xe4>
 80087c0:	881e      	ldrh	r6, [r3, #0]
 80087c2:	4853      	ldr	r0, [pc, #332]	; (8008910 <_printf_i+0x23c>)
 80087c4:	2f6f      	cmp	r7, #111	; 0x6f
 80087c6:	bf0c      	ite	eq
 80087c8:	2308      	moveq	r3, #8
 80087ca:	230a      	movne	r3, #10
 80087cc:	2100      	movs	r1, #0
 80087ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087d2:	6865      	ldr	r5, [r4, #4]
 80087d4:	60a5      	str	r5, [r4, #8]
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	bfa2      	ittt	ge
 80087da:	6821      	ldrge	r1, [r4, #0]
 80087dc:	f021 0104 	bicge.w	r1, r1, #4
 80087e0:	6021      	strge	r1, [r4, #0]
 80087e2:	b90e      	cbnz	r6, 80087e8 <_printf_i+0x114>
 80087e4:	2d00      	cmp	r5, #0
 80087e6:	d04b      	beq.n	8008880 <_printf_i+0x1ac>
 80087e8:	4615      	mov	r5, r2
 80087ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80087ee:	fb03 6711 	mls	r7, r3, r1, r6
 80087f2:	5dc7      	ldrb	r7, [r0, r7]
 80087f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087f8:	4637      	mov	r7, r6
 80087fa:	42bb      	cmp	r3, r7
 80087fc:	460e      	mov	r6, r1
 80087fe:	d9f4      	bls.n	80087ea <_printf_i+0x116>
 8008800:	2b08      	cmp	r3, #8
 8008802:	d10b      	bne.n	800881c <_printf_i+0x148>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	07de      	lsls	r6, r3, #31
 8008808:	d508      	bpl.n	800881c <_printf_i+0x148>
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	4299      	cmp	r1, r3
 8008810:	bfde      	ittt	le
 8008812:	2330      	movle	r3, #48	; 0x30
 8008814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008818:	f105 35ff 	addle.w	r5, r5, #4294967295
 800881c:	1b52      	subs	r2, r2, r5
 800881e:	6122      	str	r2, [r4, #16]
 8008820:	f8cd a000 	str.w	sl, [sp]
 8008824:	464b      	mov	r3, r9
 8008826:	aa03      	add	r2, sp, #12
 8008828:	4621      	mov	r1, r4
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff fee4 	bl	80085f8 <_printf_common>
 8008830:	3001      	adds	r0, #1
 8008832:	d14a      	bne.n	80088ca <_printf_i+0x1f6>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b004      	add	sp, #16
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	4833      	ldr	r0, [pc, #204]	; (8008914 <_printf_i+0x240>)
 8008848:	2778      	movs	r7, #120	; 0x78
 800884a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6829      	ldr	r1, [r5, #0]
 8008852:	061f      	lsls	r7, r3, #24
 8008854:	f851 6b04 	ldr.w	r6, [r1], #4
 8008858:	d402      	bmi.n	8008860 <_printf_i+0x18c>
 800885a:	065f      	lsls	r7, r3, #25
 800885c:	bf48      	it	mi
 800885e:	b2b6      	uxthmi	r6, r6
 8008860:	07df      	lsls	r7, r3, #31
 8008862:	bf48      	it	mi
 8008864:	f043 0320 	orrmi.w	r3, r3, #32
 8008868:	6029      	str	r1, [r5, #0]
 800886a:	bf48      	it	mi
 800886c:	6023      	strmi	r3, [r4, #0]
 800886e:	b91e      	cbnz	r6, 8008878 <_printf_i+0x1a4>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	f023 0320 	bic.w	r3, r3, #32
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	2310      	movs	r3, #16
 800887a:	e7a7      	b.n	80087cc <_printf_i+0xf8>
 800887c:	4824      	ldr	r0, [pc, #144]	; (8008910 <_printf_i+0x23c>)
 800887e:	e7e4      	b.n	800884a <_printf_i+0x176>
 8008880:	4615      	mov	r5, r2
 8008882:	e7bd      	b.n	8008800 <_printf_i+0x12c>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	6826      	ldr	r6, [r4, #0]
 8008888:	6961      	ldr	r1, [r4, #20]
 800888a:	1d18      	adds	r0, r3, #4
 800888c:	6028      	str	r0, [r5, #0]
 800888e:	0635      	lsls	r5, r6, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	d501      	bpl.n	8008898 <_printf_i+0x1c4>
 8008894:	6019      	str	r1, [r3, #0]
 8008896:	e002      	b.n	800889e <_printf_i+0x1ca>
 8008898:	0670      	lsls	r0, r6, #25
 800889a:	d5fb      	bpl.n	8008894 <_printf_i+0x1c0>
 800889c:	8019      	strh	r1, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	6123      	str	r3, [r4, #16]
 80088a2:	4615      	mov	r5, r2
 80088a4:	e7bc      	b.n	8008820 <_printf_i+0x14c>
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	602a      	str	r2, [r5, #0]
 80088ac:	681d      	ldr	r5, [r3, #0]
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4628      	mov	r0, r5
 80088b4:	f7f7 fc9c 	bl	80001f0 <memchr>
 80088b8:	b108      	cbz	r0, 80088be <_printf_i+0x1ea>
 80088ba:	1b40      	subs	r0, r0, r5
 80088bc:	6060      	str	r0, [r4, #4]
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	2300      	movs	r3, #0
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c8:	e7aa      	b.n	8008820 <_printf_i+0x14c>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	462a      	mov	r2, r5
 80088ce:	4649      	mov	r1, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	47d0      	blx	sl
 80088d4:	3001      	adds	r0, #1
 80088d6:	d0ad      	beq.n	8008834 <_printf_i+0x160>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	079b      	lsls	r3, r3, #30
 80088dc:	d413      	bmi.n	8008906 <_printf_i+0x232>
 80088de:	68e0      	ldr	r0, [r4, #12]
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	4298      	cmp	r0, r3
 80088e4:	bfb8      	it	lt
 80088e6:	4618      	movlt	r0, r3
 80088e8:	e7a6      	b.n	8008838 <_printf_i+0x164>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4632      	mov	r2, r6
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d09d      	beq.n	8008834 <_printf_i+0x160>
 80088f8:	3501      	adds	r5, #1
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	9903      	ldr	r1, [sp, #12]
 80088fe:	1a5b      	subs	r3, r3, r1
 8008900:	42ab      	cmp	r3, r5
 8008902:	dcf2      	bgt.n	80088ea <_printf_i+0x216>
 8008904:	e7eb      	b.n	80088de <_printf_i+0x20a>
 8008906:	2500      	movs	r5, #0
 8008908:	f104 0619 	add.w	r6, r4, #25
 800890c:	e7f5      	b.n	80088fa <_printf_i+0x226>
 800890e:	bf00      	nop
 8008910:	08008ca5 	.word	0x08008ca5
 8008914:	08008cb6 	.word	0x08008cb6

08008918 <__sflush_r>:
 8008918:	898a      	ldrh	r2, [r1, #12]
 800891a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	4605      	mov	r5, r0
 8008920:	0710      	lsls	r0, r2, #28
 8008922:	460c      	mov	r4, r1
 8008924:	d458      	bmi.n	80089d8 <__sflush_r+0xc0>
 8008926:	684b      	ldr	r3, [r1, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	dc05      	bgt.n	8008938 <__sflush_r+0x20>
 800892c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	dc02      	bgt.n	8008938 <__sflush_r+0x20>
 8008932:	2000      	movs	r0, #0
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800893a:	2e00      	cmp	r6, #0
 800893c:	d0f9      	beq.n	8008932 <__sflush_r+0x1a>
 800893e:	2300      	movs	r3, #0
 8008940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008944:	682f      	ldr	r7, [r5, #0]
 8008946:	6a21      	ldr	r1, [r4, #32]
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	d032      	beq.n	80089b2 <__sflush_r+0x9a>
 800894c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	075a      	lsls	r2, r3, #29
 8008952:	d505      	bpl.n	8008960 <__sflush_r+0x48>
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	1ac0      	subs	r0, r0, r3
 8008958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800895a:	b10b      	cbz	r3, 8008960 <__sflush_r+0x48>
 800895c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800895e:	1ac0      	subs	r0, r0, r3
 8008960:	2300      	movs	r3, #0
 8008962:	4602      	mov	r2, r0
 8008964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	4628      	mov	r0, r5
 800896a:	47b0      	blx	r6
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	d106      	bne.n	8008980 <__sflush_r+0x68>
 8008972:	6829      	ldr	r1, [r5, #0]
 8008974:	291d      	cmp	r1, #29
 8008976:	d82b      	bhi.n	80089d0 <__sflush_r+0xb8>
 8008978:	4a29      	ldr	r2, [pc, #164]	; (8008a20 <__sflush_r+0x108>)
 800897a:	410a      	asrs	r2, r1
 800897c:	07d6      	lsls	r6, r2, #31
 800897e:	d427      	bmi.n	80089d0 <__sflush_r+0xb8>
 8008980:	2200      	movs	r2, #0
 8008982:	6062      	str	r2, [r4, #4]
 8008984:	04d9      	lsls	r1, r3, #19
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	6022      	str	r2, [r4, #0]
 800898a:	d504      	bpl.n	8008996 <__sflush_r+0x7e>
 800898c:	1c42      	adds	r2, r0, #1
 800898e:	d101      	bne.n	8008994 <__sflush_r+0x7c>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b903      	cbnz	r3, 8008996 <__sflush_r+0x7e>
 8008994:	6560      	str	r0, [r4, #84]	; 0x54
 8008996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008998:	602f      	str	r7, [r5, #0]
 800899a:	2900      	cmp	r1, #0
 800899c:	d0c9      	beq.n	8008932 <__sflush_r+0x1a>
 800899e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a2:	4299      	cmp	r1, r3
 80089a4:	d002      	beq.n	80089ac <__sflush_r+0x94>
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7ff fbea 	bl	8008180 <_free_r>
 80089ac:	2000      	movs	r0, #0
 80089ae:	6360      	str	r0, [r4, #52]	; 0x34
 80089b0:	e7c0      	b.n	8008934 <__sflush_r+0x1c>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b0      	blx	r6
 80089b8:	1c41      	adds	r1, r0, #1
 80089ba:	d1c8      	bne.n	800894e <__sflush_r+0x36>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0c5      	beq.n	800894e <__sflush_r+0x36>
 80089c2:	2b1d      	cmp	r3, #29
 80089c4:	d001      	beq.n	80089ca <__sflush_r+0xb2>
 80089c6:	2b16      	cmp	r3, #22
 80089c8:	d101      	bne.n	80089ce <__sflush_r+0xb6>
 80089ca:	602f      	str	r7, [r5, #0]
 80089cc:	e7b1      	b.n	8008932 <__sflush_r+0x1a>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	e7ad      	b.n	8008934 <__sflush_r+0x1c>
 80089d8:	690f      	ldr	r7, [r1, #16]
 80089da:	2f00      	cmp	r7, #0
 80089dc:	d0a9      	beq.n	8008932 <__sflush_r+0x1a>
 80089de:	0793      	lsls	r3, r2, #30
 80089e0:	680e      	ldr	r6, [r1, #0]
 80089e2:	bf08      	it	eq
 80089e4:	694b      	ldreq	r3, [r1, #20]
 80089e6:	600f      	str	r7, [r1, #0]
 80089e8:	bf18      	it	ne
 80089ea:	2300      	movne	r3, #0
 80089ec:	eba6 0807 	sub.w	r8, r6, r7
 80089f0:	608b      	str	r3, [r1, #8]
 80089f2:	f1b8 0f00 	cmp.w	r8, #0
 80089f6:	dd9c      	ble.n	8008932 <__sflush_r+0x1a>
 80089f8:	6a21      	ldr	r1, [r4, #32]
 80089fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089fc:	4643      	mov	r3, r8
 80089fe:	463a      	mov	r2, r7
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b0      	blx	r6
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dc06      	bgt.n	8008a16 <__sflush_r+0xfe>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295
 8008a14:	e78e      	b.n	8008934 <__sflush_r+0x1c>
 8008a16:	4407      	add	r7, r0
 8008a18:	eba8 0800 	sub.w	r8, r8, r0
 8008a1c:	e7e9      	b.n	80089f2 <__sflush_r+0xda>
 8008a1e:	bf00      	nop
 8008a20:	dfbffffe 	.word	0xdfbffffe

08008a24 <_fflush_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	690b      	ldr	r3, [r1, #16]
 8008a28:	4605      	mov	r5, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	b913      	cbnz	r3, 8008a34 <_fflush_r+0x10>
 8008a2e:	2500      	movs	r5, #0
 8008a30:	4628      	mov	r0, r5
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	b118      	cbz	r0, 8008a3e <_fflush_r+0x1a>
 8008a36:	6a03      	ldr	r3, [r0, #32]
 8008a38:	b90b      	cbnz	r3, 8008a3e <_fflush_r+0x1a>
 8008a3a:	f7ff f9a9 	bl	8007d90 <__sinit>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f3      	beq.n	8008a2e <_fflush_r+0xa>
 8008a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a48:	07d0      	lsls	r0, r2, #31
 8008a4a:	d404      	bmi.n	8008a56 <_fflush_r+0x32>
 8008a4c:	0599      	lsls	r1, r3, #22
 8008a4e:	d402      	bmi.n	8008a56 <_fflush_r+0x32>
 8008a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a52:	f7ff fb92 	bl	800817a <__retarget_lock_acquire_recursive>
 8008a56:	4628      	mov	r0, r5
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f7ff ff5d 	bl	8008918 <__sflush_r>
 8008a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a60:	07da      	lsls	r2, r3, #31
 8008a62:	4605      	mov	r5, r0
 8008a64:	d4e4      	bmi.n	8008a30 <_fflush_r+0xc>
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	059b      	lsls	r3, r3, #22
 8008a6a:	d4e1      	bmi.n	8008a30 <_fflush_r+0xc>
 8008a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6e:	f7ff fb85 	bl	800817c <__retarget_lock_release_recursive>
 8008a72:	e7dd      	b.n	8008a30 <_fflush_r+0xc>

08008a74 <__swhatbuf_r>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	460c      	mov	r4, r1
 8008a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	b096      	sub	sp, #88	; 0x58
 8008a80:	4615      	mov	r5, r2
 8008a82:	461e      	mov	r6, r3
 8008a84:	da0d      	bge.n	8008aa2 <__swhatbuf_r+0x2e>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a8c:	f04f 0100 	mov.w	r1, #0
 8008a90:	bf0c      	ite	eq
 8008a92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a96:	2340      	movne	r3, #64	; 0x40
 8008a98:	2000      	movs	r0, #0
 8008a9a:	6031      	str	r1, [r6, #0]
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	b016      	add	sp, #88	; 0x58
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	466a      	mov	r2, sp
 8008aa4:	f000 f848 	bl	8008b38 <_fstat_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	dbec      	blt.n	8008a86 <__swhatbuf_r+0x12>
 8008aac:	9901      	ldr	r1, [sp, #4]
 8008aae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ab2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ab6:	4259      	negs	r1, r3
 8008ab8:	4159      	adcs	r1, r3
 8008aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008abe:	e7eb      	b.n	8008a98 <__swhatbuf_r+0x24>

08008ac0 <__smakebuf_r>:
 8008ac0:	898b      	ldrh	r3, [r1, #12]
 8008ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ac4:	079d      	lsls	r5, r3, #30
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460c      	mov	r4, r1
 8008aca:	d507      	bpl.n	8008adc <__smakebuf_r+0x1c>
 8008acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	6123      	str	r3, [r4, #16]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	6163      	str	r3, [r4, #20]
 8008ad8:	b002      	add	sp, #8
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	ab01      	add	r3, sp, #4
 8008ade:	466a      	mov	r2, sp
 8008ae0:	f7ff ffc8 	bl	8008a74 <__swhatbuf_r>
 8008ae4:	9900      	ldr	r1, [sp, #0]
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fbb5 	bl	8008258 <_malloc_r>
 8008aee:	b948      	cbnz	r0, 8008b04 <__smakebuf_r+0x44>
 8008af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d4ef      	bmi.n	8008ad8 <__smakebuf_r+0x18>
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	e7e3      	b.n	8008acc <__smakebuf_r+0xc>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	6020      	str	r0, [r4, #0]
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	6163      	str	r3, [r4, #20]
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	6120      	str	r0, [r4, #16]
 8008b16:	b15b      	cbz	r3, 8008b30 <__smakebuf_r+0x70>
 8008b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 f81d 	bl	8008b5c <_isatty_r>
 8008b22:	b128      	cbz	r0, 8008b30 <__smakebuf_r+0x70>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	431d      	orrs	r5, r3
 8008b34:	81a5      	strh	r5, [r4, #12]
 8008b36:	e7cf      	b.n	8008ad8 <__smakebuf_r+0x18>

08008b38 <_fstat_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	; (8008b58 <_fstat_r+0x20>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f7f8 ffca 	bl	8001ade <_fstat>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d102      	bne.n	8008b54 <_fstat_r+0x1c>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	b103      	cbz	r3, 8008b54 <_fstat_r+0x1c>
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	20000c7c 	.word	0x20000c7c

08008b5c <_isatty_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d06      	ldr	r5, [pc, #24]	; (8008b78 <_isatty_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7f8 ffc9 	bl	8001afe <_isatty>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_isatty_r+0x1a>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_isatty_r+0x1a>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000c7c 	.word	0x20000c7c

08008b7c <_sbrk_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d06      	ldr	r5, [pc, #24]	; (8008b98 <_sbrk_r+0x1c>)
 8008b80:	2300      	movs	r3, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	f7f8 ffd2 	bl	8001b30 <_sbrk>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_sbrk_r+0x1a>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_sbrk_r+0x1a>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	20000c7c 	.word	0x20000c7c

08008b9c <_init>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr

08008ba8 <_fini>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr
