
11.DOTMATRIX_STEPMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007d24  08007d24  00017d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020194  2**0
                  CONTENTS
 10 .bss          00000d78  20000194  20000194  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f0c  20000f0c  00020194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001aaf2  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003630  00000000  00000000  0003acf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001748  00000000  00000000  0003e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000124a  00000000  00000000  0003fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000437d  00000000  00000000  00040cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c887  00000000  00000000  0004503f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed8cb  00000000  00000000  000618c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000069f0  00000000  00000000  0014f194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00155b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000194 	.word	0x20000194
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007d0c 	.word	0x08007d0c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000198 	.word	0x20000198
 80001e8:	08007d0c 	.word	0x08007d0c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e00f      	b.n	8000514 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	4613      	mov	r3, r2
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4413      	add	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4a27      	ldr	r2, [pc, #156]	; (800059c <init_dotmatrix+0xb4>)
 8000500:	4413      	add	r3, r2
 8000502:	b2d9      	uxtb	r1, r3
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <init_dotmatrix+0xb8>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3301      	adds	r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b07      	cmp	r3, #7
 8000518:	ddec      	ble.n	80004f4 <init_dotmatrix+0xc>
	}
	for (int i=1; i < number_of_character+1; i++)
 800051a:	2301      	movs	r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	e01e      	b.n	800055e <init_dotmatrix+0x76>
	{
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e015      	b.n	8000552 <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	491c      	ldr	r1, [pc, #112]	; (800059c <init_dotmatrix+0xb4>)
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	18ca      	adds	r2, r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	7819      	ldrb	r1, [r3, #0]
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <init_dotmatrix+0xbc>)
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	441a      	add	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	460a      	mov	r2, r1
 800054a:	701a      	strb	r2, [r3, #0]
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b07      	cmp	r3, #7
 8000556:	dde6      	ble.n	8000526 <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	3301      	adds	r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <init_dotmatrix+0xc0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	429a      	cmp	r2, r3
 8000566:	dddb      	ble.n	8000520 <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i < 8; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	e00e      	b.n	800058c <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // led all off
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <init_dotmatrix+0xc4>)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <init_dotmatrix+0xc8>)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	f002 fb37 	bl	8002bf4 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b07      	cmp	r3, #7
 8000590:	dded      	ble.n	800056e <init_dotmatrix+0x86>
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000060 	.word	0x20000060
 80005a0:	200001b0 	.word	0x200001b0
 80005a4:	200001b8 	.word	0x200001b8
 80005a8:	20000128 	.word	0x20000128
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000050 	.word	0x20000050

080005b4 <write_column_data>:
void write_column_data(int col)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 8; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e01f      	b.n	8000602 <write_column_data+0x4e>
		if (i == col)
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
#else
//---------- common 캐소우드 방식
		if (i == col)
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d10c      	bne.n	80005e4 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // on
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <write_column_data+0x60>)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <write_column_data+0x64>)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f002 fb09 	bl	8002bf4 <HAL_GPIO_WritePin>
 80005e2:	e00b      	b.n	80005fc <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // off
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <write_column_data+0x60>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <write_column_data+0x64>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fafc 	bl	8002bf4 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b07      	cmp	r3, #7
 8000606:	dddc      	ble.n	80005c2 <write_column_data+0xe>
#endif
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	20000050 	.word	0x20000050

0800061c <write_row_data>:
// 0b00111110
void write_row_data(unsigned char data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d = data;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	72fb      	strb	r3, [r7, #11]

	for(int i=0; i < 8; i++)
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e023      	b.n	8000678 <write_row_data+0x5c>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
#else
//-common 캐소우드
		if ( d & (1 << i))   // 1인경우
 8000630:	7afa      	ldrb	r2, [r7, #11]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	fa42 f303 	asr.w	r3, r2, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00c      	beq.n	800065a <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <write_row_data+0x6c>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <write_row_data+0x70>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	f002 face 	bl	8002bf4 <HAL_GPIO_WritePin>
 8000658:	e00b      	b.n	8000672 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <write_row_data+0x6c>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <write_row_data+0x70>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f002 fac1 	bl	8002bf4 <HAL_GPIO_WritePin>
	for(int i=0; i < 8; i++)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b07      	cmp	r3, #7
 800067c:	ddd8      	ble.n	8000630 <write_row_data+0x14>
#endif
	}
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000020 	.word	0x20000020
 800068c:	20000040 	.word	0x20000040

08000690 <dotmatrix_main>:
#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	static int count=0;  // 컬럼 count
	static int index=0;  // scroll_buffer의 2차원 index값
	static uint32_t past_time=0;  // 이전 tick값 저장

	init_dotmatrix();
 8000696:	f7ff ff27 	bl	80004e8 <init_dotmatrix>

	while(1)
	{
		uint32_t now = HAL_GetTick();  // 1ms
 800069a:	f001 fc03 	bl	8001ea4 <HAL_GetTick>
 800069e:	6078      	str	r0, [r7, #4]
		// 1.처음시작시 past_time=0; now: 500 --> past_time=500
		if (now - past_time >= 500) // 500ms scroll
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <dotmatrix_main+0xe8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ac:	d34d      	bcc.n	800074a <dotmatrix_main+0xba>
		{
			past_time = now;
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <dotmatrix_main+0xe8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
			for (int i=0; i < 8; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e029      	b.n	800070e <dotmatrix_main+0x7e>
			{

				display_data[i] = (scroll_buffer[index][i] >> count) |
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <dotmatrix_main+0xec>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <dotmatrix_main+0xf0>)
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	441a      	add	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <dotmatrix_main+0xf4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	fa42 f303 	asr.w	r3, r2, r3
 80006d4:	b25a      	sxtb	r2, r3
						(scroll_buffer[index+1][i] << 8 - count);
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <dotmatrix_main+0xec>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4928      	ldr	r1, [pc, #160]	; (8000780 <dotmatrix_main+0xf0>)
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4419      	add	r1, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	440b      	add	r3, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <dotmatrix_main+0xf4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1c3 0308 	rsb	r3, r3, #8
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
				display_data[i] = (scroll_buffer[index][i] >> count) |
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <dotmatrix_main+0xf8>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
			for (int i=0; i < 8; i++)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b07      	cmp	r3, #7
 8000712:	ddd2      	ble.n	80006ba <dotmatrix_main+0x2a>
			}
			if (++count == 8) // 8칼람을 다 처리 했으면 다음 scroll_buffer로 이동
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <dotmatrix_main+0xf4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <dotmatrix_main+0xf4>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <dotmatrix_main+0xf4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d111      	bne.n	800074a <dotmatrix_main+0xba>
			{
				count =0;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <dotmatrix_main+0xf4>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
				index++;  // 다음 scroll_buffer로 이동
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <dotmatrix_main+0xec>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <dotmatrix_main+0xec>)
 8000734:	6013      	str	r3, [r2, #0]
				if (index == number_of_character+1) index=0;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <dotmatrix_main+0xfc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <dotmatrix_main+0xec>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d102      	bne.n	800074a <dotmatrix_main+0xba>
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <dotmatrix_main+0xec>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
				// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
			}
		}
		for (int i=0; i < 8; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	e00f      	b.n	8000770 <dotmatrix_main+0xe0>
		{
			// 공통 양극 방식
			// column에는 0을 ROW에는 1을 출력해야 해당 LED가 on된다.
			write_column_data(i);
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f7ff ff2f 	bl	80005b4 <write_column_data>
			write_row_data(display_data[i]);
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <dotmatrix_main+0xf8>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff5c 	bl	800061c <write_row_data>
			HAL_Delay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f001 fba9 	bl	8001ebc <HAL_Delay>
		for (int i=0; i < 8; i++)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddec      	ble.n	8000750 <dotmatrix_main+0xc0>
	{
 8000776:	e790      	b.n	800069a <dotmatrix_main+0xa>
 8000778:	20000348 	.word	0x20000348
 800077c:	2000034c 	.word	0x2000034c
 8000780:	200001b8 	.word	0x200001b8
 8000784:	20000350 	.word	0x20000350
 8000788:	200001b0 	.word	0x200001b0
 800078c:	20000128 	.word	0x20000128

08000790 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_SYSTICK_Handler+0x18>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_SYSTICK_Handler+0x18>)
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	20000d40 	.word	0x20000d40

080007ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	2201      	movs	r2, #1
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <__io_putchar+0x20>)
 80007be:	f005 facc 	bl	8005d5a <HAL_UART_Transmit>

  return ch;
 80007c2:	687b      	ldr	r3, [r7, #4]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200007a0 	.word	0x200007a0

080007d0 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d109      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007ea:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007f4:	6013      	str	r3, [r2, #0]
	}
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40014400 	.word	0x40014400
 8000808:	20000d38 	.word	0x20000d38
 800080c:	20000d3c 	.word	0x20000d3c

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f001 fae0 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f856 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 fbe4 	bl	8000fe8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000820:	f000 f8be 	bl	80009a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000824:	f000 fb5e 	bl	8000ee4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000828:	f000 fbb0 	bl	8000f8c <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 800082c:	f000 fb84 	bl	8000f38 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000830:	f000 fb10 	bl	8000e54 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000834:	f000 fb32 	bl	8000e9c <MX_TIM11_Init>
  MX_TIM3_Init();
 8000838:	f000 f9f4 	bl	8000c24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800083c:	f000 fa46 	bl	8000ccc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000840:	f000 f996 	bl	8000b70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000844:	f000 f93a 	bl	8000abc <MX_RTC_Init>
  MX_TIM5_Init();
 8000848:	f000 fa8e 	bl	8000d68 <MX_TIM5_Init>
  MX_I2C1_Init();
 800084c:	f000 f8f6 	bl	8000a3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000850:	2201      	movs	r2, #1
 8000852:	4912      	ldr	r1, [pc, #72]	; (800089c <main+0x8c>)
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <main+0x90>)
 8000856:	f005 fb12 	bl	8005e7e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 800085a:	2201      	movs	r2, #1
 800085c:	4911      	ldr	r1, [pc, #68]	; (80008a4 <main+0x94>)
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <main+0x98>)
 8000860:	f005 fb0d 	bl	8005e7e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <main+0x9c>)
 8000866:	f003 fdbb 	bl	80043e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 800086a:	4811      	ldr	r0, [pc, #68]	; (80008b0 <main+0xa0>)
 800086c:	f003 fdb8 	bl	80043e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000870:	2100      	movs	r1, #0
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <main+0xa4>)
 8000874:	f004 f8a2 	bl	80049bc <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000878:	2100      	movs	r1, #0
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <main+0xa8>)
 800087c:	f003 ff38 	bl	80046f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000880:	2100      	movs	r1, #0
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <main+0xac>)
 8000884:	f003 fe6c 	bl	8004560 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000888:	210c      	movs	r1, #12
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <main+0xb0>)
 800088c:	f003 fe68 	bl	8004560 <HAL_TIM_PWM_Start>

//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <main+0xb4>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]

//stepmotor_main_test();

  dotmatrix_main();
 8000896:	f7ff fefb 	bl	8000690 <dotmatrix_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800089a:	e7fe      	b.n	800089a <main+0x8a>
 800089c:	20000d34 	.word	0x20000d34
 80008a0:	200007a0 	.word	0x200007a0
 80008a4:	20000d35 	.word	0x20000d35
 80008a8:	200007e4 	.word	0x200007e4
 80008ac:	20000710 	.word	0x20000710
 80008b0:	20000758 	.word	0x20000758
 80008b4:	20000638 	.word	0x20000638
 80008b8:	20000680 	.word	0x20000680
 80008bc:	200005f0 	.word	0x200005f0
 80008c0:	200006c8 	.word	0x200006c8
 80008c4:	20000d38 	.word	0x20000d38

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 ff62 	bl	80077a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <SystemClock_Config+0xd0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a28      	ldr	r2, [pc, #160]	; (8000998 <SystemClock_Config+0xd0>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <SystemClock_Config+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <SystemClock_Config+0xd4>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000924:	2309      	movs	r3, #9
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800092e:	2301      	movs	r3, #1
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000940:	23a8      	movs	r3, #168	; 0xa8
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000948:	2307      	movs	r3, #7
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fc69 	bl	8003228 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800095c:	f000 fc7c 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2105      	movs	r1, #5
 800097e:	4618      	mov	r0, r3
 8000980:	f002 feca 	bl	8003718 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800098a:	f000 fc65 	bl	8001258 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_ETH_Init+0x84>)
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <MX_ETH_Init+0x88>)
 80009a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009b8:	22e1      	movs	r2, #225	; 0xe1
 80009ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_ETH_Init+0x84>)
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_ETH_Init+0x8c>)
 80009d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_ETH_Init+0x84>)
 80009d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_ETH_Init+0x84>)
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <MX_ETH_Init+0x90>)
 80009e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_ETH_Init+0x84>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_ETH_Init+0x94>)
 80009e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_ETH_Init+0x84>)
 80009ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_ETH_Init+0x84>)
 80009f2:	f001 fc2b 	bl	800224c <HAL_ETH_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009fc:	f000 fc2c 	bl	8001258 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a00:	2238      	movs	r2, #56	; 0x38
 8000a02:	2100      	movs	r1, #0
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_ETH_Init+0x98>)
 8000a06:	f006 fecb 	bl	80077a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_ETH_Init+0x98>)
 8000a0c:	2221      	movs	r2, #33	; 0x21
 8000a0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_ETH_Init+0x98>)
 8000a12:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_ETH_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200004cc 	.word	0x200004cc
 8000a28:	40028000 	.word	0x40028000
 8000a2c:	20000d44 	.word	0x20000d44
 8000a30:	2000042c 	.word	0x2000042c
 8000a34:	2000038c 	.word	0x2000038c
 8000a38:	20000354 	.word	0x20000354

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a7a:	f002 f8f9 	bl	8002c70 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 fbe8 	bl	8001258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8c:	f002 fa34 	bl	8002ef8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 fbdf 	bl	8001258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9e:	f002 fa67 	bl	8002f70 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fbd6 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000057c 	.word	0x2000057c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <MX_RTC_Init+0xb0>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_RTC_Init+0xac>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ae2:	227f      	movs	r2, #127	; 0x7f
 8000ae4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_RTC_Init+0xac>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_RTC_Init+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_RTC_Init+0xac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b00:	f003 f9ea 	bl	8003ed8 <HAL_RTC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 fba5 	bl	8001258 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000b0e:	2309      	movs	r3, #9
 8000b10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000b12:	2338      	movs	r3, #56	; 0x38
 8000b14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b2a:	f003 fa4b 	bl	8003fc4 <HAL_RTC_SetTime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 fb90 	bl	8001258 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000b40:	2316      	movs	r3, #22
 8000b42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000b44:	2323      	movs	r3, #35	; 0x23
 8000b46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b50:	f003 fad2 	bl	80040f8 <HAL_RTC_SetDate>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b5a:	f000 fb7d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200005d0 	.word	0x200005d0
 8000b6c:	40002800 	.word	0x40002800

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000b9c:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bbc:	4818      	ldr	r0, [pc, #96]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000bbe:	f003 fc7f 	bl	80044c0 <HAL_TIM_PWM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bc8:	f000 fb46 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000bdc:	f004 ffe0 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000be6:	f000 fb37 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2360      	movs	r3, #96	; 0x60
 8000bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bee:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000c04:	f004 f9a6 	bl	8004f54 <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c0e:	f000 fb23 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM2_Init+0xb0>)
 8000c14:	f000 fd7e 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200005f0 	.word	0x200005f0

08000c24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <MX_TIM3_Init+0xa4>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c48:	2253      	movs	r2, #83	; 0x53
 8000c4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c66:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c68:	f003 fe58 	bl	800491c <HAL_TIM_IC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 faf1 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000c86:	f004 ff8b 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 fae2 	bl	8001258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c94:	230a      	movs	r3, #10
 8000c96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_TIM3_Init+0xa0>)
 8000cac:	f004 f8b6 	bl	8004e1c <HAL_TIM_IC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cb6:	f000 facf 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000638 	.word	0x20000638
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <MX_TIM4_Init+0x98>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000cf0:	f240 3247 	movw	r2, #839	; 0x347
 8000cf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000cfe:	2263      	movs	r2, #99	; 0x63
 8000d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000d10:	f003 fb17 	bl	8004342 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 fa9d 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000d2c:	f004 f9d4 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fa8f 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM4_Init+0x94>)
 8000d48:	f004 ff2a 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d52:	f000 fa81 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000680 	.word	0x20000680
 8000d64:	40000800 	.word	0x40000800

08000d68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <MX_TIM5_Init+0xe8>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000da0:	2233      	movs	r2, #51	; 0x33
 8000da2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000dac:	f240 128f 	movw	r2, #399	; 0x18f
 8000db0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dbe:	4823      	ldr	r0, [pc, #140]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000dc0:	f003 fabf 	bl	8004342 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000dca:	f000 fa45 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481c      	ldr	r0, [pc, #112]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000ddc:	f004 f97c 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000de6:	f000 fa37 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000dec:	f003 fb68 	bl	80044c0 <HAL_TIM_PWM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000df6:	f000 fa2f 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4619      	mov	r1, r3
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000e0a:	f004 fec9 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e14:	f000 fa20 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e18:	2360      	movs	r3, #96	; 0x60
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000e1c:	23c7      	movs	r3, #199	; 0xc7
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000e30:	f004 f890 	bl	8004f54 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000e3a:	f000 fa0d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM5_Init+0xe4>)
 8000e40:	f000 fc68 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200006c8 	.word	0x200006c8
 8000e50:	40000c00 	.word	0x40000c00

08000e54 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <MX_TIM10_Init+0x44>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e60:	22a7      	movs	r2, #167	; 0xa7
 8000e62:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e70:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM10_Init+0x40>)
 8000e80:	f003 fa5f 	bl	8004342 <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e8a:	f000 f9e5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000710 	.word	0x20000710
 8000e98:	40014400 	.word	0x40014400

08000e9c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_TIM11_Init+0x40>)
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <MX_TIM11_Init+0x44>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_TIM11_Init+0x40>)
 8000ea8:	22a7      	movs	r2, #167	; 0xa7
 8000eaa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_TIM11_Init+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <MX_TIM11_Init+0x40>)
 8000eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_TIM11_Init+0x40>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_TIM11_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM11_Init+0x40>)
 8000ec8:	f003 fa3b 	bl	8004342 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000ed2:	f000 f9c1 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000758 	.word	0x20000758
 8000ee0:	40014800 	.word	0x40014800

08000ee4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART3_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f1c:	f004 fed0 	bl	8005cc0 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f997 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200007a0 	.word	0x200007a0
 8000f34:	40004800 	.word	0x40004800

08000f38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_USART6_UART_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f70:	f004 fea6 	bl	8005cc0 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f7a:	f000 f96d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200007e4 	.word	0x200007e4
 8000f88:	40011400 	.word	0x40011400

08000f8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd0:	f002 f80d 	bl	8002fee <HAL_PCD_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 f93d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000828 	.word	0x20000828

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	4b8d      	ldr	r3, [pc, #564]	; (8001238 <MX_GPIO_Init+0x250>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a8c      	ldr	r2, [pc, #560]	; (8001238 <MX_GPIO_Init+0x250>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b8a      	ldr	r3, [pc, #552]	; (8001238 <MX_GPIO_Init+0x250>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	4b86      	ldr	r3, [pc, #536]	; (8001238 <MX_GPIO_Init+0x250>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a85      	ldr	r2, [pc, #532]	; (8001238 <MX_GPIO_Init+0x250>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b83      	ldr	r3, [pc, #524]	; (8001238 <MX_GPIO_Init+0x250>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	4b7f      	ldr	r3, [pc, #508]	; (8001238 <MX_GPIO_Init+0x250>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a7e      	ldr	r2, [pc, #504]	; (8001238 <MX_GPIO_Init+0x250>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <MX_GPIO_Init+0x250>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	4b78      	ldr	r3, [pc, #480]	; (8001238 <MX_GPIO_Init+0x250>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a77      	ldr	r2, [pc, #476]	; (8001238 <MX_GPIO_Init+0x250>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b75      	ldr	r3, [pc, #468]	; (8001238 <MX_GPIO_Init+0x250>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b71      	ldr	r3, [pc, #452]	; (8001238 <MX_GPIO_Init+0x250>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a70      	ldr	r2, [pc, #448]	; (8001238 <MX_GPIO_Init+0x250>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <MX_GPIO_Init+0x250>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <MX_GPIO_Init+0x250>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a69      	ldr	r2, [pc, #420]	; (8001238 <MX_GPIO_Init+0x250>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <MX_GPIO_Init+0x250>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b63      	ldr	r3, [pc, #396]	; (8001238 <MX_GPIO_Init+0x250>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a62      	ldr	r2, [pc, #392]	; (8001238 <MX_GPIO_Init+0x250>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b60      	ldr	r3, [pc, #384]	; (8001238 <MX_GPIO_Init+0x250>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <MX_GPIO_Init+0x250>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <MX_GPIO_Init+0x250>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b59      	ldr	r3, [pc, #356]	; (8001238 <MX_GPIO_Init+0x250>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80010e4:	4855      	ldr	r0, [pc, #340]	; (800123c <MX_GPIO_Init+0x254>)
 80010e6:	f001 fd85 	bl	8002bf4 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	4854      	ldr	r0, [pc, #336]	; (8001240 <MX_GPIO_Init+0x258>)
 80010f0:	f001 fd80 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f244 0181 	movw	r1, #16513	; 0x4081
 80010fa:	4852      	ldr	r0, [pc, #328]	; (8001244 <MX_GPIO_Init+0x25c>)
 80010fc:	f001 fd7a 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4850      	ldr	r0, [pc, #320]	; (8001248 <MX_GPIO_Init+0x260>)
 8001108:	f001 fd74 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <MX_GPIO_Init+0x264>)
 8001114:	f001 fd6e 	bl	8002bf4 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	484c      	ldr	r0, [pc, #304]	; (8001250 <MX_GPIO_Init+0x268>)
 800111e:	f001 fd69 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001122:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4840      	ldr	r0, [pc, #256]	; (800123c <MX_GPIO_Init+0x254>)
 800113c:	f001 fbae 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	483f      	ldr	r0, [pc, #252]	; (8001254 <MX_GPIO_Init+0x26c>)
 8001158:	f001 fba0 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4833      	ldr	r0, [pc, #204]	; (8001240 <MX_GPIO_Init+0x258>)
 8001174:	f001 fb92 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001178:	f244 0381 	movw	r3, #16513	; 0x4081
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	482c      	ldr	r0, [pc, #176]	; (8001244 <MX_GPIO_Init+0x25c>)
 8001192:	f001 fb83 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4826      	ldr	r0, [pc, #152]	; (8001248 <MX_GPIO_Init+0x260>)
 80011b0:	f001 fb74 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80011b4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <MX_GPIO_Init+0x254>)
 80011ca:	f001 fb67 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80011ce:	f647 03ff 	movw	r3, #30975	; 0x78ff
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <MX_GPIO_Init+0x264>)
 80011e8:	f001 fb58 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x268>)
 8001204:	f001 fb4a 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_GPIO_Init+0x268>)
 800121c:	f001 fb3e 	bl	800289c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f000 ff48 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800122a:	2028      	movs	r0, #40	; 0x28
 800122c:	f000 ff61 	bl	80020f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	; 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40021000 	.word	0x40021000
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40021400 	.word	0x40021400
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021800 	.word	0x40021800
 8001254:	40020800 	.word	0x40020800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	; 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a55      	ldr	r2, [pc, #340]	; (8001428 <HAL_ETH_MspInit+0x174>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	f040 80a4 	bne.w	8001420 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_ETH_MspInit+0x178>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_ETH_MspInit+0x178>)
 80012e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_ETH_MspInit+0x178>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_ETH_MspInit+0x178>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <HAL_ETH_MspInit+0x178>)
 80012fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a44      	ldr	r2, [pc, #272]	; (800142c <HAL_ETH_MspInit+0x178>)
 800131a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	4b3e      	ldr	r3, [pc, #248]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a3d      	ldr	r2, [pc, #244]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_ETH_MspInit+0x178>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_ETH_MspInit+0x178>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a36      	ldr	r2, [pc, #216]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_ETH_MspInit+0x178>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_ETH_MspInit+0x178>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_ETH_MspInit+0x178>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_ETH_MspInit+0x178>)
 800138a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_ETH_MspInit+0x178>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800139c:	2332      	movs	r3, #50	; 0x32
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ac:	230b      	movs	r3, #11
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <HAL_ETH_MspInit+0x17c>)
 80013b8:	f001 fa70 	bl	800289c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013bc:	2386      	movs	r3, #134	; 0x86
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013cc:	230b      	movs	r3, #11
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_ETH_MspInit+0x180>)
 80013d8:	f001 fa60 	bl	800289c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ee:	230b      	movs	r3, #11
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <HAL_ETH_MspInit+0x184>)
 80013fa:	f001 fa4f 	bl	800289c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001410:	230b      	movs	r3, #11
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ETH_MspInit+0x188>)
 800141c:	f001 fa3e 	bl	800289c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40028000 	.word	0x40028000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40021800 	.word	0x40021800

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_I2C_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12c      	bne.n	80014bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001490:	2304      	movs	r3, #4
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <HAL_I2C_MspInit+0x8c>)
 800149c:	f001 f9fe 	bl	800289c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 80014aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_I2C_MspInit+0x88>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40005400 	.word	0x40005400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2230      	movs	r2, #48	; 0x30
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f006 f95d 	bl	80077a0 <memset>
  if(hrtc->Instance==RTC)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_RTC_MspInit+0x4c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014f0:	2320      	movs	r3, #32
 80014f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fb2a 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800150a:	f7ff fea5 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_RTC_MspInit+0x50>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40002800 	.word	0x40002800
 8001520:	42470e3c 	.word	0x42470e3c

08001524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d115      	bne.n	8001562 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_TIM_PWM_MspInit+0x48>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_TIM_PWM_MspInit+0x48>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_TIM_PWM_MspInit+0x48>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201c      	movs	r0, #28
 8001558:	f000 fdaf 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155c:	201c      	movs	r0, #28
 800155e:	f000 fdc8 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_TIM_IC_MspInit+0x94>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d133      	bne.n	80015fa <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_TIM_IC_MspInit+0x98>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80015ca:	2340      	movs	r3, #64	; 0x40
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_TIM_IC_MspInit+0x9c>)
 80015e6:	f001 f959 	bl	800289c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201d      	movs	r0, #29
 80015f0:	f000 fd63 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f4:	201d      	movs	r0, #29
 80015f6:	f000 fd7c 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40000400 	.word	0x40000400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_TIM_Base_MspInit+0xf0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d116      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a36      	ldr	r2, [pc, #216]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201e      	movs	r0, #30
 8001644:	f000 fd39 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001648:	201e      	movs	r0, #30
 800164a:	f000 fd52 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800164e:	e052      	b.n	80016f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <HAL_TIM_Base_MspInit+0xf8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d116      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2032      	movs	r0, #50	; 0x32
 800167c:	f000 fd1d 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f000 fd36 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 8001686:	e036      	b.n	80016f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_TIM_Base_MspInit+0xfc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d116      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2019      	movs	r0, #25
 80016b4:	f000 fd01 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016b8:	2019      	movs	r0, #25
 80016ba:	f000 fd1a 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 80016be:	e01a      	b.n	80016f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_TIM_Base_MspInit+0x100>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d115      	bne.n	80016f6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_TIM_Base_MspInit+0xf4>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	201a      	movs	r0, #26
 80016ec:	f000 fce5 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016f0:	201a      	movs	r0, #26
 80016f2:	f000 fcfe 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40000800 	.word	0x40000800
 8001704:	40023800 	.word	0x40023800
 8001708:	40000c00 	.word	0x40000c00
 800170c:	40014400 	.word	0x40014400
 8001710:	40014800 	.word	0x40014800

08001714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d11e      	bne.n	8001774 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001752:	2320      	movs	r3, #32
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001762:	2301      	movs	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <HAL_TIM_MspPostInit+0xb4>)
 800176e:	f001 f895 	bl	800289c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001772:	e022      	b.n	80017ba <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_TIM_MspPostInit+0xb8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d11d      	bne.n	80017ba <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_TIM_MspPostInit+0xb0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179a:	2308      	movs	r3, #8
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017aa:	2302      	movs	r3, #2
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <HAL_TIM_MspPostInit+0xb4>)
 80017b6:	f001 f871 	bl	800289c <HAL_GPIO_Init>
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40000c00 	.word	0x40000c00

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <HAL_UART_MspInit+0x108>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d135      	bne.n	800185e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_UART_MspInit+0x10c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_UART_MspInit+0x10c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a31      	ldr	r2, [pc, #196]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800182a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183c:	2307      	movs	r3, #7
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4826      	ldr	r0, [pc, #152]	; (80018e0 <HAL_UART_MspInit+0x110>)
 8001848:	f001 f828 	bl	800289c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2027      	movs	r0, #39	; 0x27
 8001852:	f000 fc32 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001856:	2027      	movs	r0, #39	; 0x27
 8001858:	f000 fc4b 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800185c:	e038      	b.n	80018d0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <HAL_UART_MspInit+0x114>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d133      	bne.n	80018d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_UART_MspInit+0x10c>)
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6453      	str	r3, [r2, #68]	; 0x44
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_UART_MspInit+0x10c>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_UART_MspInit+0x10c>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_UART_MspInit+0x10c>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6313      	str	r3, [r2, #48]	; 0x30
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_UART_MspInit+0x10c>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018b0:	2308      	movs	r3, #8
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_UART_MspInit+0x118>)
 80018bc:	f000 ffee 	bl	800289c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2047      	movs	r0, #71	; 0x47
 80018c6:	f000 fbf8 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80018ca:	2047      	movs	r0, #71	; 0x47
 80018cc:	f000 fc11 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	; 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40004800 	.word	0x40004800
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40011400 	.word	0x40011400
 80018e8:	40020800 	.word	0x40020800

080018ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800190c:	d13f      	bne.n	800198e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800192a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800193c:	230a      	movs	r3, #10
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4815      	ldr	r0, [pc, #84]	; (800199c <HAL_PCD_MspInit+0xb0>)
 8001948:	f000 ffa8 	bl	800289c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_PCD_MspInit+0xb0>)
 8001962:	f000 ff9b 	bl	800289c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_PCD_MspInit+0xac>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6353      	str	r3, [r2, #52]	; 0x34
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_PCD_MspInit+0xac>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001980:	6453      	str	r3, [r2, #68]	; 0x44
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_PCD_MspInit+0xac>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 fa46 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 80019f0:	f7fe fece 	bl	8000790 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fe:	f003 f905 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000710 	.word	0x20000710

08001a0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a12:	f003 f8fb 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000758 	.word	0x20000758

08001a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM2_IRQHandler+0x10>)
 8001a26:	f003 f8f1 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005f0 	.word	0x200005f0

08001a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM3_IRQHandler+0x10>)
 8001a3a:	f003 f8e7 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000638 	.word	0x20000638

08001a48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM4_IRQHandler+0x10>)
 8001a4e:	f003 f8dd 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000680 	.word	0x20000680

08001a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <USART3_IRQHandler+0x10>)
 8001a62:	f004 fa3d 	bl	8005ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200007a0 	.word	0x200007a0

08001a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a78:	f001 f8d6 	bl	8002c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM5_IRQHandler+0x10>)
 8001a86:	f003 f8c1 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200006c8 	.word	0x200006c8

08001a94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <USART6_IRQHandler+0x10>)
 8001a9a:	f004 fa21 	bl	8005ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200007e4 	.word	0x200007e4

08001aa8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fe55 	bl	80007ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
  }
  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f005 fe42 	bl	800783c <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20030000 	.word	0x20030000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20000d4c 	.word	0x20000d4c
 8001bec:	20000f10 	.word	0x20000f10

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_UART_RxCpltCallback+0xd4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d12c      	bne.n	8001c7e <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b27      	cmp	r3, #39	; 0x27
 8001c2a:	dc1d      	bgt.n	8001c68 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_UART_RxCpltCallback+0xdc>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0a      	cmp	r3, #10
 8001c32:	d003      	beq.n	8001c3c <HAL_UART_RxCpltCallback+0x28>
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_UART_RxCpltCallback+0xdc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b0d      	cmp	r3, #13
 8001c3a:	d10b      	bne.n	8001c54 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2c      	ldr	r2, [pc, #176]	; (8001cf4 <HAL_UART_RxCpltCallback+0xe0>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_UART_RxCpltCallback+0xe4>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e00f      	b.n	8001c74 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4924      	ldr	r1, [pc, #144]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c5c:	600a      	str	r2, [r1, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_UART_RxCpltCallback+0xdc>)
 8001c60:	7811      	ldrb	r1, [r2, #0]
 8001c62:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_UART_RxCpltCallback+0xe0>)
 8001c64:	54d1      	strb	r1, [r2, r3]
 8001c66:	e005      	b.n	8001c74 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <HAL_UART_RxCpltCallback+0xe8>)
 8001c70:	f005 fcb6 	bl	80075e0 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	491e      	ldr	r1, [pc, #120]	; (8001cf0 <HAL_UART_RxCpltCallback+0xdc>)
 8001c78:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <HAL_UART_RxCpltCallback+0xd4>)
 8001c7a:	f004 f900 	bl	8005e7e <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_UART_RxCpltCallback+0xec>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_UART_RxCpltCallback+0xf0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b27      	cmp	r3, #39	; 0x27
 8001c8c:	dc1d      	bgt.n	8001cca <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_UART_RxCpltCallback+0xf4>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d003      	beq.n	8001c9e <HAL_UART_RxCpltCallback+0x8a>
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_UART_RxCpltCallback+0xf4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b0d      	cmp	r3, #13
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_UART_RxCpltCallback+0xd8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_UART_RxCpltCallback+0xf8>)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_UART_RxCpltCallback+0xfc>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_RxCpltCallback+0xf0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e00f      	b.n	8001cd6 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_UART_RxCpltCallback+0xf0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4911      	ldr	r1, [pc, #68]	; (8001d04 <HAL_UART_RxCpltCallback+0xf0>)
 8001cbe:	600a      	str	r2, [r1, #0]
 8001cc0:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <HAL_UART_RxCpltCallback+0xf4>)
 8001cc2:	7811      	ldrb	r1, [r2, #0]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_UART_RxCpltCallback+0xf8>)
 8001cc6:	54d1      	strb	r1, [r2, r3]
 8001cc8:	e005      	b.n	8001cd6 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_UART_RxCpltCallback+0xf0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001cd0:	4810      	ldr	r0, [pc, #64]	; (8001d14 <HAL_UART_RxCpltCallback+0x100>)
 8001cd2:	f005 fc85 	bl	80075e0 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	490b      	ldr	r1, [pc, #44]	; (8001d08 <HAL_UART_RxCpltCallback+0xf4>)
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_UART_RxCpltCallback+0xec>)
 8001cdc:	f004 f8cf 	bl	8005e7e <HAL_UART_Receive_IT>
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200007a0 	.word	0x200007a0
 8001cec:	20000d78 	.word	0x20000d78
 8001cf0:	20000d34 	.word	0x20000d34
 8001cf4:	20000d50 	.word	0x20000d50
 8001cf8:	20000d7c 	.word	0x20000d7c
 8001cfc:	08007d24 	.word	0x08007d24
 8001d00:	200007e4 	.word	0x200007e4
 8001d04:	20000da8 	.word	0x20000da8
 8001d08:	20000d35 	.word	0x20000d35
 8001d0c:	20000d80 	.word	0x20000d80
 8001d10:	20000dac 	.word	0x20000dac
 8001d14:	08007d3c 	.word	0x08007d3c

08001d18 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11f      	bne.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001d42:	e012      	b.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10d      	bne.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001d54:	2100      	movs	r1, #0
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f003 fa86 	bl	8005268 <HAL_TIM_ReadCapturedValue>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d62:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40000400 	.word	0x40000400
 8001d78:	20000db8 	.word	0x20000db8
 8001d7c:	20000db0 	.word	0x20000db0
 8001d80:	20000db4 	.word	0x20000db4

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d8c:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da0:	4c0b      	ldr	r4, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dae:	f7ff ff1f 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f005 fd49 	bl	8007848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7fe fd2b 	bl	8000810 <main>
  bx  lr    
 8001dba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dbc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001dc8:	08007dfc 	.word	0x08007dfc
  ldr r2, =_sbss
 8001dcc:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8001dd0:	20000f0c 	.word	0x20000f0c

08001dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_Init+0x40>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_Init+0x40>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x40>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f94f 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fa2a 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f967 	bl	800210e <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f92f 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000012c 	.word	0x2000012c
 8001e74:	20000134 	.word	0x20000134
 8001e78:	20000130 	.word	0x20000130

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000134 	.word	0x20000134
 8001ea0:	20000dbc 	.word	0x20000dbc

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000dbc 	.word	0x20000dbc

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000134 	.word	0x20000134

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff3e 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff8e 	bl	8001ff8 <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff31 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa2 	bl	8002060 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff feb6 	bl	8001ea4 <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d008      	beq.n	8002158 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e052      	b.n	80021fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0216 	bic.w	r2, r2, #22
 8002166:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002176:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <HAL_DMA_Abort+0x62>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0208 	bic.w	r2, r2, #8
 8002196:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a8:	e013      	b.n	80021d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021aa:	f7ff fe7b 	bl	8001ea4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d90c      	bls.n	80021d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e015      	b.n	80021fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e4      	bne.n	80021aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e00c      	b.n	800223e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06c      	b.n	8002338 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2223      	movs	r2, #35	; 0x23
 800226c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff f81f 	bl	80012b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_ETH_Init+0xf4>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_ETH_Init+0xf4>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <HAL_ETH_Init+0xf4>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_ETH_Init+0xf8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_ETH_Init+0xf8>)
 8002298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800229c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_ETH_Init+0xf8>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_ETH_Init+0xf8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_ETH_Init+0xf8>)
 80022ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c8:	f7ff fdec 	bl	8001ea4 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022ce:	e011      	b.n	80022f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022d0:	f7ff fde8 	bl	8001ea4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022de:	d909      	bls.n	80022f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2204      	movs	r2, #4
 80022e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	22e0      	movs	r2, #224	; 0xe0
 80022ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e021      	b.n	8002338 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e4      	bne.n	80022d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f958 	bl	80025bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9ff 	bl	8002710 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa55 	bl	80027c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	461a      	mov	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9bd 	bl	80026a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2210      	movs	r2, #16
 8002332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800

08002348 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <ETH_SetMACConfig+0x15c>)
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7c1b      	ldrb	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <ETH_SetMACConfig+0x28>
 800236a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800236e:	e000      	b.n	8002372 <ETH_SetMACConfig+0x2a>
 8002370:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	7c5b      	ldrb	r3, [r3, #17]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <ETH_SetMACConfig+0x38>
 800237a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237e:	e000      	b.n	8002382 <ETH_SetMACConfig+0x3a>
 8002380:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002382:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	7fdb      	ldrb	r3, [r3, #31]
 800238e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002390:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	7f92      	ldrb	r2, [r2, #30]
 800239c:	2a00      	cmp	r2, #0
 800239e:	d102      	bne.n	80023a6 <ETH_SetMACConfig+0x5e>
 80023a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a4:	e000      	b.n	80023a8 <ETH_SetMACConfig+0x60>
 80023a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80023a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7f1b      	ldrb	r3, [r3, #28]
 80023ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d102      	bne.n	80023d0 <ETH_SetMACConfig+0x88>
 80023ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ce:	e000      	b.n	80023d2 <ETH_SetMACConfig+0x8a>
 80023d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7bdb      	ldrb	r3, [r3, #15]
 80023d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ea:	4313      	orrs	r3, r2
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff fd5a 	bl	8001ebc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002426:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800242e:	2a00      	cmp	r2, #0
 8002430:	d101      	bne.n	8002436 <ETH_SetMACConfig+0xee>
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	e000      	b.n	8002438 <ETH_SetMACConfig+0xf0>
 8002436:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002438:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800243e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002446:	2a01      	cmp	r2, #1
 8002448:	d101      	bne.n	800244e <ETH_SetMACConfig+0x106>
 800244a:	2208      	movs	r2, #8
 800244c:	e000      	b.n	8002450 <ETH_SetMACConfig+0x108>
 800244e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002450:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002458:	2a01      	cmp	r2, #1
 800245a:	d101      	bne.n	8002460 <ETH_SetMACConfig+0x118>
 800245c:	2204      	movs	r2, #4
 800245e:	e000      	b.n	8002462 <ETH_SetMACConfig+0x11a>
 8002460:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800246a:	2a01      	cmp	r2, #1
 800246c:	d101      	bne.n	8002472 <ETH_SetMACConfig+0x12a>
 800246e:	2202      	movs	r2, #2
 8002470:	e000      	b.n	8002474 <ETH_SetMACConfig+0x12c>
 8002472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002474:	4313      	orrs	r3, r2
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff fd15 	bl	8001ebc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	ff20810f 	.word	0xff20810f

080024a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <ETH_SetDMAConfig+0x110>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	7b1b      	ldrb	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetDMAConfig+0x2c>
 80024ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024d2:	e000      	b.n	80024d6 <ETH_SetDMAConfig+0x2e>
 80024d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	7b5b      	ldrb	r3, [r3, #13]
 80024da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	7f52      	ldrb	r2, [r2, #29]
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d102      	bne.n	80024ec <ETH_SetDMAConfig+0x44>
 80024e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ea:	e000      	b.n	80024ee <ETH_SetDMAConfig+0x46>
 80024ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7b9b      	ldrb	r3, [r3, #14]
 80024f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002504:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	7f9b      	ldrb	r3, [r3, #30]
 800250a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800250c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002512:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800251c:	4313      	orrs	r3, r2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252c:	461a      	mov	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800253e:	2001      	movs	r0, #1
 8002540:	f7ff fcbc 	bl	8001ebc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254c:	461a      	mov	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800255c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002562:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002568:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002570:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002572:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800257a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002580:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800258a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800258e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fc8d 	bl	8001ebc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	f8de3f23 	.word	0xf8de3f23

080025bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0a6      	sub	sp, #152	; 0x98
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025f8:	2300      	movs	r3, #0
 80025fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002602:	2300      	movs	r3, #0
 8002604:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800261e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002628:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fe86 	bl	8002348 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800263c:	2301      	movs	r3, #1
 800263e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800264a:	2301      	movs	r3, #1
 800264c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002668:	2301      	movs	r3, #1
 800266a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800266c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002670:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002676:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002684:	2300      	movs	r3, #0
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ff08 	bl	80024a8 <ETH_SetDMAConfig>
}
 8002698:	bf00      	nop
 800269a:	3798      	adds	r7, #152	; 0x98
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3305      	adds	r3, #5
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	3204      	adds	r2, #4
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <ETH_MACAddressConfig+0x68>)
 80026c2:	4413      	add	r3, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3303      	adds	r3, #3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	061a      	lsls	r2, r3, #24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3302      	adds	r3, #2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4313      	orrs	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <ETH_MACAddressConfig+0x6c>)
 80026f2:	4413      	add	r3, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6013      	str	r3, [r2, #0]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40028040 	.word	0x40028040
 800270c:	40028044 	.word	0x40028044

08002710 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e03e      	b.n	800279c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68d9      	ldr	r1, [r3, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	3206      	adds	r2, #6
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d80c      	bhi.n	8002780 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e004      	b.n	800278a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9bd      	bls.n	800271e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b4:	611a      	str	r2, [r3, #16]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e046      	b.n	800285e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6919      	ldr	r1, [r3, #16]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800280c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002814:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	3212      	adds	r2, #18
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d80c      	bhi.n	800284e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	e004      	b.n	8002858 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d9b5      	bls.n	80027d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	60da      	str	r2, [r3, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e177      	b.n	8002ba8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 8166 	bne.w	8002ba2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d005      	beq.n	80028ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d130      	bne.n	8002950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0201 	and.w	r2, r3, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d017      	beq.n	800298c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80c0 	beq.w	8002ba2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a65      	ldr	r2, [pc, #404]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3e:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <HAL_GPIO_Init+0x328>)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_GPIO_Init+0x32c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d037      	beq.n	8002ada <HAL_GPIO_Init+0x23e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d031      	beq.n	8002ad6 <HAL_GPIO_Init+0x23a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_GPIO_Init+0x334>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x236>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <HAL_GPIO_Init+0x338>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x232>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a54      	ldr	r2, [pc, #336]	; (8002bd8 <HAL_GPIO_Init+0x33c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x22e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a53      	ldr	r2, [pc, #332]	; (8002bdc <HAL_GPIO_Init+0x340>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x22a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <HAL_GPIO_Init+0x344>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x226>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_GPIO_Init+0x348>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x222>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_GPIO_Init+0x34c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x21e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4f      	ldr	r2, [pc, #316]	; (8002bec <HAL_GPIO_Init+0x350>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x21a>
 8002ab2:	2309      	movs	r3, #9
 8002ab4:	e012      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	e010      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002aba:	2308      	movs	r3, #8
 8002abc:	e00e      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e00c      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	e00a      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e008      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e004      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_GPIO_Init+0x240>
 8002ada:	2300      	movs	r3, #0
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f002 0203 	and.w	r2, r2, #3
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aec:	4935      	ldr	r1, [pc, #212]	; (8002bc4 <HAL_GPIO_Init+0x328>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1e:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_GPIO_Init+0x354>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	f67f ae84 	bls.w	80028b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	; 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40021400 	.word	0x40021400
 8002be0:	40021800 	.word	0x40021800
 8002be4:	40021c00 	.word	0x40021c00
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40022400 	.word	0x40022400
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c10:	e003      	b.n	8002c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	041a      	lsls	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f806 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e12b      	b.n	8002eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fbd2 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f000 ff18 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a81      	ldr	r2, [pc, #516]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d807      	bhi.n	8002cf4 <HAL_I2C_Init+0x84>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_I2C_Init+0x278>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e006      	b.n	8002d02 <HAL_I2C_Init+0x92>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a7d      	ldr	r2, [pc, #500]	; (8002eec <HAL_I2C_Init+0x27c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0e7      	b.n	8002eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	; (8002ef0 <HAL_I2C_Init+0x280>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d802      	bhi.n	8002d44 <HAL_I2C_Init+0xd4>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e009      	b.n	8002d58 <HAL_I2C_Init+0xe8>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <HAL_I2C_Init+0x284>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	3301      	adds	r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	495c      	ldr	r1, [pc, #368]	; (8002ee4 <HAL_I2C_Init+0x274>)
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d819      	bhi.n	8002dac <HAL_I2C_Init+0x13c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e59      	subs	r1, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_I2C_Init+0x138>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e59      	subs	r1, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	e051      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002da8:	2304      	movs	r3, #4
 8002daa:	e04f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <HAL_I2C_Init+0x168>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e012      	b.n	8002dfe <HAL_I2C_Init+0x18e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	0099      	lsls	r1, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x196>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e022      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10e      	bne.n	8002e2c <HAL_I2C_Init+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e58      	subs	r0, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	440b      	add	r3, r1
 8002e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	e00f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6809      	ldr	r1, [r1, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6911      	ldr	r1, [r2, #16]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	000186a0 	.word	0x000186a0
 8002ee8:	001e847f 	.word	0x001e847f
 8002eec:	003d08ff 	.word	0x003d08ff
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	10624dd3 	.word	0x10624dd3

08002ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d129      	bne.n	8002f62 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2224      	movs	r2, #36	; 0x24
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0210 	bic.w	r2, r2, #16
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d12a      	bne.n	8002fe0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2224      	movs	r2, #36	; 0x24
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	f023 030f 	bic.w	r3, r3, #15
 8002fb0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	89fa      	ldrh	r2, [r7, #14]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff0:	b08f      	sub	sp, #60	; 0x3c
 8002ff2:	af0a      	add	r7, sp, #40	; 0x28
 8002ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e10f      	b.n	8003220 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe fc66 	bl	80018ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 ff17 	bl	8006e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	687e      	ldr	r6, [r7, #4]
 800304c:	466d      	mov	r5, sp
 800304e:	f106 0410 	add.w	r4, r6, #16
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003062:	1d33      	adds	r3, r6, #4
 8003064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	f003 fea2 	bl	8006db0 <USB_CoreInit>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0d0      	b.n	8003220 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f003 ff05 	bl	8006e94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e04a      	b.n	8003126 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	333d      	adds	r3, #61	; 0x3d
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	333c      	adds	r3, #60	; 0x3c
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	b298      	uxth	r0, r3
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3344      	adds	r3, #68	; 0x44
 80030cc:	4602      	mov	r2, r0
 80030ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3340      	adds	r3, #64	; 0x40
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3348      	adds	r3, #72	; 0x48
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	; 0x4c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3354      	adds	r3, #84	; 0x54
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	3301      	adds	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d3af      	bcc.n	8003090 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e044      	b.n	80031c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3b5      	bcc.n	8003136 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	687e      	ldr	r6, [r7, #4]
 80031d2:	466d      	mov	r5, sp
 80031d4:	f106 0410 	add.w	r4, r6, #16
 80031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e8:	1d33      	adds	r3, r6, #4
 80031ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ec:	6838      	ldr	r0, [r7, #0]
 80031ee:	f003 fe9d 	bl	8006f2c <USB_DevInit>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e00d      	b.n	8003220 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f004 f868 	bl	80072ee <USB_DevDisconnect>

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e267      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d075      	beq.n	8003332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b04      	cmp	r3, #4
 8003250:	d00c      	beq.n	800326c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325a:	2b08      	cmp	r3, #8
 800325c:	d112      	bne.n	8003284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326a:	d10b      	bne.n	8003284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05b      	beq.n	8003330 <HAL_RCC_OscConfig+0x108>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d157      	bne.n	8003330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e242      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x74>
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a75      	ldr	r2, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xb0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x98>
 80032a6:	4b70      	ldr	r3, [pc, #448]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6f      	ldr	r2, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xb0>
 80032c0:	4b69      	ldr	r3, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a68      	ldr	r2, [pc, #416]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b66      	ldr	r3, [pc, #408]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a65      	ldr	r2, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fde0 	bl	8001ea4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fddc 	bl	8001ea4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e207      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xc0>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fdcc 	bl	8001ea4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fdc8 	bl	8001ea4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1f3      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0xe8>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11c      	bne.n	8003390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x152>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e1c7      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e03a      	b.n	8003406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_OscConfig+0x244>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe fd81 	bl	8001ea4 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fe fd7d 	bl	8001ea4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1a8      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4925      	ldr	r1, [pc, #148]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCC_OscConfig+0x244>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fd60 	bl	8001ea4 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe fd5c 	bl	8001ea4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e187      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d036      	beq.n	8003480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x248>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe fd40 	bl	8001ea4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003428:	f7fe fd3c 	bl	8001ea4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e167      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x200>
 8003446:	e01b      	b.n	8003480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x248>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fd29 	bl	8001ea4 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	e00e      	b.n	8003474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003456:	f7fe fd25 	bl	8001ea4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d907      	bls.n	8003474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e150      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
 8003468:	40023800 	.word	0x40023800
 800346c:	42470000 	.word	0x42470000
 8003470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b88      	ldr	r3, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ea      	bne.n	8003456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8097 	beq.w	80035bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b81      	ldr	r3, [pc, #516]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b77      	ldr	r3, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d118      	bne.n	80034fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ca:	4b74      	ldr	r3, [pc, #464]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a73      	ldr	r2, [pc, #460]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fce5 	bl	8001ea4 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034de:	f7fe fce1 	bl	8001ea4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e10c      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x2ea>
 8003504:	4b64      	ldr	r3, [pc, #400]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a63      	ldr	r2, [pc, #396]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x324>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x30c>
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0x324>
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a54      	ldr	r2, [pc, #336]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fca6 	bl	8001ea4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fca2 	bl	8001ea4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0cb      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ee      	beq.n	800355c <HAL_RCC_OscConfig+0x334>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fe fc90 	bl	8001ea4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003586:	e00a      	b.n	800359e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fe fc8c 	bl	8001ea4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0b5      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ee      	bne.n	8003588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b39      	ldr	r3, [pc, #228]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	4a38      	ldr	r2, [pc, #224]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a1 	beq.w	8003708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d05c      	beq.n	800368c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d141      	bne.n	800365e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe fc60 	bl	8001ea4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fc5c 	bl	8001ea4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e087      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	3b01      	subs	r3, #1
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe fc35 	bl	8001ea4 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fc31 	bl	8001ea4 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e05c      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x416>
 800365c:	e054      	b.n	8003708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fc1e 	bl	8001ea4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fc1a 	bl	8001ea4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e045      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x444>
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e038      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
 80036a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x4ec>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d028      	beq.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d121      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11a      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036dc:	4293      	cmp	r3, r2
 80036de:	d111      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0cc      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b68      	ldr	r3, [pc, #416]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d90c      	bls.n	8003754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b65      	ldr	r3, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d044      	beq.n	8003838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d119      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e067      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4934      	ldr	r1, [pc, #208]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003808:	f7fe fb4c 	bl	8001ea4 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe fb48 	bl	8001ea4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e04f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d20c      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe faac 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08007dd4 	.word	0x08007dd4
 80038dc:	2000012c 	.word	0x2000012c
 80038e0:	20000130 	.word	0x20000130

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b094      	sub	sp, #80	; 0x50
 80038ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
 80038f0:	2300      	movs	r3, #0
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f4:	2300      	movs	r3, #0
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fc:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d00d      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 8003908:	2b08      	cmp	r3, #8
 800390a:	f200 80e1 	bhi.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3a>
 8003916:	e0db      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800391c:	e0db      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800391e:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_GetSysClockFreq+0x208>)
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003922:	e0d8      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003924:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
 8003944:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003956:	4622      	mov	r2, r4
 8003958:	462b      	mov	r3, r5
 800395a:	f04f 0000 	mov.w	r0, #0
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	0159      	lsls	r1, r3, #5
 8003964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003968:	0150      	lsls	r0, r2, #5
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4621      	mov	r1, r4
 8003970:	1a51      	subs	r1, r2, r1
 8003972:	6139      	str	r1, [r7, #16]
 8003974:	4629      	mov	r1, r5
 8003976:	eb63 0301 	sbc.w	r3, r3, r1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003988:	4659      	mov	r1, fp
 800398a:	018b      	lsls	r3, r1, #6
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003992:	4651      	mov	r1, sl
 8003994:	018a      	lsls	r2, r1, #6
 8003996:	4651      	mov	r1, sl
 8003998:	ebb2 0801 	subs.w	r8, r2, r1
 800399c:	4659      	mov	r1, fp
 800399e:	eb63 0901 	sbc.w	r9, r3, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	eb18 0303 	adds.w	r3, r8, r3
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	462b      	mov	r3, r5
 80039c4:	eb49 0303 	adc.w	r3, r9, r3
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039d6:	4629      	mov	r1, r5
 80039d8:	024b      	lsls	r3, r1, #9
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e0:	4621      	mov	r1, r4
 80039e2:	024a      	lsls	r2, r1, #9
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f4:	f7fc fbfa 	bl	80001ec <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	e058      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	0159      	lsls	r1, r3, #5
 8003a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2e:	0150      	lsls	r0, r2, #5
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4641      	mov	r1, r8
 8003a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a54:	ebb2 040a 	subs.w	r4, r2, sl
 8003a58:	eb63 050b 	sbc.w	r5, r3, fp
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	00eb      	lsls	r3, r5, #3
 8003a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6a:	00e2      	lsls	r2, r4, #3
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	18e3      	adds	r3, r4, r3
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	464b      	mov	r3, r9
 8003a78:	eb45 0303 	adc.w	r3, r5, r3
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	028b      	lsls	r3, r1, #10
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a94:	4621      	mov	r1, r4
 8003a96:	028a      	lsls	r2, r1, #10
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	61fa      	str	r2, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	f7fc fba0 	bl	80001ec <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3750      	adds	r7, #80	; 0x50
 8003adc:	46bd      	mov	sp, r7
 8003ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200

08003af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2000012c 	.word	0x2000012c

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	f7ff fff0 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0a9b      	lsrs	r3, r3, #10
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	08007de4 	.word	0x08007de4

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffdc 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0b5b      	lsrs	r3, r3, #13
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08007de4 	.word	0x08007de4

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d075      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b92:	f7fe f987 	bl	8001ea4 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fe f983 	bl	8001ea4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e189      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bac:	4b8a      	ldr	r3, [pc, #552]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	019a      	lsls	r2, r3, #6
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	071b      	lsls	r3, r3, #28
 8003bd0:	4981      	ldr	r1, [pc, #516]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003be4:	4b7c      	ldr	r3, [pc, #496]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bea:	0f1b      	lsrs	r3, r3, #28
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	019a      	lsls	r2, r3, #6
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	4974      	ldr	r1, [pc, #464]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c0c:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c12:	f023 021f 	bic.w	r2, r3, #31
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	496e      	ldr	r1, [pc, #440]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	019a      	lsls	r2, r3, #6
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	071b      	lsls	r3, r3, #28
 8003c44:	4964      	ldr	r1, [pc, #400]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c52:	f7fe f927 	bl	8001ea4 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c5a:	f7fe f923 	bl	8001ea4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e129      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d079      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c90:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c96:	f7fe f905 	bl	8001ea4 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c9e:	f7fe f901 	bl	8001ea4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e107      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cb0:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbc:	d0ef      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	0f1b      	lsrs	r3, r3, #28
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	019a      	lsls	r2, r3, #6
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	493b      	ldr	r1, [pc, #236]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	0e1b      	lsrs	r3, r3, #24
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	071b      	lsls	r3, r3, #28
 8003d38:	4927      	ldr	r1, [pc, #156]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	4922      	ldr	r1, [pc, #136]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f8a2 	bl	8001ea4 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d64:	f7fe f89e 	bl	8001ea4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0a4      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d82:	d1ef      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 808b 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dba:	f7fe f873 	bl	8001ea4 <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc0:	e010      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fe f86f 	bl	8001ea4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d909      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e075      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003dd4:	42470068 	.word	0x42470068
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470070 	.word	0x42470070
 8003de0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003de4:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0e8      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e24:	4a29      	ldr	r2, [pc, #164]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d114      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fe f835 	bl	8001ea4 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe f831 	bl	8001ea4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e035      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ee      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6c:	d10d      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	4912      	ldr	r1, [pc, #72]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
 8003e88:	e005      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4a0f      	ldr	r2, [pc, #60]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e94:	6093      	str	r3, [r2, #8]
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	490a      	ldr	r1, [pc, #40]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	42470e40 	.word	0x42470e40
 8003ed4:	424711e0 	.word	0x424711e0

08003ed8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e066      	b.n	8003fbc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7f5b      	ldrb	r3, [r3, #29]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fae6 	bl	80014d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	22ca      	movs	r2, #202	; 0xca
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2253      	movs	r2, #83	; 0x53
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f998 	bl	8004250 <RTC_EnterInitMode>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12c      	bne.n	8003f84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68d2      	ldr	r2, [r2, #12]
 8003f64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6919      	ldr	r1, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	041a      	lsls	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f99f 	bl	80042be <RTC_ExitInitMode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	7f1b      	ldrb	r3, [r3, #28]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_RTC_SetTime+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e087      	b.n	80040f0 <HAL_RTC_SetTime+0x12c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d126      	bne.n	8004040 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f97c 	bl	8004308 <RTC_ByteToBcd2>
 8004010:	4603      	mov	r3, r0
 8004012:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f975 	bl	8004308 <RTC_ByteToBcd2>
 800401e:	4603      	mov	r3, r0
 8004020:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004022:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f96d 	bl	8004308 <RTC_ByteToBcd2>
 800402e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004030:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	78db      	ldrb	r3, [r3, #3]
 8004038:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e018      	b.n	8004072 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2200      	movs	r2, #0
 8004052:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004060:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004066:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	78db      	ldrb	r3, [r3, #3]
 800406c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	22ca      	movs	r2, #202	; 0xca
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2253      	movs	r2, #83	; 0x53
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f8e4 	bl	8004250 <RTC_EnterInitMode>
 8004088:	4603      	mov	r3, r0
 800408a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d120      	bne.n	80040d4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800409c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8f7 	bl	80042be <RTC_ExitInitMode>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	22ff      	movs	r2, #255	; 0xff
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	771a      	strb	r2, [r3, #28]

  return status;
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	7f1b      	ldrb	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RTC_SetDate+0x1c>
 8004110:	2302      	movs	r3, #2
 8004112:	e071      	b.n	80041f8 <HAL_RTC_SetDate+0x100>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10e      	bne.n	8004144 <HAL_RTC_SetDate+0x4c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	785b      	ldrb	r3, [r3, #1]
 8004136:	f023 0310 	bic.w	r3, r3, #16
 800413a:	b2db      	uxtb	r3, r3
 800413c:	330a      	adds	r3, #10
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11c      	bne.n	8004184 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	78db      	ldrb	r3, [r3, #3]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8da 	bl	8004308 <RTC_ByteToBcd2>
 8004154:	4603      	mov	r3, r0
 8004156:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f8d3 	bl	8004308 <RTC_ByteToBcd2>
 8004162:	4603      	mov	r3, r0
 8004164:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004166:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f8cb 	bl	8004308 <RTC_ByteToBcd2>
 8004172:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004174:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e00e      	b.n	80041a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	78db      	ldrb	r3, [r3, #3]
 8004188:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004190:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004196:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	22ca      	movs	r2, #202	; 0xca
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2253      	movs	r2, #83	; 0x53
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f84c 	bl	8004250 <RTC_EnterInitMode>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f873 	bl	80042be <RTC_ExitInitMode>
 80041d8:	4603      	mov	r3, r0
 80041da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]

  return status;
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}

08004200 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800421a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800421c:	f7fd fe42 	bl	8001ea4 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004222:	e009      	b.n	8004238 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004224:	f7fd fe3e 	bl	8001ea4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004232:	d901      	bls.n	8004238 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e007      	b.n	8004248 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ee      	beq.n	8004224 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d122      	bne.n	80042b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800427c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800427e:	f7fd fe11 	bl	8001ea4 <HAL_GetTick>
 8004282:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004284:	e00c      	b.n	80042a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004286:	f7fd fe0d 	bl	8001ea4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004294:	d904      	bls.n	80042a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <RTC_EnterInitMode+0x64>
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d1e8      	bne.n	8004286 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff89 	bl	8004200 <HAL_RTC_WaitForSynchro>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004316:	e005      	b.n	8004324 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	3301      	adds	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	3b0a      	subs	r3, #10
 8004322:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b09      	cmp	r3, #9
 8004328:	d8f6      	bhi.n	8004318 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	b2da      	uxtb	r2, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4313      	orrs	r3, r2
 8004334:	b2db      	uxtb	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e041      	b.n	80043d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fd f951 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f000 ffd3 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04e      	b.n	8004496 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d022      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004422:	d01d      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIM_Base_Start_IT+0xdc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d010      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	e007      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40010400 	.word	0x40010400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40001800 	.word	0x40001800

080044c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e041      	b.n	8004556 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd f81c 	bl	8001524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 ff14 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_TIM_PWM_Start+0x24>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e022      	b.n	80045ca <HAL_TIM_PWM_Start+0x6a>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d109      	bne.n	800459e <HAL_TIM_PWM_Start+0x3e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e015      	b.n	80045ca <HAL_TIM_PWM_Start+0x6a>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d109      	bne.n	80045b8 <HAL_TIM_PWM_Start+0x58>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e008      	b.n	80045ca <HAL_TIM_PWM_Start+0x6a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	bf14      	ite	ne
 80045c4:	2301      	movne	r3, #1
 80045c6:	2300      	moveq	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07c      	b.n	80046cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0x82>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e0:	e013      	b.n	800460a <HAL_TIM_PWM_Start+0xaa>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x92>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f0:	e00b      	b.n	800460a <HAL_TIM_PWM_Start+0xaa>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0xa2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004600:	e003      	b.n	800460a <HAL_TIM_PWM_Start+0xaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2201      	movs	r2, #1
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f001 fa9e 	bl	8005b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a2d      	ldr	r2, [pc, #180]	; (80046d4 <HAL_TIM_PWM_Start+0x174>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_PWM_Start+0xcc>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <HAL_TIM_PWM_Start+0x178>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_TIM_PWM_Start+0xd0>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_TIM_PWM_Start+0xd2>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <HAL_TIM_PWM_Start+0x174>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d01d      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_TIM_PWM_Start+0x17c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_TIM_PWM_Start+0x180>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_TIM_PWM_Start+0x184>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <HAL_TIM_PWM_Start+0x178>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_TIM_PWM_Start+0x188>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_TIM_PWM_Start+0x136>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <HAL_TIM_PWM_Start+0x18c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d111      	bne.n	80046ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d010      	beq.n	80046ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	e007      	b.n	80046ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40001800 	.word	0x40001800

080046f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_TIM_PWM_Start_IT+0x28>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e022      	b.n	800475e <HAL_TIM_PWM_Start_IT+0x6e>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d109      	bne.n	8004732 <HAL_TIM_PWM_Start_IT+0x42>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e015      	b.n	800475e <HAL_TIM_PWM_Start_IT+0x6e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start_IT+0x5c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <HAL_TIM_PWM_Start_IT+0x6e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0c7      	b.n	80048f6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start_IT+0x86>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start_IT+0xae>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start_IT+0x96>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start_IT+0xae>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start_IT+0xa6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start_IT+0xae>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d841      	bhi.n	8004828 <HAL_TIM_PWM_Start_IT+0x138>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_TIM_PWM_Start_IT+0xbc>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	08004829 	.word	0x08004829
 80047b4:	08004829 	.word	0x08004829
 80047b8:	08004829 	.word	0x08004829
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	08004829 	.word	0x08004829
 80047c4:	08004829 	.word	0x08004829
 80047c8:	08004829 	.word	0x08004829
 80047cc:	08004805 	.word	0x08004805
 80047d0:	08004829 	.word	0x08004829
 80047d4:	08004829 	.word	0x08004829
 80047d8:	08004829 	.word	0x08004829
 80047dc:	08004817 	.word	0x08004817
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0202 	orr.w	r2, r2, #2
 80047ee:	60da      	str	r2, [r3, #12]
      break;
 80047f0:	e01d      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0204 	orr.w	r2, r2, #4
 8004800:	60da      	str	r2, [r3, #12]
      break;
 8004802:	e014      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	60da      	str	r2, [r3, #12]
      break;
 8004814:	e00b      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0210 	orr.w	r2, r2, #16
 8004824:	60da      	str	r2, [r3, #12]
      break;
 8004826:	e002      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      break;
 800482c:	bf00      	nop
  }

  if (status == HAL_OK)
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d15f      	bne.n	80048f4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f001 f989 	bl	8005b54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <HAL_TIM_PWM_Start_IT+0x210>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_TIM_PWM_Start_IT+0x166>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <HAL_TIM_PWM_Start_IT+0x214>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_TIM_PWM_Start_IT+0x16a>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_TIM_PWM_Start_IT+0x16c>
 800485a:	2300      	movs	r3, #0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <HAL_TIM_PWM_Start_IT+0x210>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004882:	d01d      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <HAL_TIM_PWM_Start_IT+0x218>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <HAL_TIM_PWM_Start_IT+0x220>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_TIM_PWM_Start_IT+0x214>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_TIM_PWM_Start_IT+0x224>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_TIM_PWM_Start_IT+0x228>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d010      	beq.n	80048f4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	e007      	b.n	80048f4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40014000 	.word	0x40014000
 8004918:	40001800 	.word	0x40001800

0800491c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fe14 	bl	8001570 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 fce6 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_TIM_IC_Start_IT+0x1e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e013      	b.n	8004a02 <HAL_TIM_IC_Start_IT+0x46>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d104      	bne.n	80049ea <HAL_TIM_IC_Start_IT+0x2e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e00b      	b.n	8004a02 <HAL_TIM_IC_Start_IT+0x46>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d104      	bne.n	80049fa <HAL_TIM_IC_Start_IT+0x3e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e003      	b.n	8004a02 <HAL_TIM_IC_Start_IT+0x46>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <HAL_TIM_IC_Start_IT+0x58>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e013      	b.n	8004a3c <HAL_TIM_IC_Start_IT+0x80>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d104      	bne.n	8004a24 <HAL_TIM_IC_Start_IT+0x68>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e00b      	b.n	8004a3c <HAL_TIM_IC_Start_IT+0x80>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d104      	bne.n	8004a34 <HAL_TIM_IC_Start_IT+0x78>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e003      	b.n	8004a3c <HAL_TIM_IC_Start_IT+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a3e:	7bbb      	ldrb	r3, [r7, #14]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d102      	bne.n	8004a4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a44:	7b7b      	ldrb	r3, [r7, #13]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0cc      	b.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_IC_Start_IT+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_IC_Start_IT+0xca>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_IC_Start_IT+0xb2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_IC_Start_IT+0xca>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_IC_Start_IT+0xc2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_IC_Start_IT+0xca>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_IC_Start_IT+0xda>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	e013      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x102>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_IC_Start_IT+0xea>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa4:	e00b      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x102>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_IC_Start_IT+0xfa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab4:	e003      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x102>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d841      	bhi.n	8004b48 <HAL_TIM_IC_Start_IT+0x18c>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_TIM_IC_Start_IT+0x110>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004b49 	.word	0x08004b49
 8004ad4:	08004b49 	.word	0x08004b49
 8004ad8:	08004b49 	.word	0x08004b49
 8004adc:	08004b13 	.word	0x08004b13
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004b49 	.word	0x08004b49
 8004ae8:	08004b49 	.word	0x08004b49
 8004aec:	08004b25 	.word	0x08004b25
 8004af0:	08004b49 	.word	0x08004b49
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004b49 	.word	0x08004b49
 8004afc:	08004b37 	.word	0x08004b37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0202 	orr.w	r2, r2, #2
 8004b0e:	60da      	str	r2, [r3, #12]
      break;
 8004b10:	e01d      	b.n	8004b4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0204 	orr.w	r2, r2, #4
 8004b20:	60da      	str	r2, [r3, #12]
      break;
 8004b22:	e014      	b.n	8004b4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	60da      	str	r2, [r3, #12]
      break;
 8004b34:	e00b      	b.n	8004b4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0210 	orr.w	r2, r2, #16
 8004b44:	60da      	str	r2, [r3, #12]
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d148      	bne.n	8004be6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fff9 	bl	8005b54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <HAL_TIM_IC_Start_IT+0x234>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d022      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d01d      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_TIM_IC_Start_IT+0x238>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_TIM_IC_Start_IT+0x240>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_TIM_IC_Start_IT+0x244>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_TIM_IC_Start_IT+0x248>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_TIM_IC_Start_IT+0x24c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d010      	beq.n	8004be6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	e007      	b.n	8004be6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40010400 	.word	0x40010400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40001800 	.word	0x40001800

08004c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0202 	mvn.w	r2, #2
 8004c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fd f862 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb4a 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fb51 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0204 	mvn.w	r2, #4
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f838 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb20 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fb27 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d122      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d11b      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0208 	mvn.w	r2, #8
 8004ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd f80e 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 faf6 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fafd 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0210 	mvn.w	r2, #16
 8004d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc ffe4 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 facc 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fad3 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0201 	mvn.w	r2, #1
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb fd20 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 ff78 	bl	8005cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d10e      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d107      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa98 	bl	8005318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d10e      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d107      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0220 	mvn.w	r2, #32
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ff42 	bl	8005c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e088      	b.n	8004f4c <HAL_TIM_IC_ConfigChannel+0x130>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f000 fcb8 	bl	80057cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 020c 	bic.w	r2, r2, #12
 8004e6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6999      	ldr	r1, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	619a      	str	r2, [r3, #24]
 8004e7e:	e060      	b.n	8004f42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d11c      	bne.n	8004ec0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f000 fd3c 	bl	8005912 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ea8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6999      	ldr	r1, [r3, #24]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	021a      	lsls	r2, r3, #8
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e040      	b.n	8004f42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d11b      	bne.n	8004efe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f000 fd89 	bl	80059ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 020c 	bic.w	r2, r2, #12
 8004ee8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69d9      	ldr	r1, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	61da      	str	r2, [r3, #28]
 8004efc:	e021      	b.n	8004f42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d11c      	bne.n	8004f3e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f000 fda6 	bl	8005a64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69d9      	ldr	r1, [r3, #28]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021a      	lsls	r2, r3, #8
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
 8004f3c:	e001      	b.n	8004f42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0ae      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	f200 809f 	bhi.w	80050c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	080050c1 	.word	0x080050c1
 8004f90:	080050c1 	.word	0x080050c1
 8004f94:	080050c1 	.word	0x080050c1
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	080050c1 	.word	0x080050c1
 8004fa0:	080050c1 	.word	0x080050c1
 8004fa4:	080050c1 	.word	0x080050c1
 8004fa8:	0800503f 	.word	0x0800503f
 8004fac:	080050c1 	.word	0x080050c1
 8004fb0:	080050c1 	.word	0x080050c1
 8004fb4:	080050c1 	.word	0x080050c1
 8004fb8:	0800507f 	.word	0x0800507f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa52 	bl	800546c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0204 	bic.w	r2, r2, #4
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	619a      	str	r2, [r3, #24]
      break;
 8004ffa:	e064      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 faa2 	bl	800554c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	619a      	str	r2, [r3, #24]
      break;
 800503c:	e043      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 faf7 	bl	8005638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0208 	orr.w	r2, r2, #8
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0204 	bic.w	r2, r2, #4
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	61da      	str	r2, [r3, #28]
      break;
 800507c:	e023      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fb4b 	bl	8005720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	021a      	lsls	r2, r3, #8
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	61da      	str	r2, [r3, #28]
      break;
 80050be:	e002      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
      break;
 80050c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_ConfigClockSource+0x1c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0b4      	b.n	800525e <HAL_TIM_ConfigClockSource+0x186>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d03e      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0xd4>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005132:	f200 8087 	bhi.w	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	f000 8086 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x172>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	d87f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d01a      	beq.n	800517e <HAL_TIM_ConfigClockSource+0xa6>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d87b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d050      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d877      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b50      	cmp	r3, #80	; 0x50
 8005156:	d03c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005158:	2b50      	cmp	r3, #80	; 0x50
 800515a:	d873      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d058      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x13a>
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d86f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b30      	cmp	r3, #48	; 0x30
 8005166:	d064      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d86b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d060      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d867      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d05a      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 800517c:	e062      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6899      	ldr	r1, [r3, #8]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f000 fcc1 	bl	8005b14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	609a      	str	r2, [r3, #8]
      break;
 80051aa:	e04f      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6899      	ldr	r1, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f000 fcaa 	bl	8005b14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ce:	609a      	str	r2, [r3, #8]
      break;
 80051d0:	e03c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6859      	ldr	r1, [r3, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	461a      	mov	r2, r3
 80051e0:	f000 fb68 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2150      	movs	r1, #80	; 0x50
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fc77 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 80051f0:	e02c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 fbc4 	bl	800598c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2160      	movs	r1, #96	; 0x60
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fc67 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005210:	e01c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fb48 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc57 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005230:	e00c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 fc4e 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005242:	e003      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      break;
 8005248:	e000      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800524a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d831      	bhi.n	80052e0 <HAL_TIM_ReadCapturedValue+0x78>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <HAL_TIM_ReadCapturedValue+0x1c>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052e1 	.word	0x080052e1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	080052e1 	.word	0x080052e1
 80052b4:	080052d7 	.word	0x080052d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	60fb      	str	r3, [r7, #12]

      break;
 80052c0:	e00f      	b.n	80052e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	60fb      	str	r3, [r7, #12]

      break;
 80052ca:	e00a      	b.n	80052e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	60fb      	str	r3, [r7, #12]

      break;
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	60fb      	str	r3, [r7, #12]

      break;
 80052de:	e000      	b.n	80052e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052e0:	bf00      	nop
  }

  return tmpreg;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a40      	ldr	r2, [pc, #256]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3d      	ldr	r2, [pc, #244]	; (8005444 <TIM_Base_SetConfig+0x118>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <TIM_Base_SetConfig+0x11c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3b      	ldr	r2, [pc, #236]	; (800544c <TIM_Base_SetConfig+0x120>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3a      	ldr	r2, [pc, #232]	; (8005450 <TIM_Base_SetConfig+0x124>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d027      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <TIM_Base_SetConfig+0x118>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d023      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <TIM_Base_SetConfig+0x11c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_Base_SetConfig+0x120>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a29      	ldr	r2, [pc, #164]	; (8005450 <TIM_Base_SetConfig+0x124>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d017      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a28      	ldr	r2, [pc, #160]	; (8005454 <TIM_Base_SetConfig+0x128>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a27      	ldr	r2, [pc, #156]	; (8005458 <TIM_Base_SetConfig+0x12c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a26      	ldr	r2, [pc, #152]	; (800545c <TIM_Base_SetConfig+0x130>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a25      	ldr	r2, [pc, #148]	; (8005460 <TIM_Base_SetConfig+0x134>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a24      	ldr	r2, [pc, #144]	; (8005464 <TIM_Base_SetConfig+0x138>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a23      	ldr	r2, [pc, #140]	; (8005468 <TIM_Base_SetConfig+0x13c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <TIM_Base_SetConfig+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800
 8005460:	40001800 	.word	0x40001800
 8005464:	40001c00 	.word	0x40001c00
 8005468:	40002000 	.word	0x40002000

0800546c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0201 	bic.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0302 	bic.w	r3, r3, #2
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a20      	ldr	r2, [pc, #128]	; (8005544 <TIM_OC1_SetConfig+0xd8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC1_SetConfig+0x64>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <TIM_OC1_SetConfig+0xdc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10c      	bne.n	80054ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 0308 	bic.w	r3, r3, #8
 80054d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 0304 	bic.w	r3, r3, #4
 80054e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <TIM_OC1_SetConfig+0xd8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_OC1_SetConfig+0x8e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a14      	ldr	r2, [pc, #80]	; (8005548 <TIM_OC1_SetConfig+0xdc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d111      	bne.n	800551e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40010000 	.word	0x40010000
 8005548:	40010400 	.word	0x40010400

0800554c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0320 	bic.w	r3, r3, #32
 8005596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <TIM_OC2_SetConfig+0xe4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC2_SetConfig+0x68>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a21      	ldr	r2, [pc, #132]	; (8005634 <TIM_OC2_SetConfig+0xe8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10d      	bne.n	80055d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <TIM_OC2_SetConfig+0xe4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_OC2_SetConfig+0x94>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a16      	ldr	r2, [pc, #88]	; (8005634 <TIM_OC2_SetConfig+0xe8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d113      	bne.n	8005608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400

08005638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a21      	ldr	r2, [pc, #132]	; (8005718 <TIM_OC3_SetConfig+0xe0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_OC3_SetConfig+0x66>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a20      	ldr	r2, [pc, #128]	; (800571c <TIM_OC3_SetConfig+0xe4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d10d      	bne.n	80056ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a16      	ldr	r2, [pc, #88]	; (8005718 <TIM_OC3_SetConfig+0xe0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_OC3_SetConfig+0x92>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a15      	ldr	r2, [pc, #84]	; (800571c <TIM_OC3_SetConfig+0xe4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d113      	bne.n	80056f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	621a      	str	r2, [r3, #32]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <TIM_OC4_SetConfig+0xa4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC4_SetConfig+0x68>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <TIM_OC4_SetConfig+0xa8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d109      	bne.n	800579c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40010400 	.word	0x40010400

080057cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a28      	ldr	r2, [pc, #160]	; (8005898 <TIM_TI1_SetConfig+0xcc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d017      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <TIM_TI1_SetConfig+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <TIM_TI1_SetConfig+0xd4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a23      	ldr	r2, [pc, #140]	; (80058a4 <TIM_TI1_SetConfig+0xd8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <TIM_TI1_SetConfig+0xdc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a21      	ldr	r2, [pc, #132]	; (80058ac <TIM_TI1_SetConfig+0xe0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_TI1_SetConfig+0x66>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <TIM_TI1_SetConfig+0xe4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <TIM_TI1_SetConfig+0x6a>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <TIM_TI1_SetConfig+0x6c>
 8005836:	2300      	movs	r3, #0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e003      	b.n	8005856 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800585c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	b2db      	uxtb	r3, r3
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f023 030a 	bic.w	r3, r3, #10
 8005870:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 030a 	and.w	r3, r3, #10
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40001800 	.word	0x40001800

080058b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 030a 	bic.w	r3, r3, #10
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f023 0210 	bic.w	r2, r3, #16
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	b29b      	uxth	r3, r3
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005964:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f023 0210 	bic.w	r2, r3, #16
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	031b      	lsls	r3, r3, #12
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0303 	bic.w	r3, r3, #3
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	621a      	str	r2, [r3, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	031b      	lsls	r3, r3, #12
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f043 0307 	orr.w	r3, r3, #7
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2201      	movs	r2, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e05a      	b.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c04:	d01d      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1b      	ldr	r2, [pc, #108]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10c      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40001800 	.word	0x40001800

08005c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e03f      	b.n	8005d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb fd72 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fddf 	bl	80068c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695a      	ldr	r2, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b08a      	sub	sp, #40	; 0x28
 8005d5e:	af02      	add	r7, sp, #8
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d17c      	bne.n	8005e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_Transmit+0x2c>
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e075      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Transmit+0x3e>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e06e      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dae:	f7fc f879 	bl	8001ea4 <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc8:	d108      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e003      	b.n	8005de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dec:	e02a      	b.n	8005e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fb1f 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e036      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	3302      	adds	r3, #2
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e007      	b.n	8005e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cf      	bne.n	8005dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 faef 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d11d      	bne.n	8005ed4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Receive_IT+0x26>
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e016      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Receive_IT+0x38>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e00f      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fb24 	bl	8006518 <UART_Start_Receive_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b0ba      	sub	sp, #232	; 0xe8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <HAL_UART_IRQHandler+0x66>
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fc07 	bl	8006752 <UART_Receive_IT>
      return;
 8005f44:	e256      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80de 	beq.w	800610c <HAL_UART_IRQHandler+0x22c>
 8005f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80d1 	beq.w	800610c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_UART_IRQHandler+0xae>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xd2>
 8005f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xf6>
 8005fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d011      	beq.n	8006006 <HAL_UART_IRQHandler+0x126>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f043 0208 	orr.w	r2, r3, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 81ed 	beq.w	80063ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_UART_IRQHandler+0x14e>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb92 	bl	8006752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <HAL_UART_IRQHandler+0x17a>
 8006052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04f      	beq.n	80060fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa9a 	bl	8006594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d141      	bne.n	80060f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800608c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800609a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800609e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1d9      	bne.n	800606e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d013      	beq.n	80060ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	4a7d      	ldr	r2, [pc, #500]	; (80062bc <HAL_UART_IRQHandler+0x3dc>)
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fc f899 	bl	8002206 <HAL_DMA_Abort_IT>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e00e      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f990 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e00a      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f98c 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	e006      	b.n	8006108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f988 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006106:	e170      	b.n	80063ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	bf00      	nop
    return;
 800610a:	e16e      	b.n	80063ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 814a 	bne.w	80063aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8143 	beq.w	80063aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 813c 	beq.w	80063aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	f040 80b4 	bne.w	80062c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8140 	beq.w	80063ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006176:	429a      	cmp	r2, r3
 8006178:	f080 8139 	bcs.w	80063ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618e:	f000 8088 	beq.w	80062a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1d9      	bne.n	8006192 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3314      	adds	r3, #20
 80061fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800620a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e1      	bne.n	80061de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800622a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800623e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800624c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e3      	bne.n	800621a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006284:	65ba      	str	r2, [r7, #88]	; 0x58
 8006286:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800628a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e3      	bne.n	8006260 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	4618      	mov	r0, r3
 800629e:	f7fb ff42 	bl	8002126 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8b6 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b8:	e099      	b.n	80063ee <HAL_UART_IRQHandler+0x50e>
 80062ba:	bf00      	nop
 80062bc:	0800665b 	.word	0x0800665b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 808b 	beq.w	80063f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8086 	beq.w	80063f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800630a:	647a      	str	r2, [r7, #68]	; 0x44
 800630c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e3      	bne.n	80062e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	623b      	str	r3, [r7, #32]
   return(result);
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006342:	633a      	str	r2, [r7, #48]	; 0x30
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e3      	bne.n	800631e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	60fb      	str	r3, [r7, #12]
   return(result);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0310 	bic.w	r3, r3, #16
 800637a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	69b9      	ldr	r1, [r7, #24]
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	617b      	str	r3, [r7, #20]
   return(result);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e3      	bne.n	8006364 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800639c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f83e 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a8:	e023      	b.n	80063f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <HAL_UART_IRQHandler+0x4ea>
 80063b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f95d 	bl	8006682 <UART_Transmit_IT>
    return;
 80063c8:	e014      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <HAL_UART_IRQHandler+0x514>
 80063d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f99d 	bl	8006722 <UART_EndTransmit_IT>
    return;
 80063e8:	e004      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
    return;
 80063ea:	bf00      	nop
 80063ec:	e002      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
      return;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HAL_UART_IRQHandler+0x514>
      return;
 80063f2:	bf00      	nop
  }
}
 80063f4:	37e8      	adds	r7, #232	; 0xe8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b090      	sub	sp, #64	; 0x40
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	e050      	b.n	80064f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d04c      	beq.n	80064f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <UART_WaitOnFlagUntilTimeout+0x30>
 800645c:	f7fb fd22 	bl	8001ea4 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006468:	429a      	cmp	r2, r3
 800646a:	d241      	bcs.n	80064f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800648c:	637a      	str	r2, [r7, #52]	; 0x34
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3314      	adds	r3, #20
 80064a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	613b      	str	r3, [r7, #16]
   return(result);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c0:	623a      	str	r2, [r7, #32]
 80064c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	69f9      	ldr	r1, [r7, #28]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e00f      	b.n	8006510 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	429a      	cmp	r2, r3
 800650c:	d09f      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3740      	adds	r7, #64	; 0x40
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	88fa      	ldrh	r2, [r7, #6]
 8006536:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2222      	movs	r2, #34	; 0x22
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006564:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0220 	orr.w	r2, r2, #32
 8006584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b095      	sub	sp, #84	; 0x54
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065bc:	643a      	str	r2, [r7, #64]	; 0x40
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3314      	adds	r3, #20
 80065d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	2b01      	cmp	r3, #1
 800660a:	d119      	bne.n	8006640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60bb      	str	r3, [r7, #8]
   return(result);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	647b      	str	r3, [r7, #68]	; 0x44
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800662c:	61ba      	str	r2, [r7, #24]
 800662e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6979      	ldr	r1, [r7, #20]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800664e:	bf00      	nop
 8006650:	3754      	adds	r7, #84	; 0x54
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff fecb 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b21      	cmp	r3, #33	; 0x21
 8006694:	d13e      	bne.n	8006714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669e:	d114      	bne.n	80066ca <UART_Transmit_IT+0x48>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	1c9a      	adds	r2, r3, #2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]
 80066c8:	e008      	b.n	80066dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6211      	str	r1, [r2, #32]
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	4619      	mov	r1, r3
 80066ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10f      	bne.n	8006710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800670e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e000      	b.n	8006716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006714:	2302      	movs	r3, #2
  }
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fe5a 	bl	80063fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b08c      	sub	sp, #48	; 0x30
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b22      	cmp	r3, #34	; 0x22
 8006764:	f040 80ab 	bne.w	80068be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006770:	d117      	bne.n	80067a2 <UART_Receive_IT+0x50>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d113      	bne.n	80067a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006790:	b29a      	uxth	r2, r3
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
 80067a0:	e026      	b.n	80067f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b4:	d007      	beq.n	80067c6 <UART_Receive_IT+0x74>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <UART_Receive_IT+0x82>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e008      	b.n	80067e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4619      	mov	r1, r3
 80067fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006800:	2b00      	cmp	r3, #0
 8006802:	d15a      	bne.n	80068ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0220 	bic.w	r2, r2, #32
 8006812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2b01      	cmp	r3, #1
 8006842:	d135      	bne.n	80068b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	613b      	str	r3, [r7, #16]
   return(result);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f023 0310 	bic.w	r3, r3, #16
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	623a      	str	r2, [r7, #32]
 800686c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	69f9      	ldr	r1, [r7, #28]
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	61bb      	str	r3, [r7, #24]
   return(result);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b10      	cmp	r3, #16
 800688a:	d10a      	bne.n	80068a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fdbb 	bl	8006424 <HAL_UARTEx_RxEventCallback>
 80068ae:	e002      	b.n	80068b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fb f9af 	bl	8001c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e002      	b.n	80068c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068cc:	b0c0      	sub	sp, #256	; 0x100
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	68d9      	ldr	r1, [r3, #12]
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	ea40 0301 	orr.w	r3, r0, r1
 80068f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	431a      	orrs	r2, r3
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	431a      	orrs	r2, r3
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006920:	f021 010c 	bic.w	r1, r1, #12
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800692e:	430b      	orrs	r3, r1
 8006930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	6999      	ldr	r1, [r3, #24]
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	ea40 0301 	orr.w	r3, r0, r1
 800694e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b8f      	ldr	r3, [pc, #572]	; (8006b94 <UART_SetConfig+0x2cc>)
 8006958:	429a      	cmp	r2, r3
 800695a:	d005      	beq.n	8006968 <UART_SetConfig+0xa0>
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4b8d      	ldr	r3, [pc, #564]	; (8006b98 <UART_SetConfig+0x2d0>)
 8006964:	429a      	cmp	r2, r3
 8006966:	d104      	bne.n	8006972 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006968:	f7fd f8e2 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 800696c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006970:	e003      	b.n	800697a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006972:	f7fd f8c9 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8006976:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006984:	f040 810c 	bne.w	8006ba0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698c:	2200      	movs	r2, #0
 800698e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006992:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800699a:	4622      	mov	r2, r4
 800699c:	462b      	mov	r3, r5
 800699e:	1891      	adds	r1, r2, r2
 80069a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80069a2:	415b      	adcs	r3, r3
 80069a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069aa:	4621      	mov	r1, r4
 80069ac:	eb12 0801 	adds.w	r8, r2, r1
 80069b0:	4629      	mov	r1, r5
 80069b2:	eb43 0901 	adc.w	r9, r3, r1
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069ca:	4690      	mov	r8, r2
 80069cc:	4699      	mov	r9, r3
 80069ce:	4623      	mov	r3, r4
 80069d0:	eb18 0303 	adds.w	r3, r8, r3
 80069d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069d8:	462b      	mov	r3, r5
 80069da:	eb49 0303 	adc.w	r3, r9, r3
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069f6:	460b      	mov	r3, r1
 80069f8:	18db      	adds	r3, r3, r3
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	4613      	mov	r3, r2
 80069fe:	eb42 0303 	adc.w	r3, r2, r3
 8006a02:	657b      	str	r3, [r7, #84]	; 0x54
 8006a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a0c:	f7f9 fbee 	bl	80001ec <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4b61      	ldr	r3, [pc, #388]	; (8006b9c <UART_SetConfig+0x2d4>)
 8006a16:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	011c      	lsls	r4, r3, #4
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a40:	4641      	mov	r1, r8
 8006a42:	eb12 0a01 	adds.w	sl, r2, r1
 8006a46:	4649      	mov	r1, r9
 8006a48:	eb43 0b01 	adc.w	fp, r3, r1
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a60:	4692      	mov	sl, r2
 8006a62:	469b      	mov	fp, r3
 8006a64:	4643      	mov	r3, r8
 8006a66:	eb1a 0303 	adds.w	r3, sl, r3
 8006a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	eb4b 0303 	adc.w	r3, fp, r3
 8006a74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	18db      	adds	r3, r3, r3
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
 8006a92:	4613      	mov	r3, r2
 8006a94:	eb42 0303 	adc.w	r3, r2, r3
 8006a98:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aa2:	f7f9 fba3 	bl	80001ec <__aeabi_uldivmod>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <UART_SetConfig+0x2d4>)
 8006aae:	fba3 2301 	umull	r2, r3, r3, r1
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	2264      	movs	r2, #100	; 0x64
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	1acb      	subs	r3, r1, r3
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ac2:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <UART_SetConfig+0x2d4>)
 8006ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ad0:	441c      	add	r4, r3
 8006ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006adc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ae0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006aec:	415b      	adcs	r3, r3
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006af4:	4641      	mov	r1, r8
 8006af6:	1851      	adds	r1, r2, r1
 8006af8:	6339      	str	r1, [r7, #48]	; 0x30
 8006afa:	4649      	mov	r1, r9
 8006afc:	414b      	adcs	r3, r1
 8006afe:	637b      	str	r3, [r7, #52]	; 0x34
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	00cb      	lsls	r3, r1, #3
 8006b10:	4651      	mov	r1, sl
 8006b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b16:	4651      	mov	r1, sl
 8006b18:	00ca      	lsls	r2, r1, #3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4642      	mov	r2, r8
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b28:	464b      	mov	r3, r9
 8006b2a:	460a      	mov	r2, r1
 8006b2c:	eb42 0303 	adc.w	r3, r2, r3
 8006b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b48:	460b      	mov	r3, r1
 8006b4a:	18db      	adds	r3, r3, r3
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4e:	4613      	mov	r3, r2
 8006b50:	eb42 0303 	adc.w	r3, r2, r3
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b5e:	f7f9 fb45 	bl	80001ec <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <UART_SetConfig+0x2d4>)
 8006b68:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	2164      	movs	r1, #100	; 0x64
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	3332      	adds	r3, #50	; 0x32
 8006b7a:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <UART_SetConfig+0x2d4>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	f003 0207 	and.w	r2, r3, #7
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4422      	add	r2, r4
 8006b8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b90:	e106      	b.n	8006da0 <UART_SetConfig+0x4d8>
 8006b92:	bf00      	nop
 8006b94:	40011000 	.word	0x40011000
 8006b98:	40011400 	.word	0x40011400
 8006b9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006baa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	1891      	adds	r1, r2, r2
 8006bb8:	6239      	str	r1, [r7, #32]
 8006bba:	415b      	adcs	r3, r3
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	1854      	adds	r4, r2, r1
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	eb43 0501 	adc.w	r5, r3, r1
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	00eb      	lsls	r3, r5, #3
 8006bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bda:	00e2      	lsls	r2, r4, #3
 8006bdc:	4614      	mov	r4, r2
 8006bde:	461d      	mov	r5, r3
 8006be0:	4643      	mov	r3, r8
 8006be2:	18e3      	adds	r3, r4, r3
 8006be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be8:	464b      	mov	r3, r9
 8006bea:	eb45 0303 	adc.w	r3, r5, r3
 8006bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c0e:	4629      	mov	r1, r5
 8006c10:	008b      	lsls	r3, r1, #2
 8006c12:	4621      	mov	r1, r4
 8006c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c18:	4621      	mov	r1, r4
 8006c1a:	008a      	lsls	r2, r1, #2
 8006c1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c20:	f7f9 fae4 	bl	80001ec <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4b60      	ldr	r3, [pc, #384]	; (8006dac <UART_SetConfig+0x4e4>)
 8006c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	011c      	lsls	r4, r3, #4
 8006c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	1891      	adds	r1, r2, r2
 8006c4a:	61b9      	str	r1, [r7, #24]
 8006c4c:	415b      	adcs	r3, r3
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c54:	4641      	mov	r1, r8
 8006c56:	1851      	adds	r1, r2, r1
 8006c58:	6139      	str	r1, [r7, #16]
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	414b      	adcs	r3, r1
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	00cb      	lsls	r3, r1, #3
 8006c70:	4651      	mov	r1, sl
 8006c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c76:	4651      	mov	r1, sl
 8006c78:	00ca      	lsls	r2, r1, #3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4642      	mov	r2, r8
 8006c82:	189b      	adds	r3, r3, r2
 8006c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c88:	464b      	mov	r3, r9
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	eb42 0303 	adc.w	r3, r2, r3
 8006c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cac:	4649      	mov	r1, r9
 8006cae:	008b      	lsls	r3, r1, #2
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	008a      	lsls	r2, r1, #2
 8006cba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cbe:	f7f9 fa95 	bl	80001ec <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4b38      	ldr	r3, [pc, #224]	; (8006dac <UART_SetConfig+0x4e4>)
 8006cca:	fba3 2301 	umull	r2, r3, r3, r1
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	2264      	movs	r2, #100	; 0x64
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	1acb      	subs	r3, r1, r3
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	3332      	adds	r3, #50	; 0x32
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <UART_SetConfig+0x4e4>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ce8:	441c      	add	r4, r3
 8006cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cee:	2200      	movs	r2, #0
 8006cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8006cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8006cf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	1891      	adds	r1, r2, r2
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	415b      	adcs	r3, r3
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d08:	4641      	mov	r1, r8
 8006d0a:	1851      	adds	r1, r2, r1
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	4649      	mov	r1, r9
 8006d10:	414b      	adcs	r3, r1
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d20:	4659      	mov	r1, fp
 8006d22:	00cb      	lsls	r3, r1, #3
 8006d24:	4651      	mov	r1, sl
 8006d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	00ca      	lsls	r2, r1, #3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	4642      	mov	r2, r8
 8006d36:	189b      	adds	r3, r3, r2
 8006d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	460a      	mov	r2, r1
 8006d3e:	eb42 0303 	adc.w	r3, r2, r3
 8006d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d4e:	667a      	str	r2, [r7, #100]	; 0x64
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	008b      	lsls	r3, r1, #2
 8006d60:	4641      	mov	r1, r8
 8006d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d66:	4641      	mov	r1, r8
 8006d68:	008a      	lsls	r2, r1, #2
 8006d6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d6e:	f7f9 fa3d 	bl	80001ec <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <UART_SetConfig+0x4e4>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <UART_SetConfig+0x4e4>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 020f 	and.w	r2, r3, #15
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4422      	add	r2, r4
 8006d9e:	609a      	str	r2, [r3, #8]
}
 8006da0:	bf00      	nop
 8006da2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006da6:	46bd      	mov	sp, r7
 8006da8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dac:	51eb851f 	.word	0x51eb851f

08006db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006db0:	b084      	sub	sp, #16
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	f107 001c 	add.w	r0, r7, #28
 8006dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d122      	bne.n	8006e0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 faa2 	bl	800734c <USB_CoreReset>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
 8006e0c:	e01a      	b.n	8006e44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa96 	bl	800734c <USB_CoreReset>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
 8006e36:	e005      	b.n	8006e44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10b      	bne.n	8006e62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f043 0206 	orr.w	r2, r3, #6
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f043 0220 	orr.w	r2, r3, #32
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e6e:	b004      	add	sp, #16
 8006e70:	4770      	bx	lr

08006e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f023 0201 	bic.w	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d115      	bne.n	8006ee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	f7fa fffa 	bl	8001ebc <HAL_Delay>
      ms++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa2e 	bl	8007330 <USB_GetMode>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d01e      	beq.n	8006f18 <USB_SetCurrentMode+0x84>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b31      	cmp	r3, #49	; 0x31
 8006ede:	d9f0      	bls.n	8006ec2 <USB_SetCurrentMode+0x2e>
 8006ee0:	e01a      	b.n	8006f18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d115      	bne.n	8006f14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7fa ffe1 	bl	8001ebc <HAL_Delay>
      ms++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa15 	bl	8007330 <USB_GetMode>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <USB_SetCurrentMode+0x84>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b31      	cmp	r3, #49	; 0x31
 8006f10:	d9f0      	bls.n	8006ef4 <USB_SetCurrentMode+0x60>
 8006f12:	e001      	b.n	8006f18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e005      	b.n	8006f24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b32      	cmp	r3, #50	; 0x32
 8006f1c:	d101      	bne.n	8006f22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e009      	b.n	8006f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3340      	adds	r3, #64	; 0x40
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b0e      	cmp	r3, #14
 8006f64:	d9f2      	bls.n	8006f4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d11c      	bne.n	8006fa6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8006fa4:	e00b      	b.n	8006fbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd8:	461a      	mov	r2, r3
 8006fda:	680b      	ldr	r3, [r1, #0]
 8006fdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d10c      	bne.n	8006ffe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fea:	2100      	movs	r1, #0
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f965 	bl	80072bc <USB_SetDevSpeed>
 8006ff2:	e008      	b.n	8007006 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f960 	bl	80072bc <USB_SetDevSpeed>
 8006ffc:	e003      	b.n	8007006 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ffe:	2103      	movs	r1, #3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f95b 	bl	80072bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007006:	2110      	movs	r1, #16
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8f3 	bl	80071f4 <USB_FlushTxFifo>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f91f 	bl	800725c <USB_FlushRxFifo>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	461a      	mov	r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	461a      	mov	r2, r3
 800703c:	2300      	movs	r3, #0
 800703e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e043      	b.n	80070da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007068:	d118      	bne.n	800709c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	461a      	mov	r2, r3
 800707e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e013      	b.n	80070ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	461a      	mov	r2, r3
 8007094:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e008      	b.n	80070ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	461a      	mov	r2, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	461a      	mov	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	461a      	mov	r2, r3
 80070ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	3301      	adds	r3, #1
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3b7      	bcc.n	8007052 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070e2:	2300      	movs	r3, #0
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	e043      	b.n	8007170 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070fe:	d118      	bne.n	8007132 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007112:	461a      	mov	r2, r3
 8007114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	e013      	b.n	8007144 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	461a      	mov	r2, r3
 800712a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e008      	b.n	8007144 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	461a      	mov	r2, r3
 8007140:	2300      	movs	r3, #0
 8007142:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	461a      	mov	r2, r3
 8007152:	2300      	movs	r3, #0
 8007154:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007162:	461a      	mov	r2, r3
 8007164:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007168:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3301      	adds	r3, #1
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3b7      	bcc.n	80070e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800718a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007198:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f043 0210 	orr.w	r2, r3, #16
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <USB_DevInit+0x2c4>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f043 0208 	orr.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d107      	bne.n	80071e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d8:	f043 0304 	orr.w	r3, r3, #4
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071ec:	b004      	add	sp, #16
 80071ee:	4770      	bx	lr
 80071f0:	803c3800 	.word	0x803c3800

080071f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <USB_FlushTxFifo+0x64>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d901      	bls.n	8007214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e01b      	b.n	800724c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	daf2      	bge.n	8007202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	019b      	lsls	r3, r3, #6
 8007224:	f043 0220 	orr.w	r2, r3, #32
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a08      	ldr	r2, [pc, #32]	; (8007258 <USB_FlushTxFifo+0x64>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d901      	bls.n	800723e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e006      	b.n	800724c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d0f0      	beq.n	800722c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	00030d40 	.word	0x00030d40

0800725c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <USB_FlushRxFifo+0x5c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e018      	b.n	80072ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	daf2      	bge.n	8007268 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2210      	movs	r2, #16
 800728a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <USB_FlushRxFifo+0x5c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e006      	b.n	80072ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0310 	and.w	r3, r3, #16
 80072a6:	2b10      	cmp	r3, #16
 80072a8:	d0f0      	beq.n	800728c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	00030d40 	.word	0x00030d40

080072bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072dc:	4313      	orrs	r3, r2
 80072de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007308:	f023 0303 	bic.w	r3, r3, #3
 800730c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731c:	f043 0302 	orr.w	r3, r3, #2
 8007320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f003 0301 	and.w	r3, r3, #1
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4a13      	ldr	r2, [pc, #76]	; (80073b0 <USB_CoreReset+0x64>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e01b      	b.n	80073a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	daf2      	bge.n	8007358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f043 0201 	orr.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <USB_CoreReset+0x64>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d901      	bls.n	8007394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e006      	b.n	80073a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d0f0      	beq.n	8007382 <USB_CoreReset+0x36>

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	00030d40 	.word	0x00030d40

080073b4 <std>:
 80073b4:	2300      	movs	r3, #0
 80073b6:	b510      	push	{r4, lr}
 80073b8:	4604      	mov	r4, r0
 80073ba:	e9c0 3300 	strd	r3, r3, [r0]
 80073be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073c2:	6083      	str	r3, [r0, #8]
 80073c4:	8181      	strh	r1, [r0, #12]
 80073c6:	6643      	str	r3, [r0, #100]	; 0x64
 80073c8:	81c2      	strh	r2, [r0, #14]
 80073ca:	6183      	str	r3, [r0, #24]
 80073cc:	4619      	mov	r1, r3
 80073ce:	2208      	movs	r2, #8
 80073d0:	305c      	adds	r0, #92	; 0x5c
 80073d2:	f000 f9e5 	bl	80077a0 <memset>
 80073d6:	4b0d      	ldr	r3, [pc, #52]	; (800740c <std+0x58>)
 80073d8:	6263      	str	r3, [r4, #36]	; 0x24
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <std+0x5c>)
 80073dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <std+0x60>)
 80073e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073e2:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <std+0x64>)
 80073e4:	6323      	str	r3, [r4, #48]	; 0x30
 80073e6:	4b0d      	ldr	r3, [pc, #52]	; (800741c <std+0x68>)
 80073e8:	6224      	str	r4, [r4, #32]
 80073ea:	429c      	cmp	r4, r3
 80073ec:	d006      	beq.n	80073fc <std+0x48>
 80073ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80073f2:	4294      	cmp	r4, r2
 80073f4:	d002      	beq.n	80073fc <std+0x48>
 80073f6:	33d0      	adds	r3, #208	; 0xd0
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d105      	bne.n	8007408 <std+0x54>
 80073fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007404:	f000 ba44 	b.w	8007890 <__retarget_lock_init_recursive>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	bf00      	nop
 800740c:	080075f1 	.word	0x080075f1
 8007410:	08007613 	.word	0x08007613
 8007414:	0800764b 	.word	0x0800764b
 8007418:	0800766f 	.word	0x0800766f
 800741c:	20000dc0 	.word	0x20000dc0

08007420 <stdio_exit_handler>:
 8007420:	4a02      	ldr	r2, [pc, #8]	; (800742c <stdio_exit_handler+0xc>)
 8007422:	4903      	ldr	r1, [pc, #12]	; (8007430 <stdio_exit_handler+0x10>)
 8007424:	4803      	ldr	r0, [pc, #12]	; (8007434 <stdio_exit_handler+0x14>)
 8007426:	f000 b869 	b.w	80074fc <_fwalk_sglue>
 800742a:	bf00      	nop
 800742c:	20000138 	.word	0x20000138
 8007430:	08007b95 	.word	0x08007b95
 8007434:	20000144 	.word	0x20000144

08007438 <cleanup_stdio>:
 8007438:	6841      	ldr	r1, [r0, #4]
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <cleanup_stdio+0x34>)
 800743c:	4299      	cmp	r1, r3
 800743e:	b510      	push	{r4, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	d001      	beq.n	8007448 <cleanup_stdio+0x10>
 8007444:	f000 fba6 	bl	8007b94 <_fflush_r>
 8007448:	68a1      	ldr	r1, [r4, #8]
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <cleanup_stdio+0x38>)
 800744c:	4299      	cmp	r1, r3
 800744e:	d002      	beq.n	8007456 <cleanup_stdio+0x1e>
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fb9f 	bl	8007b94 <_fflush_r>
 8007456:	68e1      	ldr	r1, [r4, #12]
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <cleanup_stdio+0x3c>)
 800745a:	4299      	cmp	r1, r3
 800745c:	d004      	beq.n	8007468 <cleanup_stdio+0x30>
 800745e:	4620      	mov	r0, r4
 8007460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007464:	f000 bb96 	b.w	8007b94 <_fflush_r>
 8007468:	bd10      	pop	{r4, pc}
 800746a:	bf00      	nop
 800746c:	20000dc0 	.word	0x20000dc0
 8007470:	20000e28 	.word	0x20000e28
 8007474:	20000e90 	.word	0x20000e90

08007478 <global_stdio_init.part.0>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <global_stdio_init.part.0+0x30>)
 800747c:	4c0b      	ldr	r4, [pc, #44]	; (80074ac <global_stdio_init.part.0+0x34>)
 800747e:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <global_stdio_init.part.0+0x38>)
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	4620      	mov	r0, r4
 8007484:	2200      	movs	r2, #0
 8007486:	2104      	movs	r1, #4
 8007488:	f7ff ff94 	bl	80073b4 <std>
 800748c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007490:	2201      	movs	r2, #1
 8007492:	2109      	movs	r1, #9
 8007494:	f7ff ff8e 	bl	80073b4 <std>
 8007498:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800749c:	2202      	movs	r2, #2
 800749e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a2:	2112      	movs	r1, #18
 80074a4:	f7ff bf86 	b.w	80073b4 <std>
 80074a8:	20000ef8 	.word	0x20000ef8
 80074ac:	20000dc0 	.word	0x20000dc0
 80074b0:	08007421 	.word	0x08007421

080074b4 <__sfp_lock_acquire>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__sfp_lock_acquire+0x8>)
 80074b6:	f000 b9ec 	b.w	8007892 <__retarget_lock_acquire_recursive>
 80074ba:	bf00      	nop
 80074bc:	20000f01 	.word	0x20000f01

080074c0 <__sfp_lock_release>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__sfp_lock_release+0x8>)
 80074c2:	f000 b9e7 	b.w	8007894 <__retarget_lock_release_recursive>
 80074c6:	bf00      	nop
 80074c8:	20000f01 	.word	0x20000f01

080074cc <__sinit>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	f7ff fff0 	bl	80074b4 <__sfp_lock_acquire>
 80074d4:	6a23      	ldr	r3, [r4, #32]
 80074d6:	b11b      	cbz	r3, 80074e0 <__sinit+0x14>
 80074d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074dc:	f7ff bff0 	b.w	80074c0 <__sfp_lock_release>
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <__sinit+0x28>)
 80074e2:	6223      	str	r3, [r4, #32]
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <__sinit+0x2c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f5      	bne.n	80074d8 <__sinit+0xc>
 80074ec:	f7ff ffc4 	bl	8007478 <global_stdio_init.part.0>
 80074f0:	e7f2      	b.n	80074d8 <__sinit+0xc>
 80074f2:	bf00      	nop
 80074f4:	08007439 	.word	0x08007439
 80074f8:	20000ef8 	.word	0x20000ef8

080074fc <_fwalk_sglue>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4607      	mov	r7, r0
 8007502:	4688      	mov	r8, r1
 8007504:	4614      	mov	r4, r2
 8007506:	2600      	movs	r6, #0
 8007508:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750c:	f1b9 0901 	subs.w	r9, r9, #1
 8007510:	d505      	bpl.n	800751e <_fwalk_sglue+0x22>
 8007512:	6824      	ldr	r4, [r4, #0]
 8007514:	2c00      	cmp	r4, #0
 8007516:	d1f7      	bne.n	8007508 <_fwalk_sglue+0xc>
 8007518:	4630      	mov	r0, r6
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d907      	bls.n	8007534 <_fwalk_sglue+0x38>
 8007524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007528:	3301      	adds	r3, #1
 800752a:	d003      	beq.n	8007534 <_fwalk_sglue+0x38>
 800752c:	4629      	mov	r1, r5
 800752e:	4638      	mov	r0, r7
 8007530:	47c0      	blx	r8
 8007532:	4306      	orrs	r6, r0
 8007534:	3568      	adds	r5, #104	; 0x68
 8007536:	e7e9      	b.n	800750c <_fwalk_sglue+0x10>

08007538 <_puts_r>:
 8007538:	6a03      	ldr	r3, [r0, #32]
 800753a:	b570      	push	{r4, r5, r6, lr}
 800753c:	6884      	ldr	r4, [r0, #8]
 800753e:	4605      	mov	r5, r0
 8007540:	460e      	mov	r6, r1
 8007542:	b90b      	cbnz	r3, 8007548 <_puts_r+0x10>
 8007544:	f7ff ffc2 	bl	80074cc <__sinit>
 8007548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800754a:	07db      	lsls	r3, r3, #31
 800754c:	d405      	bmi.n	800755a <_puts_r+0x22>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	0598      	lsls	r0, r3, #22
 8007552:	d402      	bmi.n	800755a <_puts_r+0x22>
 8007554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007556:	f000 f99c 	bl	8007892 <__retarget_lock_acquire_recursive>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	0719      	lsls	r1, r3, #28
 800755e:	d513      	bpl.n	8007588 <_puts_r+0x50>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b18b      	cbz	r3, 8007588 <_puts_r+0x50>
 8007564:	3e01      	subs	r6, #1
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800756c:	3b01      	subs	r3, #1
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	b9e9      	cbnz	r1, 80075ae <_puts_r+0x76>
 8007572:	2b00      	cmp	r3, #0
 8007574:	da2e      	bge.n	80075d4 <_puts_r+0x9c>
 8007576:	4622      	mov	r2, r4
 8007578:	210a      	movs	r1, #10
 800757a:	4628      	mov	r0, r5
 800757c:	f000 f87b 	bl	8007676 <__swbuf_r>
 8007580:	3001      	adds	r0, #1
 8007582:	d007      	beq.n	8007594 <_puts_r+0x5c>
 8007584:	250a      	movs	r5, #10
 8007586:	e007      	b.n	8007598 <_puts_r+0x60>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f8b0 	bl	80076f0 <__swsetup_r>
 8007590:	2800      	cmp	r0, #0
 8007592:	d0e7      	beq.n	8007564 <_puts_r+0x2c>
 8007594:	f04f 35ff 	mov.w	r5, #4294967295
 8007598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759a:	07da      	lsls	r2, r3, #31
 800759c:	d405      	bmi.n	80075aa <_puts_r+0x72>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	059b      	lsls	r3, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_puts_r+0x72>
 80075a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a6:	f000 f975 	bl	8007894 <__retarget_lock_release_recursive>
 80075aa:	4628      	mov	r0, r5
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da04      	bge.n	80075bc <_puts_r+0x84>
 80075b2:	69a2      	ldr	r2, [r4, #24]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	dc06      	bgt.n	80075c6 <_puts_r+0x8e>
 80075b8:	290a      	cmp	r1, #10
 80075ba:	d004      	beq.n	80075c6 <_puts_r+0x8e>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	7019      	strb	r1, [r3, #0]
 80075c4:	e7cf      	b.n	8007566 <_puts_r+0x2e>
 80075c6:	4622      	mov	r2, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 f854 	bl	8007676 <__swbuf_r>
 80075ce:	3001      	adds	r0, #1
 80075d0:	d1c9      	bne.n	8007566 <_puts_r+0x2e>
 80075d2:	e7df      	b.n	8007594 <_puts_r+0x5c>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	250a      	movs	r5, #10
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	701d      	strb	r5, [r3, #0]
 80075de:	e7db      	b.n	8007598 <_puts_r+0x60>

080075e0 <puts>:
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <puts+0xc>)
 80075e2:	4601      	mov	r1, r0
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	f7ff bfa7 	b.w	8007538 <_puts_r>
 80075ea:	bf00      	nop
 80075ec:	20000190 	.word	0x20000190

080075f0 <__sread>:
 80075f0:	b510      	push	{r4, lr}
 80075f2:	460c      	mov	r4, r1
 80075f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f8:	f000 f8fc 	bl	80077f4 <_read_r>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	bfab      	itete	ge
 8007600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007602:	89a3      	ldrhlt	r3, [r4, #12]
 8007604:	181b      	addge	r3, r3, r0
 8007606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800760a:	bfac      	ite	ge
 800760c:	6563      	strge	r3, [r4, #84]	; 0x54
 800760e:	81a3      	strhlt	r3, [r4, #12]
 8007610:	bd10      	pop	{r4, pc}

08007612 <__swrite>:
 8007612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007616:	461f      	mov	r7, r3
 8007618:	898b      	ldrh	r3, [r1, #12]
 800761a:	05db      	lsls	r3, r3, #23
 800761c:	4605      	mov	r5, r0
 800761e:	460c      	mov	r4, r1
 8007620:	4616      	mov	r6, r2
 8007622:	d505      	bpl.n	8007630 <__swrite+0x1e>
 8007624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007628:	2302      	movs	r3, #2
 800762a:	2200      	movs	r2, #0
 800762c:	f000 f8d0 	bl	80077d0 <_lseek_r>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	4632      	mov	r2, r6
 800763e:	463b      	mov	r3, r7
 8007640:	4628      	mov	r0, r5
 8007642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007646:	f000 b8e7 	b.w	8007818 <_write_r>

0800764a <__sseek>:
 800764a:	b510      	push	{r4, lr}
 800764c:	460c      	mov	r4, r1
 800764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007652:	f000 f8bd 	bl	80077d0 <_lseek_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	bf15      	itete	ne
 800765c:	6560      	strne	r0, [r4, #84]	; 0x54
 800765e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007666:	81a3      	strheq	r3, [r4, #12]
 8007668:	bf18      	it	ne
 800766a:	81a3      	strhne	r3, [r4, #12]
 800766c:	bd10      	pop	{r4, pc}

0800766e <__sclose>:
 800766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007672:	f000 b89d 	b.w	80077b0 <_close_r>

08007676 <__swbuf_r>:
 8007676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007678:	460e      	mov	r6, r1
 800767a:	4614      	mov	r4, r2
 800767c:	4605      	mov	r5, r0
 800767e:	b118      	cbz	r0, 8007688 <__swbuf_r+0x12>
 8007680:	6a03      	ldr	r3, [r0, #32]
 8007682:	b90b      	cbnz	r3, 8007688 <__swbuf_r+0x12>
 8007684:	f7ff ff22 	bl	80074cc <__sinit>
 8007688:	69a3      	ldr	r3, [r4, #24]
 800768a:	60a3      	str	r3, [r4, #8]
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	071a      	lsls	r2, r3, #28
 8007690:	d525      	bpl.n	80076de <__swbuf_r+0x68>
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	b31b      	cbz	r3, 80076de <__swbuf_r+0x68>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	6922      	ldr	r2, [r4, #16]
 800769a:	1a98      	subs	r0, r3, r2
 800769c:	6963      	ldr	r3, [r4, #20]
 800769e:	b2f6      	uxtb	r6, r6
 80076a0:	4283      	cmp	r3, r0
 80076a2:	4637      	mov	r7, r6
 80076a4:	dc04      	bgt.n	80076b0 <__swbuf_r+0x3a>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fa73 	bl	8007b94 <_fflush_r>
 80076ae:	b9e0      	cbnz	r0, 80076ea <__swbuf_r+0x74>
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	6022      	str	r2, [r4, #0]
 80076bc:	701e      	strb	r6, [r3, #0]
 80076be:	6962      	ldr	r2, [r4, #20]
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d004      	beq.n	80076d0 <__swbuf_r+0x5a>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	07db      	lsls	r3, r3, #31
 80076ca:	d506      	bpl.n	80076da <__swbuf_r+0x64>
 80076cc:	2e0a      	cmp	r6, #10
 80076ce:	d104      	bne.n	80076da <__swbuf_r+0x64>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fa5e 	bl	8007b94 <_fflush_r>
 80076d8:	b938      	cbnz	r0, 80076ea <__swbuf_r+0x74>
 80076da:	4638      	mov	r0, r7
 80076dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f805 	bl	80076f0 <__swsetup_r>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d0d5      	beq.n	8007696 <__swbuf_r+0x20>
 80076ea:	f04f 37ff 	mov.w	r7, #4294967295
 80076ee:	e7f4      	b.n	80076da <__swbuf_r+0x64>

080076f0 <__swsetup_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4b2a      	ldr	r3, [pc, #168]	; (800779c <__swsetup_r+0xac>)
 80076f4:	4605      	mov	r5, r0
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	460c      	mov	r4, r1
 80076fa:	b118      	cbz	r0, 8007704 <__swsetup_r+0x14>
 80076fc:	6a03      	ldr	r3, [r0, #32]
 80076fe:	b90b      	cbnz	r3, 8007704 <__swsetup_r+0x14>
 8007700:	f7ff fee4 	bl	80074cc <__sinit>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800770a:	0718      	lsls	r0, r3, #28
 800770c:	d422      	bmi.n	8007754 <__swsetup_r+0x64>
 800770e:	06d9      	lsls	r1, r3, #27
 8007710:	d407      	bmi.n	8007722 <__swsetup_r+0x32>
 8007712:	2309      	movs	r3, #9
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e034      	b.n	800778c <__swsetup_r+0x9c>
 8007722:	0758      	lsls	r0, r3, #29
 8007724:	d512      	bpl.n	800774c <__swsetup_r+0x5c>
 8007726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007728:	b141      	cbz	r1, 800773c <__swsetup_r+0x4c>
 800772a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800772e:	4299      	cmp	r1, r3
 8007730:	d002      	beq.n	8007738 <__swsetup_r+0x48>
 8007732:	4628      	mov	r0, r5
 8007734:	f000 f8b0 	bl	8007898 <_free_r>
 8007738:	2300      	movs	r3, #0
 800773a:	6363      	str	r3, [r4, #52]	; 0x34
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	2300      	movs	r3, #0
 8007746:	6063      	str	r3, [r4, #4]
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	f043 0308 	orr.w	r3, r3, #8
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	b94b      	cbnz	r3, 800776c <__swsetup_r+0x7c>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800775e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007762:	d003      	beq.n	800776c <__swsetup_r+0x7c>
 8007764:	4621      	mov	r1, r4
 8007766:	4628      	mov	r0, r5
 8007768:	f000 fa62 	bl	8007c30 <__smakebuf_r>
 800776c:	89a0      	ldrh	r0, [r4, #12]
 800776e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007772:	f010 0301 	ands.w	r3, r0, #1
 8007776:	d00a      	beq.n	800778e <__swsetup_r+0x9e>
 8007778:	2300      	movs	r3, #0
 800777a:	60a3      	str	r3, [r4, #8]
 800777c:	6963      	ldr	r3, [r4, #20]
 800777e:	425b      	negs	r3, r3
 8007780:	61a3      	str	r3, [r4, #24]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	b943      	cbnz	r3, 8007798 <__swsetup_r+0xa8>
 8007786:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800778a:	d1c4      	bne.n	8007716 <__swsetup_r+0x26>
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	0781      	lsls	r1, r0, #30
 8007790:	bf58      	it	pl
 8007792:	6963      	ldrpl	r3, [r4, #20]
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	e7f4      	b.n	8007782 <__swsetup_r+0x92>
 8007798:	2000      	movs	r0, #0
 800779a:	e7f7      	b.n	800778c <__swsetup_r+0x9c>
 800779c:	20000190 	.word	0x20000190

080077a0 <memset>:
 80077a0:	4402      	add	r2, r0
 80077a2:	4603      	mov	r3, r0
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d100      	bne.n	80077aa <memset+0xa>
 80077a8:	4770      	bx	lr
 80077aa:	f803 1b01 	strb.w	r1, [r3], #1
 80077ae:	e7f9      	b.n	80077a4 <memset+0x4>

080077b0 <_close_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d06      	ldr	r5, [pc, #24]	; (80077cc <_close_r+0x1c>)
 80077b4:	2300      	movs	r3, #0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	f7fa f9ad 	bl	8001b1a <_close>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_close_r+0x1a>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_close_r+0x1a>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20000efc 	.word	0x20000efc

080077d0 <_lseek_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <_lseek_r+0x20>)
 80077d4:	4604      	mov	r4, r0
 80077d6:	4608      	mov	r0, r1
 80077d8:	4611      	mov	r1, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	602a      	str	r2, [r5, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f7fa f9c2 	bl	8001b68 <_lseek>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_lseek_r+0x1e>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_lseek_r+0x1e>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	20000efc 	.word	0x20000efc

080077f4 <_read_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d07      	ldr	r5, [pc, #28]	; (8007814 <_read_r+0x20>)
 80077f8:	4604      	mov	r4, r0
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7fa f950 	bl	8001aa8 <_read>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_read_r+0x1e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_read_r+0x1e>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20000efc 	.word	0x20000efc

08007818 <_write_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4d07      	ldr	r5, [pc, #28]	; (8007838 <_write_r+0x20>)
 800781c:	4604      	mov	r4, r0
 800781e:	4608      	mov	r0, r1
 8007820:	4611      	mov	r1, r2
 8007822:	2200      	movs	r2, #0
 8007824:	602a      	str	r2, [r5, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f7fa f95b 	bl	8001ae2 <_write>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_write_r+0x1e>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_write_r+0x1e>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20000efc 	.word	0x20000efc

0800783c <__errno>:
 800783c:	4b01      	ldr	r3, [pc, #4]	; (8007844 <__errno+0x8>)
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000190 	.word	0x20000190

08007848 <__libc_init_array>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	4d0d      	ldr	r5, [pc, #52]	; (8007880 <__libc_init_array+0x38>)
 800784c:	4c0d      	ldr	r4, [pc, #52]	; (8007884 <__libc_init_array+0x3c>)
 800784e:	1b64      	subs	r4, r4, r5
 8007850:	10a4      	asrs	r4, r4, #2
 8007852:	2600      	movs	r6, #0
 8007854:	42a6      	cmp	r6, r4
 8007856:	d109      	bne.n	800786c <__libc_init_array+0x24>
 8007858:	4d0b      	ldr	r5, [pc, #44]	; (8007888 <__libc_init_array+0x40>)
 800785a:	4c0c      	ldr	r4, [pc, #48]	; (800788c <__libc_init_array+0x44>)
 800785c:	f000 fa56 	bl	8007d0c <_init>
 8007860:	1b64      	subs	r4, r4, r5
 8007862:	10a4      	asrs	r4, r4, #2
 8007864:	2600      	movs	r6, #0
 8007866:	42a6      	cmp	r6, r4
 8007868:	d105      	bne.n	8007876 <__libc_init_array+0x2e>
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007870:	4798      	blx	r3
 8007872:	3601      	adds	r6, #1
 8007874:	e7ee      	b.n	8007854 <__libc_init_array+0xc>
 8007876:	f855 3b04 	ldr.w	r3, [r5], #4
 800787a:	4798      	blx	r3
 800787c:	3601      	adds	r6, #1
 800787e:	e7f2      	b.n	8007866 <__libc_init_array+0x1e>
 8007880:	08007df4 	.word	0x08007df4
 8007884:	08007df4 	.word	0x08007df4
 8007888:	08007df4 	.word	0x08007df4
 800788c:	08007df8 	.word	0x08007df8

08007890 <__retarget_lock_init_recursive>:
 8007890:	4770      	bx	lr

08007892 <__retarget_lock_acquire_recursive>:
 8007892:	4770      	bx	lr

08007894 <__retarget_lock_release_recursive>:
 8007894:	4770      	bx	lr
	...

08007898 <_free_r>:
 8007898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789a:	2900      	cmp	r1, #0
 800789c:	d044      	beq.n	8007928 <_free_r+0x90>
 800789e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a2:	9001      	str	r0, [sp, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f1a1 0404 	sub.w	r4, r1, #4
 80078aa:	bfb8      	it	lt
 80078ac:	18e4      	addlt	r4, r4, r3
 80078ae:	f000 f8df 	bl	8007a70 <__malloc_lock>
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <_free_r+0x94>)
 80078b4:	9801      	ldr	r0, [sp, #4]
 80078b6:	6813      	ldr	r3, [r2, #0]
 80078b8:	b933      	cbnz	r3, 80078c8 <_free_r+0x30>
 80078ba:	6063      	str	r3, [r4, #4]
 80078bc:	6014      	str	r4, [r2, #0]
 80078be:	b003      	add	sp, #12
 80078c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c4:	f000 b8da 	b.w	8007a7c <__malloc_unlock>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d908      	bls.n	80078de <_free_r+0x46>
 80078cc:	6825      	ldr	r5, [r4, #0]
 80078ce:	1961      	adds	r1, r4, r5
 80078d0:	428b      	cmp	r3, r1
 80078d2:	bf01      	itttt	eq
 80078d4:	6819      	ldreq	r1, [r3, #0]
 80078d6:	685b      	ldreq	r3, [r3, #4]
 80078d8:	1949      	addeq	r1, r1, r5
 80078da:	6021      	streq	r1, [r4, #0]
 80078dc:	e7ed      	b.n	80078ba <_free_r+0x22>
 80078de:	461a      	mov	r2, r3
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	b10b      	cbz	r3, 80078e8 <_free_r+0x50>
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	d9fa      	bls.n	80078de <_free_r+0x46>
 80078e8:	6811      	ldr	r1, [r2, #0]
 80078ea:	1855      	adds	r5, r2, r1
 80078ec:	42a5      	cmp	r5, r4
 80078ee:	d10b      	bne.n	8007908 <_free_r+0x70>
 80078f0:	6824      	ldr	r4, [r4, #0]
 80078f2:	4421      	add	r1, r4
 80078f4:	1854      	adds	r4, r2, r1
 80078f6:	42a3      	cmp	r3, r4
 80078f8:	6011      	str	r1, [r2, #0]
 80078fa:	d1e0      	bne.n	80078be <_free_r+0x26>
 80078fc:	681c      	ldr	r4, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	6053      	str	r3, [r2, #4]
 8007902:	440c      	add	r4, r1
 8007904:	6014      	str	r4, [r2, #0]
 8007906:	e7da      	b.n	80078be <_free_r+0x26>
 8007908:	d902      	bls.n	8007910 <_free_r+0x78>
 800790a:	230c      	movs	r3, #12
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	e7d6      	b.n	80078be <_free_r+0x26>
 8007910:	6825      	ldr	r5, [r4, #0]
 8007912:	1961      	adds	r1, r4, r5
 8007914:	428b      	cmp	r3, r1
 8007916:	bf04      	itt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	bf04      	itt	eq
 8007920:	1949      	addeq	r1, r1, r5
 8007922:	6021      	streq	r1, [r4, #0]
 8007924:	6054      	str	r4, [r2, #4]
 8007926:	e7ca      	b.n	80078be <_free_r+0x26>
 8007928:	b003      	add	sp, #12
 800792a:	bd30      	pop	{r4, r5, pc}
 800792c:	20000f04 	.word	0x20000f04

08007930 <sbrk_aligned>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4e0e      	ldr	r6, [pc, #56]	; (800796c <sbrk_aligned+0x3c>)
 8007934:	460c      	mov	r4, r1
 8007936:	6831      	ldr	r1, [r6, #0]
 8007938:	4605      	mov	r5, r0
 800793a:	b911      	cbnz	r1, 8007942 <sbrk_aligned+0x12>
 800793c:	f000 f9d6 	bl	8007cec <_sbrk_r>
 8007940:	6030      	str	r0, [r6, #0]
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f9d1 	bl	8007cec <_sbrk_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d00a      	beq.n	8007964 <sbrk_aligned+0x34>
 800794e:	1cc4      	adds	r4, r0, #3
 8007950:	f024 0403 	bic.w	r4, r4, #3
 8007954:	42a0      	cmp	r0, r4
 8007956:	d007      	beq.n	8007968 <sbrk_aligned+0x38>
 8007958:	1a21      	subs	r1, r4, r0
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f9c6 	bl	8007cec <_sbrk_r>
 8007960:	3001      	adds	r0, #1
 8007962:	d101      	bne.n	8007968 <sbrk_aligned+0x38>
 8007964:	f04f 34ff 	mov.w	r4, #4294967295
 8007968:	4620      	mov	r0, r4
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	20000f08 	.word	0x20000f08

08007970 <_malloc_r>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	1ccd      	adds	r5, r1, #3
 8007976:	f025 0503 	bic.w	r5, r5, #3
 800797a:	3508      	adds	r5, #8
 800797c:	2d0c      	cmp	r5, #12
 800797e:	bf38      	it	cc
 8007980:	250c      	movcc	r5, #12
 8007982:	2d00      	cmp	r5, #0
 8007984:	4607      	mov	r7, r0
 8007986:	db01      	blt.n	800798c <_malloc_r+0x1c>
 8007988:	42a9      	cmp	r1, r5
 800798a:	d905      	bls.n	8007998 <_malloc_r+0x28>
 800798c:	230c      	movs	r3, #12
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	2600      	movs	r6, #0
 8007992:	4630      	mov	r0, r6
 8007994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007998:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a6c <_malloc_r+0xfc>
 800799c:	f000 f868 	bl	8007a70 <__malloc_lock>
 80079a0:	f8d8 3000 	ldr.w	r3, [r8]
 80079a4:	461c      	mov	r4, r3
 80079a6:	bb5c      	cbnz	r4, 8007a00 <_malloc_r+0x90>
 80079a8:	4629      	mov	r1, r5
 80079aa:	4638      	mov	r0, r7
 80079ac:	f7ff ffc0 	bl	8007930 <sbrk_aligned>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	4604      	mov	r4, r0
 80079b4:	d155      	bne.n	8007a62 <_malloc_r+0xf2>
 80079b6:	f8d8 4000 	ldr.w	r4, [r8]
 80079ba:	4626      	mov	r6, r4
 80079bc:	2e00      	cmp	r6, #0
 80079be:	d145      	bne.n	8007a4c <_malloc_r+0xdc>
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d048      	beq.n	8007a56 <_malloc_r+0xe6>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	4631      	mov	r1, r6
 80079c8:	4638      	mov	r0, r7
 80079ca:	eb04 0903 	add.w	r9, r4, r3
 80079ce:	f000 f98d 	bl	8007cec <_sbrk_r>
 80079d2:	4581      	cmp	r9, r0
 80079d4:	d13f      	bne.n	8007a56 <_malloc_r+0xe6>
 80079d6:	6821      	ldr	r1, [r4, #0]
 80079d8:	1a6d      	subs	r5, r5, r1
 80079da:	4629      	mov	r1, r5
 80079dc:	4638      	mov	r0, r7
 80079de:	f7ff ffa7 	bl	8007930 <sbrk_aligned>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d037      	beq.n	8007a56 <_malloc_r+0xe6>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	442b      	add	r3, r5
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	f8d8 3000 	ldr.w	r3, [r8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d038      	beq.n	8007a66 <_malloc_r+0xf6>
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	42a2      	cmp	r2, r4
 80079f8:	d12b      	bne.n	8007a52 <_malloc_r+0xe2>
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	e00f      	b.n	8007a20 <_malloc_r+0xb0>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	1b52      	subs	r2, r2, r5
 8007a04:	d41f      	bmi.n	8007a46 <_malloc_r+0xd6>
 8007a06:	2a0b      	cmp	r2, #11
 8007a08:	d917      	bls.n	8007a3a <_malloc_r+0xca>
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	6025      	str	r5, [r4, #0]
 8007a10:	bf18      	it	ne
 8007a12:	6059      	strne	r1, [r3, #4]
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	bf08      	it	eq
 8007a18:	f8c8 1000 	streq.w	r1, [r8]
 8007a1c:	5162      	str	r2, [r4, r5]
 8007a1e:	604b      	str	r3, [r1, #4]
 8007a20:	4638      	mov	r0, r7
 8007a22:	f104 060b 	add.w	r6, r4, #11
 8007a26:	f000 f829 	bl	8007a7c <__malloc_unlock>
 8007a2a:	f026 0607 	bic.w	r6, r6, #7
 8007a2e:	1d23      	adds	r3, r4, #4
 8007a30:	1af2      	subs	r2, r6, r3
 8007a32:	d0ae      	beq.n	8007992 <_malloc_r+0x22>
 8007a34:	1b9b      	subs	r3, r3, r6
 8007a36:	50a3      	str	r3, [r4, r2]
 8007a38:	e7ab      	b.n	8007992 <_malloc_r+0x22>
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	d1dd      	bne.n	80079fc <_malloc_r+0x8c>
 8007a40:	f8c8 2000 	str.w	r2, [r8]
 8007a44:	e7ec      	b.n	8007a20 <_malloc_r+0xb0>
 8007a46:	4623      	mov	r3, r4
 8007a48:	6864      	ldr	r4, [r4, #4]
 8007a4a:	e7ac      	b.n	80079a6 <_malloc_r+0x36>
 8007a4c:	4634      	mov	r4, r6
 8007a4e:	6876      	ldr	r6, [r6, #4]
 8007a50:	e7b4      	b.n	80079bc <_malloc_r+0x4c>
 8007a52:	4613      	mov	r3, r2
 8007a54:	e7cc      	b.n	80079f0 <_malloc_r+0x80>
 8007a56:	230c      	movs	r3, #12
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f000 f80e 	bl	8007a7c <__malloc_unlock>
 8007a60:	e797      	b.n	8007992 <_malloc_r+0x22>
 8007a62:	6025      	str	r5, [r4, #0]
 8007a64:	e7dc      	b.n	8007a20 <_malloc_r+0xb0>
 8007a66:	605b      	str	r3, [r3, #4]
 8007a68:	deff      	udf	#255	; 0xff
 8007a6a:	bf00      	nop
 8007a6c:	20000f04 	.word	0x20000f04

08007a70 <__malloc_lock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__malloc_lock+0x8>)
 8007a72:	f7ff bf0e 	b.w	8007892 <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	20000f00 	.word	0x20000f00

08007a7c <__malloc_unlock>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	; (8007a84 <__malloc_unlock+0x8>)
 8007a7e:	f7ff bf09 	b.w	8007894 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	20000f00 	.word	0x20000f00

08007a88 <__sflush_r>:
 8007a88:	898a      	ldrh	r2, [r1, #12]
 8007a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	4605      	mov	r5, r0
 8007a90:	0710      	lsls	r0, r2, #28
 8007a92:	460c      	mov	r4, r1
 8007a94:	d458      	bmi.n	8007b48 <__sflush_r+0xc0>
 8007a96:	684b      	ldr	r3, [r1, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc05      	bgt.n	8007aa8 <__sflush_r+0x20>
 8007a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dc02      	bgt.n	8007aa8 <__sflush_r+0x20>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	d0f9      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ab4:	682f      	ldr	r7, [r5, #0]
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	d032      	beq.n	8007b22 <__sflush_r+0x9a>
 8007abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	075a      	lsls	r2, r3, #29
 8007ac2:	d505      	bpl.n	8007ad0 <__sflush_r+0x48>
 8007ac4:	6863      	ldr	r3, [r4, #4]
 8007ac6:	1ac0      	subs	r0, r0, r3
 8007ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aca:	b10b      	cbz	r3, 8007ad0 <__sflush_r+0x48>
 8007acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ace:	1ac0      	subs	r0, r0, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad6:	6a21      	ldr	r1, [r4, #32]
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b0      	blx	r6
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	d106      	bne.n	8007af0 <__sflush_r+0x68>
 8007ae2:	6829      	ldr	r1, [r5, #0]
 8007ae4:	291d      	cmp	r1, #29
 8007ae6:	d82b      	bhi.n	8007b40 <__sflush_r+0xb8>
 8007ae8:	4a29      	ldr	r2, [pc, #164]	; (8007b90 <__sflush_r+0x108>)
 8007aea:	410a      	asrs	r2, r1
 8007aec:	07d6      	lsls	r6, r2, #31
 8007aee:	d427      	bmi.n	8007b40 <__sflush_r+0xb8>
 8007af0:	2200      	movs	r2, #0
 8007af2:	6062      	str	r2, [r4, #4]
 8007af4:	04d9      	lsls	r1, r3, #19
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	d504      	bpl.n	8007b06 <__sflush_r+0x7e>
 8007afc:	1c42      	adds	r2, r0, #1
 8007afe:	d101      	bne.n	8007b04 <__sflush_r+0x7c>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b903      	cbnz	r3, 8007b06 <__sflush_r+0x7e>
 8007b04:	6560      	str	r0, [r4, #84]	; 0x54
 8007b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b08:	602f      	str	r7, [r5, #0]
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	d0c9      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d002      	beq.n	8007b1c <__sflush_r+0x94>
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7ff febe 	bl	8007898 <_free_r>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007b20:	e7c0      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b0      	blx	r6
 8007b28:	1c41      	adds	r1, r0, #1
 8007b2a:	d1c8      	bne.n	8007abe <__sflush_r+0x36>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0c5      	beq.n	8007abe <__sflush_r+0x36>
 8007b32:	2b1d      	cmp	r3, #29
 8007b34:	d001      	beq.n	8007b3a <__sflush_r+0xb2>
 8007b36:	2b16      	cmp	r3, #22
 8007b38:	d101      	bne.n	8007b3e <__sflush_r+0xb6>
 8007b3a:	602f      	str	r7, [r5, #0]
 8007b3c:	e7b1      	b.n	8007aa2 <__sflush_r+0x1a>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7ad      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b48:	690f      	ldr	r7, [r1, #16]
 8007b4a:	2f00      	cmp	r7, #0
 8007b4c:	d0a9      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007b4e:	0793      	lsls	r3, r2, #30
 8007b50:	680e      	ldr	r6, [r1, #0]
 8007b52:	bf08      	it	eq
 8007b54:	694b      	ldreq	r3, [r1, #20]
 8007b56:	600f      	str	r7, [r1, #0]
 8007b58:	bf18      	it	ne
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	eba6 0807 	sub.w	r8, r6, r7
 8007b60:	608b      	str	r3, [r1, #8]
 8007b62:	f1b8 0f00 	cmp.w	r8, #0
 8007b66:	dd9c      	ble.n	8007aa2 <__sflush_r+0x1a>
 8007b68:	6a21      	ldr	r1, [r4, #32]
 8007b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b6c:	4643      	mov	r3, r8
 8007b6e:	463a      	mov	r2, r7
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	2800      	cmp	r0, #0
 8007b76:	dc06      	bgt.n	8007b86 <__sflush_r+0xfe>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	e78e      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b86:	4407      	add	r7, r0
 8007b88:	eba8 0800 	sub.w	r8, r8, r0
 8007b8c:	e7e9      	b.n	8007b62 <__sflush_r+0xda>
 8007b8e:	bf00      	nop
 8007b90:	dfbffffe 	.word	0xdfbffffe

08007b94 <_fflush_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b913      	cbnz	r3, 8007ba4 <_fflush_r+0x10>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	b118      	cbz	r0, 8007bae <_fflush_r+0x1a>
 8007ba6:	6a03      	ldr	r3, [r0, #32]
 8007ba8:	b90b      	cbnz	r3, 8007bae <_fflush_r+0x1a>
 8007baa:	f7ff fc8f 	bl	80074cc <__sinit>
 8007bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f3      	beq.n	8007b9e <_fflush_r+0xa>
 8007bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bb8:	07d0      	lsls	r0, r2, #31
 8007bba:	d404      	bmi.n	8007bc6 <_fflush_r+0x32>
 8007bbc:	0599      	lsls	r1, r3, #22
 8007bbe:	d402      	bmi.n	8007bc6 <_fflush_r+0x32>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc2:	f7ff fe66 	bl	8007892 <__retarget_lock_acquire_recursive>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f7ff ff5d 	bl	8007a88 <__sflush_r>
 8007bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd0:	07da      	lsls	r2, r3, #31
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	d4e4      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	059b      	lsls	r3, r3, #22
 8007bda:	d4e1      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bde:	f7ff fe59 	bl	8007894 <__retarget_lock_release_recursive>
 8007be2:	e7dd      	b.n	8007ba0 <_fflush_r+0xc>

08007be4 <__swhatbuf_r>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	2900      	cmp	r1, #0
 8007bee:	b096      	sub	sp, #88	; 0x58
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	461e      	mov	r6, r3
 8007bf4:	da0d      	bge.n	8007c12 <__swhatbuf_r+0x2e>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	bf0c      	ite	eq
 8007c02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c06:	2340      	movne	r3, #64	; 0x40
 8007c08:	2000      	movs	r0, #0
 8007c0a:	6031      	str	r1, [r6, #0]
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	b016      	add	sp, #88	; 0x58
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	466a      	mov	r2, sp
 8007c14:	f000 f848 	bl	8007ca8 <_fstat_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dbec      	blt.n	8007bf6 <__swhatbuf_r+0x12>
 8007c1c:	9901      	ldr	r1, [sp, #4]
 8007c1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007c22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007c26:	4259      	negs	r1, r3
 8007c28:	4159      	adcs	r1, r3
 8007c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c2e:	e7eb      	b.n	8007c08 <__swhatbuf_r+0x24>

08007c30 <__smakebuf_r>:
 8007c30:	898b      	ldrh	r3, [r1, #12]
 8007c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c34:	079d      	lsls	r5, r3, #30
 8007c36:	4606      	mov	r6, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	d507      	bpl.n	8007c4c <__smakebuf_r+0x1c>
 8007c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	2301      	movs	r3, #1
 8007c46:	6163      	str	r3, [r4, #20]
 8007c48:	b002      	add	sp, #8
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	ab01      	add	r3, sp, #4
 8007c4e:	466a      	mov	r2, sp
 8007c50:	f7ff ffc8 	bl	8007be4 <__swhatbuf_r>
 8007c54:	9900      	ldr	r1, [sp, #0]
 8007c56:	4605      	mov	r5, r0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff fe89 	bl	8007970 <_malloc_r>
 8007c5e:	b948      	cbnz	r0, 8007c74 <__smakebuf_r+0x44>
 8007c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c64:	059a      	lsls	r2, r3, #22
 8007c66:	d4ef      	bmi.n	8007c48 <__smakebuf_r+0x18>
 8007c68:	f023 0303 	bic.w	r3, r3, #3
 8007c6c:	f043 0302 	orr.w	r3, r3, #2
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	e7e3      	b.n	8007c3c <__smakebuf_r+0xc>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	6020      	str	r0, [r4, #0]
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	6163      	str	r3, [r4, #20]
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	6120      	str	r0, [r4, #16]
 8007c86:	b15b      	cbz	r3, 8007ca0 <__smakebuf_r+0x70>
 8007c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f81d 	bl	8007ccc <_isatty_r>
 8007c92:	b128      	cbz	r0, 8007ca0 <__smakebuf_r+0x70>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	431d      	orrs	r5, r3
 8007ca4:	81a5      	strh	r5, [r4, #12]
 8007ca6:	e7cf      	b.n	8007c48 <__smakebuf_r+0x18>

08007ca8 <_fstat_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	; (8007cc8 <_fstat_r+0x20>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	f7f9 ff3c 	bl	8001b32 <_fstat>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d102      	bne.n	8007cc4 <_fstat_r+0x1c>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	b103      	cbz	r3, 8007cc4 <_fstat_r+0x1c>
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000efc 	.word	0x20000efc

08007ccc <_isatty_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d06      	ldr	r5, [pc, #24]	; (8007ce8 <_isatty_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	f7f9 ff3b 	bl	8001b52 <_isatty>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_isatty_r+0x1a>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_isatty_r+0x1a>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000efc 	.word	0x20000efc

08007cec <_sbrk_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4d06      	ldr	r5, [pc, #24]	; (8007d08 <_sbrk_r+0x1c>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	f7f9 ff44 	bl	8001b84 <_sbrk>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_sbrk_r+0x1a>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_sbrk_r+0x1a>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000efc 	.word	0x20000efc

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr
