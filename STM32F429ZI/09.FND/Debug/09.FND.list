
09.FND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008400  08008400  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008408  08008408  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000be4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c7c  20000c7c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b2dc  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039f4  00000000  00000000  0003b3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017e0  00000000  00000000  0003ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012b3  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000284ba  00000000  00000000  00041873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dd14  00000000  00000000  00069d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed8d1  00000000  00000000  00087a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006bb8  00000000  00000000  00175314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0017becc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000098 	.word	0x20000098
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008300 	.word	0x08008300

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000009c 	.word	0x2000009c
 80001e8:	08008300 	.word	0x08008300

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <DHT11_Init>:
		}
	}
}

void DHT11_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <DHT11_Init+0x1c>)
 80004f2:	f002 fb95 	bl	8002c20 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80004f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004fa:	f001 fcf5 	bl	8001ee8 <HAL_Delay>
	return;
 80004fe:	bf00      	nop
}
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020000 	.word	0x40020000

08000508 <fnd4digit_main>:
};

uint16_t FND[4];    // FND에 쓰기 위한 값을 준비하는 변수

void fnd4digit_main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	unsigned int value=0;   // 1초가 되었을때 up count
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
	unsigned int msec=0;    // ms counter
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
	static int i=0;     // FND position indicator

	FND4digit_off();
 8000516:	f000 f8a9 	bl	800066c <FND4digit_off>

	while(1)
	{
#if 1   // SYSTICK interrupt 방식
		if (fnd1ms_counter >= 2)   // 2ms reached
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <fnd4digit_main+0x8c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	ddfb      	ble.n	800051a <fnd4digit_main+0x12>
		{
			fnd1ms_counter=0;
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <fnd4digit_main+0x8c>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
			msec += 2;   // 2ms
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	3302      	adds	r3, #2
 800052c:	603b      	str	r3, [r7, #0]
			if (msec > 1000)   // 1000ms reached
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000534:	d907      	bls.n	8000546 <fnd4digit_main+0x3e>
			{
				msec = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
				value++;       // sec count를 증가
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
				FND_update(value);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f833 	bl	80005ac <FND_update>
			}

			FND4digit_off();
 8000546:	f000 f891 	bl	800066c <FND4digit_off>
#if 0 // common 애노우드  WCN4-
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <fnd4digit_main+0x90>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a13      	ldr	r2, [pc, #76]	; (800059c <fnd4digit_main+0x94>)
 8000550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	4811      	ldr	r0, [pc, #68]	; (80005a0 <fnd4digit_main+0x98>)
 800055a:	f002 fb61 	bl	8002c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <fnd4digit_main+0x90>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <fnd4digit_main+0x9c>)
 8000564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <fnd4digit_main+0xa0>)
 800056e:	f002 fb57 	bl	8002c20 <HAL_GPIO_WritePin>
#endif
			i++;   // 다음 display할 FND를 가리킨다.
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <fnd4digit_main+0x90>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <fnd4digit_main+0x90>)
 800057a:	6013      	str	r3, [r2, #0]
			i %= 4;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <fnd4digit_main+0x90>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	425a      	negs	r2, r3
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	f002 0203 	and.w	r2, r2, #3
 800058a:	bf58      	it	pl
 800058c:	4253      	negpl	r3, r2
 800058e:	4a02      	ldr	r2, [pc, #8]	; (8000598 <fnd4digit_main+0x90>)
 8000590:	6013      	str	r3, [r2, #0]
		if (fnd1ms_counter >= 2)   // 2ms reached
 8000592:	e7c2      	b.n	800051a <fnd4digit_main+0x12>
 8000594:	20000ab0 	.word	0x20000ab0
 8000598:	200000bc 	.word	0x200000bc
 800059c:	20000000 	.word	0x20000000
 80005a0:	40020800 	.word	0x40020800
 80005a4:	200000b4 	.word	0x200000b4
 80005a8:	40020400 	.word	0x40020400

080005ac <FND_update>:
#endif
	}
}

void FND_update(unsigned int value)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <FND_update+0xac>)
 80005b8:	fba3 2301 	umull	r2, r3, r3, r1
 80005bc:	08da      	lsrs	r2, r3, #3
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	1aca      	subs	r2, r1, r3
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <FND_update+0xb0>)
 80005ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <FND_update+0xb4>)
 80005d2:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <FND_update+0xac>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	08d9      	lsrs	r1, r3, #3
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <FND_update+0xac>)
 80005e0:	fba3 2301 	umull	r2, r3, r3, r1
 80005e4:	08da      	lsrs	r2, r3, #3
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	1aca      	subs	r2, r1, r3
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <FND_update+0xb0>)
 80005f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <FND_update+0xb4>)
 80005fa:	805a      	strh	r2, [r3, #2]
	FND[2] = FND_font[value / 100 % 10];
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <FND_update+0xb8>)
 8000600:	fba2 2303 	umull	r2, r3, r2, r3
 8000604:	0959      	lsrs	r1, r3, #5
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <FND_update+0xac>)
 8000608:	fba3 2301 	umull	r2, r3, r3, r1
 800060c:	08da      	lsrs	r2, r3, #3
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	1aca      	subs	r2, r1, r3
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <FND_update+0xb0>)
 800061a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <FND_update+0xb4>)
 8000622:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 1000 % 10];
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <FND_update+0xbc>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	0999      	lsrs	r1, r3, #6
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <FND_update+0xac>)
 8000630:	fba3 2301 	umull	r2, r3, r3, r1
 8000634:	08da      	lsrs	r2, r3, #3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <FND_update+0xb0>)
 8000642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <FND_update+0xb4>)
 800064a:	80da      	strh	r2, [r3, #6]

	return;
 800064c:	bf00      	nop
}
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	cccccccd 	.word	0xcccccccd
 800065c:	20000008 	.word	0x20000008
 8000660:	200000b4 	.word	0x200000b4
 8000664:	51eb851f 	.word	0x51eb851f
 8000668:	10624dd3 	.word	0x10624dd3

0800066c <FND4digit_off>:
void FND4digit_off(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <FND4digit_off+0x2c>)
 8000678:	f002 fad2 	bl	8002c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <FND4digit_off+0x30>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	b29b      	uxth	r3, r3
 8000682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000686:	b29b      	uxth	r3, r3
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <FND4digit_off+0x34>)
 800068e:	f002 fac7 	bl	8002c20 <HAL_GPIO_WritePin>
#endif
	return;
 8000692:	bf00      	nop
}
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020800 	.word	0x40020800
 800069c:	20000008 	.word	0x20000008
 80006a0:	40020400 	.word	0x40020400

080006a4 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 030c 	orr.w	r3, r3, #12
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f043 0308 	orr.w	r3, r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	f043 030c 	orr.w	r3, r3, #12
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80006e4:	bf00      	nop
 80006e6:	f107 0208 	add.w	r2, r7, #8
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2304      	movs	r3, #4
 80006f0:	214e      	movs	r1, #78	; 0x4e
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <lcd_command+0x64>)
 80006f4:	f002 fbf2 	bl	8002edc <HAL_I2C_Master_Transmit>
 80006f8:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f3      	bne.n	80006e6 <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 80006fe:	bf00      	nop
}
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200002e8 	.word	0x200002e8

0800070c <i2c_lcd_init>:
	}
	return;
}
// lcd 초기화
void i2c_lcd_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000710:	2033      	movs	r0, #51	; 0x33
 8000712:	f7ff ffc7 	bl	80006a4 <lcd_command>
	lcd_command(0x32);
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	f7ff ffc4 	bl	80006a4 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 800071c:	2028      	movs	r0, #40	; 0x28
 800071e:	f7ff ffc1 	bl	80006a4 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000722:	200c      	movs	r0, #12
 8000724:	f7ff ffbe 	bl	80006a4 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000728:	2006      	movs	r0, #6
 800072a:	f7ff ffbb 	bl	80006a4 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff ffb8 	bl	80006a4 <lcd_command>
	HAL_Delay(2);
 8000734:	2002      	movs	r0, #2
 8000736:	f001 fbd7 	bl	8001ee8 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_SYSTICK_Handler>:
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
volatile int fnd1ms_counter=0;
void HAL_SYSTICK_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_SYSTICK_Handler+0x24>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_SYSTICK_Handler+0x24>)
 800074c:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_SYSTICK_Handler+0x28>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_SYSTICK_Handler+0x28>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000aac 	.word	0x20000aac
 8000768:	20000ab0 	.word	0x20000ab0

0800076c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077a:	2201      	movs	r2, #1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <__io_putchar+0x20>)
 800077e:	f005 fde6 	bl	800634e <HAL_UART_Transmit>

  return ch;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000050c 	.word	0x2000050c

08000790 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d109      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007aa:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007b4:	6013      	str	r3, [r2, #0]
	}
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40014400 	.word	0x40014400
 80007c8:	20000aa4 	.word	0x20000aa4
 80007cc:	20000aa8 	.word	0x20000aa8

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f001 fb16 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f854 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 fbee 	bl	8000fbc <MX_GPIO_Init>
  MX_ETH_Init();
 80007e0:	f000 f8bc 	bl	800095c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007e4:	f000 fb68 	bl	8000eb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007e8:	f000 fbba 	bl	8000f60 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80007ec:	f000 fb8e 	bl	8000f0c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80007f0:	f000 fb1a 	bl	8000e28 <MX_TIM10_Init>
  MX_TIM11_Init();
 80007f4:	f000 fb3c 	bl	8000e70 <MX_TIM11_Init>
  MX_TIM3_Init();
 80007f8:	f000 f9f2 	bl	8000be0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80007fc:	f000 f8fc 	bl	80009f8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000800:	f000 fa42 	bl	8000c88 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000804:	f000 f992 	bl	8000b2c <MX_TIM2_Init>
  MX_RTC_Init();
 8000808:	f000 f936 	bl	8000a78 <MX_RTC_Init>
  MX_TIM5_Init();
 800080c:	f000 fab2 	bl	8000d74 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000810:	2201      	movs	r2, #1
 8000812:	4912      	ldr	r1, [pc, #72]	; (800085c <main+0x8c>)
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <main+0x90>)
 8000816:	f005 fe2c 	bl	8006472 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 800081a:	2201      	movs	r2, #1
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <main+0x94>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <main+0x98>)
 8000820:	f005 fe27 	bl	8006472 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <main+0x9c>)
 8000826:	f004 f8d5 	bl	80049d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 800082a:	4811      	ldr	r0, [pc, #68]	; (8000870 <main+0xa0>)
 800082c:	f004 f8d2 	bl	80049d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000830:	2100      	movs	r1, #0
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <main+0xa4>)
 8000834:	f004 fbbc 	bl	8004fb0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control
 8000838:	2100      	movs	r1, #0
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <main+0xa8>)
 800083c:	f004 fa52 	bl	8004ce4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // for servo motor PWM control
 8000840:	2100      	movs	r1, #0
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <main+0xac>)
 8000844:	f004 f986 	bl	8004b54 <HAL_TIM_PWM_Start>


  DHT11_Init();
 8000848:	f7ff fe4e 	bl	80004e8 <DHT11_Init>
  i2c_lcd_init();
 800084c:	f7ff ff5e 	bl	800070c <i2c_lcd_init>

  TIM10_10ms_counter=0;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <main+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
//  DHT11_main();
//  i2c_lcd_main();
//  servo_motor_test_main();


  fnd4digit_main();
 8000856:	f7ff fe57 	bl	8000508 <fnd4digit_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	e7fe      	b.n	800085a <main+0x8a>
 800085c:	20000aa0 	.word	0x20000aa0
 8000860:	2000050c 	.word	0x2000050c
 8000864:	20000aa1 	.word	0x20000aa1
 8000868:	20000550 	.word	0x20000550
 800086c:	2000047c 	.word	0x2000047c
 8000870:	200004c4 	.word	0x200004c4
 8000874:	200003a4 	.word	0x200003a4
 8000878:	200003ec 	.word	0x200003ec
 800087c:	2000035c 	.word	0x2000035c
 8000880:	20000aa4 	.word	0x20000aa4

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f007 fa7e 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <SystemClock_Config+0xd0>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <SystemClock_Config+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <SystemClock_Config+0xd4>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e0:	2309      	movs	r3, #9
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008fc:	23a8      	movs	r3, #168	; 0xa8
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000904:	2307      	movs	r3, #7
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f002 ff85 	bl	800381c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000918:	f000 fc94 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000928:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2105      	movs	r1, #5
 800093a:	4618      	mov	r0, r3
 800093c:	f003 f9e6 	bl	8003d0c <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000946:	f000 fc7d 	bl	8001244 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_ETH_Init+0x84>)
 8000962:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <MX_ETH_Init+0x88>)
 8000964:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_ETH_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_ETH_Init+0x8c>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_ETH_Init+0x8c>)
 8000974:	22e1      	movs	r2, #225	; 0xe1
 8000976:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_ETH_Init+0x8c>)
 800097a:	2200      	movs	r2, #0
 800097c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_ETH_Init+0x8c>)
 8000980:	2200      	movs	r2, #0
 8000982:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_ETH_Init+0x8c>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_ETH_Init+0x84>)
 800098c:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <MX_ETH_Init+0x8c>)
 800098e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_ETH_Init+0x84>)
 8000992:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000996:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_ETH_Init+0x84>)
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <MX_ETH_Init+0x90>)
 800099c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_ETH_Init+0x84>)
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <MX_ETH_Init+0x94>)
 80009a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_ETH_Init+0x84>)
 80009a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_ETH_Init+0x84>)
 80009ae:	f001 fc63 	bl	8002278 <HAL_ETH_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009b8:	f000 fc44 	bl	8001244 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009bc:	2238      	movs	r2, #56	; 0x38
 80009be:	2100      	movs	r1, #0
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_ETH_Init+0x98>)
 80009c2:	f007 f9e7 	bl	8007d94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_ETH_Init+0x98>)
 80009c8:	2221      	movs	r2, #33	; 0x21
 80009ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_ETH_Init+0x98>)
 80009ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_ETH_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000238 	.word	0x20000238
 80009e4:	40028000 	.word	0x40028000
 80009e8:	20000ab4 	.word	0x20000ab4
 80009ec:	20000198 	.word	0x20000198
 80009f0:	200000f8 	.word	0x200000f8
 80009f4:	200000c0 	.word	0x200000c0

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a36:	f002 f90d 	bl	8002c54 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 fc00 	bl	8001244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a48:	f002 fd4f 	bl	80034ea <HAL_I2CEx_ConfigAnalogFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a52:	f000 fbf7 	bl	8001244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a5a:	f002 fd82 	bl	8003562 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a64:	f000 fbee 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002e8 	.word	0x200002e8
 8000a70:	40005400 	.word	0x40005400
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <MX_RTC_Init+0xac>)
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <MX_RTC_Init+0xb0>)
 8000a94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_RTC_Init+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_RTC_Init+0xac>)
 8000a9e:	227f      	movs	r2, #127	; 0x7f
 8000aa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <MX_RTC_Init+0xac>)
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_RTC_Init+0xac>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_RTC_Init+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_RTC_Init+0xac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aba:	481a      	ldr	r0, [pc, #104]	; (8000b24 <MX_RTC_Init+0xac>)
 8000abc:	f003 fd06 	bl	80044cc <HAL_RTC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 fbbd 	bl	8001244 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000aca:	2309      	movs	r3, #9
 8000acc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 8000ace:	2340      	movs	r3, #64	; 0x40
 8000ad0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <MX_RTC_Init+0xac>)
 8000ae6:	f003 fd67 	bl	80045b8 <HAL_RTC_SetTime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 fba8 	bl	8001244 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000af4:	2301      	movs	r3, #1
 8000af6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000af8:	2310      	movs	r3, #16
 8000afa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000afc:	2316      	movs	r3, #22
 8000afe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000b00:	2323      	movs	r3, #35	; 0x23
 8000b02:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_RTC_Init+0xac>)
 8000b0c:	f003 fdee 	bl	80046ec <HAL_RTC_SetDate>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b16:	f000 fb95 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000033c 	.word	0x2000033c
 8000b28:	40002800 	.word	0x40002800

08000b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b58:	f240 628f 	movw	r2, #1679	; 0x68f
 8000b5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b7a:	f003 ff9b 	bl	8004ab4 <HAL_TIM_PWM_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f000 fb5e 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	4619      	mov	r1, r3
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000b98:	f005 fafc 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ba2:	f000 fb4f 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	; 0x60
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000baa:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000bc0:	f004 fcc2 	bl	8005548 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bca:	f000 fb3b 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM2_Init+0xb0>)
 8000bd0:	f000 fd96 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000035c 	.word	0x2000035c

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000bfe:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c04:	2253      	movs	r2, #83	; 0x53
 8000c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c22:	4817      	ldr	r0, [pc, #92]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c24:	f004 f974 	bl	8004f10 <HAL_TIM_IC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 fb09 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c42:	f005 faa7 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fafa 	bl	8001244 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c50:	230a      	movs	r3, #10
 8000c52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c54:	2301      	movs	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_TIM3_Init+0xa0>)
 8000c68:	f004 fbd2 	bl	8005410 <HAL_TIM_IC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c72:	f000 fae7 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200003a4 	.word	0x200003a4
 8000c84:	40000400 	.word	0x40000400

08000c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cba:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cc0:	f240 3247 	movw	r2, #839	; 0x347
 8000cc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cce:	2263      	movs	r2, #99	; 0x63
 8000cd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000ce0:	f003 fe29 	bl	8004936 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cea:	f000 faab 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481c      	ldr	r0, [pc, #112]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000cfc:	f004 fce6 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d06:	f000 fa9d 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000d0c:	f003 fed2 	bl	8004ab4 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d16:	f000 fa95 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4619      	mov	r1, r3
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000d2a:	f005 fa33 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d34:	f000 fa86 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	; 0x60
 8000d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8000d3c:	2345      	movs	r3, #69	; 0x45
 8000d3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d44:	2304      	movs	r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000d50:	f004 fbfa 	bl	8005548 <HAL_TIM_PWM_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d5a:	f000 fa73 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d5e:	4803      	ldr	r0, [pc, #12]	; (8000d6c <MX_TIM4_Init+0xe4>)
 8000d60:	f000 fcce 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000d64:	bf00      	nop
 8000d66:	3738      	adds	r7, #56	; 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200003ec 	.word	0x200003ec
 8000d70:	40000800 	.word	0x40000800

08000d74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <MX_TIM5_Init+0xb0>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000d9e:	2233      	movs	r2, #51	; 0x33
 8000da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000daa:	f240 128f 	movw	r2, #399	; 0x18f
 8000dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dbc:	4818      	ldr	r0, [pc, #96]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000dbe:	f003 fe79 	bl	8004ab4 <HAL_TIM_PWM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 fa3c 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000ddc:	f005 f9da 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000de6:	f000 fa2d 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dea:	2360      	movs	r3, #96	; 0x60
 8000dec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000dee:	23c7      	movs	r3, #199	; 0xc7
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000e02:	f004 fba1 	bl	8005548 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000e0c:	f000 fa1a 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MX_TIM5_Init+0xac>)
 8000e12:	f000 fc75 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000434 	.word	0x20000434
 8000e24:	40000c00 	.word	0x40000c00

08000e28 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <MX_TIM10_Init+0x44>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e34:	22a7      	movs	r2, #167	; 0xa7
 8000e36:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e44:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_TIM10_Init+0x40>)
 8000e54:	f003 fd6f 	bl	8004936 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e5e:	f000 f9f1 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000047c 	.word	0x2000047c
 8000e6c:	40014400 	.word	0x40014400

08000e70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_TIM11_Init+0x44>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e7c:	22a7      	movs	r2, #167	; 0xa7
 8000e7e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM11_Init+0x40>)
 8000e9c:	f003 fd4b 	bl	8004936 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000ea6:	f000 f9cd 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200004c4 	.word	0x200004c4
 8000eb4:	40014800 	.word	0x40014800

08000eb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART3_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ec4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART3_UART_Init+0x4c>)
 8000ef0:	f005 f9e0 	bl	80062b4 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f9a3 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000050c 	.word	0x2000050c
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <MX_USART6_UART_Init+0x50>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART6_UART_Init+0x4c>)
 8000f44:	f005 f9b6 	bl	80062b4 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f4e:	f000 f979 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000550 	.word	0x20000550
 8000f5c:	40011400 	.word	0x40011400

08000f60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa4:	f002 fb1c 	bl	80035e0 <HAL_PCD_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f949 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000594 	.word	0x20000594

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	4b93      	ldr	r3, [pc, #588]	; (8001224 <MX_GPIO_Init+0x268>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a92      	ldr	r2, [pc, #584]	; (8001224 <MX_GPIO_Init+0x268>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b90      	ldr	r3, [pc, #576]	; (8001224 <MX_GPIO_Init+0x268>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <MX_GPIO_Init+0x268>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a8b      	ldr	r2, [pc, #556]	; (8001224 <MX_GPIO_Init+0x268>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b89      	ldr	r3, [pc, #548]	; (8001224 <MX_GPIO_Init+0x268>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b85      	ldr	r3, [pc, #532]	; (8001224 <MX_GPIO_Init+0x268>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a84      	ldr	r2, [pc, #528]	; (8001224 <MX_GPIO_Init+0x268>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b82      	ldr	r3, [pc, #520]	; (8001224 <MX_GPIO_Init+0x268>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <MX_GPIO_Init+0x268>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a7d      	ldr	r2, [pc, #500]	; (8001224 <MX_GPIO_Init+0x268>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b7b      	ldr	r3, [pc, #492]	; (8001224 <MX_GPIO_Init+0x268>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <MX_GPIO_Init+0x268>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a76      	ldr	r2, [pc, #472]	; (8001224 <MX_GPIO_Init+0x268>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <MX_GPIO_Init+0x268>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b70      	ldr	r3, [pc, #448]	; (8001224 <MX_GPIO_Init+0x268>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a6f      	ldr	r2, [pc, #444]	; (8001224 <MX_GPIO_Init+0x268>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <MX_GPIO_Init+0x268>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b69      	ldr	r3, [pc, #420]	; (8001224 <MX_GPIO_Init+0x268>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a68      	ldr	r2, [pc, #416]	; (8001224 <MX_GPIO_Init+0x268>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b66      	ldr	r3, [pc, #408]	; (8001224 <MX_GPIO_Init+0x268>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b62      	ldr	r3, [pc, #392]	; (8001224 <MX_GPIO_Init+0x268>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a61      	ldr	r2, [pc, #388]	; (8001224 <MX_GPIO_Init+0x268>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <MX_GPIO_Init+0x268>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	485c      	ldr	r0, [pc, #368]	; (8001228 <MX_GPIO_Init+0x26c>)
 80010b8:	f001 fdb2 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80010bc:	2200      	movs	r2, #0
 80010be:	f644 41ff 	movw	r1, #19711	; 0x4cff
 80010c2:	485a      	ldr	r0, [pc, #360]	; (800122c <MX_GPIO_Init+0x270>)
 80010c4:	f001 fdac 	bl	8002c20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4858      	ldr	r0, [pc, #352]	; (8001230 <MX_GPIO_Init+0x274>)
 80010d0:	f001 fda6 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_MOTOR1_Pin|IN2_MOTOR1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80010da:	4856      	ldr	r0, [pc, #344]	; (8001234 <MX_GPIO_Init+0x278>)
 80010dc:	f001 fda0 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4854      	ldr	r0, [pc, #336]	; (8001238 <MX_GPIO_Init+0x27c>)
 80010e6:	f001 fd9b 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80010f0:	4852      	ldr	r0, [pc, #328]	; (800123c <MX_GPIO_Init+0x280>)
 80010f2:	f001 fd95 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010f6:	2200      	movs	r2, #0
 80010f8:	21ff      	movs	r1, #255	; 0xff
 80010fa:	4851      	ldr	r0, [pc, #324]	; (8001240 <MX_GPIO_Init+0x284>)
 80010fc:	f001 fd90 	bl	8002c20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4849      	ldr	r0, [pc, #292]	; (800123c <MX_GPIO_Init+0x280>)
 8001118:	f001 fbd6 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800111c:	2301      	movs	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	483d      	ldr	r0, [pc, #244]	; (8001228 <MX_GPIO_Init+0x26c>)
 8001134:	f001 fbc8 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 LD3_Pin PB3 PB4
                           PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001138:	f644 43ff 	movw	r3, #19711	; 0x4cff
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4836      	ldr	r0, [pc, #216]	; (800122c <MX_GPIO_Init+0x270>)
 8001152:	f001 fbb9 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x274>)
 8001170:	f001 fbaa 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_MOTOR1_Pin IN2_MOTOR1_Pin */
  GPIO_InitStruct.Pin = IN1_MOTOR1_Pin|IN2_MOTOR1_Pin;
 8001174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4829      	ldr	r0, [pc, #164]	; (8001234 <MX_GPIO_Init+0x278>)
 800118e:	f001 fb9b 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001192:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_GPIO_Init+0x278>)
 80011a8:	f001 fb8e 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_GPIO_Init+0x27c>)
 80011c4:	f001 fb80 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <MX_GPIO_Init+0x27c>)
 80011dc:	f001 fb74 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011e0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <MX_GPIO_Init+0x280>)
 80011fa:	f001 fb65 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011fe:	23ff      	movs	r3, #255	; 0xff
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <MX_GPIO_Init+0x284>)
 8001216:	f001 fb57 	bl	80028c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121a:	bf00      	nop
 800121c:	3738      	adds	r7, #56	; 0x38
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40021400 	.word	0x40021400
 8001234:	40021000 	.word	0x40021000
 8001238:	40021800 	.word	0x40021800
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a55      	ldr	r2, [pc, #340]	; (8001414 <HAL_ETH_MspInit+0x174>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	f040 80a4 	bne.w	800140c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_ETH_MspInit+0x178>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a44      	ldr	r2, [pc, #272]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ETH_MspInit+0x178>)
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_ETH_MspInit+0x178>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001388:	2332      	movs	r3, #50	; 0x32
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001398:	230b      	movs	r3, #11
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	481e      	ldr	r0, [pc, #120]	; (800141c <HAL_ETH_MspInit+0x17c>)
 80013a4:	f001 fa90 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013a8:	2386      	movs	r3, #134	; 0x86
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b8:	230b      	movs	r3, #11
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4817      	ldr	r0, [pc, #92]	; (8001420 <HAL_ETH_MspInit+0x180>)
 80013c4:	f001 fa80 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013da:	230b      	movs	r3, #11
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	480f      	ldr	r0, [pc, #60]	; (8001424 <HAL_ETH_MspInit+0x184>)
 80013e6:	f001 fa6f 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fc:	230b      	movs	r3, #11
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <HAL_ETH_MspInit+0x188>)
 8001408:	f001 fa5e 	bl	80028c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40028000 	.word	0x40028000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40021800 	.word	0x40021800

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_I2C_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12c      	bne.n	80014a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147c:	2304      	movs	r3, #4
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_I2C_MspInit+0x8c>)
 8001488:	f001 fa1e 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2230      	movs	r2, #48	; 0x30
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 fc61 	bl	8007d94 <memset>
  if(hrtc->Instance==RTC)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_RTC_MspInit+0x4c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d111      	bne.n	8001500 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014dc:	2320      	movs	r3, #32
 80014de:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fe2e 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014f6:	f7ff fea5 	bl	8001244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_RTC_MspInit+0x50>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3738      	adds	r7, #56	; 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40002800 	.word	0x40002800
 800150c:	42470e3c 	.word	0x42470e3c

08001510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001520:	d116      	bne.n	8001550 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	201c      	movs	r0, #28
 8001544:	f000 fdcf 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001548:	201c      	movs	r0, #28
 800154a:	f000 fde8 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800154e:	e01a      	b.n	8001586 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM5)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_TIM_PWM_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d115      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_TIM_PWM_MspInit+0x80>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f000 fdb3 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001580:	2032      	movs	r0, #50	; 0x32
 8001582:	f000 fdcc 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40000c00 	.word	0x40000c00

08001598 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_TIM_IC_MspInit+0x94>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d133      	bne.n	8001622 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_TIM_IC_MspInit+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001602:	2302      	movs	r3, #2
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_TIM_IC_MspInit+0x9c>)
 800160e:	f001 f95b 	bl	80028c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201d      	movs	r0, #29
 8001618:	f000 fd65 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800161c:	201d      	movs	r0, #29
 800161e:	f000 fd7e 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40000400 	.word	0x40000400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a2a      	ldr	r2, [pc, #168]	; (80016f0 <HAL_TIM_Base_MspInit+0xb8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d116      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201e      	movs	r0, #30
 800166c:	f000 fd3b 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001670:	201e      	movs	r0, #30
 8001672:	f000 fd54 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001676:	e036      	b.n	80016e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <HAL_TIM_Base_MspInit+0xc0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d116      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2019      	movs	r0, #25
 80016a4:	f000 fd1f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016a8:	2019      	movs	r0, #25
 80016aa:	f000 fd38 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 80016ae:	e01a      	b.n	80016e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_TIM_Base_MspInit+0xc4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d115      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_TIM_Base_MspInit+0xbc>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201a      	movs	r0, #26
 80016dc:	f000 fd03 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016e0:	201a      	movs	r0, #26
 80016e2:	f000 fd1c 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40000800 	.word	0x40000800
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40014400 	.word	0x40014400
 80016fc:	40014800 	.word	0x40014800

08001700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d11e      	bne.n	8001760 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVOMOTOR_TIM2_CH1_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800174e:	2301      	movs	r3, #1
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVOMOTOR_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4828      	ldr	r0, [pc, #160]	; (80017fc <HAL_TIM_MspPostInit+0xfc>)
 800175a:	f001 f8b5 	bl	80028c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800175e:	e047      	b.n	80017f0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_TIM_MspPostInit+0x100>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d11f      	bne.n	80017aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_TIM4_CH1_Pin;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001798:	2302      	movs	r3, #2
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_TIM4_CH1_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <HAL_TIM_MspPostInit+0x104>)
 80017a4:	f001 f890 	bl	80028c8 <HAL_GPIO_Init>
}
 80017a8:	e022      	b.n	80017f0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_TIM_MspPostInit+0x108>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d11d      	bne.n	80017f0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d0:	2308      	movs	r3, #8
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017e0:	2302      	movs	r3, #2
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <HAL_TIM_MspPostInit+0xfc>)
 80017ec:	f001 f86c 	bl	80028c8 <HAL_GPIO_Init>
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40000800 	.word	0x40000800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40000c00 	.word	0x40000c00

0800180c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_UART_MspInit+0x108>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d135      	bne.n	800189a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_UART_MspInit+0x10c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_UART_MspInit+0x10c>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_UART_MspInit+0x10c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_UART_MspInit+0x10c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_UART_MspInit+0x10c>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_UART_MspInit+0x10c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001878:	2307      	movs	r3, #7
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4826      	ldr	r0, [pc, #152]	; (800191c <HAL_UART_MspInit+0x110>)
 8001884:	f001 f820 	bl	80028c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2027      	movs	r0, #39	; 0x27
 800188e:	f000 fc2a 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001892:	2027      	movs	r0, #39	; 0x27
 8001894:	f000 fc43 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001898:	e038      	b.n	800190c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_UART_MspInit+0x114>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d133      	bne.n	800190c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018ae:	f043 0320 	orr.w	r3, r3, #32
 80018b2:	6453      	str	r3, [r2, #68]	; 0x44
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x10c>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018ec:	2308      	movs	r3, #8
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_UART_MspInit+0x118>)
 80018f8:	f000 ffe6 	bl	80028c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2047      	movs	r0, #71	; 0x47
 8001902:	f000 fbf0 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001906:	2047      	movs	r0, #71	; 0x47
 8001908:	f000 fc09 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40004800 	.word	0x40004800
 8001918:	40023800 	.word	0x40023800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40011400 	.word	0x40011400
 8001924:	40020800 	.word	0x40020800

08001928 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001948:	d13f      	bne.n	80019ca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001966:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001978:	230a      	movs	r3, #10
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_PCD_MspInit+0xb0>)
 8001984:	f000 ffa0 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	480e      	ldr	r0, [pc, #56]	; (80019d8 <HAL_PCD_MspInit+0xb0>)
 800199e:	f000 ff93 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 80019a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6353      	str	r3, [r2, #52]	; 0x34
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_PCD_MspInit+0xac>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 fa3e 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001a2c:	f7fe fe88 	bl	8000740 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a3a:	f003 fbe1 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000047c 	.word	0x2000047c

08001a48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a4e:	f003 fbd7 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004c4 	.word	0x200004c4

08001a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <TIM2_IRQHandler+0x10>)
 8001a62:	f003 fbcd 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000035c 	.word	0x2000035c

08001a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM3_IRQHandler+0x10>)
 8001a76:	f003 fbc3 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003a4 	.word	0x200003a4

08001a84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM4_IRQHandler+0x10>)
 8001a8a:	f003 fbb9 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003ec 	.word	0x200003ec

08001a98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <USART3_IRQHandler+0x10>)
 8001a9e:	f004 fd19 	bl	80064d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000050c 	.word	0x2000050c

08001aac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM5_IRQHandler+0x10>)
 8001ab2:	f003 fba5 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000434 	.word	0x20000434

08001ac0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USART6_IRQHandler+0x10>)
 8001ac6:	f004 fd05 	bl	80064d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000550 	.word	0x20000550

08001ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e00a      	b.n	8001afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae6:	f3af 8000 	nop.w
 8001aea:	4601      	mov	r1, r0
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf0      	blt.n	8001ae6 <_read+0x12>
  }

  return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e009      	b.n	8001b34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fe1f 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf1      	blt.n	8001b20 <_write+0x12>
  }
  return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_close>:

int _close(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f006 f926 	bl	8007e30 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20030000 	.word	0x20030000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	20000abc 	.word	0x20000abc
 8001c18:	20000c80 	.word	0x20000c80

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_UART_RxCpltCallback+0xd4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d12c      	bne.n	8001caa <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b27      	cmp	r3, #39	; 0x27
 8001c56:	dc1d      	bgt.n	8001c94 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_UART_RxCpltCallback+0xdc>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b0a      	cmp	r3, #10
 8001c5e:	d003      	beq.n	8001c68 <HAL_UART_RxCpltCallback+0x28>
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_UART_RxCpltCallback+0xdc>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b0d      	cmp	r3, #13
 8001c66:	d10b      	bne.n	8001c80 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <HAL_UART_RxCpltCallback+0xe0>)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_UART_RxCpltCallback+0xe4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	4924      	ldr	r1, [pc, #144]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c88:	600a      	str	r2, [r1, #0]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_UART_RxCpltCallback+0xdc>)
 8001c8c:	7811      	ldrb	r1, [r2, #0]
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <HAL_UART_RxCpltCallback+0xe0>)
 8001c90:	54d1      	strb	r1, [r2, r3]
 8001c92:	e005      	b.n	8001ca0 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <HAL_UART_RxCpltCallback+0xe8>)
 8001c9c:	f005 ff9a 	bl	8007bd4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	491e      	ldr	r1, [pc, #120]	; (8001d1c <HAL_UART_RxCpltCallback+0xdc>)
 8001ca4:	481b      	ldr	r0, [pc, #108]	; (8001d14 <HAL_UART_RxCpltCallback+0xd4>)
 8001ca6:	f004 fbe4 	bl	8006472 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_UART_RxCpltCallback+0xec>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12c      	bne.n	8001d0c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_UART_RxCpltCallback+0xf0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b27      	cmp	r3, #39	; 0x27
 8001cb8:	dc1d      	bgt.n	8001cf6 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_UART_RxCpltCallback+0xf4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	d003      	beq.n	8001cca <HAL_UART_RxCpltCallback+0x8a>
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_UART_RxCpltCallback+0xf4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b0d      	cmp	r3, #13
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_UART_RxCpltCallback+0xd8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_UART_RxCpltCallback+0xf8>)
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_UART_RxCpltCallback+0xfc>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_RxCpltCallback+0xf0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e00f      	b.n	8001d02 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_UART_RxCpltCallback+0xf0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <HAL_UART_RxCpltCallback+0xf0>)
 8001cea:	600a      	str	r2, [r1, #0]
 8001cec:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_UART_RxCpltCallback+0xf4>)
 8001cee:	7811      	ldrb	r1, [r2, #0]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_UART_RxCpltCallback+0xf8>)
 8001cf2:	54d1      	strb	r1, [r2, r3]
 8001cf4:	e005      	b.n	8001d02 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_UART_RxCpltCallback+0xf0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001cfc:	4810      	ldr	r0, [pc, #64]	; (8001d40 <HAL_UART_RxCpltCallback+0x100>)
 8001cfe:	f005 ff69 	bl	8007bd4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	490b      	ldr	r1, [pc, #44]	; (8001d34 <HAL_UART_RxCpltCallback+0xf4>)
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_UART_RxCpltCallback+0xec>)
 8001d08:	f004 fbb3 	bl	8006472 <HAL_UART_Receive_IT>
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000050c 	.word	0x2000050c
 8001d18:	20000ae8 	.word	0x20000ae8
 8001d1c:	20000aa0 	.word	0x20000aa0
 8001d20:	20000ac0 	.word	0x20000ac0
 8001d24:	20000aec 	.word	0x20000aec
 8001d28:	08008318 	.word	0x08008318
 8001d2c:	20000550 	.word	0x20000550
 8001d30:	20000b18 	.word	0x20000b18
 8001d34:	20000aa1 	.word	0x20000aa1
 8001d38:	20000af0 	.word	0x20000af0
 8001d3c:	20000b1c 	.word	0x20000b1c
 8001d40:	08008330 	.word	0x08008330

08001d44 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d11f      	bne.n	8001d96 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001d6e:	e012      	b.n	8001d96 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10d      	bne.n	8001d96 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001d80:	2100      	movs	r1, #0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f003 fd6a 	bl	800585c <HAL_TIM_ReadCapturedValue>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d8e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x68>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40000400 	.word	0x40000400
 8001da4:	20000b28 	.word	0x20000b28
 8001da8:	20000b20 	.word	0x20000b20
 8001dac:	20000b24 	.word	0x20000b24

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dda:	f7ff ff1f 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f006 f82d 	bl	8007e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7fe fcf5 	bl	80007d0 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001de8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001df4:	08008410 	.word	0x08008410
  ldr r2, =_sbss
 8001df8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001dfc:	20000c7c 	.word	0x20000c7c

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fa0a 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f967 	bl	800213a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f92f 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000030 	.word	0x20000030
 8001ea0:	20000038 	.word	0x20000038
 8001ea4:	20000034 	.word	0x20000034

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000038 	.word	0x20000038
 8001ecc:	20000b2c 	.word	0x20000b2c

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000b2c 	.word	0x20000b2c

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000038 	.word	0x20000038

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff feb6 	bl	8001ed0 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d008      	beq.n	8002184 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e052      	b.n	800222a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0216 	bic.w	r2, r2, #22
 8002192:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <HAL_DMA_Abort+0x62>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0208 	bic.w	r2, r2, #8
 80021c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	e013      	b.n	80021fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d6:	f7ff fe7b 	bl	8001ed0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d90c      	bls.n	80021fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e015      	b.n	800222a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e4      	bne.n	80021d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00c      	b.n	800226a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2205      	movs	r2, #5
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06c      	b.n	8002364 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2223      	movs	r2, #35	; 0x23
 8002298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fe ffff 	bl	80012a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_ETH_Init+0xf4>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a30      	ldr	r2, [pc, #192]	; (800236c <HAL_ETH_Init+0xf4>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_ETH_Init+0xf4>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_ETH_Init+0xf8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_ETH_Init+0xf8>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_ETH_Init+0xf8>)
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_ETH_Init+0xf8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_ETH_Init+0xf8>)
 80022da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f4:	f7ff fdec 	bl	8001ed0 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022fa:	e011      	b.n	8002320 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022fc:	f7ff fde8 	bl	8001ed0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800230a:	d909      	bls.n	8002320 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2204      	movs	r2, #4
 8002310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	22e0      	movs	r2, #224	; 0xe0
 8002318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e021      	b.n	8002364 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e4      	bne.n	80022fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f958 	bl	80025e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f9ff 	bl	800273c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa55 	bl	80027ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	461a      	mov	r2, r3
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f9bd 	bl	80026cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2210      	movs	r2, #16
 800235e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800

08002374 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <ETH_SetMACConfig+0x15c>)
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7c1b      	ldrb	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <ETH_SetMACConfig+0x28>
 8002396:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800239a:	e000      	b.n	800239e <ETH_SetMACConfig+0x2a>
 800239c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	7c5b      	ldrb	r3, [r3, #17]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <ETH_SetMACConfig+0x38>
 80023a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023aa:	e000      	b.n	80023ae <ETH_SetMACConfig+0x3a>
 80023ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	7fdb      	ldrb	r3, [r3, #31]
 80023ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	7f92      	ldrb	r2, [r2, #30]
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d102      	bne.n	80023d2 <ETH_SetMACConfig+0x5e>
 80023cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d0:	e000      	b.n	80023d4 <ETH_SetMACConfig+0x60>
 80023d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7f1b      	ldrb	r3, [r3, #28]
 80023da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	791b      	ldrb	r3, [r3, #4]
 80023e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023f2:	2a00      	cmp	r2, #0
 80023f4:	d102      	bne.n	80023fc <ETH_SetMACConfig+0x88>
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	e000      	b.n	80023fe <ETH_SetMACConfig+0x8a>
 80023fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7bdb      	ldrb	r3, [r3, #15]
 8002404:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002406:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800240c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002414:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002416:	4313      	orrs	r3, r2
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff fd5a 	bl	8001ee8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	f64f 7341 	movw	r3, #65345	; 0xff41
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002452:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800245a:	2a00      	cmp	r2, #0
 800245c:	d101      	bne.n	8002462 <ETH_SetMACConfig+0xee>
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	e000      	b.n	8002464 <ETH_SetMACConfig+0xf0>
 8002462:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002464:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800246a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002472:	2a01      	cmp	r2, #1
 8002474:	d101      	bne.n	800247a <ETH_SetMACConfig+0x106>
 8002476:	2208      	movs	r2, #8
 8002478:	e000      	b.n	800247c <ETH_SetMACConfig+0x108>
 800247a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800247c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002484:	2a01      	cmp	r2, #1
 8002486:	d101      	bne.n	800248c <ETH_SetMACConfig+0x118>
 8002488:	2204      	movs	r2, #4
 800248a:	e000      	b.n	800248e <ETH_SetMACConfig+0x11a>
 800248c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800248e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002496:	2a01      	cmp	r2, #1
 8002498:	d101      	bne.n	800249e <ETH_SetMACConfig+0x12a>
 800249a:	2202      	movs	r2, #2
 800249c:	e000      	b.n	80024a0 <ETH_SetMACConfig+0x12c>
 800249e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7ff fd15 	bl	8001ee8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	ff20810f 	.word	0xff20810f

080024d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <ETH_SetDMAConfig+0x110>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7b1b      	ldrb	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <ETH_SetDMAConfig+0x2c>
 80024fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024fe:	e000      	b.n	8002502 <ETH_SetDMAConfig+0x2e>
 8002500:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	7b5b      	ldrb	r3, [r3, #13]
 8002506:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002508:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	7f52      	ldrb	r2, [r2, #29]
 800250e:	2a00      	cmp	r2, #0
 8002510:	d102      	bne.n	8002518 <ETH_SetDMAConfig+0x44>
 8002512:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002516:	e000      	b.n	800251a <ETH_SetDMAConfig+0x46>
 8002518:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800251a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	7b9b      	ldrb	r3, [r3, #14]
 8002520:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002522:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002528:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7f1b      	ldrb	r3, [r3, #28]
 800252e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002530:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7f9b      	ldrb	r3, [r3, #30]
 8002536:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002538:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800253e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002546:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002548:	4313      	orrs	r3, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002558:	461a      	mov	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fcbc 	bl	8001ee8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	791b      	ldrb	r3, [r3, #4]
 8002582:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002588:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800258e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002594:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800259c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800259e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff fc8d 	bl	8001ee8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	f8de3f23 	.word	0xf8de3f23

080025e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0a6      	sub	sp, #152	; 0x98
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002624:	2300      	movs	r3, #0
 8002626:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800262e:	2300      	movs	r3, #0
 8002630:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800264a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002654:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800265c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe86 	bl	8002374 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002668:	2301      	movs	r3, #1
 800266a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002694:	2301      	movs	r3, #1
 8002696:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800269e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff08 	bl	80024d4 <ETH_SetDMAConfig>
}
 80026c4:	bf00      	nop
 80026c6:	3798      	adds	r7, #152	; 0x98
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3305      	adds	r3, #5
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	3204      	adds	r2, #4
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <ETH_MACAddressConfig+0x68>)
 80026ee:	4413      	add	r3, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3303      	adds	r3, #3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	061a      	lsls	r2, r3, #24
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3302      	adds	r3, #2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	4313      	orrs	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <ETH_MACAddressConfig+0x6c>)
 800271e:	4413      	add	r3, r2
 8002720:	461a      	mov	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	6013      	str	r3, [r2, #0]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40028040 	.word	0x40028040
 8002738:	40028044 	.word	0x40028044

0800273c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e03e      	b.n	80027c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	3206      	adds	r2, #6
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d80c      	bhi.n	80027ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68d9      	ldr	r1, [r3, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	e004      	b.n	80027b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d9bd      	bls.n	800274a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e0:	611a      	str	r2, [r3, #16]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e046      	b.n	800288a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002838:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002840:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	3212      	adds	r2, #18
 8002856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d80c      	bhi.n	800287a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6919      	ldr	r1, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	e004      	b.n	8002884 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d9b5      	bls.n	80027fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ba:	60da      	str	r2, [r3, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e177      	b.n	8002bd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f040 8166 	bne.w	8002bce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d005      	beq.n	800291a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b03      	cmp	r3, #3
 8002986:	d017      	beq.n	80029b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d123      	bne.n	8002a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80c0 	beq.w	8002bce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_GPIO_Init+0x324>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a65      	ldr	r2, [pc, #404]	; (8002bec <HAL_GPIO_Init+0x324>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_GPIO_Init+0x324>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a61      	ldr	r2, [pc, #388]	; (8002bf0 <HAL_GPIO_Init+0x328>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_GPIO_Init+0x32c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d037      	beq.n	8002b06 <HAL_GPIO_Init+0x23e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <HAL_GPIO_Init+0x330>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_GPIO_Init+0x23a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a56      	ldr	r2, [pc, #344]	; (8002bfc <HAL_GPIO_Init+0x334>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x236>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a55      	ldr	r2, [pc, #340]	; (8002c00 <HAL_GPIO_Init+0x338>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x232>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <HAL_GPIO_Init+0x33c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x22e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a53      	ldr	r2, [pc, #332]	; (8002c08 <HAL_GPIO_Init+0x340>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x22a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_GPIO_Init+0x344>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x226>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a51      	ldr	r2, [pc, #324]	; (8002c10 <HAL_GPIO_Init+0x348>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x222>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a50      	ldr	r2, [pc, #320]	; (8002c14 <HAL_GPIO_Init+0x34c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x21e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	; (8002c18 <HAL_GPIO_Init+0x350>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x21a>
 8002ade:	2309      	movs	r3, #9
 8002ae0:	e012      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	e010      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	e00e      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e00c      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e00a      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x240>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_GPIO_Init+0x328>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a29      	ldr	r2, [pc, #164]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_GPIO_Init+0x354>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f ae84 	bls.w	80028e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40021400 	.word	0x40021400
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40021c00 	.word	0x40021c00
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40022400 	.word	0x40022400
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12b      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fbd6 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f001 fa20 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a81      	ldr	r2, [pc, #516]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d807      	bhi.n	8002cd8 <HAL_I2C_Init+0x84>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a80      	ldr	r2, [pc, #512]	; (8002ecc <HAL_I2C_Init+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x92>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a7d      	ldr	r2, [pc, #500]	; (8002ed0 <HAL_I2C_Init+0x27c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bf94      	ite	ls
 8002ce0:	2301      	movls	r3, #1
 8002ce2:	2300      	movhi	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0e7      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a78      	ldr	r2, [pc, #480]	; (8002ed4 <HAL_I2C_Init+0x280>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a6a      	ldr	r2, [pc, #424]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <HAL_I2C_Init+0xd4>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e009      	b.n	8002d3c <HAL_I2C_Init+0xe8>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <HAL_I2C_Init+0x284>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	495c      	ldr	r1, [pc, #368]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d819      	bhi.n	8002d90 <HAL_I2C_Init+0x13c>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e59      	subs	r1, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d70:	400b      	ands	r3, r1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_I2C_Init+0x138>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	e051      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e04f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <HAL_I2C_Init+0x168>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Init+0x18e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x196>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e022      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <HAL_I2C_Init+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1e58      	subs	r0, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6809      	ldr	r1, [r1, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6911      	ldr	r1, [r2, #16]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	000186a0 	.word	0x000186a0
 8002ecc:	001e847f 	.word	0x001e847f
 8002ed0:	003d08ff 	.word	0x003d08ff
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	817b      	strh	r3, [r7, #10]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7fe ffee 	bl	8001ed0 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	f040 80e0 	bne.w	80030c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2319      	movs	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4970      	ldr	r1, [pc, #448]	; (80030d0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f964 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0d3      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0x50>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0cc      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d007      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2221      	movs	r2, #33	; 0x21
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	893a      	ldrh	r2, [r7, #8]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f94:	8979      	ldrh	r1, [r7, #10]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f89c 	bl	80030d8 <I2C_MasterRequestWrite>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e08d      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fc0:	e066      	b.n	8003090 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6a39      	ldr	r1, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f9de 	bl	8003388 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d107      	bne.n	8002fea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d11b      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x188>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d017      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6a39      	ldr	r1, [r7, #32]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f9ce 	bl	800340a <I2C_WaitOnBTFFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e01a      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d194      	bne.n	8002fc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	460b      	mov	r3, r1
 80030e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d006      	beq.n	8003102 <I2C_MasterRequestWrite+0x2a>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d003      	beq.n	8003102 <I2C_MasterRequestWrite+0x2a>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003100:	d108      	bne.n	8003114 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e00b      	b.n	800312c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	2b12      	cmp	r3, #18
 800311a:	d107      	bne.n	800312c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f84f 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d103      	bne.n	800315c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e035      	b.n	80031cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d108      	bne.n	800317c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	e01b      	b.n	80031b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800317c:	897b      	ldrh	r3, [r7, #10]
 800317e:	11db      	asrs	r3, r3, #7
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 0306 	and.w	r3, r3, #6
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f063 030f 	orn	r3, r3, #15
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <I2C_MasterRequestWrite+0xfc>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f875 	bl	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e010      	b.n	80031cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <I2C_MasterRequestWrite+0x100>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f865 	bl	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	00010008 	.word	0x00010008
 80031d8:	00010002 	.word	0x00010002

080031dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	e025      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d021      	beq.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fe fe6b 	bl	8001ed0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e023      	b.n	8003282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	e00c      	b.n	800327a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d0b6      	beq.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003298:	e051      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d123      	bne.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e046      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d021      	beq.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fe fde9 	bl	8001ed0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e020      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10c      	bne.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e00b      	b.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	43da      	mvns	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d18d      	bne.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003394:	e02d      	b.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f878 	bl	800348c <I2C_IsAcknowledgeFailed>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e02d      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe fd8f 	bl	8001ed0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e007      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d1ca      	bne.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003416:	e02d      	b.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f837 	bl	800348c <I2C_IsAcknowledgeFailed>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e02d      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d021      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fe fd4e 	bl	8001ed0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d1ca      	bne.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d11b      	bne.n	80034dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d129      	bne.n	8003554 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0210 	bic.w	r2, r2, #16
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	d12a      	bne.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	; 0x24
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800359c:	89fb      	ldrh	r3, [r7, #14]
 800359e:	f023 030f 	bic.w	r3, r3, #15
 80035a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	89fa      	ldrh	r2, [r7, #14]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	b08f      	sub	sp, #60	; 0x3c
 80035e4:	af0a      	add	r7, sp, #40	; 0x28
 80035e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e10f      	b.n	8003812 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fe f98b 	bl	8001928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2203      	movs	r2, #3
 8003616:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 ff18 	bl	8007466 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	687e      	ldr	r6, [r7, #4]
 800363e:	466d      	mov	r5, sp
 8003640:	f106 0410 	add.w	r4, r6, #16
 8003644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003650:	e885 0003 	stmia.w	r5, {r0, r1}
 8003654:	1d33      	adds	r3, r6, #4
 8003656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f003 fea3 	bl	80073a4 <USB_CoreInit>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0d0      	b.n	8003812 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f003 ff06 	bl	8007488 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e04a      	b.n	8003718 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	333d      	adds	r3, #61	; 0x3d
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	333c      	adds	r3, #60	; 0x3c
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	b298      	uxth	r0, r3
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3344      	adds	r3, #68	; 0x44
 80036be:	4602      	mov	r2, r0
 80036c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3340      	adds	r3, #64	; 0x40
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3348      	adds	r3, #72	; 0x48
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334c      	adds	r3, #76	; 0x4c
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3354      	adds	r3, #84	; 0x54
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d3af      	bcc.n	8003682 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e044      	b.n	80037b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	3301      	adds	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d3b5      	bcc.n	8003728 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	687e      	ldr	r6, [r7, #4]
 80037c4:	466d      	mov	r5, sp
 80037c6:	f106 0410 	add.w	r4, r6, #16
 80037ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037da:	1d33      	adds	r3, r6, #4
 80037dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037de:	6838      	ldr	r0, [r7, #0]
 80037e0:	f003 fe9e 	bl	8007520 <USB_DevInit>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00d      	b.n	8003812 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 f869 	bl	80078e2 <USB_DevDisconnect>

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800381c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e267      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d075      	beq.n	8003926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383a:	4b88      	ldr	r3, [pc, #544]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d00c      	beq.n	8003860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384e:	2b08      	cmp	r3, #8
 8003850:	d112      	bne.n	8003878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385e:	d10b      	bne.n	8003878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	4b7e      	ldr	r3, [pc, #504]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d05b      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d157      	bne.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e242      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d106      	bne.n	8003890 <HAL_RCC_OscConfig+0x74>
 8003882:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a75      	ldr	r2, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e01d      	b.n	80038cc <HAL_RCC_OscConfig+0xb0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x98>
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6c      	ldr	r2, [pc, #432]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0xb0>
 80038b4:	4b69      	ldr	r3, [pc, #420]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a68      	ldr	r2, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe fafc 	bl	8001ed0 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe faf8 	bl	8001ed0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e207      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0xc0>
 80038fa:	e014      	b.n	8003926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fae8 	bl	8001ed0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fae4 	bl	8001ed0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1f3      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0xe8>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d063      	beq.n	80039fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003932:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003946:	2b08      	cmp	r3, #8
 8003948:	d11c      	bne.n	8003984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_RCC_OscConfig+0x152>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d001      	beq.n	800396e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e1c7      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4937      	ldr	r1, [pc, #220]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	e03a      	b.n	80039fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800398c:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <HAL_RCC_OscConfig+0x244>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe fa9d 	bl	8001ed0 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399a:	f7fe fa99 	bl	8001ed0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e1a8      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4925      	ldr	r1, [pc, #148]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
 80039cc:	e015      	b.n	80039fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_OscConfig+0x244>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fa7c 	bl	8001ed0 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039dc:	f7fe fa78 	bl	8001ed0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e187      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d036      	beq.n	8003a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x248>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fe fa5c 	bl	8001ed0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fa58 	bl	8001ed0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e167      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x240>)
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x200>
 8003a3a:	e01b      	b.n	8003a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x248>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fe fa45 	bl	8001ed0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	e00e      	b.n	8003a68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fa41 	bl	8001ed0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d907      	bls.n	8003a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e150      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	42470000 	.word	0x42470000
 8003a64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ea      	bne.n	8003a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8097 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a86:	4b81      	ldr	r3, [pc, #516]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10f      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b7a      	ldr	r3, [pc, #488]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d118      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abe:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCC_OscConfig+0x474>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a73      	ldr	r2, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fa01 	bl	8001ed0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fe f9fd 	bl	8001ed0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e10c      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x474>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x2ea>
 8003af8:	4b64      	ldr	r3, [pc, #400]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a63      	ldr	r2, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	e01c      	b.n	8003b40 <HAL_RCC_OscConfig+0x324>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x30c>
 8003b0e:	4b5f      	ldr	r3, [pc, #380]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a5e      	ldr	r2, [pc, #376]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 0304 	orr.w	r3, r3, #4
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	4b5c      	ldr	r3, [pc, #368]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a5b      	ldr	r2, [pc, #364]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_OscConfig+0x324>
 8003b28:	4b58      	ldr	r3, [pc, #352]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a57      	ldr	r2, [pc, #348]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	4b55      	ldr	r3, [pc, #340]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 0304 	bic.w	r3, r3, #4
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe f9c2 	bl	8001ed0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe f9be 	bl	8001ed0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0cb      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ee      	beq.n	8003b50 <HAL_RCC_OscConfig+0x334>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fe f9ac 	bl	8001ed0 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe f9a8 	bl	8001ed0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0b5      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ee      	bne.n	8003b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	4a38      	ldr	r2, [pc, #224]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a1 	beq.w	8003cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bba:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d05c      	beq.n	8003c80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d141      	bne.n	8003c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x478>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f97c 	bl	8001ed0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe f978 	bl	8001ed0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e087      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	491b      	ldr	r1, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x478>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fe f951 	bl	8001ed0 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fe f94d 	bl	8001ed0 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e05c      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x416>
 8003c50:	e054      	b.n	8003cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_OscConfig+0x478>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe f93a 	bl	8001ed0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe f936 	bl	8001ed0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e045      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_RCC_OscConfig+0x470>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x444>
 8003c7e:	e03d      	b.n	8003cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e038      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000
 8003c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x4ec>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d028      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d121      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d11a      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d111      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0cc      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d90c      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b63      	ldr	r3, [pc, #396]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b8      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d020      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d78:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a52      	ldr	r2, [pc, #328]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	494d      	ldr	r1, [pc, #308]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d044      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d119      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e07f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e06f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e067      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b37      	ldr	r3, [pc, #220]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4934      	ldr	r1, [pc, #208]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe f868 	bl	8001ed0 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fe f864 	bl	8001ed0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e04f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d20c      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e032      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4916      	ldr	r1, [pc, #88]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e92:	f000 f821 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e96:	4602      	mov	r2, r0
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	490a      	ldr	r1, [pc, #40]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	5ccb      	ldrb	r3, [r1, r3]
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd ffc8 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023c00 	.word	0x40023c00
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	080083e8 	.word	0x080083e8
 8003ed0:	20000030 	.word	0x20000030
 8003ed4:	20000034 	.word	0x20000034

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003edc:	b094      	sub	sp, #80	; 0x50
 8003ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	2300      	movs	r3, #0
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef0:	4b79      	ldr	r3, [pc, #484]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d00d      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x40>
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	f200 80e1 	bhi.w	80040c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x34>
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0a:	e0db      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b73      	ldr	r3, [pc, #460]	; (80040dc <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f10:	e0db      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f12:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f16:	e0d8      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f22:	4b6d      	ldr	r3, [pc, #436]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	099b      	lsrs	r3, r3, #6
 8003f34:	2200      	movs	r2, #0
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
 8003f42:	2300      	movs	r3, #0
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	0159      	lsls	r1, r3, #5
 8003f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5c:	0150      	lsls	r0, r2, #5
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4621      	mov	r1, r4
 8003f64:	1a51      	subs	r1, r2, r1
 8003f66:	6139      	str	r1, [r7, #16]
 8003f68:	4629      	mov	r1, r5
 8003f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	018b      	lsls	r3, r1, #6
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f86:	4651      	mov	r1, sl
 8003f88:	018a      	lsls	r2, r1, #6
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f90:	4659      	mov	r1, fp
 8003f92:	eb63 0901 	sbc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	eb49 0303 	adc.w	r3, r9, r3
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	024b      	lsls	r3, r1, #9
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	024a      	lsls	r2, r1, #9
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	2200      	movs	r2, #0
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fe8:	f7fc f900 	bl	80001ec <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	e058      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff6:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	4611      	mov	r1, r2
 8004002:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	f04f 0000 	mov.w	r0, #0
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	0159      	lsls	r1, r3, #5
 800401e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004022:	0150      	lsls	r0, r2, #5
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4641      	mov	r1, r8
 800402a:	ebb2 0a01 	subs.w	sl, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb63 0b01 	sbc.w	fp, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004040:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004044:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004048:	ebb2 040a 	subs.w	r4, r2, sl
 800404c:	eb63 050b 	sbc.w	r5, r3, fp
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	00eb      	lsls	r3, r5, #3
 800405a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405e:	00e2      	lsls	r2, r4, #3
 8004060:	4614      	mov	r4, r2
 8004062:	461d      	mov	r5, r3
 8004064:	4643      	mov	r3, r8
 8004066:	18e3      	adds	r3, r4, r3
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	464b      	mov	r3, r9
 800406c:	eb45 0303 	adc.w	r3, r5, r3
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800407e:	4629      	mov	r1, r5
 8004080:	028b      	lsls	r3, r1, #10
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004088:	4621      	mov	r1, r4
 800408a:	028a      	lsls	r2, r1, #10
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	2200      	movs	r2, #0
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	61fa      	str	r2, [r7, #28]
 8004098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800409c:	f7fc f8a6 	bl	80001ec <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	3301      	adds	r3, #1
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c2:	e002      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetSysClockFreq+0x204>)
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3750      	adds	r7, #80	; 0x50
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	007a1200 	.word	0x007a1200

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000030 	.word	0x20000030

080040fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004100:	f7ff fff0 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0a9b      	lsrs	r3, r3, #10
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	080083f8 	.word	0x080083f8

08004124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004128:	f7ff ffdc 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0b5b      	lsrs	r3, r3, #13
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	080083f8 	.word	0x080083f8

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d075      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004180:	4b91      	ldr	r3, [pc, #580]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7fd fea3 	bl	8001ed0 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418e:	f7fd fe9f 	bl	8001ed0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e189      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a0:	4b8a      	ldr	r3, [pc, #552]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	019a      	lsls	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	4981      	ldr	r1, [pc, #516]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01f      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041d8:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	431a      	orrs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	071b      	lsls	r3, r3, #28
 80041f8:	4974      	ldr	r1, [pc, #464]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004200:	4b72      	ldr	r3, [pc, #456]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004206:	f023 021f 	bic.w	r2, r3, #31
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	3b01      	subs	r3, #1
 8004210:	496e      	ldr	r1, [pc, #440]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	019a      	lsls	r2, r3, #6
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	071b      	lsls	r3, r3, #28
 8004238:	4964      	ldr	r1, [pc, #400]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004240:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004246:	f7fd fe43 	bl	8001ed0 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800424e:	f7fd fe3f 	bl	8001ed0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e129      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004260:	4b5a      	ldr	r3, [pc, #360]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d079      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004284:	4b52      	ldr	r3, [pc, #328]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800428a:	f7fd fe21 	bl	8001ed0 <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004292:	f7fd fe1d 	bl	8001ed0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e107      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042a4:	4b49      	ldr	r3, [pc, #292]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b0:	d0ef      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042be:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	0f1b      	lsrs	r3, r3, #28
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	019a      	lsls	r2, r3, #6
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	431a      	orrs	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	493b      	ldr	r1, [pc, #236]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	4934      	ldr	r1, [pc, #208]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	0e1b      	lsrs	r3, r3, #24
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	019a      	lsls	r2, r3, #6
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4927      	ldr	r1, [pc, #156]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	4922      	ldr	r1, [pc, #136]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd fdbe 	bl	8001ed0 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004358:	f7fd fdba 	bl	8001ed0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0a4      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004376:	d1ef      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808b 	beq.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7fd fd8f 	bl	8001ed0 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b4:	e010      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd fd8b 	bl	8001ed0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d909      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e075      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80043c8:	42470068 	.word	0x42470068
 80043cc:	40023800 	.word	0x40023800
 80043d0:	42470070 	.word	0x42470070
 80043d4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d8:	4b38      	ldr	r3, [pc, #224]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0e8      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02f      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d028      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004402:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d114      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd fd51 	bl	8001ed0 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd fd4d 	bl	8001ed0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e035      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ee      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004460:	d10d      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	4912      	ldr	r1, [pc, #72]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]
 800447c:	e005      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004484:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004488:	6093      	str	r3, [r2, #8]
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800448c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004496:	490a      	ldr	r1, [pc, #40]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004498:	4313      	orrs	r3, r2
 800449a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80044b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40007000 	.word	0x40007000
 80044c0:	40023800 	.word	0x40023800
 80044c4:	42470e40 	.word	0x42470e40
 80044c8:	424711e0 	.word	0x424711e0

080044cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e066      	b.n	80045b0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7f5b      	ldrb	r3, [r3, #29]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc ffe2 	bl	80014bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	22ca      	movs	r2, #202	; 0xca
 8004504:	625a      	str	r2, [r3, #36]	; 0x24
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2253      	movs	r2, #83	; 0x53
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f998 	bl	8004844 <RTC_EnterInitMode>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12c      	bne.n	8004578 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6919      	ldr	r1, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f99f 	bl	80048b2 <RTC_ExitInitMode>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	22ff      	movs	r2, #255	; 0xff
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	7f1b      	ldrb	r3, [r3, #28]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_RTC_SetTime+0x1c>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e087      	b.n	80046e4 <HAL_RTC_SetTime+0x12c>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2202      	movs	r2, #2
 80045de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d126      	bne.n	8004634 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f97c 	bl	80048fc <RTC_ByteToBcd2>
 8004604:	4603      	mov	r3, r0
 8004606:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f975 	bl	80048fc <RTC_ByteToBcd2>
 8004612:	4603      	mov	r3, r0
 8004614:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004616:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	789b      	ldrb	r3, [r3, #2]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f96d 	bl	80048fc <RTC_ByteToBcd2>
 8004622:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004624:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e018      	b.n	8004666 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004654:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800465a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	78db      	ldrb	r3, [r3, #3]
 8004660:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	22ca      	movs	r2, #202	; 0xca
 800466c:	625a      	str	r2, [r3, #36]	; 0x24
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2253      	movs	r2, #83	; 0x53
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f8e4 	bl	8004844 <RTC_EnterInitMode>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d120      	bne.n	80046c8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004690:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8f7 	bl	80048b2 <RTC_ExitInitMode>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	22ff      	movs	r2, #255	; 0xff
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	771a      	strb	r2, [r3, #28]

  return status;
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd90      	pop	{r4, r7, pc}

080046ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	7f1b      	ldrb	r3, [r3, #28]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_RTC_SetDate+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e071      	b.n	80047ec <HAL_RTC_SetDate+0x100>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2202      	movs	r2, #2
 8004712:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10e      	bne.n	8004738 <HAL_RTC_SetDate+0x4c>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	f023 0310 	bic.w	r3, r3, #16
 800472e:	b2db      	uxtb	r3, r3
 8004730:	330a      	adds	r3, #10
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11c      	bne.n	8004778 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	78db      	ldrb	r3, [r3, #3]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f8da 	bl	80048fc <RTC_ByteToBcd2>
 8004748:	4603      	mov	r3, r0
 800474a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f8d3 	bl	80048fc <RTC_ByteToBcd2>
 8004756:	4603      	mov	r3, r0
 8004758:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800475a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	789b      	ldrb	r3, [r3, #2]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f8cb 	bl	80048fc <RTC_ByteToBcd2>
 8004766:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004768:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e00e      	b.n	8004796 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	78db      	ldrb	r3, [r3, #3]
 800477c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004784:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800478a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	22ca      	movs	r2, #202	; 0xca
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2253      	movs	r2, #83	; 0x53
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f84c 	bl	8004844 <RTC_EnterInitMode>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f873 	bl	80048b2 <RTC_ExitInitMode>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]

  return status;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd90      	pop	{r4, r7, pc}

080047f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800480e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004810:	f7fd fb5e 	bl	8001ed0 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004816:	e009      	b.n	800482c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004818:	f7fd fb5a 	bl	8001ed0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004826:	d901      	bls.n	800482c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e007      	b.n	800483c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ee      	beq.n	8004818 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d122      	bne.n	80048a8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004870:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004872:	f7fd fb2d 	bl	8001ed0 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004878:	e00c      	b.n	8004894 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800487a:	f7fd fb29 	bl	8001ed0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004888:	d904      	bls.n	8004894 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2204      	movs	r2, #4
 800488e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <RTC_EnterInitMode+0x64>
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d1e8      	bne.n	800487a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048cc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff89 	bl	80047f4 <HAL_RTC_WaitForSynchro>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2204      	movs	r2, #4
 80048ec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800490a:	e005      	b.n	8004918 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	3301      	adds	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	3b0a      	subs	r3, #10
 8004916:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2b09      	cmp	r3, #9
 800491c:	d8f6      	bhi.n	800490c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	b2da      	uxtb	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4313      	orrs	r3, r2
 8004928:	b2db      	uxtb	r3, r3
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e041      	b.n	80049cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc fe6b 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f000 ffd3 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d001      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e04e      	b.n	8004a8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d01d      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a19      	ldr	r2, [pc, #100]	; (8004aac <HAL_TIM_Base_Start_IT+0xd8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x80>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d111      	bne.n	8004a78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d010      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a76:	e007      	b.n	8004a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40001800 	.word	0x40001800

08004ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e041      	b.n	8004b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc fd18 	bl	8001510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 ff14 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x24>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e022      	b.n	8004bbe <HAL_TIM_PWM_Start+0x6a>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d109      	bne.n	8004b92 <HAL_TIM_PWM_Start+0x3e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e015      	b.n	8004bbe <HAL_TIM_PWM_Start+0x6a>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x58>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e008      	b.n	8004bbe <HAL_TIM_PWM_Start+0x6a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07c      	b.n	8004cc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x82>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	e013      	b.n	8004bfe <HAL_TIM_PWM_Start+0xaa>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x92>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be4:	e00b      	b.n	8004bfe <HAL_TIM_PWM_Start+0xaa>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	e003      	b.n	8004bfe <HAL_TIM_PWM_Start+0xaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	6839      	ldr	r1, [r7, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 fa9e 	bl	8006148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <HAL_TIM_PWM_Start+0x174>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_PWM_Start+0xcc>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <HAL_TIM_PWM_Start+0x178>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_PWM_Start+0xd0>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_TIM_PWM_Start+0xd2>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <HAL_TIM_PWM_Start+0x174>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d01d      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_TIM_PWM_Start+0x17c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_TIM_PWM_Start+0x180>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIM_PWM_Start+0x184>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIM_PWM_Start+0x178>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_TIM_PWM_Start+0x188>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x136>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIM_PWM_Start+0x18c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d010      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	e007      	b.n	8004cbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40001800 	.word	0x40001800

08004ce4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_PWM_Start_IT+0x28>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e022      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0x6e>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d109      	bne.n	8004d26 <HAL_TIM_PWM_Start_IT+0x42>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e015      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0x6e>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d109      	bne.n	8004d40 <HAL_TIM_PWM_Start_IT+0x5c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e008      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0x6e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0c7      	b.n	8004eea <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start_IT+0x86>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	e013      	b.n	8004d92 <HAL_TIM_PWM_Start_IT+0xae>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start_IT+0x96>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	e00b      	b.n	8004d92 <HAL_TIM_PWM_Start_IT+0xae>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start_IT+0xa6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	e003      	b.n	8004d92 <HAL_TIM_PWM_Start_IT+0xae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d841      	bhi.n	8004e1c <HAL_TIM_PWM_Start_IT+0x138>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e1d 	.word	0x08004e1d
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e0b 	.word	0x08004e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0202 	orr.w	r2, r2, #2
 8004de2:	60da      	str	r2, [r3, #12]
      break;
 8004de4:	e01d      	b.n	8004e22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	60da      	str	r2, [r3, #12]
      break;
 8004df6:	e014      	b.n	8004e22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	60da      	str	r2, [r3, #12]
      break;
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	60da      	str	r2, [r3, #12]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d15f      	bne.n	8004ee8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f989 	bl	8006148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	; (8004ef4 <HAL_TIM_PWM_Start_IT+0x210>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIM_PWM_Start_IT+0x166>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <HAL_TIM_PWM_Start_IT+0x214>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_PWM_Start_IT+0x16a>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_TIM_PWM_Start_IT+0x16c>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <HAL_TIM_PWM_Start_IT+0x210>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <HAL_TIM_PWM_Start_IT+0x218>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <HAL_TIM_PWM_Start_IT+0x220>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_TIM_PWM_Start_IT+0x214>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_TIM_PWM_Start_IT+0x224>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_TIM_PWM_Start_IT+0x228>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d111      	bne.n	8004ed8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d010      	beq.n	8004ee8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e007      	b.n	8004ee8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40000800 	.word	0x40000800
 8004f04:	40000c00 	.word	0x40000c00
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e041      	b.n	8004fa6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc fb2e 	bl	8001598 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 fce6 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_IC_Start_IT+0x1e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e013      	b.n	8004ff6 <HAL_TIM_IC_Start_IT+0x46>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_IC_Start_IT+0x2e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e00b      	b.n	8004ff6 <HAL_TIM_IC_Start_IT+0x46>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_IC_Start_IT+0x3e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e003      	b.n	8004ff6 <HAL_TIM_IC_Start_IT+0x46>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_TIM_IC_Start_IT+0x58>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e013      	b.n	8005030 <HAL_TIM_IC_Start_IT+0x80>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d104      	bne.n	8005018 <HAL_TIM_IC_Start_IT+0x68>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e00b      	b.n	8005030 <HAL_TIM_IC_Start_IT+0x80>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d104      	bne.n	8005028 <HAL_TIM_IC_Start_IT+0x78>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e003      	b.n	8005030 <HAL_TIM_IC_Start_IT+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502e:	b2db      	uxtb	r3, r3
 8005030:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005032:	7bbb      	ldrb	r3, [r7, #14]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005038:	7b7b      	ldrb	r3, [r7, #13]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d001      	beq.n	8005042 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0cc      	b.n	80051dc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_IC_Start_IT+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005050:	e013      	b.n	800507a <HAL_TIM_IC_Start_IT+0xca>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_IC_Start_IT+0xb2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	e00b      	b.n	800507a <HAL_TIM_IC_Start_IT+0xca>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_IC_Start_IT+0xc2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	e003      	b.n	800507a <HAL_TIM_IC_Start_IT+0xca>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0xda>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005088:	e013      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x102>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_IT+0xea>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x102>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d104      	bne.n	80050aa <HAL_TIM_IC_Start_IT+0xfa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x102>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d841      	bhi.n	800513c <HAL_TIM_IC_Start_IT+0x18c>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_TIM_IC_Start_IT+0x110>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	0800513d 	.word	0x0800513d
 80050c8:	0800513d 	.word	0x0800513d
 80050cc:	0800513d 	.word	0x0800513d
 80050d0:	08005107 	.word	0x08005107
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	0800513d 	.word	0x0800513d
 80050e0:	08005119 	.word	0x08005119
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800512b 	.word	0x0800512b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0202 	orr.w	r2, r2, #2
 8005102:	60da      	str	r2, [r3, #12]
      break;
 8005104:	e01d      	b.n	8005142 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0204 	orr.w	r2, r2, #4
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e014      	b.n	8005142 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	60da      	str	r2, [r3, #12]
      break;
 8005128:	e00b      	b.n	8005142 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0210 	orr.w	r2, r2, #16
 8005138:	60da      	str	r2, [r3, #12]
      break;
 800513a:	e002      	b.n	8005142 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
      break;
 8005140:	bf00      	nop
  }

  if (status == HAL_OK)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d148      	bne.n	80051da <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2201      	movs	r2, #1
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fff9 	bl	8006148 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <HAL_TIM_IC_Start_IT+0x234>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d01d      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_TIM_IC_Start_IT+0x238>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIM_IC_Start_IT+0x23c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_TIM_IC_Start_IT+0x240>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_TIM_IC_Start_IT+0x244>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_TIM_IC_Start_IT+0x248>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIM_IC_Start_IT+0x24c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d111      	bne.n	80051ca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d010      	beq.n	80051da <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	e007      	b.n	80051da <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40010400 	.word	0x40010400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40001800 	.word	0x40001800

08005200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0202 	mvn.w	r2, #2
 800522c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fd7e 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fb4a 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fb51 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fd54 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb20 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb27 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0208 	mvn.w	r2, #8
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fd2a 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 faf6 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fafd 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b10      	cmp	r3, #16
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0210 	mvn.w	r2, #16
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fd00 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 facc 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fad3 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0201 	mvn.w	r2, #1
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb fa06 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff78 	bl	80062a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa98 	bl	800590c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0220 	mvn.w	r2, #32
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 ff42 	bl	800628c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_IC_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e088      	b.n	8005540 <HAL_TIM_IC_ConfigChannel+0x130>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f000 fcb8 	bl	8005dc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 020c 	bic.w	r2, r2, #12
 800545e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	619a      	str	r2, [r3, #24]
 8005472:	e060      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d11c      	bne.n	80054b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f000 fd3c 	bl	8005f06 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800549c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6999      	ldr	r1, [r3, #24]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
 80054b2:	e040      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d11b      	bne.n	80054f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f000 fd89 	bl	8005fe0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 020c 	bic.w	r2, r2, #12
 80054dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69d9      	ldr	r1, [r3, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	61da      	str	r2, [r3, #28]
 80054f0:	e021      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d11c      	bne.n	8005532 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f000 fda6 	bl	8006058 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800551a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69d9      	ldr	r1, [r3, #28]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]
 8005530:	e001      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005562:	2302      	movs	r3, #2
 8005564:	e0ae      	b.n	80056c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	f200 809f 	bhi.w	80056b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080056b5 	.word	0x080056b5
 8005584:	080056b5 	.word	0x080056b5
 8005588:	080056b5 	.word	0x080056b5
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080056b5 	.word	0x080056b5
 8005594:	080056b5 	.word	0x080056b5
 8005598:	080056b5 	.word	0x080056b5
 800559c:	08005633 	.word	0x08005633
 80055a0:	080056b5 	.word	0x080056b5
 80055a4:	080056b5 	.word	0x080056b5
 80055a8:	080056b5 	.word	0x080056b5
 80055ac:	08005673 	.word	0x08005673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa52 	bl	8005a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]
      break;
 80055ee:	e064      	b.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 faa2 	bl	8005b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
      break;
 8005630:	e043      	b.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 faf7 	bl	8005c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0208 	orr.w	r2, r2, #8
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
      break;
 8005670:	e023      	b.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fb4b 	bl	8005d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	61da      	str	r2, [r3, #28]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0b4      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x186>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d03e      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005726:	f200 8087 	bhi.w	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	f000 8086 	beq.w	800583e <HAL_TIM_ConfigClockSource+0x172>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	d87f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b70      	cmp	r3, #112	; 0x70
 800573a:	d01a      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xa6>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d87b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b60      	cmp	r3, #96	; 0x60
 8005742:	d050      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005744:	2b60      	cmp	r3, #96	; 0x60
 8005746:	d877      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b50      	cmp	r3, #80	; 0x50
 800574a:	d03c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0xfa>
 800574c:	2b50      	cmp	r3, #80	; 0x50
 800574e:	d873      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d058      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x13a>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d86f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b30      	cmp	r3, #48	; 0x30
 800575a:	d064      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d86b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b20      	cmp	r3, #32
 8005762:	d060      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d867      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d05c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800576c:	2b10      	cmp	r3, #16
 800576e:	d05a      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	e062      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f000 fcc1 	bl	8006108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	609a      	str	r2, [r3, #8]
      break;
 800579e:	e04f      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6899      	ldr	r1, [r3, #8]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f000 fcaa 	bl	8006108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c2:	609a      	str	r2, [r3, #8]
      break;
 80057c4:	e03c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 fb68 	bl	8005ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2150      	movs	r1, #80	; 0x50
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fc77 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 80057e4:	e02c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fbc4 	bl	8005f80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2160      	movs	r1, #96	; 0x60
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fc67 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005804:	e01c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fb48 	bl	8005ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2140      	movs	r1, #64	; 0x40
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fc57 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005824:	e00c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 fc4e 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005836:	e003      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e000      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800583e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d831      	bhi.n	80058d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058d5 	.word	0x080058d5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	60fb      	str	r3, [r7, #12]

      break;
 80058b4:	e00f      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	60fb      	str	r3, [r7, #12]

      break;
 80058be:	e00a      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	60fb      	str	r3, [r7, #12]

      break;
 80058c8:	e005      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	60fb      	str	r3, [r7, #12]

      break;
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058d4:	bf00      	nop
  }

  return tmpreg;
 80058d6:	68fb      	ldr	r3, [r7, #12]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a40      	ldr	r2, [pc, #256]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d00f      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3a      	ldr	r2, [pc, #232]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d027      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d023      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d017      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a28      	ldr	r2, [pc, #160]	; (8005a48 <TIM_Base_SetConfig+0x128>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <TIM_Base_SetConfig+0x12c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <TIM_Base_SetConfig+0x130>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <TIM_Base_SetConfig+0x134>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <TIM_Base_SetConfig+0x138>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <TIM_Base_SetConfig+0x13c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0xf8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d103      	bne.n	8005a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	615a      	str	r2, [r3, #20]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	40001800 	.word	0x40001800
 8005a58:	40001c00 	.word	0x40001c00
 8005a5c:	40002000 	.word	0x40002000

08005a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0302 	bic.w	r3, r3, #2
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <TIM_OC1_SetConfig+0xd8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x64>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10c      	bne.n	8005ade <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0308 	bic.w	r3, r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <TIM_OC1_SetConfig+0xd8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC1_SetConfig+0x8e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0210 	bic.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <TIM_OC2_SetConfig+0xe4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x68>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <TIM_OC2_SetConfig+0xe8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10d      	bne.n	8005bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <TIM_OC2_SetConfig+0xe4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC2_SetConfig+0x94>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <TIM_OC2_SetConfig+0xe8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d113      	bne.n	8005bfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400

08005c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <TIM_OC3_SetConfig+0xe0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <TIM_OC3_SetConfig+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10d      	bne.n	8005cae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <TIM_OC3_SetConfig+0xe0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_OC3_SetConfig+0x92>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <TIM_OC3_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d113      	bne.n	8005ce6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40010400 	.word	0x40010400

08005d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a12      	ldr	r2, [pc, #72]	; (8005db8 <TIM_OC4_SetConfig+0xa4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC4_SetConfig+0x68>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <TIM_OC4_SetConfig+0xa8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a28      	ldr	r2, [pc, #160]	; (8005e8c <TIM_TI1_SetConfig+0xcc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df4:	d017      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <TIM_TI1_SetConfig+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a24      	ldr	r2, [pc, #144]	; (8005e94 <TIM_TI1_SetConfig+0xd4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a23      	ldr	r2, [pc, #140]	; (8005e98 <TIM_TI1_SetConfig+0xd8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <TIM_TI1_SetConfig+0xdc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a21      	ldr	r2, [pc, #132]	; (8005ea0 <TIM_TI1_SetConfig+0xe0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_TI1_SetConfig+0x66>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <TIM_TI1_SetConfig+0xe4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <TIM_TI1_SetConfig+0x6a>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <TIM_TI1_SetConfig+0x6c>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e003      	b.n	8005e4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f023 030a 	bic.w	r3, r3, #10
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f003 030a 	and.w	r3, r3, #10
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40001800 	.word	0x40001800

08005ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f023 0201 	bic.w	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 030a 	bic.w	r3, r3, #10
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f023 0210 	bic.w	r2, r3, #16
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	031b      	lsls	r3, r3, #12
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f023 0210 	bic.w	r2, r3, #16
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	031b      	lsls	r3, r3, #12
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	621a      	str	r2, [r3, #32]
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800601c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	b2db      	uxtb	r3, r3
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006030:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	621a      	str	r2, [r3, #32]
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	031b      	lsls	r3, r3, #12
 800609c:	b29b      	uxth	r3, r3
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	031b      	lsls	r3, r3, #12
 80060b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f043 0307 	orr.w	r3, r3, #7
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	021a      	lsls	r2, r3, #8
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	431a      	orrs	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2201      	movs	r2, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	43db      	mvns	r3, r3
 800616a:	401a      	ands	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	431a      	orrs	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e05a      	b.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d022      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d01d      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1a      	ldr	r2, [pc, #104]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a17      	ldr	r2, [pc, #92]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10c      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40010000 	.word	0x40010000
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40000c00 	.word	0x40000c00
 8006280:	40010400 	.word	0x40010400
 8006284:	40014000 	.word	0x40014000
 8006288:	40001800 	.word	0x40001800

0800628c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e03f      	b.n	8006346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fa96 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	; 0x24
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fddf 	bl	8006ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800632c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b08a      	sub	sp, #40	; 0x28
 8006352:	af02      	add	r7, sp, #8
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b20      	cmp	r3, #32
 800636c:	d17c      	bne.n	8006468 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_UART_Transmit+0x2c>
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e075      	b.n	800646a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UART_Transmit+0x3e>
 8006388:	2302      	movs	r3, #2
 800638a:	e06e      	b.n	800646a <HAL_UART_Transmit+0x11c>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2221      	movs	r2, #33	; 0x21
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063a2:	f7fb fd95 	bl	8001ed0 <HAL_GetTick>
 80063a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	88fa      	ldrh	r2, [r7, #6]
 80063b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d108      	bne.n	80063d0 <HAL_UART_Transmit+0x82>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e003      	b.n	80063d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063e0:	e02a      	b.n	8006438 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fb1f 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e036      	b.n	800646a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	3302      	adds	r3, #2
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e007      	b.n	800642a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	781a      	ldrb	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1cf      	bne.n	80063e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2200      	movs	r2, #0
 800644a:	2140      	movs	r1, #64	; 0x40
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 faef 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e006      	b.n	800646a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e000      	b.n	800646a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	4613      	mov	r3, r2
 800647e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b20      	cmp	r3, #32
 800648a:	d11d      	bne.n	80064c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_UART_Receive_IT+0x26>
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e016      	b.n	80064ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Receive_IT+0x38>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e00f      	b.n	80064ca <HAL_UART_Receive_IT+0x58>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fb24 	bl	8006b0c <UART_Start_Receive_IT>
 80064c4:	4603      	mov	r3, r0
 80064c6:	e000      	b.n	80064ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b0ba      	sub	sp, #232	; 0xe8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10f      	bne.n	800653a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_UART_IRQHandler+0x66>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fc07 	bl	8006d46 <UART_Receive_IT>
      return;
 8006538:	e256      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80de 	beq.w	8006700 <HAL_UART_IRQHandler+0x22c>
 8006544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006554:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80d1 	beq.w	8006700 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_UART_IRQHandler+0xae>
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0201 	orr.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_UART_IRQHandler+0xd2>
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0202 	orr.w	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <HAL_UART_IRQHandler+0xf6>
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0204 	orr.w	r2, r3, #4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <HAL_UART_IRQHandler+0x126>
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 81ed 	beq.w	80069de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_UART_IRQHandler+0x14e>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb92 	bl	8006d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_UART_IRQHandler+0x17a>
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d04f      	beq.n	80066ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa9a 	bl	8006b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d141      	bne.n	80066e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800668e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1d9      	bne.n	8006662 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	4a7d      	ldr	r2, [pc, #500]	; (80068b0 <HAL_UART_IRQHandler+0x3dc>)
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fb fdb5 	bl	8002232 <HAL_DMA_Abort_IT>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066dc:	e00e      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f990 	bl	8006a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	e00a      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f98c 	bl	8006a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e006      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f988 	bl	8006a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066fa:	e170      	b.n	80069de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	bf00      	nop
    return;
 80066fe:	e16e      	b.n	80069de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 814a 	bne.w	800699e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8143 	beq.w	800699e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 813c 	beq.w	800699e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	f040 80b4 	bne.w	80068b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8140 	beq.w	80069e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676a:	429a      	cmp	r2, r3
 800676c:	f080 8139 	bcs.w	80069e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006776:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	f000 8088 	beq.w	8006896 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1d9      	bne.n	8006786 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e1      	bne.n	80067d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800681e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006866:	f023 0310 	bic.w	r3, r3, #16
 800686a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006878:	65ba      	str	r2, [r7, #88]	; 0x58
 800687a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e3      	bne.n	8006854 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	4618      	mov	r0, r3
 8006892:	f7fb fc5e 	bl	8002152 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689e:	b29b      	uxth	r3, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8b6 	bl	8006a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068ac:	e099      	b.n	80069e2 <HAL_UART_IRQHandler+0x50e>
 80068ae:	bf00      	nop
 80068b0:	08006c4f 	.word	0x08006c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 808b 	beq.w	80069e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8086 	beq.w	80069e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006900:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e3      	bne.n	80068da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3314      	adds	r3, #20
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	623b      	str	r3, [r7, #32]
   return(result);
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3314      	adds	r3, #20
 8006932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006936:	633a      	str	r2, [r7, #48]	; 0x30
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e3      	bne.n	8006912 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60fb      	str	r3, [r7, #12]
   return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0310 	bic.w	r3, r3, #16
 800696e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800697c:	61fa      	str	r2, [r7, #28]
 800697e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69b9      	ldr	r1, [r7, #24]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e3      	bne.n	8006958 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f83e 	bl	8006a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800699c:	e023      	b.n	80069e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <HAL_UART_IRQHandler+0x4ea>
 80069aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f95d 	bl	8006c76 <UART_Transmit_IT>
    return;
 80069bc:	e014      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <HAL_UART_IRQHandler+0x514>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d008      	beq.n	80069e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f99d 	bl	8006d16 <UART_EndTransmit_IT>
    return;
 80069dc:	e004      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
    return;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
      return;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
      return;
 80069e6:	bf00      	nop
  }
}
 80069e8:	37e8      	adds	r7, #232	; 0xe8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop

080069f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b090      	sub	sp, #64	; 0x40
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a40:	e050      	b.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d04c      	beq.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a50:	f7fb fa3e 	bl	8001ed0 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d241      	bcs.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a80:	637a      	str	r2, [r7, #52]	; 0x34
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab4:	623a      	str	r2, [r7, #32]
 8006ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69f9      	ldr	r1, [r7, #28]
 8006aba:	6a3a      	ldr	r2, [r7, #32]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e00f      	b.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	4013      	ands	r3, r2
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	bf0c      	ite	eq
 8006af4:	2301      	moveq	r3, #1
 8006af6:	2300      	movne	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d09f      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3740      	adds	r7, #64	; 0x40
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2222      	movs	r2, #34	; 0x22
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0220 	orr.w	r2, r2, #32
 8006b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b095      	sub	sp, #84	; 0x54
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d119      	bne.n	8006c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c20:	61ba      	str	r2, [r7, #24]
 8006c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c42:	bf00      	nop
 8006c44:	3754      	adds	r7, #84	; 0x54
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fecb 	bl	8006a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b21      	cmp	r3, #33	; 0x21
 8006c88:	d13e      	bne.n	8006d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d114      	bne.n	8006cbe <UART_Transmit_IT+0x48>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d110      	bne.n	8006cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]
 8006cbc:	e008      	b.n	8006cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6211      	str	r1, [r2, #32]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10f      	bne.n	8006d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe5a 	bl	80069f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b08c      	sub	sp, #48	; 0x30
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b22      	cmp	r3, #34	; 0x22
 8006d58:	f040 80ab 	bne.w	8006eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d117      	bne.n	8006d96 <UART_Receive_IT+0x50>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d113      	bne.n	8006d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
 8006d94:	e026      	b.n	8006de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d007      	beq.n	8006dba <UART_Receive_IT+0x74>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <UART_Receive_IT+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e008      	b.n	8006dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4619      	mov	r1, r3
 8006df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d15a      	bne.n	8006eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0220 	bic.w	r2, r2, #32
 8006e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d135      	bne.n	8006ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f023 0310 	bic.w	r3, r3, #16
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	623a      	str	r2, [r7, #32]
 8006e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	6a3a      	ldr	r2, [r7, #32]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d10a      	bne.n	8006e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fdbb 	bl	8006a18 <HAL_UARTEx_RxEventCallback>
 8006ea2:	e002      	b.n	8006eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fa fecb 	bl	8001c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e002      	b.n	8006eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b0c0      	sub	sp, #256	; 0x100
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	ea40 0301 	orr.w	r3, r0, r1
 8006ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f14:	f021 010c 	bic.w	r1, r1, #12
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f22:	430b      	orrs	r3, r1
 8006f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	ea40 0301 	orr.w	r3, r0, r1
 8006f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	; (8007188 <UART_SetConfig+0x2cc>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d005      	beq.n	8006f5c <UART_SetConfig+0xa0>
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8d      	ldr	r3, [pc, #564]	; (800718c <UART_SetConfig+0x2d0>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d104      	bne.n	8006f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd f8e2 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 8006f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f64:	e003      	b.n	8006f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fd f8c9 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8006f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f78:	f040 810c 	bne.w	8007194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f96:	415b      	adcs	r3, r3
 8006f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	eb12 0801 	adds.w	r8, r2, r1
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb43 0901 	adc.w	r9, r3, r1
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	eb18 0303 	adds.w	r3, r8, r3
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fcc:	462b      	mov	r3, r5
 8006fce:	eb49 0303 	adc.w	r3, r9, r3
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fea:	460b      	mov	r3, r1
 8006fec:	18db      	adds	r3, r3, r3
 8006fee:	653b      	str	r3, [r7, #80]	; 0x50
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	eb42 0303 	adc.w	r3, r2, r3
 8006ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007000:	f7f9 f8f4 	bl	80001ec <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b61      	ldr	r3, [pc, #388]	; (8007190 <UART_SetConfig+0x2d4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	64b9      	str	r1, [r7, #72]	; 0x48
 800702c:	415b      	adcs	r3, r3
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007034:	4641      	mov	r1, r8
 8007036:	eb12 0a01 	adds.w	sl, r2, r1
 800703a:	4649      	mov	r1, r9
 800703c:	eb43 0b01 	adc.w	fp, r3, r1
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800704c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007054:	4692      	mov	sl, r2
 8007056:	469b      	mov	fp, r3
 8007058:	4643      	mov	r3, r8
 800705a:	eb1a 0303 	adds.w	r3, sl, r3
 800705e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007062:	464b      	mov	r3, r9
 8007064:	eb4b 0303 	adc.w	r3, fp, r3
 8007068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800707c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007080:	460b      	mov	r3, r1
 8007082:	18db      	adds	r3, r3, r3
 8007084:	643b      	str	r3, [r7, #64]	; 0x40
 8007086:	4613      	mov	r3, r2
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
 800708e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007096:	f7f9 f8a9 	bl	80001ec <__aeabi_uldivmod>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <UART_SetConfig+0x2d4>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2264      	movs	r2, #100	; 0x64
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	1acb      	subs	r3, r1, r3
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070b6:	4b36      	ldr	r3, [pc, #216]	; (8007190 <UART_SetConfig+0x2d4>)
 80070b8:	fba3 2302 	umull	r2, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070c4:	441c      	add	r4, r3
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	63b9      	str	r1, [r7, #56]	; 0x38
 80070e0:	415b      	adcs	r3, r3
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6339      	str	r1, [r7, #48]	; 0x30
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711c:	464b      	mov	r3, r9
 800711e:	460a      	mov	r2, r1
 8007120:	eb42 0303 	adc.w	r3, r2, r3
 8007124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800713c:	460b      	mov	r3, r1
 800713e:	18db      	adds	r3, r3, r3
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
 8007142:	4613      	mov	r3, r2
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800714e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007152:	f7f9 f84b 	bl	80001ec <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <UART_SetConfig+0x2d4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <UART_SetConfig+0x2d4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 0207 	and.w	r2, r3, #7
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4422      	add	r2, r4
 8007182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007184:	e106      	b.n	8007394 <UART_SetConfig+0x4d8>
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	40011400 	.word	0x40011400
 8007190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800719e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	6239      	str	r1, [r7, #32]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1854      	adds	r4, r2, r1
 80071ba:	4649      	mov	r1, r9
 80071bc:	eb43 0501 	adc.w	r5, r3, r1
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	00eb      	lsls	r3, r5, #3
 80071ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ce:	00e2      	lsls	r2, r4, #3
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	18e3      	adds	r3, r4, r3
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071dc:	464b      	mov	r3, r9
 80071de:	eb45 0303 	adc.w	r3, r5, r3
 80071e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007202:	4629      	mov	r1, r5
 8007204:	008b      	lsls	r3, r1, #2
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720c:	4621      	mov	r1, r4
 800720e:	008a      	lsls	r2, r1, #2
 8007210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007214:	f7f8 ffea 	bl	80001ec <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4b60      	ldr	r3, [pc, #384]	; (80073a0 <UART_SetConfig+0x4e4>)
 800721e:	fba3 2302 	umull	r2, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	011c      	lsls	r4, r3, #4
 8007226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722a:	2200      	movs	r2, #0
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	1891      	adds	r1, r2, r2
 800723e:	61b9      	str	r1, [r7, #24]
 8007240:	415b      	adcs	r3, r3
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007248:	4641      	mov	r1, r8
 800724a:	1851      	adds	r1, r2, r1
 800724c:	6139      	str	r1, [r7, #16]
 800724e:	4649      	mov	r1, r9
 8007250:	414b      	adcs	r3, r1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007260:	4659      	mov	r1, fp
 8007262:	00cb      	lsls	r3, r1, #3
 8007264:	4651      	mov	r1, sl
 8007266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726a:	4651      	mov	r1, sl
 800726c:	00ca      	lsls	r2, r1, #3
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	4603      	mov	r3, r0
 8007274:	4642      	mov	r2, r8
 8007276:	189b      	adds	r3, r3, r2
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800727c:	464b      	mov	r3, r9
 800727e:	460a      	mov	r2, r1
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	67bb      	str	r3, [r7, #120]	; 0x78
 8007292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072a0:	4649      	mov	r1, r9
 80072a2:	008b      	lsls	r3, r1, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072aa:	4641      	mov	r1, r8
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072b2:	f7f8 ff9b 	bl	80001ec <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	4b38      	ldr	r3, [pc, #224]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072be:	fba3 2301 	umull	r2, r3, r3, r1
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2264      	movs	r2, #100	; 0x64
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	1acb      	subs	r3, r1, r3
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	3332      	adds	r3, #50	; 0x32
 80072d0:	4a33      	ldr	r2, [pc, #204]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072dc:	441c      	add	r4, r3
 80072de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e2:	2200      	movs	r2, #0
 80072e4:	673b      	str	r3, [r7, #112]	; 0x70
 80072e6:	677a      	str	r2, [r7, #116]	; 0x74
 80072e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072ec:	4642      	mov	r2, r8
 80072ee:	464b      	mov	r3, r9
 80072f0:	1891      	adds	r1, r2, r2
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	415b      	adcs	r3, r3
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fc:	4641      	mov	r1, r8
 80072fe:	1851      	adds	r1, r2, r1
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	4649      	mov	r1, r9
 8007304:	414b      	adcs	r3, r1
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007314:	4659      	mov	r1, fp
 8007316:	00cb      	lsls	r3, r1, #3
 8007318:	4651      	mov	r1, sl
 800731a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731e:	4651      	mov	r1, sl
 8007320:	00ca      	lsls	r2, r1, #3
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	4603      	mov	r3, r0
 8007328:	4642      	mov	r2, r8
 800732a:	189b      	adds	r3, r3, r2
 800732c:	66bb      	str	r3, [r7, #104]	; 0x68
 800732e:	464b      	mov	r3, r9
 8007330:	460a      	mov	r2, r1
 8007332:	eb42 0303 	adc.w	r3, r2, r3
 8007336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	663b      	str	r3, [r7, #96]	; 0x60
 8007342:	667a      	str	r2, [r7, #100]	; 0x64
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007350:	4649      	mov	r1, r9
 8007352:	008b      	lsls	r3, r1, #2
 8007354:	4641      	mov	r1, r8
 8007356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735a:	4641      	mov	r1, r8
 800735c:	008a      	lsls	r2, r1, #2
 800735e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007362:	f7f8 ff43 	bl	80001ec <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <UART_SetConfig+0x4e4>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	3332      	adds	r3, #50	; 0x32
 800737e:	4a08      	ldr	r2, [pc, #32]	; (80073a0 <UART_SetConfig+0x4e4>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4422      	add	r2, r4
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	bf00      	nop
 8007396:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a4:	b084      	sub	sp, #16
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	f107 001c 	add.w	r0, r7, #28
 80073b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d122      	bne.n	8007402 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d105      	bne.n	80073f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 faa2 	bl	8007940 <USB_CoreReset>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	e01a      	b.n	8007438 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa96 	bl	8007940 <USB_CoreReset>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	; 0x38
 800742a:	e005      	b.n	8007438 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b01      	cmp	r3, #1
 800743c:	d10b      	bne.n	8007456 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f043 0206 	orr.w	r2, r3, #6
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007462:	b004      	add	sp, #16
 8007464:	4770      	bx	lr

08007466 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f023 0201 	bic.w	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d115      	bne.n	80074d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074b6:	2001      	movs	r0, #1
 80074b8:	f7fa fd16 	bl	8001ee8 <HAL_Delay>
      ms++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa2e 	bl	8007924 <USB_GetMode>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d01e      	beq.n	800750c <USB_SetCurrentMode+0x84>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b31      	cmp	r3, #49	; 0x31
 80074d2:	d9f0      	bls.n	80074b6 <USB_SetCurrentMode+0x2e>
 80074d4:	e01a      	b.n	800750c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7fa fcfd 	bl	8001ee8 <HAL_Delay>
      ms++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa15 	bl	8007924 <USB_GetMode>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <USB_SetCurrentMode+0x84>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b31      	cmp	r3, #49	; 0x31
 8007504:	d9f0      	bls.n	80074e8 <USB_SetCurrentMode+0x60>
 8007506:	e001      	b.n	800750c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e005      	b.n	8007518 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b32      	cmp	r3, #50	; 0x32
 8007510:	d101      	bne.n	8007516 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007520:	b084      	sub	sp, #16
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800752e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	e009      	b.n	8007554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3340      	adds	r3, #64	; 0x40
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b0e      	cmp	r3, #14
 8007558:	d9f2      	bls.n	8007540 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800755a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11c      	bne.n	800759a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800756e:	f043 0302 	orr.w	r3, r3, #2
 8007572:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
 8007598:	e00b      	b.n	80075b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b8:	461a      	mov	r2, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c4:	4619      	mov	r1, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075cc:	461a      	mov	r2, r3
 80075ce:	680b      	ldr	r3, [r1, #0]
 80075d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10c      	bne.n	80075f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075de:	2100      	movs	r1, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f965 	bl	80078b0 <USB_SetDevSpeed>
 80075e6:	e008      	b.n	80075fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075e8:	2101      	movs	r1, #1
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f960 	bl	80078b0 <USB_SetDevSpeed>
 80075f0:	e003      	b.n	80075fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075f2:	2103      	movs	r1, #3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f95b 	bl	80078b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075fa:	2110      	movs	r1, #16
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8f3 	bl	80077e8 <USB_FlushTxFifo>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f91f 	bl	8007850 <USB_FlushRxFifo>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	461a      	mov	r2, r3
 8007624:	2300      	movs	r3, #0
 8007626:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762e:	461a      	mov	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	461a      	mov	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	e043      	b.n	80076ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765c:	d118      	bne.n	8007690 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	461a      	mov	r2, r3
 8007672:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e013      	b.n	80076a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	461a      	mov	r2, r3
 8007688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e008      	b.n	80076a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	461a      	mov	r2, r3
 800769e:	2300      	movs	r3, #0
 80076a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ae:	461a      	mov	r2, r3
 80076b0:	2300      	movs	r3, #0
 80076b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	461a      	mov	r2, r3
 80076c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3301      	adds	r3, #1
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d3b7      	bcc.n	8007646 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	e043      	b.n	8007764 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f2:	d118      	bne.n	8007726 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	461a      	mov	r2, r3
 8007708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e013      	b.n	8007738 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	461a      	mov	r2, r3
 800771e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	e008      	b.n	8007738 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	461a      	mov	r2, r3
 8007734:	2300      	movs	r3, #0
 8007736:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007744:	461a      	mov	r2, r3
 8007746:	2300      	movs	r3, #0
 8007748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	461a      	mov	r2, r3
 8007758:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800775c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	d3b7      	bcc.n	80076dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800777e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800778c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f043 0210 	orr.w	r2, r3, #16
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <USB_DevInit+0x2c4>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f043 0208 	orr.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d107      	bne.n	80077d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077cc:	f043 0304 	orr.w	r3, r3, #4
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e0:	b004      	add	sp, #16
 80077e2:	4770      	bx	lr
 80077e4:	803c3800 	.word	0x803c3800

080077e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a13      	ldr	r2, [pc, #76]	; (800784c <USB_FlushTxFifo+0x64>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d901      	bls.n	8007808 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e01b      	b.n	8007840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	daf2      	bge.n	80077f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	019b      	lsls	r3, r3, #6
 8007818:	f043 0220 	orr.w	r2, r3, #32
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <USB_FlushTxFifo+0x64>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e006      	b.n	8007840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b20      	cmp	r3, #32
 800783c:	d0f0      	beq.n	8007820 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	00030d40 	.word	0x00030d40

08007850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a11      	ldr	r2, [pc, #68]	; (80078ac <USB_FlushRxFifo+0x5c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d901      	bls.n	800786e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e018      	b.n	80078a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	daf2      	bge.n	800785c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2210      	movs	r2, #16
 800787e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4a08      	ldr	r2, [pc, #32]	; (80078ac <USB_FlushRxFifo+0x5c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e006      	b.n	80078a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b10      	cmp	r3, #16
 800789c:	d0f0      	beq.n	8007880 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	00030d40 	.word	0x00030d40

080078b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d0:	4313      	orrs	r3, r2
 80078d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007910:	f043 0302 	orr.w	r3, r3, #2
 8007914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 0301 	and.w	r3, r3, #1
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <USB_CoreReset+0x64>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e01b      	b.n	8007996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	daf2      	bge.n	800794c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f043 0201 	orr.w	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3301      	adds	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <USB_CoreReset+0x64>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e006      	b.n	8007996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d0f0      	beq.n	8007976 <USB_CoreReset+0x36>

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	00030d40 	.word	0x00030d40

080079a8 <std>:
 80079a8:	2300      	movs	r3, #0
 80079aa:	b510      	push	{r4, lr}
 80079ac:	4604      	mov	r4, r0
 80079ae:	e9c0 3300 	strd	r3, r3, [r0]
 80079b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079b6:	6083      	str	r3, [r0, #8]
 80079b8:	8181      	strh	r1, [r0, #12]
 80079ba:	6643      	str	r3, [r0, #100]	; 0x64
 80079bc:	81c2      	strh	r2, [r0, #14]
 80079be:	6183      	str	r3, [r0, #24]
 80079c0:	4619      	mov	r1, r3
 80079c2:	2208      	movs	r2, #8
 80079c4:	305c      	adds	r0, #92	; 0x5c
 80079c6:	f000 f9e5 	bl	8007d94 <memset>
 80079ca:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <std+0x58>)
 80079cc:	6263      	str	r3, [r4, #36]	; 0x24
 80079ce:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <std+0x5c>)
 80079d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <std+0x60>)
 80079d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <std+0x64>)
 80079d8:	6323      	str	r3, [r4, #48]	; 0x30
 80079da:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <std+0x68>)
 80079dc:	6224      	str	r4, [r4, #32]
 80079de:	429c      	cmp	r4, r3
 80079e0:	d006      	beq.n	80079f0 <std+0x48>
 80079e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80079e6:	4294      	cmp	r4, r2
 80079e8:	d002      	beq.n	80079f0 <std+0x48>
 80079ea:	33d0      	adds	r3, #208	; 0xd0
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d105      	bne.n	80079fc <std+0x54>
 80079f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f8:	f000 ba44 	b.w	8007e84 <__retarget_lock_init_recursive>
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	08007be5 	.word	0x08007be5
 8007a04:	08007c07 	.word	0x08007c07
 8007a08:	08007c3f 	.word	0x08007c3f
 8007a0c:	08007c63 	.word	0x08007c63
 8007a10:	20000b30 	.word	0x20000b30

08007a14 <stdio_exit_handler>:
 8007a14:	4a02      	ldr	r2, [pc, #8]	; (8007a20 <stdio_exit_handler+0xc>)
 8007a16:	4903      	ldr	r1, [pc, #12]	; (8007a24 <stdio_exit_handler+0x10>)
 8007a18:	4803      	ldr	r0, [pc, #12]	; (8007a28 <stdio_exit_handler+0x14>)
 8007a1a:	f000 b869 	b.w	8007af0 <_fwalk_sglue>
 8007a1e:	bf00      	nop
 8007a20:	2000003c 	.word	0x2000003c
 8007a24:	08008189 	.word	0x08008189
 8007a28:	20000048 	.word	0x20000048

08007a2c <cleanup_stdio>:
 8007a2c:	6841      	ldr	r1, [r0, #4]
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <cleanup_stdio+0x34>)
 8007a30:	4299      	cmp	r1, r3
 8007a32:	b510      	push	{r4, lr}
 8007a34:	4604      	mov	r4, r0
 8007a36:	d001      	beq.n	8007a3c <cleanup_stdio+0x10>
 8007a38:	f000 fba6 	bl	8008188 <_fflush_r>
 8007a3c:	68a1      	ldr	r1, [r4, #8]
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <cleanup_stdio+0x38>)
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d002      	beq.n	8007a4a <cleanup_stdio+0x1e>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fb9f 	bl	8008188 <_fflush_r>
 8007a4a:	68e1      	ldr	r1, [r4, #12]
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <cleanup_stdio+0x3c>)
 8007a4e:	4299      	cmp	r1, r3
 8007a50:	d004      	beq.n	8007a5c <cleanup_stdio+0x30>
 8007a52:	4620      	mov	r0, r4
 8007a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a58:	f000 bb96 	b.w	8008188 <_fflush_r>
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000b30 	.word	0x20000b30
 8007a64:	20000b98 	.word	0x20000b98
 8007a68:	20000c00 	.word	0x20000c00

08007a6c <global_stdio_init.part.0>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <global_stdio_init.part.0+0x30>)
 8007a70:	4c0b      	ldr	r4, [pc, #44]	; (8007aa0 <global_stdio_init.part.0+0x34>)
 8007a72:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <global_stdio_init.part.0+0x38>)
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	4620      	mov	r0, r4
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2104      	movs	r1, #4
 8007a7c:	f7ff ff94 	bl	80079a8 <std>
 8007a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a84:	2201      	movs	r2, #1
 8007a86:	2109      	movs	r1, #9
 8007a88:	f7ff ff8e 	bl	80079a8 <std>
 8007a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a90:	2202      	movs	r2, #2
 8007a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a96:	2112      	movs	r1, #18
 8007a98:	f7ff bf86 	b.w	80079a8 <std>
 8007a9c:	20000c68 	.word	0x20000c68
 8007aa0:	20000b30 	.word	0x20000b30
 8007aa4:	08007a15 	.word	0x08007a15

08007aa8 <__sfp_lock_acquire>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <__sfp_lock_acquire+0x8>)
 8007aaa:	f000 b9ec 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 8007aae:	bf00      	nop
 8007ab0:	20000c71 	.word	0x20000c71

08007ab4 <__sfp_lock_release>:
 8007ab4:	4801      	ldr	r0, [pc, #4]	; (8007abc <__sfp_lock_release+0x8>)
 8007ab6:	f000 b9e7 	b.w	8007e88 <__retarget_lock_release_recursive>
 8007aba:	bf00      	nop
 8007abc:	20000c71 	.word	0x20000c71

08007ac0 <__sinit>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	f7ff fff0 	bl	8007aa8 <__sfp_lock_acquire>
 8007ac8:	6a23      	ldr	r3, [r4, #32]
 8007aca:	b11b      	cbz	r3, 8007ad4 <__sinit+0x14>
 8007acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad0:	f7ff bff0 	b.w	8007ab4 <__sfp_lock_release>
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <__sinit+0x28>)
 8007ad6:	6223      	str	r3, [r4, #32]
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <__sinit+0x2c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f5      	bne.n	8007acc <__sinit+0xc>
 8007ae0:	f7ff ffc4 	bl	8007a6c <global_stdio_init.part.0>
 8007ae4:	e7f2      	b.n	8007acc <__sinit+0xc>
 8007ae6:	bf00      	nop
 8007ae8:	08007a2d 	.word	0x08007a2d
 8007aec:	20000c68 	.word	0x20000c68

08007af0 <_fwalk_sglue>:
 8007af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af4:	4607      	mov	r7, r0
 8007af6:	4688      	mov	r8, r1
 8007af8:	4614      	mov	r4, r2
 8007afa:	2600      	movs	r6, #0
 8007afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b00:	f1b9 0901 	subs.w	r9, r9, #1
 8007b04:	d505      	bpl.n	8007b12 <_fwalk_sglue+0x22>
 8007b06:	6824      	ldr	r4, [r4, #0]
 8007b08:	2c00      	cmp	r4, #0
 8007b0a:	d1f7      	bne.n	8007afc <_fwalk_sglue+0xc>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d907      	bls.n	8007b28 <_fwalk_sglue+0x38>
 8007b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	d003      	beq.n	8007b28 <_fwalk_sglue+0x38>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c0      	blx	r8
 8007b26:	4306      	orrs	r6, r0
 8007b28:	3568      	adds	r5, #104	; 0x68
 8007b2a:	e7e9      	b.n	8007b00 <_fwalk_sglue+0x10>

08007b2c <_puts_r>:
 8007b2c:	6a03      	ldr	r3, [r0, #32]
 8007b2e:	b570      	push	{r4, r5, r6, lr}
 8007b30:	6884      	ldr	r4, [r0, #8]
 8007b32:	4605      	mov	r5, r0
 8007b34:	460e      	mov	r6, r1
 8007b36:	b90b      	cbnz	r3, 8007b3c <_puts_r+0x10>
 8007b38:	f7ff ffc2 	bl	8007ac0 <__sinit>
 8007b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3e:	07db      	lsls	r3, r3, #31
 8007b40:	d405      	bmi.n	8007b4e <_puts_r+0x22>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	0598      	lsls	r0, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_puts_r+0x22>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f000 f99c 	bl	8007e86 <__retarget_lock_acquire_recursive>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	0719      	lsls	r1, r3, #28
 8007b52:	d513      	bpl.n	8007b7c <_puts_r+0x50>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b18b      	cbz	r3, 8007b7c <_puts_r+0x50>
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b60:	3b01      	subs	r3, #1
 8007b62:	60a3      	str	r3, [r4, #8]
 8007b64:	b9e9      	cbnz	r1, 8007ba2 <_puts_r+0x76>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da2e      	bge.n	8007bc8 <_puts_r+0x9c>
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	210a      	movs	r1, #10
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 f87b 	bl	8007c6a <__swbuf_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d007      	beq.n	8007b88 <_puts_r+0x5c>
 8007b78:	250a      	movs	r5, #10
 8007b7a:	e007      	b.n	8007b8c <_puts_r+0x60>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 f8b0 	bl	8007ce4 <__swsetup_r>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d0e7      	beq.n	8007b58 <_puts_r+0x2c>
 8007b88:	f04f 35ff 	mov.w	r5, #4294967295
 8007b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b8e:	07da      	lsls	r2, r3, #31
 8007b90:	d405      	bmi.n	8007b9e <_puts_r+0x72>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_puts_r+0x72>
 8007b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9a:	f000 f975 	bl	8007e88 <__retarget_lock_release_recursive>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da04      	bge.n	8007bb0 <_puts_r+0x84>
 8007ba6:	69a2      	ldr	r2, [r4, #24]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	dc06      	bgt.n	8007bba <_puts_r+0x8e>
 8007bac:	290a      	cmp	r1, #10
 8007bae:	d004      	beq.n	8007bba <_puts_r+0x8e>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	6022      	str	r2, [r4, #0]
 8007bb6:	7019      	strb	r1, [r3, #0]
 8007bb8:	e7cf      	b.n	8007b5a <_puts_r+0x2e>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f854 	bl	8007c6a <__swbuf_r>
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d1c9      	bne.n	8007b5a <_puts_r+0x2e>
 8007bc6:	e7df      	b.n	8007b88 <_puts_r+0x5c>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	250a      	movs	r5, #10
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	6022      	str	r2, [r4, #0]
 8007bd0:	701d      	strb	r5, [r3, #0]
 8007bd2:	e7db      	b.n	8007b8c <_puts_r+0x60>

08007bd4 <puts>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <puts+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f7ff bfa7 	b.w	8007b2c <_puts_r>
 8007bde:	bf00      	nop
 8007be0:	20000094 	.word	0x20000094

08007be4 <__sread>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	f000 f8fc 	bl	8007de8 <_read_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	bfab      	itete	ge
 8007bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf8:	181b      	addge	r3, r3, r0
 8007bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bfe:	bfac      	ite	ge
 8007c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c02:	81a3      	strhlt	r3, [r4, #12]
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <__swrite>:
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	898b      	ldrh	r3, [r1, #12]
 8007c0e:	05db      	lsls	r3, r3, #23
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4616      	mov	r6, r2
 8007c16:	d505      	bpl.n	8007c24 <__swrite+0x1e>
 8007c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f000 f8d0 	bl	8007dc4 <_lseek_r>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	4628      	mov	r0, r5
 8007c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	f000 b8e7 	b.w	8007e0c <_write_r>

08007c3e <__sseek>:
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c46:	f000 f8bd 	bl	8007dc4 <_lseek_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	bf15      	itete	ne
 8007c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c5a:	81a3      	strheq	r3, [r4, #12]
 8007c5c:	bf18      	it	ne
 8007c5e:	81a3      	strhne	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__sclose>:
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f000 b89d 	b.w	8007da4 <_close_r>

08007c6a <__swbuf_r>:
 8007c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6c:	460e      	mov	r6, r1
 8007c6e:	4614      	mov	r4, r2
 8007c70:	4605      	mov	r5, r0
 8007c72:	b118      	cbz	r0, 8007c7c <__swbuf_r+0x12>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <__swbuf_r+0x12>
 8007c78:	f7ff ff22 	bl	8007ac0 <__sinit>
 8007c7c:	69a3      	ldr	r3, [r4, #24]
 8007c7e:	60a3      	str	r3, [r4, #8]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	071a      	lsls	r2, r3, #28
 8007c84:	d525      	bpl.n	8007cd2 <__swbuf_r+0x68>
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	b31b      	cbz	r3, 8007cd2 <__swbuf_r+0x68>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	6922      	ldr	r2, [r4, #16]
 8007c8e:	1a98      	subs	r0, r3, r2
 8007c90:	6963      	ldr	r3, [r4, #20]
 8007c92:	b2f6      	uxtb	r6, r6
 8007c94:	4283      	cmp	r3, r0
 8007c96:	4637      	mov	r7, r6
 8007c98:	dc04      	bgt.n	8007ca4 <__swbuf_r+0x3a>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fa73 	bl	8008188 <_fflush_r>
 8007ca2:	b9e0      	cbnz	r0, 8007cde <__swbuf_r+0x74>
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	701e      	strb	r6, [r3, #0]
 8007cb2:	6962      	ldr	r2, [r4, #20]
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d004      	beq.n	8007cc4 <__swbuf_r+0x5a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	07db      	lsls	r3, r3, #31
 8007cbe:	d506      	bpl.n	8007cce <__swbuf_r+0x64>
 8007cc0:	2e0a      	cmp	r6, #10
 8007cc2:	d104      	bne.n	8007cce <__swbuf_r+0x64>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fa5e 	bl	8008188 <_fflush_r>
 8007ccc:	b938      	cbnz	r0, 8007cde <__swbuf_r+0x74>
 8007cce:	4638      	mov	r0, r7
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f805 	bl	8007ce4 <__swsetup_r>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0d5      	beq.n	8007c8a <__swbuf_r+0x20>
 8007cde:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce2:	e7f4      	b.n	8007cce <__swbuf_r+0x64>

08007ce4 <__swsetup_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <__swsetup_r+0xac>)
 8007ce8:	4605      	mov	r5, r0
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	460c      	mov	r4, r1
 8007cee:	b118      	cbz	r0, 8007cf8 <__swsetup_r+0x14>
 8007cf0:	6a03      	ldr	r3, [r0, #32]
 8007cf2:	b90b      	cbnz	r3, 8007cf8 <__swsetup_r+0x14>
 8007cf4:	f7ff fee4 	bl	8007ac0 <__sinit>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cfe:	0718      	lsls	r0, r3, #28
 8007d00:	d422      	bmi.n	8007d48 <__swsetup_r+0x64>
 8007d02:	06d9      	lsls	r1, r3, #27
 8007d04:	d407      	bmi.n	8007d16 <__swsetup_r+0x32>
 8007d06:	2309      	movs	r3, #9
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e034      	b.n	8007d80 <__swsetup_r+0x9c>
 8007d16:	0758      	lsls	r0, r3, #29
 8007d18:	d512      	bpl.n	8007d40 <__swsetup_r+0x5c>
 8007d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1c:	b141      	cbz	r1, 8007d30 <__swsetup_r+0x4c>
 8007d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d002      	beq.n	8007d2c <__swsetup_r+0x48>
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f8b0 	bl	8007e8c <_free_r>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6063      	str	r3, [r4, #4]
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	f043 0308 	orr.w	r3, r3, #8
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	b94b      	cbnz	r3, 8007d60 <__swsetup_r+0x7c>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d56:	d003      	beq.n	8007d60 <__swsetup_r+0x7c>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 fa62 	bl	8008224 <__smakebuf_r>
 8007d60:	89a0      	ldrh	r0, [r4, #12]
 8007d62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d66:	f010 0301 	ands.w	r3, r0, #1
 8007d6a:	d00a      	beq.n	8007d82 <__swsetup_r+0x9e>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60a3      	str	r3, [r4, #8]
 8007d70:	6963      	ldr	r3, [r4, #20]
 8007d72:	425b      	negs	r3, r3
 8007d74:	61a3      	str	r3, [r4, #24]
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	b943      	cbnz	r3, 8007d8c <__swsetup_r+0xa8>
 8007d7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d7e:	d1c4      	bne.n	8007d0a <__swsetup_r+0x26>
 8007d80:	bd38      	pop	{r3, r4, r5, pc}
 8007d82:	0781      	lsls	r1, r0, #30
 8007d84:	bf58      	it	pl
 8007d86:	6963      	ldrpl	r3, [r4, #20]
 8007d88:	60a3      	str	r3, [r4, #8]
 8007d8a:	e7f4      	b.n	8007d76 <__swsetup_r+0x92>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7f7      	b.n	8007d80 <__swsetup_r+0x9c>
 8007d90:	20000094 	.word	0x20000094

08007d94 <memset>:
 8007d94:	4402      	add	r2, r0
 8007d96:	4603      	mov	r3, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 fec9 	bl	8001b46 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20000c6c 	.word	0x20000c6c

08007dc4 <_lseek_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_lseek_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 fede 	bl	8001b94 <_lseek>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_lseek_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_lseek_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	20000c6c 	.word	0x20000c6c

08007de8 <_read_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_read_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fe6c 	bl	8001ad4 <_read>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_read_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_read_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20000c6c 	.word	0x20000c6c

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_write_r+0x20>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f9 fe77 	bl	8001b0e <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000c6c 	.word	0x20000c6c

08007e30 <__errno>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	; (8007e38 <__errno+0x8>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000094 	.word	0x20000094

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	; (8007e74 <__libc_init_array+0x38>)
 8007e40:	4c0d      	ldr	r4, [pc, #52]	; (8007e78 <__libc_init_array+0x3c>)
 8007e42:	1b64      	subs	r4, r4, r5
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2600      	movs	r6, #0
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	d109      	bne.n	8007e60 <__libc_init_array+0x24>
 8007e4c:	4d0b      	ldr	r5, [pc, #44]	; (8007e7c <__libc_init_array+0x40>)
 8007e4e:	4c0c      	ldr	r4, [pc, #48]	; (8007e80 <__libc_init_array+0x44>)
 8007e50:	f000 fa56 	bl	8008300 <_init>
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	2600      	movs	r6, #0
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d105      	bne.n	8007e6a <__libc_init_array+0x2e>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e64:	4798      	blx	r3
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7ee      	b.n	8007e48 <__libc_init_array+0xc>
 8007e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6e:	4798      	blx	r3
 8007e70:	3601      	adds	r6, #1
 8007e72:	e7f2      	b.n	8007e5a <__libc_init_array+0x1e>
 8007e74:	08008408 	.word	0x08008408
 8007e78:	08008408 	.word	0x08008408
 8007e7c:	08008408 	.word	0x08008408
 8007e80:	0800840c 	.word	0x0800840c

08007e84 <__retarget_lock_init_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <__retarget_lock_acquire_recursive>:
 8007e86:	4770      	bx	lr

08007e88 <__retarget_lock_release_recursive>:
 8007e88:	4770      	bx	lr
	...

08007e8c <_free_r>:
 8007e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d044      	beq.n	8007f1c <_free_r+0x90>
 8007e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e9e:	bfb8      	it	lt
 8007ea0:	18e4      	addlt	r4, r4, r3
 8007ea2:	f000 f8df 	bl	8008064 <__malloc_lock>
 8007ea6:	4a1e      	ldr	r2, [pc, #120]	; (8007f20 <_free_r+0x94>)
 8007ea8:	9801      	ldr	r0, [sp, #4]
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	b933      	cbnz	r3, 8007ebc <_free_r+0x30>
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	6014      	str	r4, [r2, #0]
 8007eb2:	b003      	add	sp, #12
 8007eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eb8:	f000 b8da 	b.w	8008070 <__malloc_unlock>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d908      	bls.n	8007ed2 <_free_r+0x46>
 8007ec0:	6825      	ldr	r5, [r4, #0]
 8007ec2:	1961      	adds	r1, r4, r5
 8007ec4:	428b      	cmp	r3, r1
 8007ec6:	bf01      	itttt	eq
 8007ec8:	6819      	ldreq	r1, [r3, #0]
 8007eca:	685b      	ldreq	r3, [r3, #4]
 8007ecc:	1949      	addeq	r1, r1, r5
 8007ece:	6021      	streq	r1, [r4, #0]
 8007ed0:	e7ed      	b.n	8007eae <_free_r+0x22>
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	b10b      	cbz	r3, 8007edc <_free_r+0x50>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d9fa      	bls.n	8007ed2 <_free_r+0x46>
 8007edc:	6811      	ldr	r1, [r2, #0]
 8007ede:	1855      	adds	r5, r2, r1
 8007ee0:	42a5      	cmp	r5, r4
 8007ee2:	d10b      	bne.n	8007efc <_free_r+0x70>
 8007ee4:	6824      	ldr	r4, [r4, #0]
 8007ee6:	4421      	add	r1, r4
 8007ee8:	1854      	adds	r4, r2, r1
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	d1e0      	bne.n	8007eb2 <_free_r+0x26>
 8007ef0:	681c      	ldr	r4, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	6053      	str	r3, [r2, #4]
 8007ef6:	440c      	add	r4, r1
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	e7da      	b.n	8007eb2 <_free_r+0x26>
 8007efc:	d902      	bls.n	8007f04 <_free_r+0x78>
 8007efe:	230c      	movs	r3, #12
 8007f00:	6003      	str	r3, [r0, #0]
 8007f02:	e7d6      	b.n	8007eb2 <_free_r+0x26>
 8007f04:	6825      	ldr	r5, [r4, #0]
 8007f06:	1961      	adds	r1, r4, r5
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf04      	itt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	6063      	str	r3, [r4, #4]
 8007f12:	bf04      	itt	eq
 8007f14:	1949      	addeq	r1, r1, r5
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	6054      	str	r4, [r2, #4]
 8007f1a:	e7ca      	b.n	8007eb2 <_free_r+0x26>
 8007f1c:	b003      	add	sp, #12
 8007f1e:	bd30      	pop	{r4, r5, pc}
 8007f20:	20000c74 	.word	0x20000c74

08007f24 <sbrk_aligned>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4e0e      	ldr	r6, [pc, #56]	; (8007f60 <sbrk_aligned+0x3c>)
 8007f28:	460c      	mov	r4, r1
 8007f2a:	6831      	ldr	r1, [r6, #0]
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	b911      	cbnz	r1, 8007f36 <sbrk_aligned+0x12>
 8007f30:	f000 f9d6 	bl	80082e0 <_sbrk_r>
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 f9d1 	bl	80082e0 <_sbrk_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d00a      	beq.n	8007f58 <sbrk_aligned+0x34>
 8007f42:	1cc4      	adds	r4, r0, #3
 8007f44:	f024 0403 	bic.w	r4, r4, #3
 8007f48:	42a0      	cmp	r0, r4
 8007f4a:	d007      	beq.n	8007f5c <sbrk_aligned+0x38>
 8007f4c:	1a21      	subs	r1, r4, r0
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f9c6 	bl	80082e0 <_sbrk_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d101      	bne.n	8007f5c <sbrk_aligned+0x38>
 8007f58:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	20000c78 	.word	0x20000c78

08007f64 <_malloc_r>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	1ccd      	adds	r5, r1, #3
 8007f6a:	f025 0503 	bic.w	r5, r5, #3
 8007f6e:	3508      	adds	r5, #8
 8007f70:	2d0c      	cmp	r5, #12
 8007f72:	bf38      	it	cc
 8007f74:	250c      	movcc	r5, #12
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	4607      	mov	r7, r0
 8007f7a:	db01      	blt.n	8007f80 <_malloc_r+0x1c>
 8007f7c:	42a9      	cmp	r1, r5
 8007f7e:	d905      	bls.n	8007f8c <_malloc_r+0x28>
 8007f80:	230c      	movs	r3, #12
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	2600      	movs	r6, #0
 8007f86:	4630      	mov	r0, r6
 8007f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008060 <_malloc_r+0xfc>
 8007f90:	f000 f868 	bl	8008064 <__malloc_lock>
 8007f94:	f8d8 3000 	ldr.w	r3, [r8]
 8007f98:	461c      	mov	r4, r3
 8007f9a:	bb5c      	cbnz	r4, 8007ff4 <_malloc_r+0x90>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7ff ffc0 	bl	8007f24 <sbrk_aligned>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	d155      	bne.n	8008056 <_malloc_r+0xf2>
 8007faa:	f8d8 4000 	ldr.w	r4, [r8]
 8007fae:	4626      	mov	r6, r4
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	d145      	bne.n	8008040 <_malloc_r+0xdc>
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	d048      	beq.n	800804a <_malloc_r+0xe6>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	eb04 0903 	add.w	r9, r4, r3
 8007fc2:	f000 f98d 	bl	80082e0 <_sbrk_r>
 8007fc6:	4581      	cmp	r9, r0
 8007fc8:	d13f      	bne.n	800804a <_malloc_r+0xe6>
 8007fca:	6821      	ldr	r1, [r4, #0]
 8007fcc:	1a6d      	subs	r5, r5, r1
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7ff ffa7 	bl	8007f24 <sbrk_aligned>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d037      	beq.n	800804a <_malloc_r+0xe6>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	442b      	add	r3, r5
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d038      	beq.n	800805a <_malloc_r+0xf6>
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	42a2      	cmp	r2, r4
 8007fec:	d12b      	bne.n	8008046 <_malloc_r+0xe2>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	e00f      	b.n	8008014 <_malloc_r+0xb0>
 8007ff4:	6822      	ldr	r2, [r4, #0]
 8007ff6:	1b52      	subs	r2, r2, r5
 8007ff8:	d41f      	bmi.n	800803a <_malloc_r+0xd6>
 8007ffa:	2a0b      	cmp	r2, #11
 8007ffc:	d917      	bls.n	800802e <_malloc_r+0xca>
 8007ffe:	1961      	adds	r1, r4, r5
 8008000:	42a3      	cmp	r3, r4
 8008002:	6025      	str	r5, [r4, #0]
 8008004:	bf18      	it	ne
 8008006:	6059      	strne	r1, [r3, #4]
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	bf08      	it	eq
 800800c:	f8c8 1000 	streq.w	r1, [r8]
 8008010:	5162      	str	r2, [r4, r5]
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	4638      	mov	r0, r7
 8008016:	f104 060b 	add.w	r6, r4, #11
 800801a:	f000 f829 	bl	8008070 <__malloc_unlock>
 800801e:	f026 0607 	bic.w	r6, r6, #7
 8008022:	1d23      	adds	r3, r4, #4
 8008024:	1af2      	subs	r2, r6, r3
 8008026:	d0ae      	beq.n	8007f86 <_malloc_r+0x22>
 8008028:	1b9b      	subs	r3, r3, r6
 800802a:	50a3      	str	r3, [r4, r2]
 800802c:	e7ab      	b.n	8007f86 <_malloc_r+0x22>
 800802e:	42a3      	cmp	r3, r4
 8008030:	6862      	ldr	r2, [r4, #4]
 8008032:	d1dd      	bne.n	8007ff0 <_malloc_r+0x8c>
 8008034:	f8c8 2000 	str.w	r2, [r8]
 8008038:	e7ec      	b.n	8008014 <_malloc_r+0xb0>
 800803a:	4623      	mov	r3, r4
 800803c:	6864      	ldr	r4, [r4, #4]
 800803e:	e7ac      	b.n	8007f9a <_malloc_r+0x36>
 8008040:	4634      	mov	r4, r6
 8008042:	6876      	ldr	r6, [r6, #4]
 8008044:	e7b4      	b.n	8007fb0 <_malloc_r+0x4c>
 8008046:	4613      	mov	r3, r2
 8008048:	e7cc      	b.n	8007fe4 <_malloc_r+0x80>
 800804a:	230c      	movs	r3, #12
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	4638      	mov	r0, r7
 8008050:	f000 f80e 	bl	8008070 <__malloc_unlock>
 8008054:	e797      	b.n	8007f86 <_malloc_r+0x22>
 8008056:	6025      	str	r5, [r4, #0]
 8008058:	e7dc      	b.n	8008014 <_malloc_r+0xb0>
 800805a:	605b      	str	r3, [r3, #4]
 800805c:	deff      	udf	#255	; 0xff
 800805e:	bf00      	nop
 8008060:	20000c74 	.word	0x20000c74

08008064 <__malloc_lock>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__malloc_lock+0x8>)
 8008066:	f7ff bf0e 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 800806a:	bf00      	nop
 800806c:	20000c70 	.word	0x20000c70

08008070 <__malloc_unlock>:
 8008070:	4801      	ldr	r0, [pc, #4]	; (8008078 <__malloc_unlock+0x8>)
 8008072:	f7ff bf09 	b.w	8007e88 <__retarget_lock_release_recursive>
 8008076:	bf00      	nop
 8008078:	20000c70 	.word	0x20000c70

0800807c <__sflush_r>:
 800807c:	898a      	ldrh	r2, [r1, #12]
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	4605      	mov	r5, r0
 8008084:	0710      	lsls	r0, r2, #28
 8008086:	460c      	mov	r4, r1
 8008088:	d458      	bmi.n	800813c <__sflush_r+0xc0>
 800808a:	684b      	ldr	r3, [r1, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc05      	bgt.n	800809c <__sflush_r+0x20>
 8008090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	dc02      	bgt.n	800809c <__sflush_r+0x20>
 8008096:	2000      	movs	r0, #0
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800809e:	2e00      	cmp	r6, #0
 80080a0:	d0f9      	beq.n	8008096 <__sflush_r+0x1a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080a8:	682f      	ldr	r7, [r5, #0]
 80080aa:	6a21      	ldr	r1, [r4, #32]
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	d032      	beq.n	8008116 <__sflush_r+0x9a>
 80080b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	075a      	lsls	r2, r3, #29
 80080b6:	d505      	bpl.n	80080c4 <__sflush_r+0x48>
 80080b8:	6863      	ldr	r3, [r4, #4]
 80080ba:	1ac0      	subs	r0, r0, r3
 80080bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080be:	b10b      	cbz	r3, 80080c4 <__sflush_r+0x48>
 80080c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080c2:	1ac0      	subs	r0, r0, r3
 80080c4:	2300      	movs	r3, #0
 80080c6:	4602      	mov	r2, r0
 80080c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ca:	6a21      	ldr	r1, [r4, #32]
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b0      	blx	r6
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	d106      	bne.n	80080e4 <__sflush_r+0x68>
 80080d6:	6829      	ldr	r1, [r5, #0]
 80080d8:	291d      	cmp	r1, #29
 80080da:	d82b      	bhi.n	8008134 <__sflush_r+0xb8>
 80080dc:	4a29      	ldr	r2, [pc, #164]	; (8008184 <__sflush_r+0x108>)
 80080de:	410a      	asrs	r2, r1
 80080e0:	07d6      	lsls	r6, r2, #31
 80080e2:	d427      	bmi.n	8008134 <__sflush_r+0xb8>
 80080e4:	2200      	movs	r2, #0
 80080e6:	6062      	str	r2, [r4, #4]
 80080e8:	04d9      	lsls	r1, r3, #19
 80080ea:	6922      	ldr	r2, [r4, #16]
 80080ec:	6022      	str	r2, [r4, #0]
 80080ee:	d504      	bpl.n	80080fa <__sflush_r+0x7e>
 80080f0:	1c42      	adds	r2, r0, #1
 80080f2:	d101      	bne.n	80080f8 <__sflush_r+0x7c>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b903      	cbnz	r3, 80080fa <__sflush_r+0x7e>
 80080f8:	6560      	str	r0, [r4, #84]	; 0x54
 80080fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fc:	602f      	str	r7, [r5, #0]
 80080fe:	2900      	cmp	r1, #0
 8008100:	d0c9      	beq.n	8008096 <__sflush_r+0x1a>
 8008102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008106:	4299      	cmp	r1, r3
 8008108:	d002      	beq.n	8008110 <__sflush_r+0x94>
 800810a:	4628      	mov	r0, r5
 800810c:	f7ff febe 	bl	8007e8c <_free_r>
 8008110:	2000      	movs	r0, #0
 8008112:	6360      	str	r0, [r4, #52]	; 0x34
 8008114:	e7c0      	b.n	8008098 <__sflush_r+0x1c>
 8008116:	2301      	movs	r3, #1
 8008118:	4628      	mov	r0, r5
 800811a:	47b0      	blx	r6
 800811c:	1c41      	adds	r1, r0, #1
 800811e:	d1c8      	bne.n	80080b2 <__sflush_r+0x36>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0c5      	beq.n	80080b2 <__sflush_r+0x36>
 8008126:	2b1d      	cmp	r3, #29
 8008128:	d001      	beq.n	800812e <__sflush_r+0xb2>
 800812a:	2b16      	cmp	r3, #22
 800812c:	d101      	bne.n	8008132 <__sflush_r+0xb6>
 800812e:	602f      	str	r7, [r5, #0]
 8008130:	e7b1      	b.n	8008096 <__sflush_r+0x1a>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7ad      	b.n	8008098 <__sflush_r+0x1c>
 800813c:	690f      	ldr	r7, [r1, #16]
 800813e:	2f00      	cmp	r7, #0
 8008140:	d0a9      	beq.n	8008096 <__sflush_r+0x1a>
 8008142:	0793      	lsls	r3, r2, #30
 8008144:	680e      	ldr	r6, [r1, #0]
 8008146:	bf08      	it	eq
 8008148:	694b      	ldreq	r3, [r1, #20]
 800814a:	600f      	str	r7, [r1, #0]
 800814c:	bf18      	it	ne
 800814e:	2300      	movne	r3, #0
 8008150:	eba6 0807 	sub.w	r8, r6, r7
 8008154:	608b      	str	r3, [r1, #8]
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	dd9c      	ble.n	8008096 <__sflush_r+0x1a>
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008160:	4643      	mov	r3, r8
 8008162:	463a      	mov	r2, r7
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	2800      	cmp	r0, #0
 800816a:	dc06      	bgt.n	800817a <__sflush_r+0xfe>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e78e      	b.n	8008098 <__sflush_r+0x1c>
 800817a:	4407      	add	r7, r0
 800817c:	eba8 0800 	sub.w	r8, r8, r0
 8008180:	e7e9      	b.n	8008156 <__sflush_r+0xda>
 8008182:	bf00      	nop
 8008184:	dfbffffe 	.word	0xdfbffffe

08008188 <_fflush_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b913      	cbnz	r3, 8008198 <_fflush_r+0x10>
 8008192:	2500      	movs	r5, #0
 8008194:	4628      	mov	r0, r5
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	b118      	cbz	r0, 80081a2 <_fflush_r+0x1a>
 800819a:	6a03      	ldr	r3, [r0, #32]
 800819c:	b90b      	cbnz	r3, 80081a2 <_fflush_r+0x1a>
 800819e:	f7ff fc8f 	bl	8007ac0 <__sinit>
 80081a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f3      	beq.n	8008192 <_fflush_r+0xa>
 80081aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081ac:	07d0      	lsls	r0, r2, #31
 80081ae:	d404      	bmi.n	80081ba <_fflush_r+0x32>
 80081b0:	0599      	lsls	r1, r3, #22
 80081b2:	d402      	bmi.n	80081ba <_fflush_r+0x32>
 80081b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b6:	f7ff fe66 	bl	8007e86 <__retarget_lock_acquire_recursive>
 80081ba:	4628      	mov	r0, r5
 80081bc:	4621      	mov	r1, r4
 80081be:	f7ff ff5d 	bl	800807c <__sflush_r>
 80081c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c4:	07da      	lsls	r2, r3, #31
 80081c6:	4605      	mov	r5, r0
 80081c8:	d4e4      	bmi.n	8008194 <_fflush_r+0xc>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	059b      	lsls	r3, r3, #22
 80081ce:	d4e1      	bmi.n	8008194 <_fflush_r+0xc>
 80081d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081d2:	f7ff fe59 	bl	8007e88 <__retarget_lock_release_recursive>
 80081d6:	e7dd      	b.n	8008194 <_fflush_r+0xc>

080081d8 <__swhatbuf_r>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	460c      	mov	r4, r1
 80081dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e0:	2900      	cmp	r1, #0
 80081e2:	b096      	sub	sp, #88	; 0x58
 80081e4:	4615      	mov	r5, r2
 80081e6:	461e      	mov	r6, r3
 80081e8:	da0d      	bge.n	8008206 <__swhatbuf_r+0x2e>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081f0:	f04f 0100 	mov.w	r1, #0
 80081f4:	bf0c      	ite	eq
 80081f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081fa:	2340      	movne	r3, #64	; 0x40
 80081fc:	2000      	movs	r0, #0
 80081fe:	6031      	str	r1, [r6, #0]
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	b016      	add	sp, #88	; 0x58
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	466a      	mov	r2, sp
 8008208:	f000 f848 	bl	800829c <_fstat_r>
 800820c:	2800      	cmp	r0, #0
 800820e:	dbec      	blt.n	80081ea <__swhatbuf_r+0x12>
 8008210:	9901      	ldr	r1, [sp, #4]
 8008212:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008216:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800821a:	4259      	negs	r1, r3
 800821c:	4159      	adcs	r1, r3
 800821e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008222:	e7eb      	b.n	80081fc <__swhatbuf_r+0x24>

08008224 <__smakebuf_r>:
 8008224:	898b      	ldrh	r3, [r1, #12]
 8008226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008228:	079d      	lsls	r5, r3, #30
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	d507      	bpl.n	8008240 <__smakebuf_r+0x1c>
 8008230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	2301      	movs	r3, #1
 800823a:	6163      	str	r3, [r4, #20]
 800823c:	b002      	add	sp, #8
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	ab01      	add	r3, sp, #4
 8008242:	466a      	mov	r2, sp
 8008244:	f7ff ffc8 	bl	80081d8 <__swhatbuf_r>
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	4605      	mov	r5, r0
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fe89 	bl	8007f64 <_malloc_r>
 8008252:	b948      	cbnz	r0, 8008268 <__smakebuf_r+0x44>
 8008254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008258:	059a      	lsls	r2, r3, #22
 800825a:	d4ef      	bmi.n	800823c <__smakebuf_r+0x18>
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	e7e3      	b.n	8008230 <__smakebuf_r+0xc>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	6020      	str	r0, [r4, #0]
 800826c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008270:	81a3      	strh	r3, [r4, #12]
 8008272:	9b00      	ldr	r3, [sp, #0]
 8008274:	6163      	str	r3, [r4, #20]
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	6120      	str	r0, [r4, #16]
 800827a:	b15b      	cbz	r3, 8008294 <__smakebuf_r+0x70>
 800827c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f81d 	bl	80082c0 <_isatty_r>
 8008286:	b128      	cbz	r0, 8008294 <__smakebuf_r+0x70>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f023 0303 	bic.w	r3, r3, #3
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	431d      	orrs	r5, r3
 8008298:	81a5      	strh	r5, [r4, #12]
 800829a:	e7cf      	b.n	800823c <__smakebuf_r+0x18>

0800829c <_fstat_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d07      	ldr	r5, [pc, #28]	; (80082bc <_fstat_r+0x20>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	f7f9 fc58 	bl	8001b5e <_fstat>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	d102      	bne.n	80082b8 <_fstat_r+0x1c>
 80082b2:	682b      	ldr	r3, [r5, #0]
 80082b4:	b103      	cbz	r3, 80082b8 <_fstat_r+0x1c>
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	20000c6c 	.word	0x20000c6c

080082c0 <_isatty_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_isatty_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7f9 fc57 	bl	8001b7e <_isatty>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_isatty_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_isatty_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20000c6c 	.word	0x20000c6c

080082e0 <_sbrk_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_sbrk_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7f9 fc60 	bl	8001bb0 <_sbrk>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_sbrk_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_sbrk_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20000c6c 	.word	0x20000c6c

08008300 <_init>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr

0800830c <_fini>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr
