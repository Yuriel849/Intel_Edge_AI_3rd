
06.PWM_DCMOTOR_SERVOMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009238  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009550  08009550  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009558  08009558  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000b88  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf8  20000bf8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a0a0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003899  00000000  00000000  0003a183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  0003da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011ea  00000000  00000000  0003f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000279ff  00000000  00000000  000402fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca95  00000000  00000000  00067cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e77a8  00000000  00000000  0008478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b74  00000000  00000000  0016bf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00172aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080093d0 	.word	0x080093d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080093d0 	.word	0x080093d0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <DHT11_processing>:
	
}

int dht11time=150;
void DHT11_processing(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if(dht11_on)
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <DHT11_processing+0x94>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03d      	beq.n	8000e02 <DHT11_processing+0x8a>
	{
		if (TIM10_10ms_counter >= dht11time)  //1500ms
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <DHT11_processing+0x98>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <DHT11_processing+0x9c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db37      	blt.n	8000e02 <DHT11_processing+0x8a>
		{
			TIM10_10ms_counter=0;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <DHT11_processing+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			DHT11_trriger();
 8000d98:	f000 f856 	bl	8000e48 <DHT11_trriger>
			DHT11_DataLine_Input();
 8000d9c:	f000 f86a 	bl	8000e74 <DHT11_DataLine_Input>
			DHT11_dumi_read();
 8000da0:	f000 f8d8 	bl	8000f54 <DHT11_dumi_read>

			i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a0 	bl	8000ee8 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
			d_RH = DHT11_rx_Data();
 8000dac:	f000 f89c 	bl	8000ee8 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
			i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f898 	bl	8000ee8 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
			d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f894 	bl	8000ee8 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

			DHT11_DataLine_Output();
 8000dc4:	f000 f872 	bl	8000eac <DHT11_DataLine_Output>
			HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <DHT11_processing+0xa0>)
 8000dce:	f002 fe99 	bl	8003b04 <HAL_GPIO_WritePin>
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4811      	ldr	r0, [pc, #68]	; (8000e1c <DHT11_processing+0xa4>)
 8000dd8:	f007 fa40 	bl	800825c <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <DHT11_processing+0xa8>)
 8000de2:	f007 fa3b 	bl	800825c <iprintf>

			sprintf(lcd_buff, "[Tmp]%d [Wet]%d", (int)i_Tmp, (int)i_RH);
 8000de6:	7d7a      	ldrb	r2, [r7, #21]
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4638      	mov	r0, r7
 8000dec:	490d      	ldr	r1, [pc, #52]	; (8000e24 <DHT11_processing+0xac>)
 8000dee:	f007 faa3 	bl	8008338 <siprintf>
			move_cursor(0,0);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fa54 	bl	80012a2 <move_cursor>
			lcd_string(lcd_buff);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fa3b 	bl	8001278 <lcd_string>
		}
	}
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000a24 	.word	0x20000a24
 8000e10:	20000a1c 	.word	0x20000a1c
 8000e14:	20000000 	.word	0x20000000
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	080093f8 	.word	0x080093f8
 8000e20:	08009404 	.word	0x08009404
 8000e24:	08009410 	.word	0x08009410

08000e28 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <DHT11_Init+0x1c>)
 8000e32:	f002 fe67 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e3a:	f001 ffaf 	bl	8002d9c <HAL_Delay>
	return;
 8000e3e:	bf00      	nop
}
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020000 	.word	0x40020000

08000e48 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <DHT11_trriger+0x28>)
 8000e52:	f002 fe57 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e56:	2014      	movs	r0, #20
 8000e58:	f001 ffa0 	bl	8002d9c <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <DHT11_trriger+0x28>)
 8000e62:	f002 fe4f 	bl	8003b04 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f000 fb8c 	bl	8001584 <delay_us>
	return;
 8000e6c:	bf00      	nop
}
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000

08000e74 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <DHT11_DataLine_Input+0x34>)
 8000e9a:	f002 fc6f 	bl	800377c <HAL_GPIO_Init>
	
	return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020000 	.word	0x40020000

08000eac <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <DHT11_DataLine_Output+0x38>)
 8000ed6:	f002 fc51 	bl	800377c <HAL_GPIO_Init>
	
	return;
 8000eda:	bf00      	nop
}
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	e023      	b.n	8000f40 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000ef8:	bf00      	nop
 8000efa:	2101      	movs	r1, #1
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000efe:	f002 fde9 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f8      	beq.n	8000efa <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000f08:	2028      	movs	r0, #40	; 0x28
 8000f0a:	f000 fb3b 	bl	8001584 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f14:	2101      	movs	r1, #1
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000f18:	f002 fddc 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f2a:	bf00      	nop
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000f30:	f002 fdd0 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d0f8      	beq.n	8000f2c <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddd8      	ble.n	8000ef8 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000

08000f54 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f58:	bf00      	nop
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f5e:	f002 fdb9 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0f8      	beq.n	8000f5a <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f68:	bf00      	nop
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f6e:	f002 fdb1 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f8      	beq.n	8000f6a <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f78:	bf00      	nop
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f7e:	f002 fda9 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d0f8      	beq.n	8000f7a <DHT11_dumi_read+0x26>
	return;
 8000f88:	bf00      	nop
}
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020000 	.word	0x40020000

08000f90 <get_button>:
{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};

// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f002 fd95 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10d      	bne.n	8000fd0 <get_button+0x40>
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <get_button+0x6c>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 8000fbe:	2050      	movs	r0, #80	; 0x50
 8000fc0:	f001 feec 	bl	8002d9c <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <get_button+0x6c>)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e011      	b.n	8000ff4 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10d      	bne.n	8000ff2 <get_button+0x62>
 8000fd6:	787b      	ldrb	r3, [r7, #1]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <get_button+0x6c>)
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d108      	bne.n	8000ff2 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 8000fe0:	201e      	movs	r0, #30
 8000fe2:	f001 fedb 	bl	8002d9c <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <get_button+0x6c>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000004 	.word	0x20000004

08001000 <dcmotor_pwm_control>:
uint8_t pwm_start_flag = 0; // dcmotor start/stop indicator flag
uint16_t CCR_UP_Value = 0; // CCR = Channel Control Register, PWM UP Control
uint16_t CCR_DOWN_Value = 0; // CCR = Channel Control Register, PWM DOWN Control
uint8_t forward_backward_dcmotor = 0; // dc dual motor spinning forward/backward indicator flag
void dcmotor_pwm_control(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
#if 1 // Plug fan into a DC dual motor, which is then plugged into breadboard
	// SWITCH ON AND OFF WHEN BUTTON 3 IS PRESSED!!!
	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001004:	2203      	movs	r2, #3
 8001006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100a:	4860      	ldr	r0, [pc, #384]	; (800118c <dcmotor_pwm_control+0x18c>)
 800100c:	f7ff ffc0 	bl	8000f90 <get_button>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d129      	bne.n	800106a <dcmotor_pwm_control+0x6a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 8001016:	2101      	movs	r1, #1
 8001018:	485d      	ldr	r0, [pc, #372]	; (8001190 <dcmotor_pwm_control+0x190>)
 800101a:	f002 fd8c 	bl	8003b36 <HAL_GPIO_TogglePin>
		if(!pwm_start_flag)
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <dcmotor_pwm_control+0x194>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d112      	bne.n	800104c <dcmotor_pwm_control+0x4c>
		{
			pwm_start_flag = 1;
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <dcmotor_pwm_control+0x194>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
			forward_backward_dcmotor = 1; // spin forward
 800102c:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <dcmotor_pwm_control+0x198>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(IN1_MOTOR1_GPIO_Port, IN1_MOTOR1_Pin, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4854      	ldr	r0, [pc, #336]	; (800118c <dcmotor_pwm_control+0x18c>)
 800103a:	f002 fd63 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_MOTOR1_GPIO_Port, IN2_MOTOR1_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001044:	4851      	ldr	r0, [pc, #324]	; (800118c <dcmotor_pwm_control+0x18c>)
 8001046:	f002 fd5d 	bl	8003b04 <HAL_GPIO_WritePin>
 800104a:	e00e      	b.n	800106a <dcmotor_pwm_control+0x6a>
		}
		else
		{
			pwm_start_flag = 0;
 800104c:	4b51      	ldr	r3, [pc, #324]	; (8001194 <dcmotor_pwm_control+0x194>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(IN1_MOTOR1_GPIO_Port, IN1_MOTOR1_Pin, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	484c      	ldr	r0, [pc, #304]	; (800118c <dcmotor_pwm_control+0x18c>)
 800105a:	f002 fd53 	bl	8003b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_MOTOR1_GPIO_Port, IN2_MOTOR1_Pin, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001064:	4849      	ldr	r0, [pc, #292]	; (800118c <dcmotor_pwm_control+0x18c>)
 8001066:	f002 fd4d 	bl	8003b04 <HAL_GPIO_WritePin>
		}
	}
	// REVERSE SPIN DIRECTION WHEN BUTTON 2 IS PRESSED!!!
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800106a:	2202      	movs	r2, #2
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	4846      	ldr	r0, [pc, #280]	; (800118c <dcmotor_pwm_control+0x18c>)
 8001072:	f7ff ff8d 	bl	8000f90 <get_button>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12a      	bne.n	80010d2 <dcmotor_pwm_control+0xd2>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED2
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	4844      	ldr	r0, [pc, #272]	; (8001190 <dcmotor_pwm_control+0x190>)
 8001080:	f002 fd59 	bl	8003b36 <HAL_GPIO_TogglePin>
		if(pwm_start_flag)
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <dcmotor_pwm_control+0x194>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d022      	beq.n	80010d2 <dcmotor_pwm_control+0xd2>
		{
			if(forward_backward_dcmotor)
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <dcmotor_pwm_control+0x198>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00f      	beq.n	80010b4 <dcmotor_pwm_control+0xb4>
			{
				forward_backward_dcmotor = 0; // spin forward
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <dcmotor_pwm_control+0x198>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(IN1_MOTOR1_GPIO_Port, IN1_MOTOR1_Pin, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	483a      	ldr	r0, [pc, #232]	; (800118c <dcmotor_pwm_control+0x18c>)
 80010a2:	f002 fd2f 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_MOTOR1_GPIO_Port, IN2_MOTOR1_Pin, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ac:	4837      	ldr	r0, [pc, #220]	; (800118c <dcmotor_pwm_control+0x18c>)
 80010ae:	f002 fd29 	bl	8003b04 <HAL_GPIO_WritePin>
 80010b2:	e00e      	b.n	80010d2 <dcmotor_pwm_control+0xd2>
			}
			else
			{
				forward_backward_dcmotor = 1;
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <dcmotor_pwm_control+0x198>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN1_MOTOR1_GPIO_Port, IN1_MOTOR1_Pin, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4832      	ldr	r0, [pc, #200]	; (800118c <dcmotor_pwm_control+0x18c>)
 80010c2:	f002 fd1f 	bl	8003b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_MOTOR1_GPIO_Port, IN2_MOTOR1_Pin, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	482f      	ldr	r0, [pc, #188]	; (800118c <dcmotor_pwm_control+0x18c>)
 80010ce:	f002 fd19 	bl	8003b04 <HAL_GPIO_WritePin>
			}
		}
	}
	// INCREASE PWM DUTY CYCLE WHEN BUTTON 1 IS PRESSED!!! (MAX. 100% ~ MIN. 50%)
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d8:	482c      	ldr	r0, [pc, #176]	; (800118c <dcmotor_pwm_control+0x18c>)
 80010da:	f7ff ff59 	bl	8000f90 <get_button>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d123      	bne.n	800112c <dcmotor_pwm_control+0x12c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 80010e4:	2101      	movs	r1, #1
 80010e6:	482a      	ldr	r0, [pc, #168]	; (8001190 <dcmotor_pwm_control+0x190>)
 80010e8:	f002 fd25 	bl	8003b36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED2
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	4828      	ldr	r0, [pc, #160]	; (8001190 <dcmotor_pwm_control+0x190>)
 80010f0:	f002 fd21 	bl	8003b36 <HAL_GPIO_TogglePin>
		if(pwm_start_flag) // if running, flag=1
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <dcmotor_pwm_control+0x194>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d017      	beq.n	800112c <dcmotor_pwm_control+0x12c>
		{
			CCR_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <dcmotor_pwm_control+0x19c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 8001106:	801a      	strh	r2, [r3, #0]
			CCR_UP_Value += 10;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	330a      	adds	r3, #10
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 8001112:	801a      	strh	r2, [r3, #0]
			if(CCR_UP_Value > 100)
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d902      	bls.n	8001122 <dcmotor_pwm_control+0x122>
			{
				CCR_UP_Value = 100;
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 800111e:	2264      	movs	r2, #100	; 0x64
 8001120:	801a      	strh	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_UP_Value);
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <dcmotor_pwm_control+0x1a0>)
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <dcmotor_pwm_control+0x19c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	// DECREASE PWM DUTY CYCLE WHEN BUTTON 0 IS PRESSED!!! (MAX. 100% ~ MIN. 50%)
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <dcmotor_pwm_control+0x18c>)
 8001134:	f7ff ff2c 	bl	8000f90 <get_button>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d124      	bne.n	8001188 <dcmotor_pwm_control+0x188>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 800113e:	2101      	movs	r1, #1
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <dcmotor_pwm_control+0x190>)
 8001142:	f002 fcf8 	bl	8003b36 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED3
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <dcmotor_pwm_control+0x190>)
 800114c:	f002 fcf3 	bl	8003b36 <HAL_GPIO_TogglePin>
		if(pwm_start_flag) // if running, flag=1
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <dcmotor_pwm_control+0x194>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d017      	beq.n	8001188 <dcmotor_pwm_control+0x188>
		{
			CCR_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <dcmotor_pwm_control+0x19c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 8001162:	801a      	strh	r2, [r3, #0]
			CCR_DOWN_Value -= 10;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	3b0a      	subs	r3, #10
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 800116e:	801a      	strh	r2, [r3, #0]
			if(CCR_DOWN_Value < 50)
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b31      	cmp	r3, #49	; 0x31
 8001176:	d802      	bhi.n	800117e <dcmotor_pwm_control+0x17e>
			{
				CCR_DOWN_Value = 50;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 800117a:	2232      	movs	r2, #50	; 0x32
 800117c:	801a      	strh	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_DOWN_Value);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <dcmotor_pwm_control+0x1a4>)
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <dcmotor_pwm_control+0x19c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	635a      	str	r2, [r3, #52]	; 0x34
			}
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_DOWN_Value);
		}
	}
#endif
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	40020400 	.word	0x40020400
 8001194:	2000008c 	.word	0x2000008c
 8001198:	20000092 	.word	0x20000092
 800119c:	200003ac 	.word	0x200003ac
 80011a0:	2000008e 	.word	0x2000008e
 80011a4:	20000090 	.word	0x20000090

080011a8 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f023 030f 	bic.w	r3, r3, #15
 80011b8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f043 030c 	orr.w	r3, r3, #12
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	f043 030c 	orr.w	r3, r3, #12
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80011e8:	bf00      	nop
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2304      	movs	r3, #4
 80011f4:	214e      	movs	r1, #78	; 0x4e
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <lcd_command+0x64>)
 80011f8:	f002 fdfc 	bl	8003df4 <HAL_I2C_Master_Transmit>
 80011fc:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f3      	bne.n	80011ea <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 8001202:	bf00      	nop
}
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002c8 	.word	0x200002c8

08001210 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f023 030f 	bic.w	r3, r3, #15
 8001220:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f043 030d 	orr.w	r3, r3, #13
 800122e:	b2db      	uxtb	r3, r3
 8001230:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f043 0309 	orr.w	r3, r3, #9
 8001238:	b2db      	uxtb	r3, r3
 800123a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 030d 	orr.w	r3, r3, #13
 8001242:	b2db      	uxtb	r3, r3
 8001244:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f043 0309 	orr.w	r3, r3, #9
 800124c:	b2db      	uxtb	r3, r3
 800124e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001250:	bf00      	nop
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2304      	movs	r3, #4
 800125c:	214e      	movs	r1, #78	; 0x4e
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <lcd_data+0x64>)
 8001260:	f002 fdc8 	bl	8003df4 <HAL_I2C_Master_Transmit>
 8001264:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f3      	bne.n	8001252 <lcd_data+0x42>
		//HAL_Delay(1);
	}
	return;
 800126a:	bf00      	nop
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002c8 	.word	0x200002c8

08001278 <lcd_string>:
	HAL_Delay(2);
}

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	while(*str)
 8001280:	e006      	b.n	8001290 <lcd_string+0x18>
	{
		lcd_data(*str++);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffc0 	bl	8001210 <lcd_data>
	while(*str)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f4      	bne.n	8001282 <lcd_string+0xa>
	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	460a      	mov	r2, r1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff6f 	bl	80011a8 <lcd_command>
	return;
 80012ca:	bf00      	nop
}
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <flower_on>:
#endif
	}
}

void flower_on()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	21ff      	movs	r1, #255	; 0xff
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <flower_on+0x5c>)
 80012e0:	f002 fc10 	bl	8003b04 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	e01a      	b.n	8001320 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 80012ea:	2210      	movs	r2, #16
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <flower_on+0x5c>)
 80012fa:	f002 fc03 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 80012fe:	2208      	movs	r2, #8
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	fa42 f303 	asr.w	r3, r2, r3
 8001306:	b29b      	uxth	r3, r3
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <flower_on+0x5c>)
 800130e:	f002 fbf9 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001312:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001316:	f001 fd41 	bl	8002d9c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	dde1      	ble.n	80012ea <flower_on+0x16>
	}
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020c00 	.word	0x40020c00

08001334 <flower_off>:


void flower_off()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	21ff      	movs	r1, #255	; 0xff
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <flower_off+0x5c>)
 8001340:	f002 fbe0 	bl	8003b04 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	e01a      	b.n	8001380 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	fa42 f303 	asr.w	r3, r2, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <flower_off+0x5c>)
 800135a:	f002 fbd3 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 800135e:	2201      	movs	r2, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <flower_off+0x5c>)
 800136e:	f002 fbc9 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001372:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001376:	f001 fd11 	bl	8002d9c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	dde1      	ble.n	800134a <flower_off+0x16>
	}
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020c00 	.word	0x40020c00

08001394 <led_keepon_up>:

void led_keepon_up()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e00f      	b.n	80013c0 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <led_keepon_up+0x3c>)
 80013b0:	f002 fba8 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80013b4:	20c8      	movs	r0, #200	; 0xc8
 80013b6:	f001 fcf1 	bl	8002d9c <HAL_Delay>
	for (int i=0; i < 8; i++)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	ddec      	ble.n	80013a0 <led_keepon_up+0xc>
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <led_keepon_down>:

void led_keepon_down()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e00f      	b.n	8001400 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	fa42 f303 	asr.w	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	4808      	ldr	r0, [pc, #32]	; (8001410 <led_keepon_down+0x3c>)
 80013f0:	f002 fb88 	bl	8003b04 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80013f4:	20c8      	movs	r0, #200	; 0xc8
 80013f6:	f001 fcd1 	bl	8002d9c <HAL_Delay>
	for (int i=0; i < 8; i++)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b07      	cmp	r3, #7
 8001404:	ddec      	ble.n	80013e0 <led_keepon_down+0xc>
	}
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020c00 	.word	0x40020c00

08001414 <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <led_on_up+0x50>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2bc7      	cmp	r3, #199	; 0xc7
 800141e:	dd1e      	ble.n	800145e <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <led_on_up+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
		led_all_off();
 8001426:	f000 f861 	bl	80014ec <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <led_on_up+0x54>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <led_on_up+0x58>)
 800143c:	f002 fb62 	bl	8003b04 <HAL_GPIO_WritePin>
		i++;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <led_on_up+0x54>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <led_on_up+0x54>)
 8001448:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <led_on_up+0x54>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b07      	cmp	r3, #7
 8001450:	dd05      	ble.n	800145e <led_on_up+0x4a>
		{
			i=0;
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <led_on_up+0x54>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <led_on_up+0x5c>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000a2c 	.word	0x20000a2c
 8001468:	20000098 	.word	0x20000098
 800146c:	40020c00 	.word	0x40020c00
 8001470:	20000094 	.word	0x20000094

08001474 <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <led_on_down+0x50>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2bc7      	cmp	r3, #199	; 0xc7
 800147e:	dd1e      	ble.n	80014be <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <led_on_down+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
		led_all_off();
 8001486:	f000 f831 	bl	80014ec <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <led_on_down+0x54>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	fa42 f303 	asr.w	r3, r2, r3
 8001494:	b29b      	uxth	r3, r3
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <led_on_down+0x58>)
 800149c:	f002 fb32 	bl	8003b04 <HAL_GPIO_WritePin>
		i++;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <led_on_down+0x54>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <led_on_down+0x54>)
 80014a8:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <led_on_down+0x54>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	dd05      	ble.n	80014be <led_on_down+0x4a>
		{
			i=0;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <led_on_down+0x54>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <led_on_down+0x5c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000a2c 	.word	0x20000a2c
 80014c8:	2000009c 	.word	0x2000009c
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	20000094 	.word	0x20000094

080014d4 <led_all_on>:

void led_all_on(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	21ff      	movs	r1, #255	; 0xff
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <led_all_on+0x14>)
 80014de:	f002 fb11 	bl	8003b04 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020c00 	.word	0x40020c00

080014ec <led_all_off>:

void led_all_off(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	21ff      	movs	r1, #255	; 0xff
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <led_all_off+0x14>)
 80014f6:	f002 fb05 	bl	8003b04 <HAL_GPIO_WritePin>
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020c00 	.word	0x40020c00

08001504 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_SYSTICK_Handler+0x18>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_SYSTICK_Handler+0x18>)
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000a2c 	.word	0x20000a2c

08001520 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001528:	1d39      	adds	r1, r7, #4
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	2201      	movs	r2, #1
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <__io_putchar+0x20>)
 8001532:	f005 faa4 	bl	8006a7e <HAL_UART_Transmit>

  return ch;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000484 	.word	0x20000484

08001544 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d109      	bne.n	800156a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800155e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001568:	6013      	str	r3, [r2, #0]
	}
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40014400 	.word	0x40014400
 800157c:	20000a1c 	.word	0x20000a1c
 8001580:	20000a20 	.word	0x20000a20

08001584 <delay_us>:

void delay_us(unsigned long us)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <delay_us+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001594:	bf00      	nop
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <delay_us+0x2c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d8f9      	bhi.n	8001596 <delay_us+0x12>
		;
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	2000043c 	.word	0x2000043c

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f001 fb7e 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f856 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fb3a 	bl	8001c38 <MX_GPIO_Init>
  MX_ETH_Init();
 80015c4:	f000 f8bc 	bl	8001740 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80015c8:	f000 fab4 	bl	8001b34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015cc:	f000 fb06 	bl	8001bdc <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80015d0:	f000 fada 	bl	8001b88 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80015d4:	f000 fa66 	bl	8001aa4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80015d8:	f000 fa88 	bl	8001aec <MX_TIM11_Init>
  MX_TIM3_Init();
 80015dc:	f000 f998 	bl	8001910 <MX_TIM3_Init>
  MX_I2C1_Init();
 80015e0:	f000 f8fc 	bl	80017dc <MX_I2C1_Init>
  MX_TIM4_Init();
 80015e4:	f000 f9e8 	bl	80019b8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80015e8:	f000 f938 	bl	800185c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80015ec:	2201      	movs	r2, #1
 80015ee:	4915      	ldr	r1, [pc, #84]	; (8001644 <main+0x90>)
 80015f0:	4815      	ldr	r0, [pc, #84]	; (8001648 <main+0x94>)
 80015f2:	f005 fad6 	bl	8006ba2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80015f6:	2201      	movs	r2, #1
 80015f8:	4914      	ldr	r1, [pc, #80]	; (800164c <main+0x98>)
 80015fa:	4815      	ldr	r0, [pc, #84]	; (8001650 <main+0x9c>)
 80015fc:	f005 fad1 	bl	8006ba2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <main+0xa0>)
 8001602:	f003 fd7f 	bl	8005104 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <main+0xa4>)
 8001608:	f003 fd7c 	bl	8005104 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 800160c:	2100      	movs	r1, #0
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <main+0xa8>)
 8001610:	f004 f866 	bl	80056e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control
 8001614:	2100      	movs	r1, #0
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <main+0xac>)
 8001618:	f003 fefc 	bl	8005414 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // for servo motor PWM control
 800161c:	2100      	movs	r1, #0
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <main+0xb0>)
 8001620:	f003 fe30 	bl	8005284 <HAL_TIM_PWM_Start>


  DHT11_Init();
 8001624:	f7ff fc00 	bl	8000e28 <DHT11_Init>

  TIM10_10ms_counter=0;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <main+0xb4>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT11_processing();
 800162e:	f7ff fba3 	bl	8000d78 <DHT11_processing>
 	pc_command_processing();
 8001632:	f001 f937 	bl	80028a4 <pc_command_processing>
 	bt_command_processing();
 8001636:	f001 f9eb 	bl	8002a10 <bt_command_processing>
 	ultrasonic_processing();
 800163a:	f001 fa99 	bl	8002b70 <ultrasonic_processing>
 	dcmotor_pwm_control();
 800163e:	f7ff fcdf 	bl	8001000 <dcmotor_pwm_control>
	DHT11_processing();
 8001642:	e7f4      	b.n	800162e <main+0x7a>
 8001644:	20000a18 	.word	0x20000a18
 8001648:	20000484 	.word	0x20000484
 800164c:	20000a19 	.word	0x20000a19
 8001650:	200004c8 	.word	0x200004c8
 8001654:	200003f4 	.word	0x200003f4
 8001658:	2000043c 	.word	0x2000043c
 800165c:	20000364 	.word	0x20000364
 8001660:	200003ac 	.word	0x200003ac
 8001664:	2000031c 	.word	0x2000031c
 8001668:	20000a1c 	.word	0x20000a1c

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f006 ff54 	bl	8008528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <SystemClock_Config+0xcc>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <SystemClock_Config+0xd0>)
 80016b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e0:	23a8      	movs	r3, #168	; 0xa8
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e8:	2307      	movs	r3, #7
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f81f 	bl	8004734 <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016fc:	f000 fbca 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2105      	movs	r1, #5
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fa80 	bl	8004c24 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172a:	f000 fbb3 	bl	8001e94 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	3750      	adds	r7, #80	; 0x50
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_ETH_Init+0x84>)
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <MX_ETH_Init+0x88>)
 8001748:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_ETH_Init+0x8c>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_ETH_Init+0x8c>)
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_ETH_Init+0x8c>)
 8001758:	22e1      	movs	r2, #225	; 0xe1
 800175a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_ETH_Init+0x8c>)
 800175e:	2200      	movs	r2, #0
 8001760:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_ETH_Init+0x8c>)
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_ETH_Init+0x8c>)
 800176a:	2200      	movs	r2, #0
 800176c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_ETH_Init+0x84>)
 8001770:	4a16      	ldr	r2, [pc, #88]	; (80017cc <MX_ETH_Init+0x8c>)
 8001772:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_ETH_Init+0x84>)
 8001776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800177a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_ETH_Init+0x84>)
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <MX_ETH_Init+0x90>)
 8001780:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_ETH_Init+0x84>)
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_ETH_Init+0x94>)
 8001786:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_ETH_Init+0x84>)
 800178a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800178e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_ETH_Init+0x84>)
 8001792:	f001 fccb 	bl	800312c <HAL_ETH_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800179c:	f000 fb7a 	bl	8001e94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80017a0:	2238      	movs	r2, #56	; 0x38
 80017a2:	2100      	movs	r1, #0
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_ETH_Init+0x98>)
 80017a6:	f006 febf 	bl	8008528 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_ETH_Init+0x98>)
 80017ac:	2221      	movs	r2, #33	; 0x21
 80017ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_ETH_Init+0x98>)
 80017b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80017b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_ETH_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000218 	.word	0x20000218
 80017c8:	40028000 	.word	0x40028000
 80017cc:	20000a30 	.word	0x20000a30
 80017d0:	20000178 	.word	0x20000178
 80017d4:	200000d8 	.word	0x200000d8
 80017d8:	200000a0 	.word	0x200000a0

080017dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_I2C1_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_I2C1_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_I2C1_Init+0x74>)
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <MX_I2C1_Init+0x7c>)
 80017ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_I2C1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_I2C1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_I2C1_Init+0x74>)
 80017fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_I2C1_Init+0x74>)
 800181a:	f002 f9a7 	bl	8003b6c <HAL_I2C_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001824:	f000 fb36 	bl	8001e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <MX_I2C1_Init+0x74>)
 800182c:	f002 fde9 	bl	8004402 <HAL_I2CEx_ConfigAnalogFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001836:	f000 fb2d 	bl	8001e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C1_Init+0x74>)
 800183e:	f002 fe1c 	bl	800447a <HAL_I2CEx_ConfigDigitalFilter>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001848:	f000 fb24 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002c8 	.word	0x200002c8
 8001854:	40005400 	.word	0x40005400
 8001858:	000186a0 	.word	0x000186a0

0800185c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_TIM2_Init+0xb0>)
 8001880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_TIM2_Init+0xb0>)
 8001888:	f240 628f 	movw	r2, #1679	; 0x68f
 800188c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <MX_TIM2_Init+0xb0>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <MX_TIM2_Init+0xb0>)
 8001896:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_TIM2_Init+0xb0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_TIM2_Init+0xb0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM2_Init+0xb0>)
 80018aa:	f003 fc9b 	bl	80051e4 <HAL_TIM_PWM_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f000 faee 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4619      	mov	r1, r3
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <MX_TIM2_Init+0xb0>)
 80018c8:	f004 fffc 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018d2:	f000 fadf 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80018da:	f240 13f3 	movw	r3, #499	; 0x1f3
 80018de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM2_Init+0xb0>)
 80018f0:	f004 f9c2 	bl	8005c78 <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018fa:	f000 facb 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM2_Init+0xb0>)
 8001900:	f000 fcde 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000031c 	.word	0x2000031c

08001910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_TIM3_Init+0xa0>)
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <MX_TIM3_Init+0xa4>)
 8001930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001934:	2253      	movs	r2, #83	; 0x53
 8001936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM3_Init+0xa0>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM3_Init+0xa0>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001952:	4817      	ldr	r0, [pc, #92]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001954:	f003 fe74 	bl	8005640 <HAL_TIM_IC_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800195e:	f000 fa99 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	480f      	ldr	r0, [pc, #60]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001972:	f004 ffa7 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800197c:	f000 fa8a 	bl	8001e94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001980:	230a      	movs	r3, #10
 8001982:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001984:	2301      	movs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_TIM3_Init+0xa0>)
 8001998:	f004 f8d2 	bl	8005b40 <HAL_TIM_IC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80019a2:	f000 fa77 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000364 	.word	0x20000364
 80019b4:	40000400 	.word	0x40000400

080019b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <MX_TIM4_Init+0xe4>)
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <MX_TIM4_Init+0xe8>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <MX_TIM4_Init+0xe4>)
 80019f0:	f240 3247 	movw	r2, #839	; 0x347
 80019f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <MX_TIM4_Init+0xe4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <MX_TIM4_Init+0xe4>)
 80019fe:	2263      	movs	r2, #99	; 0x63
 8001a00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a0e:	4823      	ldr	r0, [pc, #140]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a10:	f003 fb28 	bl	8005064 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a1a:	f000 fa3b 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481c      	ldr	r0, [pc, #112]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a2c:	f004 f9e6 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a36:	f000 fa2d 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a3c:	f003 fbd2 	bl	80051e4 <HAL_TIM_PWM_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a46:	f000 fa25 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4619      	mov	r1, r3
 8001a58:	4810      	ldr	r0, [pc, #64]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a5a:	f004 ff33 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a64:	f000 fa16 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a68:	2360      	movs	r3, #96	; 0x60
 8001a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001a6c:	2345      	movs	r3, #69	; 0x45
 8001a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a74:	2304      	movs	r3, #4
 8001a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a80:	f004 f8fa 	bl	8005c78 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a8a:	f000 fa03 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM4_Init+0xe4>)
 8001a90:	f000 fc16 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3738      	adds	r7, #56	; 0x38
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200003ac 	.word	0x200003ac
 8001aa0:	40000800 	.word	0x40000800

08001aa4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <MX_TIM10_Init+0x44>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001ab0:	22a7      	movs	r2, #167	; 0xa7
 8001ab2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001abc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM10_Init+0x40>)
 8001ad0:	f003 fac8 	bl	8005064 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ada:	f000 f9db 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003f4 	.word	0x200003f4
 8001ae8:	40014400 	.word	0x40014400

08001aec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <MX_TIM11_Init+0x44>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001af8:	22a7      	movs	r2, #167	; 0xa7
 8001afa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b08:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_TIM11_Init+0x40>)
 8001b18:	f003 faa4 	bl	8005064 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001b22:	f000 f9b7 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000043c 	.word	0x2000043c
 8001b30:	40014800 	.word	0x40014800

08001b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_USART3_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART3_UART_Init+0x4c>)
 8001b6c:	f004 ff3a 	bl	80069e4 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f000 f98d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000484 	.word	0x20000484
 8001b84:	40004800 	.word	0x40004800

08001b88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART6_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bc0:	f004 ff10 	bl	80069e4 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f963 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200004c8 	.word	0x200004c8
 8001bd8:	40011400 	.word	0x40011400

08001bdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001be6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bea:	2204      	movs	r2, #4
 8001bec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c20:	f002 fc6a 	bl	80044f8 <HAL_PCD_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c2a:	f000 f933 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000050c 	.word	0x2000050c

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a87      	ldr	r2, [pc, #540]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b85      	ldr	r3, [pc, #532]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a80      	ldr	r2, [pc, #512]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b77      	ldr	r3, [pc, #476]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a6b      	ldr	r2, [pc, #428]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b69      	ldr	r3, [pc, #420]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a64      	ldr	r2, [pc, #400]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <MX_GPIO_Init+0x23c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2101      	movs	r1, #1
 8001d32:	4851      	ldr	r0, [pc, #324]	; (8001e78 <MX_GPIO_Init+0x240>)
 8001d34:	f001 fee6 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d3e:	484f      	ldr	r0, [pc, #316]	; (8001e7c <MX_GPIO_Init+0x244>)
 8001d40:	f001 fee0 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d4a:	484d      	ldr	r0, [pc, #308]	; (8001e80 <MX_GPIO_Init+0x248>)
 8001d4c:	f001 feda 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_MOTOR1_Pin|IN2_MOTOR1_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d56:	484b      	ldr	r0, [pc, #300]	; (8001e84 <MX_GPIO_Init+0x24c>)
 8001d58:	f001 fed4 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	4849      	ldr	r0, [pc, #292]	; (8001e88 <MX_GPIO_Init+0x250>)
 8001d62:	f001 fecf 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d66:	2200      	movs	r2, #0
 8001d68:	21ff      	movs	r1, #255	; 0xff
 8001d6a:	4848      	ldr	r0, [pc, #288]	; (8001e8c <MX_GPIO_Init+0x254>)
 8001d6c:	f001 feca 	bl	8003b04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	4842      	ldr	r0, [pc, #264]	; (8001e90 <MX_GPIO_Init+0x258>)
 8001d88:	f001 fcf8 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4835      	ldr	r0, [pc, #212]	; (8001e78 <MX_GPIO_Init+0x240>)
 8001da4:	f001 fcea 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001da8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482e      	ldr	r0, [pc, #184]	; (8001e7c <MX_GPIO_Init+0x244>)
 8001dc2:	f001 fcdb 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4828      	ldr	r0, [pc, #160]	; (8001e80 <MX_GPIO_Init+0x248>)
 8001de0:	f001 fccc 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_MOTOR1_Pin IN2_MOTOR1_Pin */
  GPIO_InitStruct.Pin = IN1_MOTOR1_Pin|IN2_MOTOR1_Pin;
 8001de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <MX_GPIO_Init+0x24c>)
 8001dfe:	f001 fcbd 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001e02:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e14:	4619      	mov	r1, r3
 8001e16:	481b      	ldr	r0, [pc, #108]	; (8001e84 <MX_GPIO_Init+0x24c>)
 8001e18:	f001 fcb0 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e1c:	2340      	movs	r3, #64	; 0x40
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <MX_GPIO_Init+0x250>)
 8001e34:	f001 fca2 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <MX_GPIO_Init+0x250>)
 8001e4c:	f001 fc96 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e50:	23ff      	movs	r3, #255	; 0xff
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <MX_GPIO_Init+0x254>)
 8001e68:	f001 fc88 	bl	800377c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	; 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021800 	.word	0x40021800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020800 	.word	0x40020800

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08e      	sub	sp, #56	; 0x38
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a55      	ldr	r2, [pc, #340]	; (8002064 <HAL_ETH_MspInit+0x174>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 80a4 	bne.w	800205c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a44      	ldr	r2, [pc, #272]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a36      	ldr	r2, [pc, #216]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fca:	6313      	str	r3, [r2, #48]	; 0x30
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_ETH_MspInit+0x178>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fd8:	2332      	movs	r3, #50	; 0x32
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fe8:	230b      	movs	r3, #11
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481e      	ldr	r0, [pc, #120]	; (800206c <HAL_ETH_MspInit+0x17c>)
 8001ff4:	f001 fbc2 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ff8:	2386      	movs	r3, #134	; 0x86
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002008:	230b      	movs	r3, #11
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	4817      	ldr	r0, [pc, #92]	; (8002070 <HAL_ETH_MspInit+0x180>)
 8002014:	f001 fbb2 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800202a:	230b      	movs	r3, #11
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <HAL_ETH_MspInit+0x184>)
 8002036:	f001 fba1 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800203a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800204c:	230b      	movs	r3, #11
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <HAL_ETH_MspInit+0x188>)
 8002058:	f001 fb90 	bl	800377c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3738      	adds	r7, #56	; 0x38
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40028000 	.word	0x40028000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020800 	.word	0x40020800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40021800 	.word	0x40021800

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_I2C_MspInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12c      	bne.n	80020f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c0:	2312      	movs	r3, #18
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020cc:	2304      	movs	r3, #4
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <HAL_I2C_MspInit+0x8c>)
 80020d8:	f001 fb50 	bl	800377c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40005400 	.word	0x40005400
 8002104:	40023800 	.word	0x40023800
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d115      	bne.n	800214a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_TIM_PWM_MspInit+0x48>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_TIM_PWM_MspInit+0x48>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_TIM_PWM_MspInit+0x48>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201c      	movs	r0, #28
 8002140:	f000 ff2b 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002144:	201c      	movs	r0, #28
 8002146:	f000 ff44 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_TIM_IC_MspInit+0x94>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d133      	bne.n	80021e2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_TIM_IC_MspInit+0x98>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_TIM_IC_MspInit+0x9c>)
 80021ce:	f001 fad5 	bl	800377c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	201d      	movs	r0, #29
 80021d8:	f000 fedf 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021dc:	201d      	movs	r0, #29
 80021de:	f000 fef8 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d116      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	201e      	movs	r0, #30
 800222c:	f000 feb5 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002230:	201e      	movs	r0, #30
 8002232:	f000 fece 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002236:	e036      	b.n	80022a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_TIM_Base_MspInit+0xc0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d116      	bne.n	8002270 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2019      	movs	r0, #25
 8002264:	f000 fe99 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002268:	2019      	movs	r0, #25
 800226a:	f000 feb2 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 800226e:	e01a      	b.n	80022a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_TIM_Base_MspInit+0xc4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d115      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_TIM_Base_MspInit+0xbc>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	201a      	movs	r0, #26
 800229c:	f000 fe7d 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022a0:	201a      	movs	r0, #26
 80022a2:	f000 fe96 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40014400 	.word	0x40014400
 80022bc:	40014800 	.word	0x40014800

080022c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d11e      	bne.n	8002320 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVOMOTOR_TIM2_CH1_Pin;
 80022fe:	2320      	movs	r3, #32
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVOMOTOR_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4816      	ldr	r0, [pc, #88]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 800231a:	f001 fa2f 	bl	800377c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800231e:	e023      	b.n	8002368 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11e      	bne.n	8002368 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_TIM4_CH1_Pin;
 8002346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002358:	2302      	movs	r3, #2
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_TIM4_CH1_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <HAL_TIM_MspPostInit+0xbc>)
 8002364:	f001 fa0a 	bl	800377c <HAL_GPIO_Init>
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	40000800 	.word	0x40000800
 800237c:	40020c00 	.word	0x40020c00

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_UART_MspInit+0x108>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d135      	bne.n	800240e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4826      	ldr	r0, [pc, #152]	; (8002490 <HAL_UART_MspInit+0x110>)
 80023f8:	f001 f9c0 	bl	800377c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2027      	movs	r0, #39	; 0x27
 8002402:	f000 fdca 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002406:	2027      	movs	r0, #39	; 0x27
 8002408:	f000 fde3 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800240c:	e038      	b.n	8002480 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_UART_MspInit+0x114>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d133      	bne.n	8002480 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x10c>)
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	6453      	str	r3, [r2, #68]	; 0x44
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x10c>)
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x10c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_UART_MspInit+0x10c>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6313      	str	r3, [r2, #48]	; 0x30
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002450:	23c0      	movs	r3, #192	; 0xc0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002460:	2308      	movs	r3, #8
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	480b      	ldr	r0, [pc, #44]	; (8002498 <HAL_UART_MspInit+0x118>)
 800246c:	f001 f986 	bl	800377c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2047      	movs	r0, #71	; 0x47
 8002476:	f000 fd90 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800247a:	2047      	movs	r0, #71	; 0x47
 800247c:	f000 fda9 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40004800 	.word	0x40004800
 800248c:	40023800 	.word	0x40023800
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40011400 	.word	0x40011400
 8002498:	40020800 	.word	0x40020800

0800249c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024bc:	d13f      	bne.n	800253e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024ec:	230a      	movs	r3, #10
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4815      	ldr	r0, [pc, #84]	; (800254c <HAL_PCD_MspInit+0xb0>)
 80024f8:	f001 f940 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <HAL_PCD_MspInit+0xb0>)
 8002512:	f001 f933 	bl	800377c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_PCD_MspInit+0xac>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	6353      	str	r3, [r2, #52]	; 0x34
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_PCD_MspInit+0xac>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40020000 	.word	0x40020000

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <NMI_Handler+0x4>

08002556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler+0x4>

08002562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <UsageFault_Handler+0x4>

0800256e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800259c:	f000 fbde 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 80025a0:	f7fe ffb0 	bl	8001504 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ae:	f003 f9bf 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200003f4 	.word	0x200003f4

080025bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80025c2:	f003 f9b5 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000043c 	.word	0x2000043c

080025d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <TIM2_IRQHandler+0x10>)
 80025d6:	f003 f9ab 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000031c 	.word	0x2000031c

080025e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM3_IRQHandler+0x10>)
 80025ea:	f003 f9a1 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000364 	.word	0x20000364

080025f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM4_IRQHandler+0x10>)
 80025fe:	f003 f997 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200003ac 	.word	0x200003ac

0800260c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <USART3_IRQHandler+0x10>)
 8002612:	f004 faf7 	bl	8006c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000484 	.word	0x20000484

08002620 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <USART6_IRQHandler+0x10>)
 8002626:	f004 faed 	bl	8006c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200004c8 	.word	0x200004c8

08002634 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e00a      	b.n	800265c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002646:	f3af 8000 	nop.w
 800264a:	4601      	mov	r1, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	60ba      	str	r2, [r7, #8]
 8002652:	b2ca      	uxtb	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3301      	adds	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	dbf0      	blt.n	8002646 <_read+0x12>
  }

  return len;
 8002664:	687b      	ldr	r3, [r7, #4]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e009      	b.n	8002694 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe ff49 	bl	8001520 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	dbf1      	blt.n	8002680 <_write+0x12>
  }
  return len;
 800269c:	687b      	ldr	r3, [r7, #4]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_close>:

int _close(int file)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ce:	605a      	str	r2, [r3, #4]
  return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_isatty>:

int _isatty(int file)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <_sbrk+0x5c>)
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <_sbrk+0x60>)
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_sbrk+0x64>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <_sbrk+0x68>)
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002740:	f005 ff52 	bl	80085e8 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	220c      	movs	r2, #12
 8002748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e009      	b.n	8002764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <_sbrk+0x64>)
 8002760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20030000 	.word	0x20030000
 8002770:	00000400 	.word	0x00000400
 8002774:	20000a38 	.word	0x20000a38
 8002778:	20000bf8 	.word	0x20000bf8

0800277c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <SystemInit+0x20>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <SystemInit+0x20>)
 8002788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800278c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_UART_RxCpltCallback+0xd4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d12c      	bne.n	800280a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b27      	cmp	r3, #39	; 0x27
 80027b6:	dc1d      	bgt.n	80027f4 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_UART_RxCpltCallback+0xdc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b0a      	cmp	r3, #10
 80027be:	d003      	beq.n	80027c8 <HAL_UART_RxCpltCallback+0x28>
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_UART_RxCpltCallback+0xdc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b0d      	cmp	r3, #13
 80027c6:	d10b      	bne.n	80027e0 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <HAL_UART_RxCpltCallback+0xe0>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80027d2:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <HAL_UART_RxCpltCallback+0xe4>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00f      	b.n	8002800 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4924      	ldr	r1, [pc, #144]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027e8:	600a      	str	r2, [r1, #0]
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_UART_RxCpltCallback+0xdc>)
 80027ec:	7811      	ldrb	r1, [r2, #0]
 80027ee:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_UART_RxCpltCallback+0xe0>)
 80027f0:	54d1      	strb	r1, [r2, r3]
 80027f2:	e005      	b.n	8002800 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 80027fa:	4823      	ldr	r0, [pc, #140]	; (8002888 <HAL_UART_RxCpltCallback+0xe8>)
 80027fc:	f005 fd94 	bl	8008328 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002800:	2201      	movs	r2, #1
 8002802:	491e      	ldr	r1, [pc, #120]	; (800287c <HAL_UART_RxCpltCallback+0xdc>)
 8002804:	481b      	ldr	r0, [pc, #108]	; (8002874 <HAL_UART_RxCpltCallback+0xd4>)
 8002806:	f004 f9cc 	bl	8006ba2 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <HAL_UART_RxCpltCallback+0xec>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d12c      	bne.n	800286c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_UART_RxCpltCallback+0xf0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b27      	cmp	r3, #39	; 0x27
 8002818:	dc1d      	bgt.n	8002856 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_UART_RxCpltCallback+0xf4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b0a      	cmp	r3, #10
 8002820:	d003      	beq.n	800282a <HAL_UART_RxCpltCallback+0x8a>
 8002822:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_UART_RxCpltCallback+0xf4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b0d      	cmp	r3, #13
 8002828:	d10b      	bne.n	8002842 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_UART_RxCpltCallback+0xd8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_UART_RxCpltCallback+0xf8>)
 8002830:	2100      	movs	r1, #0
 8002832:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_UART_RxCpltCallback+0xfc>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_UART_RxCpltCallback+0xf0>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e00f      	b.n	8002862 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_UART_RxCpltCallback+0xf0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	4911      	ldr	r1, [pc, #68]	; (8002890 <HAL_UART_RxCpltCallback+0xf0>)
 800284a:	600a      	str	r2, [r1, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_UART_RxCpltCallback+0xf4>)
 800284e:	7811      	ldrb	r1, [r2, #0]
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_UART_RxCpltCallback+0xf8>)
 8002852:	54d1      	strb	r1, [r2, r3]
 8002854:	e005      	b.n	8002862 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_UART_RxCpltCallback+0xf0>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 800285c:	4810      	ldr	r0, [pc, #64]	; (80028a0 <HAL_UART_RxCpltCallback+0x100>)
 800285e:	f005 fd63 	bl	8008328 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002862:	2201      	movs	r2, #1
 8002864:	490b      	ldr	r1, [pc, #44]	; (8002894 <HAL_UART_RxCpltCallback+0xf4>)
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <HAL_UART_RxCpltCallback+0xec>)
 8002868:	f004 f99b 	bl	8006ba2 <HAL_UART_Receive_IT>
	}
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000484 	.word	0x20000484
 8002878:	20000a64 	.word	0x20000a64
 800287c:	20000a18 	.word	0x20000a18
 8002880:	20000a3c 	.word	0x20000a3c
 8002884:	20000a68 	.word	0x20000a68
 8002888:	08009420 	.word	0x08009420
 800288c:	200004c8 	.word	0x200004c8
 8002890:	20000a94 	.word	0x20000a94
 8002894:	20000a19 	.word	0x20000a19
 8002898:	20000a6c 	.word	0x20000a6c
 800289c:	20000a98 	.word	0x20000a98
 80028a0:	08009438 	.word	0x08009438

080028a4 <pc_command_processing>:

void pc_command_processing(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 80028a8:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <pc_command_processing+0x12c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 808e 	beq.w	80029ce <pc_command_processing+0x12a>
	{
		newline_detect_flag=0;
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <pc_command_processing+0x12c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 80028b8:	4846      	ldr	r0, [pc, #280]	; (80029d4 <pc_command_processing+0x130>)
 80028ba:	f005 fd35 	bl	8008328 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028be:	220a      	movs	r2, #10
 80028c0:	4945      	ldr	r1, [pc, #276]	; (80029d8 <pc_command_processing+0x134>)
 80028c2:	4844      	ldr	r0, [pc, #272]	; (80029d4 <pc_command_processing+0x130>)
 80028c4:	f005 fe38 	bl	8008538 <strncmp>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <pc_command_processing+0x30>
		{
			led_all_on();
 80028ce:	f7fe fe01 	bl	80014d4 <led_all_on>
			return;
 80028d2:	e07c      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028d4:	220b      	movs	r2, #11
 80028d6:	4941      	ldr	r1, [pc, #260]	; (80029dc <pc_command_processing+0x138>)
 80028d8:	483e      	ldr	r0, [pc, #248]	; (80029d4 <pc_command_processing+0x130>)
 80028da:	f005 fe2d 	bl	8008538 <strncmp>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <pc_command_processing+0x46>
		{
			led_all_off();
 80028e4:	f7fe fe02 	bl	80014ec <led_all_off>
			return;
 80028e8:	e071      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028ea:	220b      	movs	r2, #11
 80028ec:	493c      	ldr	r1, [pc, #240]	; (80029e0 <pc_command_processing+0x13c>)
 80028ee:	4839      	ldr	r0, [pc, #228]	; (80029d4 <pc_command_processing+0x130>)
 80028f0:	f005 fe22 	bl	8008538 <strncmp>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <pc_command_processing+0x5c>
		{
			led_on_down();
 80028fa:	f7fe fdbb 	bl	8001474 <led_on_down>
			return;
 80028fe:	e066      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002900:	2209      	movs	r2, #9
 8002902:	4938      	ldr	r1, [pc, #224]	; (80029e4 <pc_command_processing+0x140>)
 8002904:	4833      	ldr	r0, [pc, #204]	; (80029d4 <pc_command_processing+0x130>)
 8002906:	f005 fe17 	bl	8008538 <strncmp>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <pc_command_processing+0x72>
		{
			led_on_up();
 8002910:	f7fe fd80 	bl	8001414 <led_on_up>
			return;
 8002914:	e05b      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002916:	2209      	movs	r2, #9
 8002918:	4933      	ldr	r1, [pc, #204]	; (80029e8 <pc_command_processing+0x144>)
 800291a:	482e      	ldr	r0, [pc, #184]	; (80029d4 <pc_command_processing+0x130>)
 800291c:	f005 fe0c 	bl	8008538 <strncmp>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <pc_command_processing+0x88>
		{
			flower_on();
 8002926:	f7fe fcd5 	bl	80012d4 <flower_on>
			return;
 800292a:	e050      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800292c:	220a      	movs	r2, #10
 800292e:	492f      	ldr	r1, [pc, #188]	; (80029ec <pc_command_processing+0x148>)
 8002930:	4828      	ldr	r0, [pc, #160]	; (80029d4 <pc_command_processing+0x130>)
 8002932:	f005 fe01 	bl	8008538 <strncmp>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <pc_command_processing+0x9e>
		{
			flower_off();
 800293c:	f7fe fcfa 	bl	8001334 <flower_off>
			return;
 8002940:	e045      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002942:	220d      	movs	r2, #13
 8002944:	492a      	ldr	r1, [pc, #168]	; (80029f0 <pc_command_processing+0x14c>)
 8002946:	4823      	ldr	r0, [pc, #140]	; (80029d4 <pc_command_processing+0x130>)
 8002948:	f005 fdf6 	bl	8008538 <strncmp>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <pc_command_processing+0xb4>
		{
			led_keepon_up();
 8002952:	f7fe fd1f 	bl	8001394 <led_keepon_up>
			return;
 8002956:	e03a      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002958:	220f      	movs	r2, #15
 800295a:	4926      	ldr	r1, [pc, #152]	; (80029f4 <pc_command_processing+0x150>)
 800295c:	481d      	ldr	r0, [pc, #116]	; (80029d4 <pc_command_processing+0x130>)
 800295e:	f005 fdeb 	bl	8008538 <strncmp>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <pc_command_processing+0xca>
		{
			led_keepon_down();
 8002968:	f7fe fd34 	bl	80013d4 <led_keepon_down>
			return;
 800296c:	e02f      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "dht11on", strlen("dht11on")))  //
 800296e:	2207      	movs	r2, #7
 8002970:	4921      	ldr	r1, [pc, #132]	; (80029f8 <pc_command_processing+0x154>)
 8002972:	4818      	ldr	r0, [pc, #96]	; (80029d4 <pc_command_processing+0x130>)
 8002974:	f005 fde0 	bl	8008538 <strncmp>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <pc_command_processing+0xe2>
		{
			dht11_on = 1;
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <pc_command_processing+0x158>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
			return;
 8002984:	e023      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "dht11off", strlen("dht11off")))  //
 8002986:	2208      	movs	r2, #8
 8002988:	491d      	ldr	r1, [pc, #116]	; (8002a00 <pc_command_processing+0x15c>)
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <pc_command_processing+0x130>)
 800298c:	f005 fdd4 	bl	8008538 <strncmp>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <pc_command_processing+0xfa>
		{
			dht11_on = 0;
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <pc_command_processing+0x158>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
			return;
 800299c:	e017      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "ultra_on", strlen("ultra_on")))  //
 800299e:	2208      	movs	r2, #8
 80029a0:	4918      	ldr	r1, [pc, #96]	; (8002a04 <pc_command_processing+0x160>)
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <pc_command_processing+0x130>)
 80029a4:	f005 fdc8 	bl	8008538 <strncmp>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <pc_command_processing+0x112>
		{
			ultrasonic_on = 1;
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <pc_command_processing+0x164>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
			return;
 80029b4:	e00b      	b.n	80029ce <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "ultra_off", strlen("ultra_off")))  //
 80029b6:	2209      	movs	r2, #9
 80029b8:	4914      	ldr	r1, [pc, #80]	; (8002a0c <pc_command_processing+0x168>)
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <pc_command_processing+0x130>)
 80029bc:	f005 fdbc 	bl	8008538 <strncmp>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <pc_command_processing+0x12a>
		{
			ultrasonic_on = 0;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <pc_command_processing+0x164>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
			return;
 80029cc:	bf00      	nop
//			dht11time = atoi(rx_buff+9);
//			return;
//		}

	}
}
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000a68 	.word	0x20000a68
 80029d4:	20000a3c 	.word	0x20000a3c
 80029d8:	08009454 	.word	0x08009454
 80029dc:	08009460 	.word	0x08009460
 80029e0:	0800946c 	.word	0x0800946c
 80029e4:	08009478 	.word	0x08009478
 80029e8:	08009484 	.word	0x08009484
 80029ec:	08009490 	.word	0x08009490
 80029f0:	0800949c 	.word	0x0800949c
 80029f4:	080094ac 	.word	0x080094ac
 80029f8:	080094bc 	.word	0x080094bc
 80029fc:	20000a24 	.word	0x20000a24
 8002a00:	080094c4 	.word	0x080094c4
 8002a04:	080094d0 	.word	0x080094d0
 8002a08:	20000a28 	.word	0x20000a28
 8002a0c:	080094dc 	.word	0x080094dc

08002a10 <bt_command_processing>:

void bt_command_processing(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <bt_command_processing+0xcc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05d      	beq.n	8002ad8 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <bt_command_processing+0xcc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002a22:	482f      	ldr	r0, [pc, #188]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a24:	f005 fc80 	bl	8008328 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a28:	220a      	movs	r2, #10
 8002a2a:	492e      	ldr	r1, [pc, #184]	; (8002ae4 <bt_command_processing+0xd4>)
 8002a2c:	482c      	ldr	r0, [pc, #176]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a2e:	f005 fd83 	bl	8008538 <strncmp>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <bt_command_processing+0x2e>
		{
			led_all_on();
 8002a38:	f7fe fd4c 	bl	80014d4 <led_all_on>
			return;
 8002a3c:	e04c      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a3e:	220b      	movs	r2, #11
 8002a40:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <bt_command_processing+0xd8>)
 8002a42:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a44:	f005 fd78 	bl	8008538 <strncmp>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <bt_command_processing+0x44>
		{
			led_all_off();
 8002a4e:	f7fe fd4d 	bl	80014ec <led_all_off>
			return;
 8002a52:	e041      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a54:	220b      	movs	r2, #11
 8002a56:	4925      	ldr	r1, [pc, #148]	; (8002aec <bt_command_processing+0xdc>)
 8002a58:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a5a:	f005 fd6d 	bl	8008538 <strncmp>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <bt_command_processing+0x5a>
		{
			led_on_down();
 8002a64:	f7fe fd06 	bl	8001474 <led_on_down>
			return;
 8002a68:	e036      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a6a:	2209      	movs	r2, #9
 8002a6c:	4920      	ldr	r1, [pc, #128]	; (8002af0 <bt_command_processing+0xe0>)
 8002a6e:	481c      	ldr	r0, [pc, #112]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a70:	f005 fd62 	bl	8008538 <strncmp>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <bt_command_processing+0x70>
		{
			led_on_up();
 8002a7a:	f7fe fccb 	bl	8001414 <led_on_up>
			return;
 8002a7e:	e02b      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a80:	2209      	movs	r2, #9
 8002a82:	491c      	ldr	r1, [pc, #112]	; (8002af4 <bt_command_processing+0xe4>)
 8002a84:	4816      	ldr	r0, [pc, #88]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a86:	f005 fd57 	bl	8008538 <strncmp>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <bt_command_processing+0x86>
		{
			flower_on();
 8002a90:	f7fe fc20 	bl	80012d4 <flower_on>
			return;
 8002a94:	e020      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a96:	220a      	movs	r2, #10
 8002a98:	4917      	ldr	r1, [pc, #92]	; (8002af8 <bt_command_processing+0xe8>)
 8002a9a:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <bt_command_processing+0xd0>)
 8002a9c:	f005 fd4c 	bl	8008538 <strncmp>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <bt_command_processing+0x9c>
		{
			flower_off();
 8002aa6:	f7fe fc45 	bl	8001334 <flower_off>
			return;
 8002aaa:	e015      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002aac:	220d      	movs	r2, #13
 8002aae:	4913      	ldr	r1, [pc, #76]	; (8002afc <bt_command_processing+0xec>)
 8002ab0:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <bt_command_processing+0xd0>)
 8002ab2:	f005 fd41 	bl	8008538 <strncmp>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <bt_command_processing+0xb2>
		{
			led_keepon_up();
 8002abc:	f7fe fc6a 	bl	8001394 <led_keepon_up>
			return;
 8002ac0:	e00a      	b.n	8002ad8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <bt_command_processing+0xf0>)
 8002ac6:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <bt_command_processing+0xd0>)
 8002ac8:	f005 fd36 	bl	8008538 <strncmp>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002ad2:	f7fe fc7f 	bl	80013d4 <led_keepon_down>
			return;
 8002ad6:	bf00      	nop
		}
	}
}
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000a98 	.word	0x20000a98
 8002ae0:	20000a6c 	.word	0x20000a6c
 8002ae4:	08009454 	.word	0x08009454
 8002ae8:	08009460 	.word	0x08009460
 8002aec:	0800946c 	.word	0x0800946c
 8002af0:	08009478 	.word	0x08009478
 8002af4:	08009484 	.word	0x08009484
 8002af8:	08009490 	.word	0x08009490
 8002afc:	0800949c 	.word	0x0800949c
 8002b00:	080094ac 	.word	0x080094ac

08002b04 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d11f      	bne.n	8002b56 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002b2e:	e012      	b.n	8002b56 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f003 fa22 	bl	8005f8c <HAL_TIM_ReadCapturedValue>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002b4e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x68>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40000400 	.word	0x40000400
 8002b64:	20000aa4 	.word	0x20000aa4
 8002b68:	20000a9c 	.word	0x20000a9c
 8002b6c:	20000aa0 	.word	0x20000aa0

08002b70 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if(ultrasonic_on)
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <ultrasonic_processing+0xa0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03e      	beq.n	8002bfc <ultrasonic_processing+0x8c>
	{
		if (TIM10_10ms_ultrasonic >= 100)   // 1초
 8002b7e:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <ultrasonic_processing+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b63      	cmp	r3, #99	; 0x63
 8002b84:	dd3a      	ble.n	8002bfc <ultrasonic_processing+0x8c>
		{
			TIM10_10ms_ultrasonic=0;
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <ultrasonic_processing+0xa4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
			make_trigger();
 8002b8c:	f000 f84c 	bl	8002c28 <make_trigger>
			if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <ultrasonic_processing+0xa8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <ultrasonic_processing+0x8c>
			{
				ic_cpt_finish_flag=0;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <ultrasonic_processing+0xa8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
				dis = distance;
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <ultrasonic_processing+0xac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
				dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f7fd fcc5 	bl	8000534 <__aeabi_i2d>
 8002baa:	a317      	add	r3, pc, #92	; (adr r3, 8002c08 <ultrasonic_processing+0x98>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fd2a 	bl	8000608 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bc4:	f7fd fe4a 	bl	800085c <__aeabi_ddiv>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd ff2c 	bl	8000a2c <__aeabi_d2iz>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	617b      	str	r3, [r7, #20]
				// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
				printf("dis: %dcm\n", dis);
 8002bd8:	6979      	ldr	r1, [r7, #20]
 8002bda:	4811      	ldr	r0, [pc, #68]	; (8002c20 <ultrasonic_processing+0xb0>)
 8002bdc:	f005 fb3e 	bl	800825c <iprintf>

				sprintf(lcd_buff, "DISTANCE : %dcm", dis);
 8002be0:	463b      	mov	r3, r7
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	490f      	ldr	r1, [pc, #60]	; (8002c24 <ultrasonic_processing+0xb4>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f005 fba6 	bl	8008338 <siprintf>
				move_cursor(1,0);
 8002bec:	2100      	movs	r1, #0
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7fe fb57 	bl	80012a2 <move_cursor>
				lcd_string(lcd_buff);
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb3e 	bl	8001278 <lcd_string>
			}
		}
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	f3af 8000 	nop.w
 8002c08:	b020c49c 	.word	0xb020c49c
 8002c0c:	3fa16872 	.word	0x3fa16872
 8002c10:	20000a28 	.word	0x20000a28
 8002c14:	20000a20 	.word	0x20000a20
 8002c18:	20000aa0 	.word	0x20000aa0
 8002c1c:	20000a9c 	.word	0x20000a9c
 8002c20:	080094e8 	.word	0x080094e8
 8002c24:	080094f4 	.word	0x080094f4

08002c28 <make_trigger>:

void make_trigger()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c32:	480b      	ldr	r0, [pc, #44]	; (8002c60 <make_trigger+0x38>)
 8002c34:	f000 ff66 	bl	8003b04 <HAL_GPIO_WritePin>
	delay_us(2);
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f7fe fca3 	bl	8001584 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <make_trigger+0x38>)
 8002c46:	f000 ff5d 	bl	8003b04 <HAL_GPIO_WritePin>
	delay_us(10);
 8002c4a:	200a      	movs	r0, #10
 8002c4c:	f7fe fc9a 	bl	8001584 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <make_trigger+0x38>)
 8002c58:	f000 ff54 	bl	8003b04 <HAL_GPIO_WritePin>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021400 	.word	0x40021400

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c80:	4c0b      	ldr	r4, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c8e:	f7ff fd75 	bl	800277c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f005 fcaf 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7fe fc8d 	bl	80015b4 <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ca8:	08009560 	.word	0x08009560
  ldr r2, =_sbss
 8002cac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cb0:	20000bf8 	.word	0x20000bf8

08002cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_Init+0x40>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_Init+0x40>)
 8002cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x40>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f94f 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff f8d8 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f967 	bl	8002fee <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f92f 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20000010 	.word	0x20000010
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	20000aa8 	.word	0x20000aa8

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000aa8 	.word	0x20000aa8

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000010 	.word	0x20000010

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff3e 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5d 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff31 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff feb6 	bl	8002d84 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d008      	beq.n	8003038 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e052      	b.n	80030de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0216 	bic.w	r2, r2, #22
 8003046:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003056:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_DMA_Abort+0x62>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003088:	e013      	b.n	80030b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308a:	f7ff fe7b 	bl	8002d84 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b05      	cmp	r3, #5
 8003096:	d90c      	bls.n	80030b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e015      	b.n	80030de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e4      	bne.n	800308a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	223f      	movs	r2, #63	; 0x3f
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d004      	beq.n	8003104 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e00c      	b.n	800311e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2205      	movs	r2, #5
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06c      	b.n	8003218 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2223      	movs	r2, #35	; 0x23
 800314c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fe fecd 	bl	8001ef0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_ETH_Init+0xf4>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a30      	ldr	r2, [pc, #192]	; (8003220 <HAL_ETH_Init+0xf4>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_ETH_Init+0xf4>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <HAL_ETH_Init+0xf8>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <HAL_ETH_Init+0xf8>)
 8003178:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800317c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_ETH_Init+0xf8>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4927      	ldr	r1, [pc, #156]	; (8003224 <HAL_ETH_Init+0xf8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_ETH_Init+0xf8>)
 800318e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a8:	f7ff fdec 	bl	8002d84 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031ae:	e011      	b.n	80031d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031b0:	f7ff fde8 	bl	8002d84 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031be:	d909      	bls.n	80031d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2204      	movs	r2, #4
 80031c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	22e0      	movs	r2, #224	; 0xe0
 80031cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e021      	b.n	8003218 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e4      	bne.n	80031b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f958 	bl	800349c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9ff 	bl	80035f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa55 	bl	80036a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	461a      	mov	r2, r3
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f9bd 	bl	8003580 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2210      	movs	r2, #16
 8003212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800

08003228 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <ETH_SetMACConfig+0x15c>)
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	7c1b      	ldrb	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <ETH_SetMACConfig+0x28>
 800324a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800324e:	e000      	b.n	8003252 <ETH_SetMACConfig+0x2a>
 8003250:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	7c5b      	ldrb	r3, [r3, #17]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <ETH_SetMACConfig+0x38>
 800325a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800325e:	e000      	b.n	8003262 <ETH_SetMACConfig+0x3a>
 8003260:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003262:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003268:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	7fdb      	ldrb	r3, [r3, #31]
 800326e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003270:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003276:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	7f92      	ldrb	r2, [r2, #30]
 800327c:	2a00      	cmp	r2, #0
 800327e:	d102      	bne.n	8003286 <ETH_SetMACConfig+0x5e>
 8003280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003284:	e000      	b.n	8003288 <ETH_SetMACConfig+0x60>
 8003286:	2200      	movs	r2, #0
                        macconf->Speed |
 8003288:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	7f1b      	ldrb	r3, [r3, #28]
 800328e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003290:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003296:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	791b      	ldrb	r3, [r3, #4]
 800329c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800329e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	d102      	bne.n	80032b0 <ETH_SetMACConfig+0x88>
 80032aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ae:	e000      	b.n	80032b2 <ETH_SetMACConfig+0x8a>
 80032b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	7bdb      	ldrb	r3, [r3, #15]
 80032b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032ca:	4313      	orrs	r3, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f7ff fd5a 	bl	8002d9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003306:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800330e:	2a00      	cmp	r2, #0
 8003310:	d101      	bne.n	8003316 <ETH_SetMACConfig+0xee>
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	e000      	b.n	8003318 <ETH_SetMACConfig+0xf0>
 8003316:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003318:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800331e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003326:	2a01      	cmp	r2, #1
 8003328:	d101      	bne.n	800332e <ETH_SetMACConfig+0x106>
 800332a:	2208      	movs	r2, #8
 800332c:	e000      	b.n	8003330 <ETH_SetMACConfig+0x108>
 800332e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003330:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003338:	2a01      	cmp	r2, #1
 800333a:	d101      	bne.n	8003340 <ETH_SetMACConfig+0x118>
 800333c:	2204      	movs	r2, #4
 800333e:	e000      	b.n	8003342 <ETH_SetMACConfig+0x11a>
 8003340:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800334a:	2a01      	cmp	r2, #1
 800334c:	d101      	bne.n	8003352 <ETH_SetMACConfig+0x12a>
 800334e:	2202      	movs	r2, #2
 8003350:	e000      	b.n	8003354 <ETH_SetMACConfig+0x12c>
 8003352:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003354:	4313      	orrs	r3, r2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800336c:	2001      	movs	r0, #1
 800336e:	f7ff fd15 	bl	8002d9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	ff20810f 	.word	0xff20810f

08003388 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <ETH_SetDMAConfig+0x110>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	7b1b      	ldrb	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <ETH_SetDMAConfig+0x2c>
 80033ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033b2:	e000      	b.n	80033b6 <ETH_SetDMAConfig+0x2e>
 80033b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	7b5b      	ldrb	r3, [r3, #13]
 80033ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	7f52      	ldrb	r2, [r2, #29]
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	d102      	bne.n	80033cc <ETH_SetDMAConfig+0x44>
 80033c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ca:	e000      	b.n	80033ce <ETH_SetDMAConfig+0x46>
 80033cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	7b9b      	ldrb	r3, [r3, #14]
 80033d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	7f1b      	ldrb	r3, [r3, #28]
 80033e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	7f9b      	ldrb	r3, [r3, #30]
 80033ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033fc:	4313      	orrs	r3, r2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340c:	461a      	mov	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800341e:	2001      	movs	r0, #1
 8003420:	f7ff fcbc 	bl	8002d9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342c:	461a      	mov	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800343c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003442:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003448:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003450:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003452:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800345a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003460:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800346a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800346e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800347c:	2001      	movs	r0, #1
 800347e:	f7ff fc8d 	bl	8002d9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	f8de3f23 	.word	0xf8de3f23

0800349c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0a6      	sub	sp, #152	; 0x98
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034b0:	2300      	movs	r3, #0
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034d8:	2300      	movs	r3, #0
 80034da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe86 	bl	8003228 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800351c:	2301      	movs	r3, #1
 800351e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003520:	2301      	movs	r3, #1
 8003522:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003548:	2301      	movs	r3, #1
 800354a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800354c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003550:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003556:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800355c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff08 	bl	8003388 <ETH_SetDMAConfig>
}
 8003578:	bf00      	nop
 800357a:	3798      	adds	r7, #152	; 0x98
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3305      	adds	r3, #5
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	3204      	adds	r2, #4
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <ETH_MACAddressConfig+0x68>)
 80035a2:	4413      	add	r3, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3303      	adds	r3, #3
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	061a      	lsls	r2, r3, #24
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3302      	adds	r3, #2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3301      	adds	r3, #1
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	4313      	orrs	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <ETH_MACAddressConfig+0x6c>)
 80035d2:	4413      	add	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6013      	str	r3, [r2, #0]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40028040 	.word	0x40028040
 80035ec:	40028044 	.word	0x40028044

080035f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e03e      	b.n	800367c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68d9      	ldr	r1, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	3206      	adds	r2, #6
 8003630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d80c      	bhi.n	8003660 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e004      	b.n	800366a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3301      	adds	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d9bd      	bls.n	80035fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003694:	611a      	str	r2, [r3, #16]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e046      	b.n	800373e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6919      	ldr	r1, [r3, #16]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2200      	movs	r2, #0
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80036f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	3212      	adds	r2, #18
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d80c      	bhi.n	800372e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6919      	ldr	r1, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e004      	b.n	8003738 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d9b5      	bls.n	80036b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	60da      	str	r2, [r3, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e177      	b.n	8003a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f040 8166 	bne.w	8003a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d005      	beq.n	80037ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d130      	bne.n	8003830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 0201 	and.w	r2, r3, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b03      	cmp	r3, #3
 800383a:	d017      	beq.n	800386c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d123      	bne.n	80038c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3208      	adds	r2, #8
 8003880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	220f      	movs	r2, #15
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80c0 	beq.w	8003a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_GPIO_Init+0x324>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a65      	ldr	r2, [pc, #404]	; (8003aa0 <HAL_GPIO_Init+0x324>)
 800390c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_GPIO_Init+0x324>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800391e:	4a61      	ldr	r2, [pc, #388]	; (8003aa4 <HAL_GPIO_Init+0x328>)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3302      	adds	r3, #2
 8003926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	220f      	movs	r2, #15
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_GPIO_Init+0x32c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d037      	beq.n	80039ba <HAL_GPIO_Init+0x23e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_GPIO_Init+0x330>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d031      	beq.n	80039b6 <HAL_GPIO_Init+0x23a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_GPIO_Init+0x334>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d02b      	beq.n	80039b2 <HAL_GPIO_Init+0x236>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a55      	ldr	r2, [pc, #340]	; (8003ab4 <HAL_GPIO_Init+0x338>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d025      	beq.n	80039ae <HAL_GPIO_Init+0x232>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a54      	ldr	r2, [pc, #336]	; (8003ab8 <HAL_GPIO_Init+0x33c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <HAL_GPIO_Init+0x22e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a53      	ldr	r2, [pc, #332]	; (8003abc <HAL_GPIO_Init+0x340>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d019      	beq.n	80039a6 <HAL_GPIO_Init+0x22a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a52      	ldr	r2, [pc, #328]	; (8003ac0 <HAL_GPIO_Init+0x344>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_GPIO_Init+0x226>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_GPIO_Init+0x348>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00d      	beq.n	800399e <HAL_GPIO_Init+0x222>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_GPIO_Init+0x34c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <HAL_GPIO_Init+0x21e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4f      	ldr	r2, [pc, #316]	; (8003acc <HAL_GPIO_Init+0x350>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_GPIO_Init+0x21a>
 8003992:	2309      	movs	r3, #9
 8003994:	e012      	b.n	80039bc <HAL_GPIO_Init+0x240>
 8003996:	230a      	movs	r3, #10
 8003998:	e010      	b.n	80039bc <HAL_GPIO_Init+0x240>
 800399a:	2308      	movs	r3, #8
 800399c:	e00e      	b.n	80039bc <HAL_GPIO_Init+0x240>
 800399e:	2307      	movs	r3, #7
 80039a0:	e00c      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039a2:	2306      	movs	r3, #6
 80039a4:	e00a      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e008      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039aa:	2304      	movs	r3, #4
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039ae:	2303      	movs	r3, #3
 80039b0:	e004      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e002      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x240>
 80039ba:	2300      	movs	r3, #0
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f002 0203 	and.w	r2, r2, #3
 80039c2:	0092      	lsls	r2, r2, #2
 80039c4:	4093      	lsls	r3, r2
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <HAL_GPIO_Init+0x328>)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fe:	4a34      	ldr	r2, [pc, #208]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a28:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <HAL_GPIO_Init+0x354>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	f67f ae84 	bls.w	8003798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	40020800 	.word	0x40020800
 8003ab4:	40020c00 	.word	0x40020c00
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40021400 	.word	0x40021400
 8003ac0:	40021800 	.word	0x40021800
 8003ac4:	40021c00 	.word	0x40021c00
 8003ac8:	40022000 	.word	0x40022000
 8003acc:	40022400 	.word	0x40022400
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e001      	b.n	8003af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	041a      	lsls	r2, r3, #16
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	400b      	ands	r3, r1
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e12b      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fa72 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 fa20 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a81      	ldr	r2, [pc, #516]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a80      	ldr	r2, [pc, #512]	; (8003de4 <HAL_I2C_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <HAL_I2C_Init+0x27c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e7      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a78      	ldr	r2, [pc, #480]	; (8003dec <HAL_I2C_Init+0x280>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <HAL_I2C_Init+0x284>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	495c      	ldr	r1, [pc, #368]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d819      	bhi.n	8003ca8 <HAL_I2C_Init+0x13c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c88:	400b      	ands	r3, r1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_I2C_Init+0x138>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e59      	subs	r1, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	e051      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x168>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x18e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x196>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
 8003e04:	4613      	mov	r3, r2
 8003e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7fe ffbc 	bl	8002d84 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 80e0 	bne.w	8003fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	4970      	ldr	r1, [pc, #448]	; (8003fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f964 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0d3      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x50>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0cc      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d007      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2221      	movs	r2, #33	; 0x21
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a50      	ldr	r2, [pc, #320]	; (8003fec <HAL_I2C_Master_Transmit+0x1f8>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f89c 	bl	8003ff0 <I2C_MasterRequestWrite>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08d      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ed8:	e066      	b.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f9de 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06b      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f9ce 	bl	8004322 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01a      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d194      	bne.n	8003eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d006      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d003      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004018:	d108      	bne.n	800402c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e00b      	b.n	8004044 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	2b12      	cmp	r3, #18
 8004032:	d107      	bne.n	8004044 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f84f 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d103      	bne.n	8004074 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e035      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004090:	611a      	str	r2, [r3, #16]
 8004092:	e01b      	b.n	80040cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	11db      	asrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 030f 	orn	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	490e      	ldr	r1, [pc, #56]	; (80040ec <I2C_MasterRequestWrite+0xfc>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f875 	bl	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e010      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4907      	ldr	r1, [pc, #28]	; (80040f0 <I2C_MasterRequestWrite+0x100>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f865 	bl	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010008 	.word	0x00010008
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e025      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d021      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe fe39 	bl	8002d84 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e023      	b.n	800419a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10d      	bne.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	e00c      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d0b6      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b0:	e051      	b.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d123      	bne.n	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e046      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d021      	beq.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fdb7 	bl	8002d84 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d116      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e020      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10c      	bne.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e00b      	b.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d18d      	bne.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f878 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e02d      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fd5d 	bl	8002d84 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e007      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d1ca      	bne.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432e:	e02d      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f837 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e02d      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d021      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fe fd1c 	bl	8002d84 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d1ca      	bne.n	8004330 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d11b      	bne.n	80043f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b20      	cmp	r3, #32
 8004416:	d129      	bne.n	800446c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0210 	bic.w	r2, r2, #16
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b20      	cmp	r3, #32
 8004492:	d12a      	bne.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	f023 030f 	bic.w	r3, r3, #15
 80044ba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	89fb      	ldrh	r3, [r7, #14]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	89fa      	ldrh	r2, [r7, #14]
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b08f      	sub	sp, #60	; 0x3c
 80044fc:	af0a      	add	r7, sp, #40	; 0x28
 80044fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e10f      	b.n	800472a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fd ffb9 	bl	800249c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2203      	movs	r2, #3
 800452e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f003 fb24 	bl	8007b96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	687e      	ldr	r6, [r7, #4]
 8004556:	466d      	mov	r5, sp
 8004558:	f106 0410 	add.w	r4, r6, #16
 800455c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800455e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004564:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004568:	e885 0003 	stmia.w	r5, {r0, r1}
 800456c:	1d33      	adds	r3, r6, #4
 800456e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004570:	6838      	ldr	r0, [r7, #0]
 8004572:	f003 faaf 	bl	8007ad4 <USB_CoreInit>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0d0      	b.n	800472a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f003 fb12 	bl	8007bb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	e04a      	b.n	8004630 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	333d      	adds	r3, #61	; 0x3d
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	333c      	adds	r3, #60	; 0x3c
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	b298      	uxth	r0, r3
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3344      	adds	r3, #68	; 0x44
 80045d6:	4602      	mov	r2, r0
 80045d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3340      	adds	r3, #64	; 0x40
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3348      	adds	r3, #72	; 0x48
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	334c      	adds	r3, #76	; 0x4c
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	3354      	adds	r3, #84	; 0x54
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	3301      	adds	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3af      	bcc.n	800459a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e044      	b.n	80046ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3301      	adds	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3b5      	bcc.n	8004640 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	687e      	ldr	r6, [r7, #4]
 80046dc:	466d      	mov	r5, sp
 80046de:	f106 0410 	add.w	r4, r6, #16
 80046e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80046f2:	1d33      	adds	r3, r6, #4
 80046f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f6:	6838      	ldr	r0, [r7, #0]
 80046f8:	f003 faaa 	bl	8007c50 <USB_DevInit>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00d      	b.n	800472a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fc75 	bl	8008012 <USB_DevDisconnect>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e267      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d075      	beq.n	800483e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b04      	cmp	r3, #4
 800475c:	d00c      	beq.n	8004778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475e:	4b85      	ldr	r3, [pc, #532]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004766:	2b08      	cmp	r3, #8
 8004768:	d112      	bne.n	8004790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476a:	4b82      	ldr	r3, [pc, #520]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004776:	d10b      	bne.n	8004790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4b7e      	ldr	r3, [pc, #504]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05b      	beq.n	800483c <HAL_RCC_OscConfig+0x108>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d157      	bne.n	800483c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e242      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004798:	d106      	bne.n	80047a8 <HAL_RCC_OscConfig+0x74>
 800479a:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a75      	ldr	r2, [pc, #468]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e01d      	b.n	80047e4 <HAL_RCC_OscConfig+0xb0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x98>
 80047b2:	4b70      	ldr	r3, [pc, #448]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6f      	ldr	r2, [pc, #444]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a6c      	ldr	r2, [pc, #432]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0xb0>
 80047cc:	4b69      	ldr	r3, [pc, #420]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a68      	ldr	r2, [pc, #416]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b66      	ldr	r3, [pc, #408]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80047de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fe faca 	bl	8002d84 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fe fac6 	bl	8002d84 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e207      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xc0>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fe fab6 	bl	8002d84 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481c:	f7fe fab2 	bl	8002d84 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	; 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1f3      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0xe8>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d063      	beq.n	8004912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484a:	4b4a      	ldr	r3, [pc, #296]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b47      	ldr	r3, [pc, #284]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800485e:	2b08      	cmp	r3, #8
 8004860:	d11c      	bne.n	800489c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004862:	4b44      	ldr	r3, [pc, #272]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d116      	bne.n	800489c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x152>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d001      	beq.n	8004886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e1c7      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4937      	ldr	r1, [pc, #220]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	e03a      	b.n	8004912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_OscConfig+0x244>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fe fa6b 	bl	8002d84 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fe fa67 	bl	8002d84 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1a8      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4925      	ldr	r1, [pc, #148]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
 80048e4:	e015      	b.n	8004912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <HAL_RCC_OscConfig+0x244>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fe fa4a 	bl	8002d84 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fe fa46 	bl	8002d84 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e187      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d036      	beq.n	800498c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <HAL_RCC_OscConfig+0x248>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fe fa2a 	bl	8002d84 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004934:	f7fe fa26 	bl	8002d84 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e167      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_RCC_OscConfig+0x240>)
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x200>
 8004952:	e01b      	b.n	800498c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_OscConfig+0x248>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495a:	f7fe fa13 	bl	8002d84 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	e00e      	b.n	8004980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004962:	f7fe fa0f 	bl	8002d84 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d907      	bls.n	8004980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e150      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
 8004974:	40023800 	.word	0x40023800
 8004978:	42470000 	.word	0x42470000
 800497c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004980:	4b88      	ldr	r3, [pc, #544]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ea      	bne.n	8004962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8097 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800499a:	2300      	movs	r3, #0
 800499c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499e:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	4b7d      	ldr	r3, [pc, #500]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a7c      	ldr	r2, [pc, #496]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b7a      	ldr	r3, [pc, #488]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ca:	4b77      	ldr	r3, [pc, #476]	; (8004ba8 <HAL_RCC_OscConfig+0x474>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d118      	bne.n	8004a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d6:	4b74      	ldr	r3, [pc, #464]	; (8004ba8 <HAL_RCC_OscConfig+0x474>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a73      	ldr	r2, [pc, #460]	; (8004ba8 <HAL_RCC_OscConfig+0x474>)
 80049dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e2:	f7fe f9cf 	bl	8002d84 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ea:	f7fe f9cb 	bl	8002d84 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e10c      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fc:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <HAL_RCC_OscConfig+0x474>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2ea>
 8004a10:	4b64      	ldr	r3, [pc, #400]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	4a63      	ldr	r2, [pc, #396]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1c:	e01c      	b.n	8004a58 <HAL_RCC_OscConfig+0x324>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x30c>
 8004a26:	4b5f      	ldr	r3, [pc, #380]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4a5e      	ldr	r2, [pc, #376]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	f043 0304 	orr.w	r3, r3, #4
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70
 8004a32:	4b5c      	ldr	r3, [pc, #368]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	4a5b      	ldr	r2, [pc, #364]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3e:	e00b      	b.n	8004a58 <HAL_RCC_OscConfig+0x324>
 8004a40:	4b58      	ldr	r3, [pc, #352]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	4a57      	ldr	r2, [pc, #348]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4c:	4b55      	ldr	r3, [pc, #340]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	4a54      	ldr	r2, [pc, #336]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a52:	f023 0304 	bic.w	r3, r3, #4
 8004a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fe f990 	bl	8002d84 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe f98c 	bl	8002d84 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0cb      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7e:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0ee      	beq.n	8004a68 <HAL_RCC_OscConfig+0x334>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8c:	f7fe f97a 	bl	8002d84 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a94:	f7fe f976 	bl	8002d84 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0b5      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aaa:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ee      	bne.n	8004a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abc:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80a1 	beq.w	8004c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d05c      	beq.n	8004b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d141      	bne.n	8004b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_RCC_OscConfig+0x478>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fe f94a 	bl	8002d84 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fe f946 	bl	8002d84 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e087      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	019b      	lsls	r3, r3, #6
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x478>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fe f91f 	bl	8002d84 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fe f91b 	bl	8002d84 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e05c      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x416>
 8004b68:	e054      	b.n	8004c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCC_OscConfig+0x478>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b70:	f7fe f908 	bl	8002d84 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fe f904 	bl	8002d84 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e045      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x444>
 8004b96:	e03d      	b.n	8004c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e038      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x4ec>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d028      	beq.n	8004c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d121      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d11a      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800

08004c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0cc      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b68      	ldr	r3, [pc, #416]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d90c      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b65      	ldr	r3, [pc, #404]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b8      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b59      	ldr	r3, [pc, #356]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c90:	4b53      	ldr	r3, [pc, #332]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a52      	ldr	r2, [pc, #328]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	494d      	ldr	r1, [pc, #308]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d044      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d119      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e07f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e06f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e067      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4b37      	ldr	r3, [pc, #220]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f023 0203 	bic.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4934      	ldr	r1, [pc, #208]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d14:	f7fe f836 	bl	8002d84 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fe f832 	bl	8002d84 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	4b2b      	ldr	r3, [pc, #172]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 020c 	and.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1eb      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d20c      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e032      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4916      	ldr	r1, [pc, #88]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	490e      	ldr	r1, [pc, #56]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004daa:	f000 f821 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004dae:	4602      	mov	r2, r0
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	490a      	ldr	r1, [pc, #40]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004dbc:	5ccb      	ldrb	r3, [r1, r3]
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1c8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd ff96 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023c00 	.word	0x40023c00
 8004de0:	40023800 	.word	0x40023800
 8004de4:	08009504 	.word	0x08009504
 8004de8:	20000008 	.word	0x20000008
 8004dec:	2000000c 	.word	0x2000000c

08004df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b094      	sub	sp, #80	; 0x50
 8004df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e00:	2300      	movs	r3, #0
 8004e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e08:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d00d      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x40>
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	f200 80e1 	bhi.w	8004fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e22:	e0db      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b73      	ldr	r3, [pc, #460]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e28:	e0db      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2a:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e2e:	e0d8      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e30:	4b6f      	ldr	r3, [pc, #444]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d063      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	f04f 0000 	mov.w	r0, #0
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	0159      	lsls	r1, r3, #5
 8004e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e74:	0150      	lsls	r0, r2, #5
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	1a51      	subs	r1, r2, r1
 8004e7e:	6139      	str	r1, [r7, #16]
 8004e80:	4629      	mov	r1, r5
 8004e82:	eb63 0301 	sbc.w	r3, r3, r1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e94:	4659      	mov	r1, fp
 8004e96:	018b      	lsls	r3, r1, #6
 8004e98:	4651      	mov	r1, sl
 8004e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	018a      	lsls	r2, r1, #6
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec2:	4690      	mov	r8, r2
 8004ec4:	4699      	mov	r9, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb18 0303 	adds.w	r3, r8, r3
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	462b      	mov	r3, r5
 8004ed0:	eb49 0303 	adc.w	r3, r9, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	024b      	lsls	r3, r1, #9
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eec:	4621      	mov	r1, r4
 8004eee:	024a      	lsls	r2, r1, #9
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f00:	f7fb fdbc 	bl	8000a7c <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4613      	mov	r3, r2
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	e058      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0e:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	099b      	lsrs	r3, r3, #6
 8004f14:	2200      	movs	r2, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	4611      	mov	r1, r2
 8004f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	f04f 0000 	mov.w	r0, #0
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	0159      	lsls	r1, r3, #5
 8004f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f3a:	0150      	lsls	r0, r2, #5
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4641      	mov	r1, r8
 8004f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f60:	ebb2 040a 	subs.w	r4, r2, sl
 8004f64:	eb63 050b 	sbc.w	r5, r3, fp
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	00eb      	lsls	r3, r5, #3
 8004f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f76:	00e2      	lsls	r2, r4, #3
 8004f78:	4614      	mov	r4, r2
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	18e3      	adds	r3, r4, r3
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	464b      	mov	r3, r9
 8004f84:	eb45 0303 	adc.w	r3, r5, r3
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f96:	4629      	mov	r1, r5
 8004f98:	028b      	lsls	r3, r1, #10
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	028a      	lsls	r2, r1, #10
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004faa:	2200      	movs	r2, #0
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	61fa      	str	r2, [r7, #28]
 8004fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb4:	f7fb fd62 	bl	8000a7c <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	3301      	adds	r3, #1
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fda:	e002      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3750      	adds	r7, #80	; 0x50
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b03      	ldr	r3, [pc, #12]	; (8005010 <HAL_RCC_GetHCLKFreq+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000008 	.word	0x20000008

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005018:	f7ff fff0 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0a9b      	lsrs	r3, r3, #10
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4903      	ldr	r1, [pc, #12]	; (8005038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40023800 	.word	0x40023800
 8005038:	08009514 	.word	0x08009514

0800503c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005040:	f7ff ffdc 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	0b5b      	lsrs	r3, r3, #13
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4903      	ldr	r1, [pc, #12]	; (8005060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40023800 	.word	0x40023800
 8005060:	08009514 	.word	0x08009514

08005064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e041      	b.n	80050fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fd f8b4 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 ffd4 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e04e      	b.n	80051ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a23      	ldr	r2, [pc, #140]	; (80051c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d01d      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_Base_Start_IT+0xc8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d010      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40001800 	.word	0x40001800

080051e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e041      	b.n	800527a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc ff7e 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 ff14 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x24>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e022      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d109      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x3e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e015      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d109      	bne.n	80052dc <HAL_TIM_PWM_Start+0x58>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e008      	b.n	80052ee <HAL_TIM_PWM_Start+0x6a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07c      	b.n	80053f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0x82>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	e013      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0x92>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	e00b      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	e003      	b.n	800532e <HAL_TIM_PWM_Start+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fa9e 	bl	8006878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2d      	ldr	r2, [pc, #180]	; (80053f8 <HAL_TIM_PWM_Start+0x174>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_PWM_Start+0xcc>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <HAL_TIM_PWM_Start+0x178>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_TIM_PWM_Start+0xd0>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_TIM_PWM_Start+0xd2>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_TIM_PWM_Start+0x174>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d01d      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_TIM_PWM_Start+0x17c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <HAL_TIM_PWM_Start+0x180>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIM_PWM_Start+0x184>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <HAL_TIM_PWM_Start+0x178>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_TIM_PWM_Start+0x188>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_TIM_PWM_Start+0x18c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d010      	beq.n	80053ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	e007      	b.n	80053ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40001800 	.word	0x40001800

08005414 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start_IT+0x28>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e022      	b.n	8005482 <HAL_TIM_PWM_Start_IT+0x6e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d109      	bne.n	8005456 <HAL_TIM_PWM_Start_IT+0x42>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	bf14      	ite	ne
 800544e:	2301      	movne	r3, #1
 8005450:	2300      	moveq	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e015      	b.n	8005482 <HAL_TIM_PWM_Start_IT+0x6e>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start_IT+0x5c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e008      	b.n	8005482 <HAL_TIM_PWM_Start_IT+0x6e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0c7      	b.n	800561a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start_IT+0x86>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005498:	e013      	b.n	80054c2 <HAL_TIM_PWM_Start_IT+0xae>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start_IT+0x96>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	e00b      	b.n	80054c2 <HAL_TIM_PWM_Start_IT+0xae>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start_IT+0xa6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b8:	e003      	b.n	80054c2 <HAL_TIM_PWM_Start_IT+0xae>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	d841      	bhi.n	800554c <HAL_TIM_PWM_Start_IT+0x138>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005505 	.word	0x08005505
 80054d4:	0800554d 	.word	0x0800554d
 80054d8:	0800554d 	.word	0x0800554d
 80054dc:	0800554d 	.word	0x0800554d
 80054e0:	08005517 	.word	0x08005517
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	0800554d 	.word	0x0800554d
 80054f0:	08005529 	.word	0x08005529
 80054f4:	0800554d 	.word	0x0800554d
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	0800553b 	.word	0x0800553b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0202 	orr.w	r2, r2, #2
 8005512:	60da      	str	r2, [r3, #12]
      break;
 8005514:	e01d      	b.n	8005552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0204 	orr.w	r2, r2, #4
 8005524:	60da      	str	r2, [r3, #12]
      break;
 8005526:	e014      	b.n	8005552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0208 	orr.w	r2, r2, #8
 8005536:	60da      	str	r2, [r3, #12]
      break;
 8005538:	e00b      	b.n	8005552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0210 	orr.w	r2, r2, #16
 8005548:	60da      	str	r2, [r3, #12]
      break;
 800554a:	e002      	b.n	8005552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	bf00      	nop
  }

  if (status == HAL_OK)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d15f      	bne.n	8005618 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2201      	movs	r2, #1
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f001 f989 	bl	8006878 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_TIM_PWM_Start_IT+0x210>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIM_PWM_Start_IT+0x166>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <HAL_TIM_PWM_Start_IT+0x214>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_Start_IT+0x16a>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <HAL_TIM_PWM_Start_IT+0x16c>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_TIM_PWM_Start_IT+0x210>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d022      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d01d      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_TIM_PWM_Start_IT+0x218>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d018      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <HAL_TIM_PWM_Start_IT+0x21c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_TIM_PWM_Start_IT+0x220>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_TIM_PWM_Start_IT+0x214>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_PWM_Start_IT+0x224>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <HAL_TIM_PWM_Start_IT+0x228>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d111      	bne.n	8005608 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b06      	cmp	r3, #6
 80055f4:	d010      	beq.n	8005618 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	e007      	b.n	8005618 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40001800 	.word	0x40001800

08005640 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e041      	b.n	80056d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc fd76 	bl	8002158 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fce6 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_IC_Start_IT+0x1e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e013      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x46>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d104      	bne.n	800570e <HAL_TIM_IC_Start_IT+0x2e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e00b      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x46>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Start_IT+0x3e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e003      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x46>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005724:	b2db      	uxtb	r3, r3
 8005726:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IC_Start_IT+0x58>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e013      	b.n	8005760 <HAL_TIM_IC_Start_IT+0x80>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d104      	bne.n	8005748 <HAL_TIM_IC_Start_IT+0x68>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e00b      	b.n	8005760 <HAL_TIM_IC_Start_IT+0x80>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b08      	cmp	r3, #8
 800574c:	d104      	bne.n	8005758 <HAL_TIM_IC_Start_IT+0x78>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e003      	b.n	8005760 <HAL_TIM_IC_Start_IT+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575e:	b2db      	uxtb	r3, r3
 8005760:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005768:	7b7b      	ldrb	r3, [r7, #13]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0cc      	b.n	800590c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	e013      	b.n	80057aa <HAL_TIM_IC_Start_IT+0xca>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0xb2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005790:	e00b      	b.n	80057aa <HAL_TIM_IC_Start_IT+0xca>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_IC_Start_IT+0xc2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a0:	e003      	b.n	80057aa <HAL_TIM_IC_Start_IT+0xca>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0xda>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b8:	e013      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x102>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0xea>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c8:	e00b      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x102>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0xfa>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	e003      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x102>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d841      	bhi.n	800586c <HAL_TIM_IC_Start_IT+0x18c>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <HAL_TIM_IC_Start_IT+0x110>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005825 	.word	0x08005825
 80057f4:	0800586d 	.word	0x0800586d
 80057f8:	0800586d 	.word	0x0800586d
 80057fc:	0800586d 	.word	0x0800586d
 8005800:	08005837 	.word	0x08005837
 8005804:	0800586d 	.word	0x0800586d
 8005808:	0800586d 	.word	0x0800586d
 800580c:	0800586d 	.word	0x0800586d
 8005810:	08005849 	.word	0x08005849
 8005814:	0800586d 	.word	0x0800586d
 8005818:	0800586d 	.word	0x0800586d
 800581c:	0800586d 	.word	0x0800586d
 8005820:	0800585b 	.word	0x0800585b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0202 	orr.w	r2, r2, #2
 8005832:	60da      	str	r2, [r3, #12]
      break;
 8005834:	e01d      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0204 	orr.w	r2, r2, #4
 8005844:	60da      	str	r2, [r3, #12]
      break;
 8005846:	e014      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0208 	orr.w	r2, r2, #8
 8005856:	60da      	str	r2, [r3, #12]
      break;
 8005858:	e00b      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0210 	orr.w	r2, r2, #16
 8005868:	60da      	str	r2, [r3, #12]
      break;
 800586a:	e002      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	bf00      	nop
  }

  if (status == HAL_OK)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d148      	bne.n	800590a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fff9 	bl	8006878 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a22      	ldr	r2, [pc, #136]	; (8005914 <HAL_TIM_IC_Start_IT+0x234>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d01d      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_TIM_IC_Start_IT+0x238>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_TIM_IC_Start_IT+0x23c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <HAL_TIM_IC_Start_IT+0x240>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a19      	ldr	r2, [pc, #100]	; (8005924 <HAL_TIM_IC_Start_IT+0x244>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a18      	ldr	r2, [pc, #96]	; (8005928 <HAL_TIM_IC_Start_IT+0x248>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIM_IC_Start_IT+0x24c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d111      	bne.n	80058fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d010      	beq.n	800590a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f8:	e007      	b.n	800590a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400
 8005928:	40014000 	.word	0x40014000
 800592c:	40001800 	.word	0x40001800

08005930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d122      	bne.n	800598c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0202 	mvn.w	r2, #2
 800595c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fd f8c6 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb4a 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb51 	bl	8006028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0204 	mvn.w	r2, #4
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fd f89c 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb20 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb27 	bl	8006028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0208 	mvn.w	r2, #8
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fd f872 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 faf6 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fafd 	bl	8006028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0210 	mvn.w	r2, #16
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fd f848 	bl	8002b04 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 facc 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fad3 	bl	8006028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10e      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0201 	mvn.w	r2, #1
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fd48 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d107      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 ff78 	bl	80069d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa98 	bl	800603c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0220 	mvn.w	r2, #32
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 ff42 	bl	80069bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e088      	b.n	8005c70 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f000 fcb8 	bl	80064f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 020c 	bic.w	r2, r2, #12
 8005b8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	619a      	str	r2, [r3, #24]
 8005ba2:	e060      	b.n	8005c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d11c      	bne.n	8005be4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f000 fd3c 	bl	8006636 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bcc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6999      	ldr	r1, [r3, #24]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	021a      	lsls	r2, r3, #8
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e040      	b.n	8005c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d11b      	bne.n	8005c22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6819      	ldr	r1, [r3, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f000 fd89 	bl	8006710 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 020c 	bic.w	r2, r2, #12
 8005c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
 8005c20:	e021      	b.n	8005c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d11c      	bne.n	8005c62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f000 fda6 	bl	8006788 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69d9      	ldr	r1, [r3, #28]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	61da      	str	r2, [r3, #28]
 8005c60:	e001      	b.n	8005c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0ae      	b.n	8005df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	f200 809f 	bhi.w	8005de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005de5 	.word	0x08005de5
 8005cb4:	08005de5 	.word	0x08005de5
 8005cb8:	08005de5 	.word	0x08005de5
 8005cbc:	08005d21 	.word	0x08005d21
 8005cc0:	08005de5 	.word	0x08005de5
 8005cc4:	08005de5 	.word	0x08005de5
 8005cc8:	08005de5 	.word	0x08005de5
 8005ccc:	08005d63 	.word	0x08005d63
 8005cd0:	08005de5 	.word	0x08005de5
 8005cd4:	08005de5 	.word	0x08005de5
 8005cd8:	08005de5 	.word	0x08005de5
 8005cdc:	08005da3 	.word	0x08005da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fa52 	bl	8006190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	619a      	str	r2, [r3, #24]
      break;
 8005d1e:	e064      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 faa2 	bl	8006270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]
      break;
 8005d60:	e043      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 faf7 	bl	800635c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0208 	orr.w	r2, r2, #8
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0204 	bic.w	r2, r2, #4
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	61da      	str	r2, [r3, #28]
      break;
 8005da0:	e023      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fb4b 	bl	8006444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69d9      	ldr	r1, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	021a      	lsls	r2, r3, #8
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	61da      	str	r2, [r3, #28]
      break;
 8005de2:	e002      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x1c>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e0b4      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x186>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	d03e      	beq.n	8005ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e56:	f200 8087 	bhi.w	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	f000 8086 	beq.w	8005f6e <HAL_TIM_ConfigClockSource+0x172>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d87f      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b70      	cmp	r3, #112	; 0x70
 8005e6a:	d01a      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d87b      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e70:	2b60      	cmp	r3, #96	; 0x60
 8005e72:	d050      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x11a>
 8005e74:	2b60      	cmp	r3, #96	; 0x60
 8005e76:	d877      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b50      	cmp	r3, #80	; 0x50
 8005e7a:	d03c      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e7c:	2b50      	cmp	r3, #80	; 0x50
 8005e7e:	d873      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d058      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x13a>
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d86f      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b30      	cmp	r3, #48	; 0x30
 8005e8a:	d064      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e8c:	2b30      	cmp	r3, #48	; 0x30
 8005e8e:	d86b      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d060      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d867      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d05c      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d05a      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	e062      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6899      	ldr	r1, [r3, #8]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f000 fcc1 	bl	8006838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	609a      	str	r2, [r3, #8]
      break;
 8005ece:	e04f      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6899      	ldr	r1, [r3, #8]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f000 fcaa 	bl	8006838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef2:	609a      	str	r2, [r3, #8]
      break;
 8005ef4:	e03c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 fb68 	bl	80065d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2150      	movs	r1, #80	; 0x50
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fc77 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005f14:	e02c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 fbc4 	bl	80066b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2160      	movs	r1, #96	; 0x60
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fc67 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005f34:	e01c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fb48 	bl	80065d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2140      	movs	r1, #64	; 0x40
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fc57 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e00c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f000 fc4e 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005f66:	e003      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6c:	e000      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	d831      	bhi.n	8006004 <HAL_TIM_ReadCapturedValue+0x78>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08005fe7 	.word	0x08005fe7
 8005fbc:	08006005 	.word	0x08006005
 8005fc0:	08006005 	.word	0x08006005
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08006005 	.word	0x08006005
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	60fb      	str	r3, [r7, #12]

      break;
 8005fe4:	e00f      	b.n	8006006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	60fb      	str	r3, [r7, #12]

      break;
 8005fee:	e00a      	b.n	8006006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	60fb      	str	r3, [r7, #12]

      break;
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	60fb      	str	r3, [r7, #12]

      break;
 8006002:	e000      	b.n	8006006 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006004:	bf00      	nop
  }

  return tmpreg;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a40      	ldr	r2, [pc, #256]	; (8006164 <TIM_Base_SetConfig+0x114>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d00f      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3d      	ldr	r2, [pc, #244]	; (8006168 <TIM_Base_SetConfig+0x118>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3c      	ldr	r2, [pc, #240]	; (800616c <TIM_Base_SetConfig+0x11c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3b      	ldr	r2, [pc, #236]	; (8006170 <TIM_Base_SetConfig+0x120>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3a      	ldr	r2, [pc, #232]	; (8006174 <TIM_Base_SetConfig+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <TIM_Base_SetConfig+0x114>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d027      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2c      	ldr	r2, [pc, #176]	; (8006168 <TIM_Base_SetConfig+0x118>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d023      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2b      	ldr	r2, [pc, #172]	; (800616c <TIM_Base_SetConfig+0x11c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01f      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2a      	ldr	r2, [pc, #168]	; (8006170 <TIM_Base_SetConfig+0x120>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a29      	ldr	r2, [pc, #164]	; (8006174 <TIM_Base_SetConfig+0x124>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d017      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a28      	ldr	r2, [pc, #160]	; (8006178 <TIM_Base_SetConfig+0x128>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a27      	ldr	r2, [pc, #156]	; (800617c <TIM_Base_SetConfig+0x12c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00f      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a26      	ldr	r2, [pc, #152]	; (8006180 <TIM_Base_SetConfig+0x130>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a25      	ldr	r2, [pc, #148]	; (8006184 <TIM_Base_SetConfig+0x134>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a24      	ldr	r2, [pc, #144]	; (8006188 <TIM_Base_SetConfig+0x138>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a23      	ldr	r2, [pc, #140]	; (800618c <TIM_Base_SetConfig+0x13c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <TIM_Base_SetConfig+0x114>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0xf8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <TIM_Base_SetConfig+0x124>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	615a      	str	r2, [r3, #20]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40010000 	.word	0x40010000
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00
 8006174:	40010400 	.word	0x40010400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	40001800 	.word	0x40001800
 8006188:	40001c00 	.word	0x40001c00
 800618c:	40002000 	.word	0x40002000

08006190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 0302 	bic.w	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a20      	ldr	r2, [pc, #128]	; (8006268 <TIM_OC1_SetConfig+0xd8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC1_SetConfig+0x64>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1f      	ldr	r2, [pc, #124]	; (800626c <TIM_OC1_SetConfig+0xdc>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10c      	bne.n	800620e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0308 	bic.w	r3, r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 0304 	bic.w	r3, r3, #4
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_OC1_SetConfig+0xd8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC1_SetConfig+0x8e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_OC1_SetConfig+0xdc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d111      	bne.n	8006242 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400

08006270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0210 	bic.w	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a22      	ldr	r2, [pc, #136]	; (8006354 <TIM_OC2_SetConfig+0xe4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC2_SetConfig+0x68>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a21      	ldr	r2, [pc, #132]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10d      	bne.n	80062f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <TIM_OC2_SetConfig+0xe4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC2_SetConfig+0x94>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a16      	ldr	r2, [pc, #88]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d113      	bne.n	800632c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40010400 	.word	0x40010400

0800635c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a21      	ldr	r2, [pc, #132]	; (800643c <TIM_OC3_SetConfig+0xe0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC3_SetConfig+0x66>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <TIM_OC3_SetConfig+0xe4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10d      	bne.n	80063de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a16      	ldr	r2, [pc, #88]	; (800643c <TIM_OC3_SetConfig+0xe0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_OC3_SetConfig+0x92>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a15      	ldr	r2, [pc, #84]	; (8006440 <TIM_OC3_SetConfig+0xe4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d113      	bne.n	8006416 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400

08006444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	031b      	lsls	r3, r3, #12
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <TIM_OC4_SetConfig+0xa4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC4_SetConfig+0x68>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a11      	ldr	r2, [pc, #68]	; (80064ec <TIM_OC4_SetConfig+0xa8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d109      	bne.n	80064c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	019b      	lsls	r3, r3, #6
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400

080064f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <TIM_TI1_SetConfig+0xcc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d017      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <TIM_TI1_SetConfig+0xd0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <TIM_TI1_SetConfig+0xd4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <TIM_TI1_SetConfig+0xd8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <TIM_TI1_SetConfig+0xdc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <TIM_TI1_SetConfig+0xe0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_TI1_SetConfig+0x66>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <TIM_TI1_SetConfig+0xe4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <TIM_TI1_SetConfig+0x6a>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <TIM_TI1_SetConfig+0x6c>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e003      	b.n	800657a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	b2db      	uxtb	r3, r3
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f023 030a 	bic.w	r3, r3, #10
 8006594:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f003 030a 	and.w	r3, r3, #10
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40010400 	.word	0x40010400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40001800 	.word	0x40001800

080065d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0201 	bic.w	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 030a 	bic.w	r3, r3, #10
 8006614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006636:	b480      	push	{r7}
 8006638:	b087      	sub	sp, #28
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0210 	bic.w	r2, r3, #16
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	b29b      	uxth	r3, r3
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006688:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f023 0210 	bic.w	r2, r3, #16
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	031b      	lsls	r3, r3, #12
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	b2db      	uxtb	r3, r3
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006760:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	031b      	lsls	r3, r3, #12
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	031b      	lsls	r3, r3, #12
 80067e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	f043 0307 	orr.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	431a      	orrs	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	2201      	movs	r2, #1
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	43db      	mvns	r3, r3
 800689a:	401a      	ands	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d8:	2302      	movs	r3, #2
 80068da:	e05a      	b.n	8006992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d022      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d01d      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d018      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00e      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d004      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d10c      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	4313      	orrs	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40010400 	.word	0x40010400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40001800 	.word	0x40001800

080069bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e03f      	b.n	8006a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb fcb8 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fddf 	bl	80075ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b08a      	sub	sp, #40	; 0x28
 8006a82:	af02      	add	r7, sp, #8
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d17c      	bne.n	8006b98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_UART_Transmit+0x2c>
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e075      	b.n	8006b9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Transmit+0x3e>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e06e      	b.n	8006b9a <HAL_UART_Transmit+0x11c>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2221      	movs	r2, #33	; 0x21
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad2:	f7fc f957 	bl	8002d84 <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d108      	bne.n	8006b00 <HAL_UART_Transmit+0x82>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e003      	b.n	8006b08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b10:	e02a      	b.n	8006b68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fb1f 	bl	8007160 <UART_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e036      	b.n	8006b9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	3302      	adds	r3, #2
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e007      	b.n	8006b5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1cf      	bne.n	8006b12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 faef 	bl	8007160 <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e006      	b.n	8006b9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e000      	b.n	8006b9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b98:	2302      	movs	r3, #2
  }
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	4613      	mov	r3, r2
 8006bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d11d      	bne.n	8006bf8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_UART_Receive_IT+0x26>
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e016      	b.n	8006bfa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Receive_IT+0x38>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e00f      	b.n	8006bfa <HAL_UART_Receive_IT+0x58>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	461a      	mov	r2, r3
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fb24 	bl	800723c <UART_Start_Receive_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	e000      	b.n	8006bfa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bf8:	2302      	movs	r3, #2
  }
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b0ba      	sub	sp, #232	; 0xe8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_UART_IRQHandler+0x66>
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc07 	bl	8007476 <UART_Receive_IT>
      return;
 8006c68:	e256      	b.n	8007118 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80de 	beq.w	8006e30 <HAL_UART_IRQHandler+0x22c>
 8006c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80d1 	beq.w	8006e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xae>
 8006c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0201 	orr.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <HAL_UART_IRQHandler+0xd2>
 8006cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f043 0202 	orr.w	r2, r3, #2
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <HAL_UART_IRQHandler+0xf6>
 8006ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f043 0204 	orr.w	r2, r3, #4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d011      	beq.n	8006d2a <HAL_UART_IRQHandler+0x126>
 8006d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f043 0208 	orr.w	r2, r3, #8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 81ed 	beq.w	800710e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_UART_IRQHandler+0x14e>
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fb92 	bl	8007476 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <HAL_UART_IRQHandler+0x17a>
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d04f      	beq.n	8006e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa9a 	bl	80072b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d141      	bne.n	8006e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1d9      	bne.n	8006d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	4a7d      	ldr	r2, [pc, #500]	; (8006fe0 <HAL_UART_IRQHandler+0x3dc>)
 8006dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fc f977 	bl	80030e6 <HAL_DMA_Abort_IT>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	e00e      	b.n	8006e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f990 	bl	8007134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	e00a      	b.n	8006e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f98c 	bl	8007134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e006      	b.n	8006e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f988 	bl	8007134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e2a:	e170      	b.n	800710e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	bf00      	nop
    return;
 8006e2e:	e16e      	b.n	800710e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 814a 	bne.w	80070ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8143 	beq.w	80070ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 813c 	beq.w	80070ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	f040 80b4 	bne.w	8006fe4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8140 	beq.w	8007112 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f080 8139 	bcs.w	8007112 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb2:	f000 8088 	beq.w	8006fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1d9      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e1      	bne.n	8006f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e3      	bne.n	8006f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f96:	f023 0310 	bic.w	r3, r3, #16
 8006f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006faa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e3      	bne.n	8006f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fc f820 	bl	8003006 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8b6 	bl	8007148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fdc:	e099      	b.n	8007112 <HAL_UART_IRQHandler+0x50e>
 8006fde:	bf00      	nop
 8006fe0:	0800737f 	.word	0x0800737f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 808b 	beq.w	8007116 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8086 	beq.w	8007116 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	330c      	adds	r3, #12
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800702e:	647a      	str	r2, [r7, #68]	; 0x44
 8007030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e3      	bne.n	800700a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3314      	adds	r3, #20
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	623b      	str	r3, [r7, #32]
   return(result);
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3314      	adds	r3, #20
 8007062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007066:	633a      	str	r2, [r7, #48]	; 0x30
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e3      	bne.n	8007042 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	60fb      	str	r3, [r7, #12]
   return(result);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0310 	bic.w	r3, r3, #16
 800709e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	330c      	adds	r3, #12
 80070a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070ac:	61fa      	str	r2, [r7, #28]
 80070ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	69b9      	ldr	r1, [r7, #24]
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e3      	bne.n	8007088 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f83e 	bl	8007148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070cc:	e023      	b.n	8007116 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_UART_IRQHandler+0x4ea>
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f95d 	bl	80073a6 <UART_Transmit_IT>
    return;
 80070ec:	e014      	b.n	8007118 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00e      	beq.n	8007118 <HAL_UART_IRQHandler+0x514>
 80070fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f99d 	bl	8007446 <UART_EndTransmit_IT>
    return;
 800710c:	e004      	b.n	8007118 <HAL_UART_IRQHandler+0x514>
    return;
 800710e:	bf00      	nop
 8007110:	e002      	b.n	8007118 <HAL_UART_IRQHandler+0x514>
      return;
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <HAL_UART_IRQHandler+0x514>
      return;
 8007116:	bf00      	nop
  }
}
 8007118:	37e8      	adds	r7, #232	; 0xe8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop

08007120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b090      	sub	sp, #64	; 0x40
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007170:	e050      	b.n	8007214 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d04c      	beq.n	8007214 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800717a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <UART_WaitOnFlagUntilTimeout+0x30>
 8007180:	f7fb fe00 	bl	8002d84 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718c:	429a      	cmp	r2, r3
 800718e:	d241      	bcs.n	8007214 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071b0:	637a      	str	r2, [r7, #52]	; 0x34
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e5      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3314      	adds	r3, #20
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e4:	623a      	str	r2, [r7, #32]
 80071e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e00f      	b.n	8007234 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4013      	ands	r3, r2
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	bf0c      	ite	eq
 8007224:	2301      	moveq	r3, #1
 8007226:	2300      	movne	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	429a      	cmp	r2, r3
 8007230:	d09f      	beq.n	8007172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3740      	adds	r7, #64	; 0x40
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88fa      	ldrh	r2, [r7, #6]
 8007254:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2222      	movs	r2, #34	; 0x22
 8007266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007288:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0220 	orr.w	r2, r2, #32
 80072a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b095      	sub	sp, #84	; 0x54
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	330c      	adds	r3, #12
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072e0:	643a      	str	r2, [r7, #64]	; 0x40
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e5      	bne.n	80072c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	61fb      	str	r3, [r7, #28]
   return(result);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3314      	adds	r3, #20
 8007312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800731a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e5      	bne.n	80072f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	2b01      	cmp	r3, #1
 800732e:	d119      	bne.n	8007364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0310 	bic.w	r3, r3, #16
 8007346:	647b      	str	r3, [r7, #68]	; 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007350:	61ba      	str	r2, [r7, #24]
 8007352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	613b      	str	r3, [r7, #16]
   return(result);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e5      	bne.n	8007330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007372:	bf00      	nop
 8007374:	3754      	adds	r7, #84	; 0x54
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff fecb 	bl	8007134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b21      	cmp	r3, #33	; 0x21
 80073b8:	d13e      	bne.n	8007438 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d114      	bne.n	80073ee <UART_Transmit_IT+0x48>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	1c9a      	adds	r2, r3, #2
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]
 80073ec:	e008      	b.n	8007400 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	1c59      	adds	r1, r3, #1
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6211      	str	r1, [r2, #32]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29b      	uxth	r3, r3
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4619      	mov	r1, r3
 800740e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10f      	bne.n	8007434 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007422:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007432:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	e000      	b.n	800743a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007438:	2302      	movs	r3, #2
  }
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fe5a 	bl	8007120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b08c      	sub	sp, #48	; 0x30
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b22      	cmp	r3, #34	; 0x22
 8007488:	f040 80ab 	bne.w	80075e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007494:	d117      	bne.n	80074c6 <UART_Receive_IT+0x50>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d113      	bne.n	80074c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	629a      	str	r2, [r3, #40]	; 0x28
 80074c4:	e026      	b.n	8007514 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d8:	d007      	beq.n	80074ea <UART_Receive_IT+0x74>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <UART_Receive_IT+0x82>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	e008      	b.n	800750a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007504:	b2da      	uxtb	r2, r3
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29b      	uxth	r3, r3
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4619      	mov	r1, r3
 8007522:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007524:	2b00      	cmp	r3, #0
 8007526:	d15a      	bne.n	80075de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0220 	bic.w	r2, r2, #32
 8007536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	2b01      	cmp	r3, #1
 8007566:	d135      	bne.n	80075d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	613b      	str	r3, [r7, #16]
   return(result);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f023 0310 	bic.w	r3, r3, #16
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758e:	623a      	str	r2, [r7, #32]
 8007590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	69f9      	ldr	r1, [r7, #28]
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	61bb      	str	r3, [r7, #24]
   return(result);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d10a      	bne.n	80075c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fdbb 	bl	8007148 <HAL_UARTEx_RxEventCallback>
 80075d2:	e002      	b.n	80075da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fb f8e3 	bl	80027a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e002      	b.n	80075e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	e000      	b.n	80075e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075e2:	2302      	movs	r3, #2
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3730      	adds	r7, #48	; 0x30
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f0:	b0c0      	sub	sp, #256	; 0x100
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007608:	68d9      	ldr	r1, [r3, #12]
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	ea40 0301 	orr.w	r3, r0, r1
 8007614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	431a      	orrs	r2, r3
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	431a      	orrs	r2, r3
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007644:	f021 010c 	bic.w	r1, r1, #12
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007652:	430b      	orrs	r3, r1
 8007654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007666:	6999      	ldr	r1, [r3, #24]
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	ea40 0301 	orr.w	r3, r0, r1
 8007672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b8f      	ldr	r3, [pc, #572]	; (80078b8 <UART_SetConfig+0x2cc>)
 800767c:	429a      	cmp	r2, r3
 800767e:	d005      	beq.n	800768c <UART_SetConfig+0xa0>
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b8d      	ldr	r3, [pc, #564]	; (80078bc <UART_SetConfig+0x2d0>)
 8007688:	429a      	cmp	r2, r3
 800768a:	d104      	bne.n	8007696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800768c:	f7fd fcd6 	bl	800503c <HAL_RCC_GetPCLK2Freq>
 8007690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007694:	e003      	b.n	800769e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007696:	f7fd fcbd 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 800769a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a8:	f040 810c 	bne.w	80078c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	1891      	adds	r1, r2, r2
 80076c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80076c6:	415b      	adcs	r3, r3
 80076c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076ce:	4621      	mov	r1, r4
 80076d0:	eb12 0801 	adds.w	r8, r2, r1
 80076d4:	4629      	mov	r1, r5
 80076d6:	eb43 0901 	adc.w	r9, r3, r1
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ee:	4690      	mov	r8, r2
 80076f0:	4699      	mov	r9, r3
 80076f2:	4623      	mov	r3, r4
 80076f4:	eb18 0303 	adds.w	r3, r8, r3
 80076f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076fc:	462b      	mov	r3, r5
 80076fe:	eb49 0303 	adc.w	r3, r9, r3
 8007702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007712:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800771a:	460b      	mov	r3, r1
 800771c:	18db      	adds	r3, r3, r3
 800771e:	653b      	str	r3, [r7, #80]	; 0x50
 8007720:	4613      	mov	r3, r2
 8007722:	eb42 0303 	adc.w	r3, r2, r3
 8007726:	657b      	str	r3, [r7, #84]	; 0x54
 8007728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800772c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007730:	f7f9 f9a4 	bl	8000a7c <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <UART_SetConfig+0x2d4>)
 800773a:	fba3 2302 	umull	r2, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	011c      	lsls	r4, r3, #4
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800774c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	1891      	adds	r1, r2, r2
 800775a:	64b9      	str	r1, [r7, #72]	; 0x48
 800775c:	415b      	adcs	r3, r3
 800775e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007764:	4641      	mov	r1, r8
 8007766:	eb12 0a01 	adds.w	sl, r2, r1
 800776a:	4649      	mov	r1, r9
 800776c:	eb43 0b01 	adc.w	fp, r3, r1
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800777c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007784:	4692      	mov	sl, r2
 8007786:	469b      	mov	fp, r3
 8007788:	4643      	mov	r3, r8
 800778a:	eb1a 0303 	adds.w	r3, sl, r3
 800778e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007792:	464b      	mov	r3, r9
 8007794:	eb4b 0303 	adc.w	r3, fp, r3
 8007798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077b0:	460b      	mov	r3, r1
 80077b2:	18db      	adds	r3, r3, r3
 80077b4:	643b      	str	r3, [r7, #64]	; 0x40
 80077b6:	4613      	mov	r3, r2
 80077b8:	eb42 0303 	adc.w	r3, r2, r3
 80077bc:	647b      	str	r3, [r7, #68]	; 0x44
 80077be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077c6:	f7f9 f959 	bl	8000a7c <__aeabi_uldivmod>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	4b3b      	ldr	r3, [pc, #236]	; (80078c0 <UART_SetConfig+0x2d4>)
 80077d2:	fba3 2301 	umull	r2, r3, r3, r1
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	2264      	movs	r2, #100	; 0x64
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	1acb      	subs	r3, r1, r3
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077e6:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <UART_SetConfig+0x2d4>)
 80077e8:	fba3 2302 	umull	r2, r3, r3, r2
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077f4:	441c      	add	r4, r3
 80077f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007800:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	1891      	adds	r1, r2, r2
 800780e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007810:	415b      	adcs	r3, r3
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007818:	4641      	mov	r1, r8
 800781a:	1851      	adds	r1, r2, r1
 800781c:	6339      	str	r1, [r7, #48]	; 0x30
 800781e:	4649      	mov	r1, r9
 8007820:	414b      	adcs	r3, r1
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007830:	4659      	mov	r1, fp
 8007832:	00cb      	lsls	r3, r1, #3
 8007834:	4651      	mov	r1, sl
 8007836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783a:	4651      	mov	r1, sl
 800783c:	00ca      	lsls	r2, r1, #3
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	4603      	mov	r3, r0
 8007844:	4642      	mov	r2, r8
 8007846:	189b      	adds	r3, r3, r2
 8007848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784c:	464b      	mov	r3, r9
 800784e:	460a      	mov	r2, r1
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007864:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800786c:	460b      	mov	r3, r1
 800786e:	18db      	adds	r3, r3, r3
 8007870:	62bb      	str	r3, [r7, #40]	; 0x28
 8007872:	4613      	mov	r3, r2
 8007874:	eb42 0303 	adc.w	r3, r2, r3
 8007878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800787e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007882:	f7f9 f8fb 	bl	8000a7c <__aeabi_uldivmod>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <UART_SetConfig+0x2d4>)
 800788c:	fba3 1302 	umull	r1, r3, r3, r2
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	2164      	movs	r1, #100	; 0x64
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	3332      	adds	r3, #50	; 0x32
 800789e:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <UART_SetConfig+0x2d4>)
 80078a0:	fba2 2303 	umull	r2, r3, r2, r3
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	f003 0207 	and.w	r2, r3, #7
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4422      	add	r2, r4
 80078b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078b4:	e106      	b.n	8007ac4 <UART_SetConfig+0x4d8>
 80078b6:	bf00      	nop
 80078b8:	40011000 	.word	0x40011000
 80078bc:	40011400 	.word	0x40011400
 80078c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078d6:	4642      	mov	r2, r8
 80078d8:	464b      	mov	r3, r9
 80078da:	1891      	adds	r1, r2, r2
 80078dc:	6239      	str	r1, [r7, #32]
 80078de:	415b      	adcs	r3, r3
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078e6:	4641      	mov	r1, r8
 80078e8:	1854      	adds	r4, r2, r1
 80078ea:	4649      	mov	r1, r9
 80078ec:	eb43 0501 	adc.w	r5, r3, r1
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	00eb      	lsls	r3, r5, #3
 80078fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078fe:	00e2      	lsls	r2, r4, #3
 8007900:	4614      	mov	r4, r2
 8007902:	461d      	mov	r5, r3
 8007904:	4643      	mov	r3, r8
 8007906:	18e3      	adds	r3, r4, r3
 8007908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800790c:	464b      	mov	r3, r9
 800790e:	eb45 0303 	adc.w	r3, r5, r3
 8007912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007932:	4629      	mov	r1, r5
 8007934:	008b      	lsls	r3, r1, #2
 8007936:	4621      	mov	r1, r4
 8007938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800793c:	4621      	mov	r1, r4
 800793e:	008a      	lsls	r2, r1, #2
 8007940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007944:	f7f9 f89a 	bl	8000a7c <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4b60      	ldr	r3, [pc, #384]	; (8007ad0 <UART_SetConfig+0x4e4>)
 800794e:	fba3 2302 	umull	r2, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	011c      	lsls	r4, r3, #4
 8007956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800795a:	2200      	movs	r2, #0
 800795c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	1891      	adds	r1, r2, r2
 800796e:	61b9      	str	r1, [r7, #24]
 8007970:	415b      	adcs	r3, r3
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007978:	4641      	mov	r1, r8
 800797a:	1851      	adds	r1, r2, r1
 800797c:	6139      	str	r1, [r7, #16]
 800797e:	4649      	mov	r1, r9
 8007980:	414b      	adcs	r3, r1
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007990:	4659      	mov	r1, fp
 8007992:	00cb      	lsls	r3, r1, #3
 8007994:	4651      	mov	r1, sl
 8007996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800799a:	4651      	mov	r1, sl
 800799c:	00ca      	lsls	r2, r1, #3
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	4642      	mov	r2, r8
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ac:	464b      	mov	r3, r9
 80079ae:	460a      	mov	r2, r1
 80079b0:	eb42 0303 	adc.w	r3, r2, r3
 80079b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80079c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079d0:	4649      	mov	r1, r9
 80079d2:	008b      	lsls	r3, r1, #2
 80079d4:	4641      	mov	r1, r8
 80079d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079da:	4641      	mov	r1, r8
 80079dc:	008a      	lsls	r2, r1, #2
 80079de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079e2:	f7f9 f84b 	bl	8000a7c <__aeabi_uldivmod>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	4b38      	ldr	r3, [pc, #224]	; (8007ad0 <UART_SetConfig+0x4e4>)
 80079ee:	fba3 2301 	umull	r2, r3, r3, r1
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2264      	movs	r2, #100	; 0x64
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	3332      	adds	r3, #50	; 0x32
 8007a00:	4a33      	ldr	r2, [pc, #204]	; (8007ad0 <UART_SetConfig+0x4e4>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	095b      	lsrs	r3, r3, #5
 8007a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a0c:	441c      	add	r4, r3
 8007a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a12:	2200      	movs	r2, #0
 8007a14:	673b      	str	r3, [r7, #112]	; 0x70
 8007a16:	677a      	str	r2, [r7, #116]	; 0x74
 8007a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	464b      	mov	r3, r9
 8007a20:	1891      	adds	r1, r2, r2
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	415b      	adcs	r3, r3
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	1851      	adds	r1, r2, r1
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	4649      	mov	r1, r9
 8007a34:	414b      	adcs	r3, r1
 8007a36:	607b      	str	r3, [r7, #4]
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	f04f 0300 	mov.w	r3, #0
 8007a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a44:	4659      	mov	r1, fp
 8007a46:	00cb      	lsls	r3, r1, #3
 8007a48:	4651      	mov	r1, sl
 8007a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a4e:	4651      	mov	r1, sl
 8007a50:	00ca      	lsls	r2, r1, #3
 8007a52:	4610      	mov	r0, r2
 8007a54:	4619      	mov	r1, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	4642      	mov	r2, r8
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a5e:	464b      	mov	r3, r9
 8007a60:	460a      	mov	r2, r1
 8007a62:	eb42 0303 	adc.w	r3, r2, r3
 8007a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	663b      	str	r3, [r7, #96]	; 0x60
 8007a72:	667a      	str	r2, [r7, #100]	; 0x64
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a80:	4649      	mov	r1, r9
 8007a82:	008b      	lsls	r3, r1, #2
 8007a84:	4641      	mov	r1, r8
 8007a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	008a      	lsls	r2, r1, #2
 8007a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a92:	f7f8 fff3 	bl	8000a7c <__aeabi_uldivmod>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <UART_SetConfig+0x4e4>)
 8007a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	2164      	movs	r1, #100	; 0x64
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	3332      	adds	r3, #50	; 0x32
 8007aae:	4a08      	ldr	r2, [pc, #32]	; (8007ad0 <UART_SetConfig+0x4e4>)
 8007ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	f003 020f 	and.w	r2, r3, #15
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4422      	add	r2, r4
 8007ac2:	609a      	str	r2, [r3, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007aca:	46bd      	mov	sp, r7
 8007acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad0:	51eb851f 	.word	0x51eb851f

08007ad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	f107 001c 	add.w	r0, r7, #28
 8007ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d122      	bne.n	8007b32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d105      	bne.n	8007b26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 faa2 	bl	8008070 <USB_CoreReset>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e01a      	b.n	8007b68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa96 	bl	8008070 <USB_CoreReset>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
 8007b5a:	e005      	b.n	8007b68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d10b      	bne.n	8007b86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f043 0206 	orr.w	r2, r3, #6
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b92:	b004      	add	sp, #16
 8007b94:	4770      	bx	lr

08007b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d115      	bne.n	8007c06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007be6:	2001      	movs	r0, #1
 8007be8:	f7fb f8d8 	bl	8002d9c <HAL_Delay>
      ms++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa2e 	bl	8008054 <USB_GetMode>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d01e      	beq.n	8007c3c <USB_SetCurrentMode+0x84>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b31      	cmp	r3, #49	; 0x31
 8007c02:	d9f0      	bls.n	8007be6 <USB_SetCurrentMode+0x2e>
 8007c04:	e01a      	b.n	8007c3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d115      	bne.n	8007c38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f7fb f8bf 	bl	8002d9c <HAL_Delay>
      ms++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa15 	bl	8008054 <USB_GetMode>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <USB_SetCurrentMode+0x84>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b31      	cmp	r3, #49	; 0x31
 8007c34:	d9f0      	bls.n	8007c18 <USB_SetCurrentMode+0x60>
 8007c36:	e001      	b.n	8007c3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e005      	b.n	8007c48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b32      	cmp	r3, #50	; 0x32
 8007c40:	d101      	bne.n	8007c46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c50:	b084      	sub	sp, #16
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	e009      	b.n	8007c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	3340      	adds	r3, #64	; 0x40
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3301      	adds	r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b0e      	cmp	r3, #14
 8007c88:	d9f2      	bls.n	8007c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11c      	bne.n	8007cca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c9e:	f043 0302 	orr.w	r3, r3, #2
 8007ca2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8007cc8:	e00b      	b.n	8007ce2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2300      	movs	r3, #0
 8007cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10c      	bne.n	8007d22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f965 	bl	8007fe0 <USB_SetDevSpeed>
 8007d16:	e008      	b.n	8007d2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d18:	2101      	movs	r1, #1
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f960 	bl	8007fe0 <USB_SetDevSpeed>
 8007d20:	e003      	b.n	8007d2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d22:	2103      	movs	r1, #3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f95b 	bl	8007fe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d2a:	2110      	movs	r1, #16
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8f3 	bl	8007f18 <USB_FlushTxFifo>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f91f 	bl	8007f80 <USB_FlushRxFifo>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	461a      	mov	r2, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2300      	movs	r3, #0
 8007d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	e043      	b.n	8007dfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8c:	d118      	bne.n	8007dc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	461a      	mov	r2, r3
 8007da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	e013      	b.n	8007dd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	461a      	mov	r2, r3
 8007db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e008      	b.n	8007dd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	461a      	mov	r2, r3
 8007df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d3b7      	bcc.n	8007d76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
 8007e0a:	e043      	b.n	8007e94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e22:	d118      	bne.n	8007e56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	461a      	mov	r2, r3
 8007e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e013      	b.n	8007e68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	e008      	b.n	8007e68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e86:	461a      	mov	r2, r3
 8007e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3301      	adds	r3, #1
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d3b7      	bcc.n	8007e0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <USB_DevInit+0x2c4>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f043 0208 	orr.w	r2, r3, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d107      	bne.n	8007f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007efc:	f043 0304 	orr.w	r3, r3, #4
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f10:	b004      	add	sp, #16
 8007f12:	4770      	bx	lr
 8007f14:	803c3800 	.word	0x803c3800

08007f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a13      	ldr	r2, [pc, #76]	; (8007f7c <USB_FlushTxFifo+0x64>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e01b      	b.n	8007f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	daf2      	bge.n	8007f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	019b      	lsls	r3, r3, #6
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <USB_FlushTxFifo+0x64>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e006      	b.n	8007f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d0f0      	beq.n	8007f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	00030d40 	.word	0x00030d40

08007f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <USB_FlushRxFifo+0x5c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e018      	b.n	8007fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	daf2      	bge.n	8007f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2210      	movs	r2, #16
 8007fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4a08      	ldr	r2, [pc, #32]	; (8007fdc <USB_FlushRxFifo+0x5c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d901      	bls.n	8007fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e006      	b.n	8007fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d0f0      	beq.n	8007fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	00030d40 	.word	0x00030d40

08007fe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008000:	4313      	orrs	r3, r2
 8008002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0301 	and.w	r3, r3, #1
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <USB_CoreReset+0x64>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e01b      	b.n	80080c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	daf2      	bge.n	800807c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f043 0201 	orr.w	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <USB_CoreReset+0x64>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d901      	bls.n	80080b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e006      	b.n	80080c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d0f0      	beq.n	80080a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	00030d40 	.word	0x00030d40

080080d8 <std>:
 80080d8:	2300      	movs	r3, #0
 80080da:	b510      	push	{r4, lr}
 80080dc:	4604      	mov	r4, r0
 80080de:	e9c0 3300 	strd	r3, r3, [r0]
 80080e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080e6:	6083      	str	r3, [r0, #8]
 80080e8:	8181      	strh	r1, [r0, #12]
 80080ea:	6643      	str	r3, [r0, #100]	; 0x64
 80080ec:	81c2      	strh	r2, [r0, #14]
 80080ee:	6183      	str	r3, [r0, #24]
 80080f0:	4619      	mov	r1, r3
 80080f2:	2208      	movs	r2, #8
 80080f4:	305c      	adds	r0, #92	; 0x5c
 80080f6:	f000 fa17 	bl	8008528 <memset>
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <std+0x58>)
 80080fc:	6263      	str	r3, [r4, #36]	; 0x24
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <std+0x5c>)
 8008100:	62a3      	str	r3, [r4, #40]	; 0x28
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <std+0x60>)
 8008104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <std+0x64>)
 8008108:	6323      	str	r3, [r4, #48]	; 0x30
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <std+0x68>)
 800810c:	6224      	str	r4, [r4, #32]
 800810e:	429c      	cmp	r4, r3
 8008110:	d006      	beq.n	8008120 <std+0x48>
 8008112:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008116:	4294      	cmp	r4, r2
 8008118:	d002      	beq.n	8008120 <std+0x48>
 800811a:	33d0      	adds	r3, #208	; 0xd0
 800811c:	429c      	cmp	r4, r3
 800811e:	d105      	bne.n	800812c <std+0x54>
 8008120:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008128:	f000 ba88 	b.w	800863c <__retarget_lock_init_recursive>
 800812c:	bd10      	pop	{r4, pc}
 800812e:	bf00      	nop
 8008130:	08008379 	.word	0x08008379
 8008134:	0800839b 	.word	0x0800839b
 8008138:	080083d3 	.word	0x080083d3
 800813c:	080083f7 	.word	0x080083f7
 8008140:	20000aac 	.word	0x20000aac

08008144 <stdio_exit_handler>:
 8008144:	4a02      	ldr	r2, [pc, #8]	; (8008150 <stdio_exit_handler+0xc>)
 8008146:	4903      	ldr	r1, [pc, #12]	; (8008154 <stdio_exit_handler+0x10>)
 8008148:	4803      	ldr	r0, [pc, #12]	; (8008158 <stdio_exit_handler+0x14>)
 800814a:	f000 b869 	b.w	8008220 <_fwalk_sglue>
 800814e:	bf00      	nop
 8008150:	20000014 	.word	0x20000014
 8008154:	08009199 	.word	0x08009199
 8008158:	20000020 	.word	0x20000020

0800815c <cleanup_stdio>:
 800815c:	6841      	ldr	r1, [r0, #4]
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <cleanup_stdio+0x34>)
 8008160:	4299      	cmp	r1, r3
 8008162:	b510      	push	{r4, lr}
 8008164:	4604      	mov	r4, r0
 8008166:	d001      	beq.n	800816c <cleanup_stdio+0x10>
 8008168:	f001 f816 	bl	8009198 <_fflush_r>
 800816c:	68a1      	ldr	r1, [r4, #8]
 800816e:	4b09      	ldr	r3, [pc, #36]	; (8008194 <cleanup_stdio+0x38>)
 8008170:	4299      	cmp	r1, r3
 8008172:	d002      	beq.n	800817a <cleanup_stdio+0x1e>
 8008174:	4620      	mov	r0, r4
 8008176:	f001 f80f 	bl	8009198 <_fflush_r>
 800817a:	68e1      	ldr	r1, [r4, #12]
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <cleanup_stdio+0x3c>)
 800817e:	4299      	cmp	r1, r3
 8008180:	d004      	beq.n	800818c <cleanup_stdio+0x30>
 8008182:	4620      	mov	r0, r4
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f001 b806 	b.w	8009198 <_fflush_r>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	20000aac 	.word	0x20000aac
 8008194:	20000b14 	.word	0x20000b14
 8008198:	20000b7c 	.word	0x20000b7c

0800819c <global_stdio_init.part.0>:
 800819c:	b510      	push	{r4, lr}
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <global_stdio_init.part.0+0x30>)
 80081a0:	4c0b      	ldr	r4, [pc, #44]	; (80081d0 <global_stdio_init.part.0+0x34>)
 80081a2:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <global_stdio_init.part.0+0x38>)
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	4620      	mov	r0, r4
 80081a8:	2200      	movs	r2, #0
 80081aa:	2104      	movs	r1, #4
 80081ac:	f7ff ff94 	bl	80080d8 <std>
 80081b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081b4:	2201      	movs	r2, #1
 80081b6:	2109      	movs	r1, #9
 80081b8:	f7ff ff8e 	bl	80080d8 <std>
 80081bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081c0:	2202      	movs	r2, #2
 80081c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c6:	2112      	movs	r1, #18
 80081c8:	f7ff bf86 	b.w	80080d8 <std>
 80081cc:	20000be4 	.word	0x20000be4
 80081d0:	20000aac 	.word	0x20000aac
 80081d4:	08008145 	.word	0x08008145

080081d8 <__sfp_lock_acquire>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_acquire+0x8>)
 80081da:	f000 ba30 	b.w	800863e <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20000bed 	.word	0x20000bed

080081e4 <__sfp_lock_release>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sfp_lock_release+0x8>)
 80081e6:	f000 ba2b 	b.w	8008640 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000bed 	.word	0x20000bed

080081f0 <__sinit>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	f7ff fff0 	bl	80081d8 <__sfp_lock_acquire>
 80081f8:	6a23      	ldr	r3, [r4, #32]
 80081fa:	b11b      	cbz	r3, 8008204 <__sinit+0x14>
 80081fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008200:	f7ff bff0 	b.w	80081e4 <__sfp_lock_release>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__sinit+0x28>)
 8008206:	6223      	str	r3, [r4, #32]
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__sinit+0x2c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1f5      	bne.n	80081fc <__sinit+0xc>
 8008210:	f7ff ffc4 	bl	800819c <global_stdio_init.part.0>
 8008214:	e7f2      	b.n	80081fc <__sinit+0xc>
 8008216:	bf00      	nop
 8008218:	0800815d 	.word	0x0800815d
 800821c:	20000be4 	.word	0x20000be4

08008220 <_fwalk_sglue>:
 8008220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008224:	4607      	mov	r7, r0
 8008226:	4688      	mov	r8, r1
 8008228:	4614      	mov	r4, r2
 800822a:	2600      	movs	r6, #0
 800822c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008230:	f1b9 0901 	subs.w	r9, r9, #1
 8008234:	d505      	bpl.n	8008242 <_fwalk_sglue+0x22>
 8008236:	6824      	ldr	r4, [r4, #0]
 8008238:	2c00      	cmp	r4, #0
 800823a:	d1f7      	bne.n	800822c <_fwalk_sglue+0xc>
 800823c:	4630      	mov	r0, r6
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d907      	bls.n	8008258 <_fwalk_sglue+0x38>
 8008248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800824c:	3301      	adds	r3, #1
 800824e:	d003      	beq.n	8008258 <_fwalk_sglue+0x38>
 8008250:	4629      	mov	r1, r5
 8008252:	4638      	mov	r0, r7
 8008254:	47c0      	blx	r8
 8008256:	4306      	orrs	r6, r0
 8008258:	3568      	adds	r5, #104	; 0x68
 800825a:	e7e9      	b.n	8008230 <_fwalk_sglue+0x10>

0800825c <iprintf>:
 800825c:	b40f      	push	{r0, r1, r2, r3}
 800825e:	b507      	push	{r0, r1, r2, lr}
 8008260:	4906      	ldr	r1, [pc, #24]	; (800827c <iprintf+0x20>)
 8008262:	ab04      	add	r3, sp, #16
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	f853 2b04 	ldr.w	r2, [r3], #4
 800826a:	6881      	ldr	r1, [r0, #8]
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f000 fc63 	bl	8008b38 <_vfiprintf_r>
 8008272:	b003      	add	sp, #12
 8008274:	f85d eb04 	ldr.w	lr, [sp], #4
 8008278:	b004      	add	sp, #16
 800827a:	4770      	bx	lr
 800827c:	2000006c 	.word	0x2000006c

08008280 <_puts_r>:
 8008280:	6a03      	ldr	r3, [r0, #32]
 8008282:	b570      	push	{r4, r5, r6, lr}
 8008284:	6884      	ldr	r4, [r0, #8]
 8008286:	4605      	mov	r5, r0
 8008288:	460e      	mov	r6, r1
 800828a:	b90b      	cbnz	r3, 8008290 <_puts_r+0x10>
 800828c:	f7ff ffb0 	bl	80081f0 <__sinit>
 8008290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d405      	bmi.n	80082a2 <_puts_r+0x22>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	0598      	lsls	r0, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_puts_r+0x22>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f000 f9ce 	bl	800863e <__retarget_lock_acquire_recursive>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	0719      	lsls	r1, r3, #28
 80082a6:	d513      	bpl.n	80082d0 <_puts_r+0x50>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	b18b      	cbz	r3, 80082d0 <_puts_r+0x50>
 80082ac:	3e01      	subs	r6, #1
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082b4:	3b01      	subs	r3, #1
 80082b6:	60a3      	str	r3, [r4, #8]
 80082b8:	b9e9      	cbnz	r1, 80082f6 <_puts_r+0x76>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da2e      	bge.n	800831c <_puts_r+0x9c>
 80082be:	4622      	mov	r2, r4
 80082c0:	210a      	movs	r1, #10
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f89b 	bl	80083fe <__swbuf_r>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d007      	beq.n	80082dc <_puts_r+0x5c>
 80082cc:	250a      	movs	r5, #10
 80082ce:	e007      	b.n	80082e0 <_puts_r+0x60>
 80082d0:	4621      	mov	r1, r4
 80082d2:	4628      	mov	r0, r5
 80082d4:	f000 f8d0 	bl	8008478 <__swsetup_r>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d0e7      	beq.n	80082ac <_puts_r+0x2c>
 80082dc:	f04f 35ff 	mov.w	r5, #4294967295
 80082e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e2:	07da      	lsls	r2, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_puts_r+0x72>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	059b      	lsls	r3, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_puts_r+0x72>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f000 f9a7 	bl	8008640 <__retarget_lock_release_recursive>
 80082f2:	4628      	mov	r0, r5
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da04      	bge.n	8008304 <_puts_r+0x84>
 80082fa:	69a2      	ldr	r2, [r4, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	dc06      	bgt.n	800830e <_puts_r+0x8e>
 8008300:	290a      	cmp	r1, #10
 8008302:	d004      	beq.n	800830e <_puts_r+0x8e>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	6022      	str	r2, [r4, #0]
 800830a:	7019      	strb	r1, [r3, #0]
 800830c:	e7cf      	b.n	80082ae <_puts_r+0x2e>
 800830e:	4622      	mov	r2, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 f874 	bl	80083fe <__swbuf_r>
 8008316:	3001      	adds	r0, #1
 8008318:	d1c9      	bne.n	80082ae <_puts_r+0x2e>
 800831a:	e7df      	b.n	80082dc <_puts_r+0x5c>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	250a      	movs	r5, #10
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	701d      	strb	r5, [r3, #0]
 8008326:	e7db      	b.n	80082e0 <_puts_r+0x60>

08008328 <puts>:
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <puts+0xc>)
 800832a:	4601      	mov	r1, r0
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f7ff bfa7 	b.w	8008280 <_puts_r>
 8008332:	bf00      	nop
 8008334:	2000006c 	.word	0x2000006c

08008338 <siprintf>:
 8008338:	b40e      	push	{r1, r2, r3}
 800833a:	b500      	push	{lr}
 800833c:	b09c      	sub	sp, #112	; 0x70
 800833e:	ab1d      	add	r3, sp, #116	; 0x74
 8008340:	9002      	str	r0, [sp, #8]
 8008342:	9006      	str	r0, [sp, #24]
 8008344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <siprintf+0x38>)
 800834a:	9107      	str	r1, [sp, #28]
 800834c:	9104      	str	r1, [sp, #16]
 800834e:	4909      	ldr	r1, [pc, #36]	; (8008374 <siprintf+0x3c>)
 8008350:	f853 2b04 	ldr.w	r2, [r3], #4
 8008354:	9105      	str	r1, [sp, #20]
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	a902      	add	r1, sp, #8
 800835c:	f000 fac4 	bl	80088e8 <_svfiprintf_r>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	b01c      	add	sp, #112	; 0x70
 8008368:	f85d eb04 	ldr.w	lr, [sp], #4
 800836c:	b003      	add	sp, #12
 800836e:	4770      	bx	lr
 8008370:	2000006c 	.word	0x2000006c
 8008374:	ffff0208 	.word	0xffff0208

08008378 <__sread>:
 8008378:	b510      	push	{r4, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	f000 f90e 	bl	80085a0 <_read_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	bfab      	itete	ge
 8008388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800838a:	89a3      	ldrhlt	r3, [r4, #12]
 800838c:	181b      	addge	r3, r3, r0
 800838e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008392:	bfac      	ite	ge
 8008394:	6563      	strge	r3, [r4, #84]	; 0x54
 8008396:	81a3      	strhlt	r3, [r4, #12]
 8008398:	bd10      	pop	{r4, pc}

0800839a <__swrite>:
 800839a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	461f      	mov	r7, r3
 80083a0:	898b      	ldrh	r3, [r1, #12]
 80083a2:	05db      	lsls	r3, r3, #23
 80083a4:	4605      	mov	r5, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4616      	mov	r6, r2
 80083aa:	d505      	bpl.n	80083b8 <__swrite+0x1e>
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	2302      	movs	r3, #2
 80083b2:	2200      	movs	r2, #0
 80083b4:	f000 f8e2 	bl	800857c <_lseek_r>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	4628      	mov	r0, r5
 80083ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ce:	f000 b8f9 	b.w	80085c4 <_write_r>

080083d2 <__sseek>:
 80083d2:	b510      	push	{r4, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083da:	f000 f8cf 	bl	800857c <_lseek_r>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	bf15      	itete	ne
 80083e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083ee:	81a3      	strheq	r3, [r4, #12]
 80083f0:	bf18      	it	ne
 80083f2:	81a3      	strhne	r3, [r4, #12]
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <__sclose>:
 80083f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fa:	f000 b8af 	b.w	800855c <_close_r>

080083fe <__swbuf_r>:
 80083fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008400:	460e      	mov	r6, r1
 8008402:	4614      	mov	r4, r2
 8008404:	4605      	mov	r5, r0
 8008406:	b118      	cbz	r0, 8008410 <__swbuf_r+0x12>
 8008408:	6a03      	ldr	r3, [r0, #32]
 800840a:	b90b      	cbnz	r3, 8008410 <__swbuf_r+0x12>
 800840c:	f7ff fef0 	bl	80081f0 <__sinit>
 8008410:	69a3      	ldr	r3, [r4, #24]
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	071a      	lsls	r2, r3, #28
 8008418:	d525      	bpl.n	8008466 <__swbuf_r+0x68>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	b31b      	cbz	r3, 8008466 <__swbuf_r+0x68>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	6922      	ldr	r2, [r4, #16]
 8008422:	1a98      	subs	r0, r3, r2
 8008424:	6963      	ldr	r3, [r4, #20]
 8008426:	b2f6      	uxtb	r6, r6
 8008428:	4283      	cmp	r3, r0
 800842a:	4637      	mov	r7, r6
 800842c:	dc04      	bgt.n	8008438 <__swbuf_r+0x3a>
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 feb1 	bl	8009198 <_fflush_r>
 8008436:	b9e0      	cbnz	r0, 8008472 <__swbuf_r+0x74>
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	3b01      	subs	r3, #1
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	701e      	strb	r6, [r3, #0]
 8008446:	6962      	ldr	r2, [r4, #20]
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	429a      	cmp	r2, r3
 800844c:	d004      	beq.n	8008458 <__swbuf_r+0x5a>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	07db      	lsls	r3, r3, #31
 8008452:	d506      	bpl.n	8008462 <__swbuf_r+0x64>
 8008454:	2e0a      	cmp	r6, #10
 8008456:	d104      	bne.n	8008462 <__swbuf_r+0x64>
 8008458:	4621      	mov	r1, r4
 800845a:	4628      	mov	r0, r5
 800845c:	f000 fe9c 	bl	8009198 <_fflush_r>
 8008460:	b938      	cbnz	r0, 8008472 <__swbuf_r+0x74>
 8008462:	4638      	mov	r0, r7
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f000 f805 	bl	8008478 <__swsetup_r>
 800846e:	2800      	cmp	r0, #0
 8008470:	d0d5      	beq.n	800841e <__swbuf_r+0x20>
 8008472:	f04f 37ff 	mov.w	r7, #4294967295
 8008476:	e7f4      	b.n	8008462 <__swbuf_r+0x64>

08008478 <__swsetup_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <__swsetup_r+0xac>)
 800847c:	4605      	mov	r5, r0
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	460c      	mov	r4, r1
 8008482:	b118      	cbz	r0, 800848c <__swsetup_r+0x14>
 8008484:	6a03      	ldr	r3, [r0, #32]
 8008486:	b90b      	cbnz	r3, 800848c <__swsetup_r+0x14>
 8008488:	f7ff feb2 	bl	80081f0 <__sinit>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008492:	0718      	lsls	r0, r3, #28
 8008494:	d422      	bmi.n	80084dc <__swsetup_r+0x64>
 8008496:	06d9      	lsls	r1, r3, #27
 8008498:	d407      	bmi.n	80084aa <__swsetup_r+0x32>
 800849a:	2309      	movs	r3, #9
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	e034      	b.n	8008514 <__swsetup_r+0x9c>
 80084aa:	0758      	lsls	r0, r3, #29
 80084ac:	d512      	bpl.n	80084d4 <__swsetup_r+0x5c>
 80084ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084b0:	b141      	cbz	r1, 80084c4 <__swsetup_r+0x4c>
 80084b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b6:	4299      	cmp	r1, r3
 80084b8:	d002      	beq.n	80084c0 <__swsetup_r+0x48>
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 f8c2 	bl	8008644 <_free_r>
 80084c0:	2300      	movs	r3, #0
 80084c2:	6363      	str	r3, [r4, #52]	; 0x34
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	2300      	movs	r3, #0
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	f043 0308 	orr.w	r3, r3, #8
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	b94b      	cbnz	r3, 80084f4 <__swsetup_r+0x7c>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ea:	d003      	beq.n	80084f4 <__swsetup_r+0x7c>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 fea0 	bl	8009234 <__smakebuf_r>
 80084f4:	89a0      	ldrh	r0, [r4, #12]
 80084f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fa:	f010 0301 	ands.w	r3, r0, #1
 80084fe:	d00a      	beq.n	8008516 <__swsetup_r+0x9e>
 8008500:	2300      	movs	r3, #0
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	6963      	ldr	r3, [r4, #20]
 8008506:	425b      	negs	r3, r3
 8008508:	61a3      	str	r3, [r4, #24]
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	b943      	cbnz	r3, 8008520 <__swsetup_r+0xa8>
 800850e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008512:	d1c4      	bne.n	800849e <__swsetup_r+0x26>
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	0781      	lsls	r1, r0, #30
 8008518:	bf58      	it	pl
 800851a:	6963      	ldrpl	r3, [r4, #20]
 800851c:	60a3      	str	r3, [r4, #8]
 800851e:	e7f4      	b.n	800850a <__swsetup_r+0x92>
 8008520:	2000      	movs	r0, #0
 8008522:	e7f7      	b.n	8008514 <__swsetup_r+0x9c>
 8008524:	2000006c 	.word	0x2000006c

08008528 <memset>:
 8008528:	4402      	add	r2, r0
 800852a:	4603      	mov	r3, r0
 800852c:	4293      	cmp	r3, r2
 800852e:	d100      	bne.n	8008532 <memset+0xa>
 8008530:	4770      	bx	lr
 8008532:	f803 1b01 	strb.w	r1, [r3], #1
 8008536:	e7f9      	b.n	800852c <memset+0x4>

08008538 <strncmp>:
 8008538:	b510      	push	{r4, lr}
 800853a:	b16a      	cbz	r2, 8008558 <strncmp+0x20>
 800853c:	3901      	subs	r1, #1
 800853e:	1884      	adds	r4, r0, r2
 8008540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008548:	429a      	cmp	r2, r3
 800854a:	d103      	bne.n	8008554 <strncmp+0x1c>
 800854c:	42a0      	cmp	r0, r4
 800854e:	d001      	beq.n	8008554 <strncmp+0x1c>
 8008550:	2a00      	cmp	r2, #0
 8008552:	d1f5      	bne.n	8008540 <strncmp+0x8>
 8008554:	1ad0      	subs	r0, r2, r3
 8008556:	bd10      	pop	{r4, pc}
 8008558:	4610      	mov	r0, r2
 800855a:	e7fc      	b.n	8008556 <strncmp+0x1e>

0800855c <_close_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_close_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	f7fa f89d 	bl	80026a6 <_close>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_close_r+0x1a>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_close_r+0x1a>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20000be8 	.word	0x20000be8

0800857c <_lseek_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	; (800859c <_lseek_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7fa f8b2 	bl	80026f4 <_lseek>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_lseek_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_lseek_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000be8 	.word	0x20000be8

080085a0 <_read_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_read_r+0x20>)
 80085a4:	4604      	mov	r4, r0
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7fa f840 	bl	8002634 <_read>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_read_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_read_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000be8 	.word	0x20000be8

080085c4 <_write_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d07      	ldr	r5, [pc, #28]	; (80085e4 <_write_r+0x20>)
 80085c8:	4604      	mov	r4, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	602a      	str	r2, [r5, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f7fa f84b 	bl	800266e <_write>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_write_r+0x1e>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_write_r+0x1e>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000be8 	.word	0x20000be8

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	2000006c 	.word	0x2000006c

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4d0d      	ldr	r5, [pc, #52]	; (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2600      	movs	r6, #0
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4d0b      	ldr	r5, [pc, #44]	; (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	; (8008638 <__libc_init_array+0x44>)
 8008608:	f000 fee2 	bl	80093d0 <_init>
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2600      	movs	r6, #0
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	08009558 	.word	0x08009558
 8008630:	08009558 	.word	0x08009558
 8008634:	08009558 	.word	0x08009558
 8008638:	0800955c 	.word	0x0800955c

0800863c <__retarget_lock_init_recursive>:
 800863c:	4770      	bx	lr

0800863e <__retarget_lock_acquire_recursive>:
 800863e:	4770      	bx	lr

08008640 <__retarget_lock_release_recursive>:
 8008640:	4770      	bx	lr
	...

08008644 <_free_r>:
 8008644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008646:	2900      	cmp	r1, #0
 8008648:	d044      	beq.n	80086d4 <_free_r+0x90>
 800864a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864e:	9001      	str	r0, [sp, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f1a1 0404 	sub.w	r4, r1, #4
 8008656:	bfb8      	it	lt
 8008658:	18e4      	addlt	r4, r4, r3
 800865a:	f000 f8df 	bl	800881c <__malloc_lock>
 800865e:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <_free_r+0x94>)
 8008660:	9801      	ldr	r0, [sp, #4]
 8008662:	6813      	ldr	r3, [r2, #0]
 8008664:	b933      	cbnz	r3, 8008674 <_free_r+0x30>
 8008666:	6063      	str	r3, [r4, #4]
 8008668:	6014      	str	r4, [r2, #0]
 800866a:	b003      	add	sp, #12
 800866c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008670:	f000 b8da 	b.w	8008828 <__malloc_unlock>
 8008674:	42a3      	cmp	r3, r4
 8008676:	d908      	bls.n	800868a <_free_r+0x46>
 8008678:	6825      	ldr	r5, [r4, #0]
 800867a:	1961      	adds	r1, r4, r5
 800867c:	428b      	cmp	r3, r1
 800867e:	bf01      	itttt	eq
 8008680:	6819      	ldreq	r1, [r3, #0]
 8008682:	685b      	ldreq	r3, [r3, #4]
 8008684:	1949      	addeq	r1, r1, r5
 8008686:	6021      	streq	r1, [r4, #0]
 8008688:	e7ed      	b.n	8008666 <_free_r+0x22>
 800868a:	461a      	mov	r2, r3
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	b10b      	cbz	r3, 8008694 <_free_r+0x50>
 8008690:	42a3      	cmp	r3, r4
 8008692:	d9fa      	bls.n	800868a <_free_r+0x46>
 8008694:	6811      	ldr	r1, [r2, #0]
 8008696:	1855      	adds	r5, r2, r1
 8008698:	42a5      	cmp	r5, r4
 800869a:	d10b      	bne.n	80086b4 <_free_r+0x70>
 800869c:	6824      	ldr	r4, [r4, #0]
 800869e:	4421      	add	r1, r4
 80086a0:	1854      	adds	r4, r2, r1
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	6011      	str	r1, [r2, #0]
 80086a6:	d1e0      	bne.n	800866a <_free_r+0x26>
 80086a8:	681c      	ldr	r4, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	6053      	str	r3, [r2, #4]
 80086ae:	440c      	add	r4, r1
 80086b0:	6014      	str	r4, [r2, #0]
 80086b2:	e7da      	b.n	800866a <_free_r+0x26>
 80086b4:	d902      	bls.n	80086bc <_free_r+0x78>
 80086b6:	230c      	movs	r3, #12
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	e7d6      	b.n	800866a <_free_r+0x26>
 80086bc:	6825      	ldr	r5, [r4, #0]
 80086be:	1961      	adds	r1, r4, r5
 80086c0:	428b      	cmp	r3, r1
 80086c2:	bf04      	itt	eq
 80086c4:	6819      	ldreq	r1, [r3, #0]
 80086c6:	685b      	ldreq	r3, [r3, #4]
 80086c8:	6063      	str	r3, [r4, #4]
 80086ca:	bf04      	itt	eq
 80086cc:	1949      	addeq	r1, r1, r5
 80086ce:	6021      	streq	r1, [r4, #0]
 80086d0:	6054      	str	r4, [r2, #4]
 80086d2:	e7ca      	b.n	800866a <_free_r+0x26>
 80086d4:	b003      	add	sp, #12
 80086d6:	bd30      	pop	{r4, r5, pc}
 80086d8:	20000bf0 	.word	0x20000bf0

080086dc <sbrk_aligned>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4e0e      	ldr	r6, [pc, #56]	; (8008718 <sbrk_aligned+0x3c>)
 80086e0:	460c      	mov	r4, r1
 80086e2:	6831      	ldr	r1, [r6, #0]
 80086e4:	4605      	mov	r5, r0
 80086e6:	b911      	cbnz	r1, 80086ee <sbrk_aligned+0x12>
 80086e8:	f000 fe1c 	bl	8009324 <_sbrk_r>
 80086ec:	6030      	str	r0, [r6, #0]
 80086ee:	4621      	mov	r1, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	f000 fe17 	bl	8009324 <_sbrk_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d00a      	beq.n	8008710 <sbrk_aligned+0x34>
 80086fa:	1cc4      	adds	r4, r0, #3
 80086fc:	f024 0403 	bic.w	r4, r4, #3
 8008700:	42a0      	cmp	r0, r4
 8008702:	d007      	beq.n	8008714 <sbrk_aligned+0x38>
 8008704:	1a21      	subs	r1, r4, r0
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fe0c 	bl	8009324 <_sbrk_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d101      	bne.n	8008714 <sbrk_aligned+0x38>
 8008710:	f04f 34ff 	mov.w	r4, #4294967295
 8008714:	4620      	mov	r0, r4
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	20000bf4 	.word	0x20000bf4

0800871c <_malloc_r>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	f025 0503 	bic.w	r5, r5, #3
 8008726:	3508      	adds	r5, #8
 8008728:	2d0c      	cmp	r5, #12
 800872a:	bf38      	it	cc
 800872c:	250c      	movcc	r5, #12
 800872e:	2d00      	cmp	r5, #0
 8008730:	4607      	mov	r7, r0
 8008732:	db01      	blt.n	8008738 <_malloc_r+0x1c>
 8008734:	42a9      	cmp	r1, r5
 8008736:	d905      	bls.n	8008744 <_malloc_r+0x28>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	2600      	movs	r6, #0
 800873e:	4630      	mov	r0, r6
 8008740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008818 <_malloc_r+0xfc>
 8008748:	f000 f868 	bl	800881c <__malloc_lock>
 800874c:	f8d8 3000 	ldr.w	r3, [r8]
 8008750:	461c      	mov	r4, r3
 8008752:	bb5c      	cbnz	r4, 80087ac <_malloc_r+0x90>
 8008754:	4629      	mov	r1, r5
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ffc0 	bl	80086dc <sbrk_aligned>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	4604      	mov	r4, r0
 8008760:	d155      	bne.n	800880e <_malloc_r+0xf2>
 8008762:	f8d8 4000 	ldr.w	r4, [r8]
 8008766:	4626      	mov	r6, r4
 8008768:	2e00      	cmp	r6, #0
 800876a:	d145      	bne.n	80087f8 <_malloc_r+0xdc>
 800876c:	2c00      	cmp	r4, #0
 800876e:	d048      	beq.n	8008802 <_malloc_r+0xe6>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	4631      	mov	r1, r6
 8008774:	4638      	mov	r0, r7
 8008776:	eb04 0903 	add.w	r9, r4, r3
 800877a:	f000 fdd3 	bl	8009324 <_sbrk_r>
 800877e:	4581      	cmp	r9, r0
 8008780:	d13f      	bne.n	8008802 <_malloc_r+0xe6>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	1a6d      	subs	r5, r5, r1
 8008786:	4629      	mov	r1, r5
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff ffa7 	bl	80086dc <sbrk_aligned>
 800878e:	3001      	adds	r0, #1
 8008790:	d037      	beq.n	8008802 <_malloc_r+0xe6>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	442b      	add	r3, r5
 8008796:	6023      	str	r3, [r4, #0]
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d038      	beq.n	8008812 <_malloc_r+0xf6>
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	42a2      	cmp	r2, r4
 80087a4:	d12b      	bne.n	80087fe <_malloc_r+0xe2>
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e00f      	b.n	80087cc <_malloc_r+0xb0>
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	1b52      	subs	r2, r2, r5
 80087b0:	d41f      	bmi.n	80087f2 <_malloc_r+0xd6>
 80087b2:	2a0b      	cmp	r2, #11
 80087b4:	d917      	bls.n	80087e6 <_malloc_r+0xca>
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	6059      	strne	r1, [r3, #4]
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	bf08      	it	eq
 80087c4:	f8c8 1000 	streq.w	r1, [r8]
 80087c8:	5162      	str	r2, [r4, r5]
 80087ca:	604b      	str	r3, [r1, #4]
 80087cc:	4638      	mov	r0, r7
 80087ce:	f104 060b 	add.w	r6, r4, #11
 80087d2:	f000 f829 	bl	8008828 <__malloc_unlock>
 80087d6:	f026 0607 	bic.w	r6, r6, #7
 80087da:	1d23      	adds	r3, r4, #4
 80087dc:	1af2      	subs	r2, r6, r3
 80087de:	d0ae      	beq.n	800873e <_malloc_r+0x22>
 80087e0:	1b9b      	subs	r3, r3, r6
 80087e2:	50a3      	str	r3, [r4, r2]
 80087e4:	e7ab      	b.n	800873e <_malloc_r+0x22>
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	d1dd      	bne.n	80087a8 <_malloc_r+0x8c>
 80087ec:	f8c8 2000 	str.w	r2, [r8]
 80087f0:	e7ec      	b.n	80087cc <_malloc_r+0xb0>
 80087f2:	4623      	mov	r3, r4
 80087f4:	6864      	ldr	r4, [r4, #4]
 80087f6:	e7ac      	b.n	8008752 <_malloc_r+0x36>
 80087f8:	4634      	mov	r4, r6
 80087fa:	6876      	ldr	r6, [r6, #4]
 80087fc:	e7b4      	b.n	8008768 <_malloc_r+0x4c>
 80087fe:	4613      	mov	r3, r2
 8008800:	e7cc      	b.n	800879c <_malloc_r+0x80>
 8008802:	230c      	movs	r3, #12
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4638      	mov	r0, r7
 8008808:	f000 f80e 	bl	8008828 <__malloc_unlock>
 800880c:	e797      	b.n	800873e <_malloc_r+0x22>
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	e7dc      	b.n	80087cc <_malloc_r+0xb0>
 8008812:	605b      	str	r3, [r3, #4]
 8008814:	deff      	udf	#255	; 0xff
 8008816:	bf00      	nop
 8008818:	20000bf0 	.word	0x20000bf0

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_lock+0x8>)
 800881e:	f7ff bf0e 	b.w	800863e <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20000bec 	.word	0x20000bec

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_unlock+0x8>)
 800882a:	f7ff bf09 	b.w	8008640 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20000bec 	.word	0x20000bec

08008834 <__ssputs_r>:
 8008834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	688e      	ldr	r6, [r1, #8]
 800883a:	461f      	mov	r7, r3
 800883c:	42be      	cmp	r6, r7
 800883e:	680b      	ldr	r3, [r1, #0]
 8008840:	4682      	mov	sl, r0
 8008842:	460c      	mov	r4, r1
 8008844:	4690      	mov	r8, r2
 8008846:	d82c      	bhi.n	80088a2 <__ssputs_r+0x6e>
 8008848:	898a      	ldrh	r2, [r1, #12]
 800884a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800884e:	d026      	beq.n	800889e <__ssputs_r+0x6a>
 8008850:	6965      	ldr	r5, [r4, #20]
 8008852:	6909      	ldr	r1, [r1, #16]
 8008854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008858:	eba3 0901 	sub.w	r9, r3, r1
 800885c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008860:	1c7b      	adds	r3, r7, #1
 8008862:	444b      	add	r3, r9
 8008864:	106d      	asrs	r5, r5, #1
 8008866:	429d      	cmp	r5, r3
 8008868:	bf38      	it	cc
 800886a:	461d      	movcc	r5, r3
 800886c:	0553      	lsls	r3, r2, #21
 800886e:	d527      	bpl.n	80088c0 <__ssputs_r+0x8c>
 8008870:	4629      	mov	r1, r5
 8008872:	f7ff ff53 	bl	800871c <_malloc_r>
 8008876:	4606      	mov	r6, r0
 8008878:	b360      	cbz	r0, 80088d4 <__ssputs_r+0xa0>
 800887a:	6921      	ldr	r1, [r4, #16]
 800887c:	464a      	mov	r2, r9
 800887e:	f000 fd61 	bl	8009344 <memcpy>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	6126      	str	r6, [r4, #16]
 8008890:	6165      	str	r5, [r4, #20]
 8008892:	444e      	add	r6, r9
 8008894:	eba5 0509 	sub.w	r5, r5, r9
 8008898:	6026      	str	r6, [r4, #0]
 800889a:	60a5      	str	r5, [r4, #8]
 800889c:	463e      	mov	r6, r7
 800889e:	42be      	cmp	r6, r7
 80088a0:	d900      	bls.n	80088a4 <__ssputs_r+0x70>
 80088a2:	463e      	mov	r6, r7
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	4632      	mov	r2, r6
 80088a8:	4641      	mov	r1, r8
 80088aa:	f000 fcff 	bl	80092ac <memmove>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	1b9b      	subs	r3, r3, r6
 80088b2:	60a3      	str	r3, [r4, #8]
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	4433      	add	r3, r6
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	2000      	movs	r0, #0
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	462a      	mov	r2, r5
 80088c2:	f000 fd4d 	bl	8009360 <_realloc_r>
 80088c6:	4606      	mov	r6, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d1e0      	bne.n	800888e <__ssputs_r+0x5a>
 80088cc:	6921      	ldr	r1, [r4, #16]
 80088ce:	4650      	mov	r0, sl
 80088d0:	f7ff feb8 	bl	8008644 <_free_r>
 80088d4:	230c      	movs	r3, #12
 80088d6:	f8ca 3000 	str.w	r3, [sl]
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	e7e9      	b.n	80088bc <__ssputs_r+0x88>

080088e8 <_svfiprintf_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	4698      	mov	r8, r3
 80088ee:	898b      	ldrh	r3, [r1, #12]
 80088f0:	061b      	lsls	r3, r3, #24
 80088f2:	b09d      	sub	sp, #116	; 0x74
 80088f4:	4607      	mov	r7, r0
 80088f6:	460d      	mov	r5, r1
 80088f8:	4614      	mov	r4, r2
 80088fa:	d50e      	bpl.n	800891a <_svfiprintf_r+0x32>
 80088fc:	690b      	ldr	r3, [r1, #16]
 80088fe:	b963      	cbnz	r3, 800891a <_svfiprintf_r+0x32>
 8008900:	2140      	movs	r1, #64	; 0x40
 8008902:	f7ff ff0b 	bl	800871c <_malloc_r>
 8008906:	6028      	str	r0, [r5, #0]
 8008908:	6128      	str	r0, [r5, #16]
 800890a:	b920      	cbnz	r0, 8008916 <_svfiprintf_r+0x2e>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e0d0      	b.n	8008ab8 <_svfiprintf_r+0x1d0>
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	616b      	str	r3, [r5, #20]
 800891a:	2300      	movs	r3, #0
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	2320      	movs	r3, #32
 8008920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008924:	f8cd 800c 	str.w	r8, [sp, #12]
 8008928:	2330      	movs	r3, #48	; 0x30
 800892a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ad0 <_svfiprintf_r+0x1e8>
 800892e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008932:	f04f 0901 	mov.w	r9, #1
 8008936:	4623      	mov	r3, r4
 8008938:	469a      	mov	sl, r3
 800893a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800893e:	b10a      	cbz	r2, 8008944 <_svfiprintf_r+0x5c>
 8008940:	2a25      	cmp	r2, #37	; 0x25
 8008942:	d1f9      	bne.n	8008938 <_svfiprintf_r+0x50>
 8008944:	ebba 0b04 	subs.w	fp, sl, r4
 8008948:	d00b      	beq.n	8008962 <_svfiprintf_r+0x7a>
 800894a:	465b      	mov	r3, fp
 800894c:	4622      	mov	r2, r4
 800894e:	4629      	mov	r1, r5
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ff6f 	bl	8008834 <__ssputs_r>
 8008956:	3001      	adds	r0, #1
 8008958:	f000 80a9 	beq.w	8008aae <_svfiprintf_r+0x1c6>
 800895c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800895e:	445a      	add	r2, fp
 8008960:	9209      	str	r2, [sp, #36]	; 0x24
 8008962:	f89a 3000 	ldrb.w	r3, [sl]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80a1 	beq.w	8008aae <_svfiprintf_r+0x1c6>
 800896c:	2300      	movs	r3, #0
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008976:	f10a 0a01 	add.w	sl, sl, #1
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008982:	931a      	str	r3, [sp, #104]	; 0x68
 8008984:	4654      	mov	r4, sl
 8008986:	2205      	movs	r2, #5
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	4850      	ldr	r0, [pc, #320]	; (8008ad0 <_svfiprintf_r+0x1e8>)
 800898e:	f7f7 fc2f 	bl	80001f0 <memchr>
 8008992:	9a04      	ldr	r2, [sp, #16]
 8008994:	b9d8      	cbnz	r0, 80089ce <_svfiprintf_r+0xe6>
 8008996:	06d0      	lsls	r0, r2, #27
 8008998:	bf44      	itt	mi
 800899a:	2320      	movmi	r3, #32
 800899c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a0:	0711      	lsls	r1, r2, #28
 80089a2:	bf44      	itt	mi
 80089a4:	232b      	movmi	r3, #43	; 0x2b
 80089a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089aa:	f89a 3000 	ldrb.w	r3, [sl]
 80089ae:	2b2a      	cmp	r3, #42	; 0x2a
 80089b0:	d015      	beq.n	80089de <_svfiprintf_r+0xf6>
 80089b2:	9a07      	ldr	r2, [sp, #28]
 80089b4:	4654      	mov	r4, sl
 80089b6:	2000      	movs	r0, #0
 80089b8:	f04f 0c0a 	mov.w	ip, #10
 80089bc:	4621      	mov	r1, r4
 80089be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c2:	3b30      	subs	r3, #48	; 0x30
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	d94d      	bls.n	8008a64 <_svfiprintf_r+0x17c>
 80089c8:	b1b0      	cbz	r0, 80089f8 <_svfiprintf_r+0x110>
 80089ca:	9207      	str	r2, [sp, #28]
 80089cc:	e014      	b.n	80089f8 <_svfiprintf_r+0x110>
 80089ce:	eba0 0308 	sub.w	r3, r0, r8
 80089d2:	fa09 f303 	lsl.w	r3, r9, r3
 80089d6:	4313      	orrs	r3, r2
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	46a2      	mov	sl, r4
 80089dc:	e7d2      	b.n	8008984 <_svfiprintf_r+0x9c>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	1d19      	adds	r1, r3, #4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	9103      	str	r1, [sp, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfbb      	ittet	lt
 80089ea:	425b      	neglt	r3, r3
 80089ec:	f042 0202 	orrlt.w	r2, r2, #2
 80089f0:	9307      	strge	r3, [sp, #28]
 80089f2:	9307      	strlt	r3, [sp, #28]
 80089f4:	bfb8      	it	lt
 80089f6:	9204      	strlt	r2, [sp, #16]
 80089f8:	7823      	ldrb	r3, [r4, #0]
 80089fa:	2b2e      	cmp	r3, #46	; 0x2e
 80089fc:	d10c      	bne.n	8008a18 <_svfiprintf_r+0x130>
 80089fe:	7863      	ldrb	r3, [r4, #1]
 8008a00:	2b2a      	cmp	r3, #42	; 0x2a
 8008a02:	d134      	bne.n	8008a6e <_svfiprintf_r+0x186>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	1d1a      	adds	r2, r3, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	9203      	str	r2, [sp, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bfb8      	it	lt
 8008a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a14:	3402      	adds	r4, #2
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008ae0 <_svfiprintf_r+0x1f8>
 8008a1c:	7821      	ldrb	r1, [r4, #0]
 8008a1e:	2203      	movs	r2, #3
 8008a20:	4650      	mov	r0, sl
 8008a22:	f7f7 fbe5 	bl	80001f0 <memchr>
 8008a26:	b138      	cbz	r0, 8008a38 <_svfiprintf_r+0x150>
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	eba0 000a 	sub.w	r0, r0, sl
 8008a2e:	2240      	movs	r2, #64	; 0x40
 8008a30:	4082      	lsls	r2, r0
 8008a32:	4313      	orrs	r3, r2
 8008a34:	3401      	adds	r4, #1
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	4825      	ldr	r0, [pc, #148]	; (8008ad4 <_svfiprintf_r+0x1ec>)
 8008a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a42:	2206      	movs	r2, #6
 8008a44:	f7f7 fbd4 	bl	80001f0 <memchr>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d038      	beq.n	8008abe <_svfiprintf_r+0x1d6>
 8008a4c:	4b22      	ldr	r3, [pc, #136]	; (8008ad8 <_svfiprintf_r+0x1f0>)
 8008a4e:	bb1b      	cbnz	r3, 8008a98 <_svfiprintf_r+0x1b0>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	3307      	adds	r3, #7
 8008a54:	f023 0307 	bic.w	r3, r3, #7
 8008a58:	3308      	adds	r3, #8
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5e:	4433      	add	r3, r6
 8008a60:	9309      	str	r3, [sp, #36]	; 0x24
 8008a62:	e768      	b.n	8008936 <_svfiprintf_r+0x4e>
 8008a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a68:	460c      	mov	r4, r1
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	e7a6      	b.n	80089bc <_svfiprintf_r+0xd4>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	3401      	adds	r4, #1
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f04f 0c0a 	mov.w	ip, #10
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a80:	3a30      	subs	r2, #48	; 0x30
 8008a82:	2a09      	cmp	r2, #9
 8008a84:	d903      	bls.n	8008a8e <_svfiprintf_r+0x1a6>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0c6      	beq.n	8008a18 <_svfiprintf_r+0x130>
 8008a8a:	9105      	str	r1, [sp, #20]
 8008a8c:	e7c4      	b.n	8008a18 <_svfiprintf_r+0x130>
 8008a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a92:	4604      	mov	r4, r0
 8008a94:	2301      	movs	r3, #1
 8008a96:	e7f0      	b.n	8008a7a <_svfiprintf_r+0x192>
 8008a98:	ab03      	add	r3, sp, #12
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <_svfiprintf_r+0x1f4>)
 8008aa0:	a904      	add	r1, sp, #16
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f3af 8000 	nop.w
 8008aa8:	1c42      	adds	r2, r0, #1
 8008aaa:	4606      	mov	r6, r0
 8008aac:	d1d6      	bne.n	8008a5c <_svfiprintf_r+0x174>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	065b      	lsls	r3, r3, #25
 8008ab2:	f53f af2d 	bmi.w	8008910 <_svfiprintf_r+0x28>
 8008ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ab8:	b01d      	add	sp, #116	; 0x74
 8008aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abe:	ab03      	add	r3, sp, #12
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_svfiprintf_r+0x1f4>)
 8008ac6:	a904      	add	r1, sp, #16
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f000 f9bd 	bl	8008e48 <_printf_i>
 8008ace:	e7eb      	b.n	8008aa8 <_svfiprintf_r+0x1c0>
 8008ad0:	0800951c 	.word	0x0800951c
 8008ad4:	08009526 	.word	0x08009526
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	08008835 	.word	0x08008835
 8008ae0:	08009522 	.word	0x08009522

08008ae4 <__sfputc_r>:
 8008ae4:	6893      	ldr	r3, [r2, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	b410      	push	{r4}
 8008aec:	6093      	str	r3, [r2, #8]
 8008aee:	da08      	bge.n	8008b02 <__sfputc_r+0x1e>
 8008af0:	6994      	ldr	r4, [r2, #24]
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	db01      	blt.n	8008afa <__sfputc_r+0x16>
 8008af6:	290a      	cmp	r1, #10
 8008af8:	d103      	bne.n	8008b02 <__sfputc_r+0x1e>
 8008afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008afe:	f7ff bc7e 	b.w	80083fe <__swbuf_r>
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	1c58      	adds	r0, r3, #1
 8008b06:	6010      	str	r0, [r2, #0]
 8008b08:	7019      	strb	r1, [r3, #0]
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <__sfputs_r>:
 8008b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	4614      	mov	r4, r2
 8008b1a:	18d5      	adds	r5, r2, r3
 8008b1c:	42ac      	cmp	r4, r5
 8008b1e:	d101      	bne.n	8008b24 <__sfputs_r+0x12>
 8008b20:	2000      	movs	r0, #0
 8008b22:	e007      	b.n	8008b34 <__sfputs_r+0x22>
 8008b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffda 	bl	8008ae4 <__sfputc_r>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d1f3      	bne.n	8008b1c <__sfputs_r+0xa>
 8008b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b38 <_vfiprintf_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	460d      	mov	r5, r1
 8008b3e:	b09d      	sub	sp, #116	; 0x74
 8008b40:	4614      	mov	r4, r2
 8008b42:	4698      	mov	r8, r3
 8008b44:	4606      	mov	r6, r0
 8008b46:	b118      	cbz	r0, 8008b50 <_vfiprintf_r+0x18>
 8008b48:	6a03      	ldr	r3, [r0, #32]
 8008b4a:	b90b      	cbnz	r3, 8008b50 <_vfiprintf_r+0x18>
 8008b4c:	f7ff fb50 	bl	80081f0 <__sinit>
 8008b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b52:	07d9      	lsls	r1, r3, #31
 8008b54:	d405      	bmi.n	8008b62 <_vfiprintf_r+0x2a>
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	059a      	lsls	r2, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_vfiprintf_r+0x2a>
 8008b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5e:	f7ff fd6e 	bl	800863e <__retarget_lock_acquire_recursive>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	071b      	lsls	r3, r3, #28
 8008b66:	d501      	bpl.n	8008b6c <_vfiprintf_r+0x34>
 8008b68:	692b      	ldr	r3, [r5, #16]
 8008b6a:	b99b      	cbnz	r3, 8008b94 <_vfiprintf_r+0x5c>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff fc82 	bl	8008478 <__swsetup_r>
 8008b74:	b170      	cbz	r0, 8008b94 <_vfiprintf_r+0x5c>
 8008b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b78:	07dc      	lsls	r4, r3, #31
 8008b7a:	d504      	bpl.n	8008b86 <_vfiprintf_r+0x4e>
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	b01d      	add	sp, #116	; 0x74
 8008b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	0598      	lsls	r0, r3, #22
 8008b8a:	d4f7      	bmi.n	8008b7c <_vfiprintf_r+0x44>
 8008b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b8e:	f7ff fd57 	bl	8008640 <__retarget_lock_release_recursive>
 8008b92:	e7f3      	b.n	8008b7c <_vfiprintf_r+0x44>
 8008b94:	2300      	movs	r3, #0
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
 8008b98:	2320      	movs	r3, #32
 8008b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba2:	2330      	movs	r3, #48	; 0x30
 8008ba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d58 <_vfiprintf_r+0x220>
 8008ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bac:	f04f 0901 	mov.w	r9, #1
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	469a      	mov	sl, r3
 8008bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_vfiprintf_r+0x86>
 8008bba:	2a25      	cmp	r2, #37	; 0x25
 8008bbc:	d1f9      	bne.n	8008bb2 <_vfiprintf_r+0x7a>
 8008bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008bc2:	d00b      	beq.n	8008bdc <_vfiprintf_r+0xa4>
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ffa1 	bl	8008b12 <__sfputs_r>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f000 80a9 	beq.w	8008d28 <_vfiprintf_r+0x1f0>
 8008bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd8:	445a      	add	r2, fp
 8008bda:	9209      	str	r2, [sp, #36]	; 0x24
 8008bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80a1 	beq.w	8008d28 <_vfiprintf_r+0x1f0>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bf0:	f10a 0a01 	add.w	sl, sl, #1
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	9307      	str	r3, [sp, #28]
 8008bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfe:	4654      	mov	r4, sl
 8008c00:	2205      	movs	r2, #5
 8008c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c06:	4854      	ldr	r0, [pc, #336]	; (8008d58 <_vfiprintf_r+0x220>)
 8008c08:	f7f7 faf2 	bl	80001f0 <memchr>
 8008c0c:	9a04      	ldr	r2, [sp, #16]
 8008c0e:	b9d8      	cbnz	r0, 8008c48 <_vfiprintf_r+0x110>
 8008c10:	06d1      	lsls	r1, r2, #27
 8008c12:	bf44      	itt	mi
 8008c14:	2320      	movmi	r3, #32
 8008c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c1a:	0713      	lsls	r3, r2, #28
 8008c1c:	bf44      	itt	mi
 8008c1e:	232b      	movmi	r3, #43	; 0x2b
 8008c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c24:	f89a 3000 	ldrb.w	r3, [sl]
 8008c28:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2a:	d015      	beq.n	8008c58 <_vfiprintf_r+0x120>
 8008c2c:	9a07      	ldr	r2, [sp, #28]
 8008c2e:	4654      	mov	r4, sl
 8008c30:	2000      	movs	r0, #0
 8008c32:	f04f 0c0a 	mov.w	ip, #10
 8008c36:	4621      	mov	r1, r4
 8008c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c3c:	3b30      	subs	r3, #48	; 0x30
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d94d      	bls.n	8008cde <_vfiprintf_r+0x1a6>
 8008c42:	b1b0      	cbz	r0, 8008c72 <_vfiprintf_r+0x13a>
 8008c44:	9207      	str	r2, [sp, #28]
 8008c46:	e014      	b.n	8008c72 <_vfiprintf_r+0x13a>
 8008c48:	eba0 0308 	sub.w	r3, r0, r8
 8008c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c50:	4313      	orrs	r3, r2
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	46a2      	mov	sl, r4
 8008c56:	e7d2      	b.n	8008bfe <_vfiprintf_r+0xc6>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	1d19      	adds	r1, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	9103      	str	r1, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfbb      	ittet	lt
 8008c64:	425b      	neglt	r3, r3
 8008c66:	f042 0202 	orrlt.w	r2, r2, #2
 8008c6a:	9307      	strge	r3, [sp, #28]
 8008c6c:	9307      	strlt	r3, [sp, #28]
 8008c6e:	bfb8      	it	lt
 8008c70:	9204      	strlt	r2, [sp, #16]
 8008c72:	7823      	ldrb	r3, [r4, #0]
 8008c74:	2b2e      	cmp	r3, #46	; 0x2e
 8008c76:	d10c      	bne.n	8008c92 <_vfiprintf_r+0x15a>
 8008c78:	7863      	ldrb	r3, [r4, #1]
 8008c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7c:	d134      	bne.n	8008ce8 <_vfiprintf_r+0x1b0>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	9203      	str	r2, [sp, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfb8      	it	lt
 8008c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c8e:	3402      	adds	r4, #2
 8008c90:	9305      	str	r3, [sp, #20]
 8008c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d68 <_vfiprintf_r+0x230>
 8008c96:	7821      	ldrb	r1, [r4, #0]
 8008c98:	2203      	movs	r2, #3
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	f7f7 faa8 	bl	80001f0 <memchr>
 8008ca0:	b138      	cbz	r0, 8008cb2 <_vfiprintf_r+0x17a>
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	eba0 000a 	sub.w	r0, r0, sl
 8008ca8:	2240      	movs	r2, #64	; 0x40
 8008caa:	4082      	lsls	r2, r0
 8008cac:	4313      	orrs	r3, r2
 8008cae:	3401      	adds	r4, #1
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb6:	4829      	ldr	r0, [pc, #164]	; (8008d5c <_vfiprintf_r+0x224>)
 8008cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cbc:	2206      	movs	r2, #6
 8008cbe:	f7f7 fa97 	bl	80001f0 <memchr>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d03f      	beq.n	8008d46 <_vfiprintf_r+0x20e>
 8008cc6:	4b26      	ldr	r3, [pc, #152]	; (8008d60 <_vfiprintf_r+0x228>)
 8008cc8:	bb1b      	cbnz	r3, 8008d12 <_vfiprintf_r+0x1da>
 8008cca:	9b03      	ldr	r3, [sp, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	f023 0307 	bic.w	r3, r3, #7
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	443b      	add	r3, r7
 8008cda:	9309      	str	r3, [sp, #36]	; 0x24
 8008cdc:	e768      	b.n	8008bb0 <_vfiprintf_r+0x78>
 8008cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	e7a6      	b.n	8008c36 <_vfiprintf_r+0xfe>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	3401      	adds	r4, #1
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f04f 0c0a 	mov.w	ip, #10
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfa:	3a30      	subs	r2, #48	; 0x30
 8008cfc:	2a09      	cmp	r2, #9
 8008cfe:	d903      	bls.n	8008d08 <_vfiprintf_r+0x1d0>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0c6      	beq.n	8008c92 <_vfiprintf_r+0x15a>
 8008d04:	9105      	str	r1, [sp, #20]
 8008d06:	e7c4      	b.n	8008c92 <_vfiprintf_r+0x15a>
 8008d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7f0      	b.n	8008cf4 <_vfiprintf_r+0x1bc>
 8008d12:	ab03      	add	r3, sp, #12
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	462a      	mov	r2, r5
 8008d18:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <_vfiprintf_r+0x22c>)
 8008d1a:	a904      	add	r1, sp, #16
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f3af 8000 	nop.w
 8008d22:	4607      	mov	r7, r0
 8008d24:	1c78      	adds	r0, r7, #1
 8008d26:	d1d6      	bne.n	8008cd6 <_vfiprintf_r+0x19e>
 8008d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d2a:	07d9      	lsls	r1, r3, #31
 8008d2c:	d405      	bmi.n	8008d3a <_vfiprintf_r+0x202>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	059a      	lsls	r2, r3, #22
 8008d32:	d402      	bmi.n	8008d3a <_vfiprintf_r+0x202>
 8008d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d36:	f7ff fc83 	bl	8008640 <__retarget_lock_release_recursive>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	065b      	lsls	r3, r3, #25
 8008d3e:	f53f af1d 	bmi.w	8008b7c <_vfiprintf_r+0x44>
 8008d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d44:	e71c      	b.n	8008b80 <_vfiprintf_r+0x48>
 8008d46:	ab03      	add	r3, sp, #12
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <_vfiprintf_r+0x22c>)
 8008d4e:	a904      	add	r1, sp, #16
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f879 	bl	8008e48 <_printf_i>
 8008d56:	e7e4      	b.n	8008d22 <_vfiprintf_r+0x1ea>
 8008d58:	0800951c 	.word	0x0800951c
 8008d5c:	08009526 	.word	0x08009526
 8008d60:	00000000 	.word	0x00000000
 8008d64:	08008b13 	.word	0x08008b13
 8008d68:	08009522 	.word	0x08009522

08008d6c <_printf_common>:
 8008d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d70:	4616      	mov	r6, r2
 8008d72:	4699      	mov	r9, r3
 8008d74:	688a      	ldr	r2, [r1, #8]
 8008d76:	690b      	ldr	r3, [r1, #16]
 8008d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	bfb8      	it	lt
 8008d80:	4613      	movlt	r3, r2
 8008d82:	6033      	str	r3, [r6, #0]
 8008d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d88:	4607      	mov	r7, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b10a      	cbz	r2, 8008d92 <_printf_common+0x26>
 8008d8e:	3301      	adds	r3, #1
 8008d90:	6033      	str	r3, [r6, #0]
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	0699      	lsls	r1, r3, #26
 8008d96:	bf42      	ittt	mi
 8008d98:	6833      	ldrmi	r3, [r6, #0]
 8008d9a:	3302      	addmi	r3, #2
 8008d9c:	6033      	strmi	r3, [r6, #0]
 8008d9e:	6825      	ldr	r5, [r4, #0]
 8008da0:	f015 0506 	ands.w	r5, r5, #6
 8008da4:	d106      	bne.n	8008db4 <_printf_common+0x48>
 8008da6:	f104 0a19 	add.w	sl, r4, #25
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	6832      	ldr	r2, [r6, #0]
 8008dae:	1a9b      	subs	r3, r3, r2
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	dc26      	bgt.n	8008e02 <_printf_common+0x96>
 8008db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008db8:	1e13      	subs	r3, r2, #0
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	bf18      	it	ne
 8008dbe:	2301      	movne	r3, #1
 8008dc0:	0692      	lsls	r2, r2, #26
 8008dc2:	d42b      	bmi.n	8008e1c <_printf_common+0xb0>
 8008dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dc8:	4649      	mov	r1, r9
 8008dca:	4638      	mov	r0, r7
 8008dcc:	47c0      	blx	r8
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d01e      	beq.n	8008e10 <_printf_common+0xa4>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	f003 0306 	and.w	r3, r3, #6
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	bf02      	ittt	eq
 8008dde:	68e5      	ldreq	r5, [r4, #12]
 8008de0:	6833      	ldreq	r3, [r6, #0]
 8008de2:	1aed      	subeq	r5, r5, r3
 8008de4:	68a3      	ldr	r3, [r4, #8]
 8008de6:	bf0c      	ite	eq
 8008de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dec:	2500      	movne	r5, #0
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bfc4      	itt	gt
 8008df2:	1a9b      	subgt	r3, r3, r2
 8008df4:	18ed      	addgt	r5, r5, r3
 8008df6:	2600      	movs	r6, #0
 8008df8:	341a      	adds	r4, #26
 8008dfa:	42b5      	cmp	r5, r6
 8008dfc:	d11a      	bne.n	8008e34 <_printf_common+0xc8>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e008      	b.n	8008e14 <_printf_common+0xa8>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4652      	mov	r2, sl
 8008e06:	4649      	mov	r1, r9
 8008e08:	4638      	mov	r0, r7
 8008e0a:	47c0      	blx	r8
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d103      	bne.n	8008e18 <_printf_common+0xac>
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e18:	3501      	adds	r5, #1
 8008e1a:	e7c6      	b.n	8008daa <_printf_common+0x3e>
 8008e1c:	18e1      	adds	r1, r4, r3
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	2030      	movs	r0, #48	; 0x30
 8008e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e26:	4422      	add	r2, r4
 8008e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e30:	3302      	adds	r3, #2
 8008e32:	e7c7      	b.n	8008dc4 <_printf_common+0x58>
 8008e34:	2301      	movs	r3, #1
 8008e36:	4622      	mov	r2, r4
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	47c0      	blx	r8
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d0e6      	beq.n	8008e10 <_printf_common+0xa4>
 8008e42:	3601      	adds	r6, #1
 8008e44:	e7d9      	b.n	8008dfa <_printf_common+0x8e>
	...

08008e48 <_printf_i>:
 8008e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	7e0f      	ldrb	r7, [r1, #24]
 8008e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e50:	2f78      	cmp	r7, #120	; 0x78
 8008e52:	4691      	mov	r9, r2
 8008e54:	4680      	mov	r8, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	469a      	mov	sl, r3
 8008e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e5e:	d807      	bhi.n	8008e70 <_printf_i+0x28>
 8008e60:	2f62      	cmp	r7, #98	; 0x62
 8008e62:	d80a      	bhi.n	8008e7a <_printf_i+0x32>
 8008e64:	2f00      	cmp	r7, #0
 8008e66:	f000 80d4 	beq.w	8009012 <_printf_i+0x1ca>
 8008e6a:	2f58      	cmp	r7, #88	; 0x58
 8008e6c:	f000 80c0 	beq.w	8008ff0 <_printf_i+0x1a8>
 8008e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e78:	e03a      	b.n	8008ef0 <_printf_i+0xa8>
 8008e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e7e:	2b15      	cmp	r3, #21
 8008e80:	d8f6      	bhi.n	8008e70 <_printf_i+0x28>
 8008e82:	a101      	add	r1, pc, #4	; (adr r1, 8008e88 <_printf_i+0x40>)
 8008e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e88:	08008ee1 	.word	0x08008ee1
 8008e8c:	08008ef5 	.word	0x08008ef5
 8008e90:	08008e71 	.word	0x08008e71
 8008e94:	08008e71 	.word	0x08008e71
 8008e98:	08008e71 	.word	0x08008e71
 8008e9c:	08008e71 	.word	0x08008e71
 8008ea0:	08008ef5 	.word	0x08008ef5
 8008ea4:	08008e71 	.word	0x08008e71
 8008ea8:	08008e71 	.word	0x08008e71
 8008eac:	08008e71 	.word	0x08008e71
 8008eb0:	08008e71 	.word	0x08008e71
 8008eb4:	08008ff9 	.word	0x08008ff9
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008fb3 	.word	0x08008fb3
 8008ec0:	08008e71 	.word	0x08008e71
 8008ec4:	08008e71 	.word	0x08008e71
 8008ec8:	0800901b 	.word	0x0800901b
 8008ecc:	08008e71 	.word	0x08008e71
 8008ed0:	08008f21 	.word	0x08008f21
 8008ed4:	08008e71 	.word	0x08008e71
 8008ed8:	08008e71 	.word	0x08008e71
 8008edc:	08008fbb 	.word	0x08008fbb
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	1d1a      	adds	r2, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	602a      	str	r2, [r5, #0]
 8008ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e09f      	b.n	8009034 <_printf_i+0x1ec>
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	0607      	lsls	r7, r0, #24
 8008efa:	f103 0104 	add.w	r1, r3, #4
 8008efe:	6029      	str	r1, [r5, #0]
 8008f00:	d501      	bpl.n	8008f06 <_printf_i+0xbe>
 8008f02:	681e      	ldr	r6, [r3, #0]
 8008f04:	e003      	b.n	8008f0e <_printf_i+0xc6>
 8008f06:	0646      	lsls	r6, r0, #25
 8008f08:	d5fb      	bpl.n	8008f02 <_printf_i+0xba>
 8008f0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	da03      	bge.n	8008f1a <_printf_i+0xd2>
 8008f12:	232d      	movs	r3, #45	; 0x2d
 8008f14:	4276      	negs	r6, r6
 8008f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f1a:	485a      	ldr	r0, [pc, #360]	; (8009084 <_printf_i+0x23c>)
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	e012      	b.n	8008f46 <_printf_i+0xfe>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	1d19      	adds	r1, r3, #4
 8008f26:	6029      	str	r1, [r5, #0]
 8008f28:	0605      	lsls	r5, r0, #24
 8008f2a:	d501      	bpl.n	8008f30 <_printf_i+0xe8>
 8008f2c:	681e      	ldr	r6, [r3, #0]
 8008f2e:	e002      	b.n	8008f36 <_printf_i+0xee>
 8008f30:	0641      	lsls	r1, r0, #25
 8008f32:	d5fb      	bpl.n	8008f2c <_printf_i+0xe4>
 8008f34:	881e      	ldrh	r6, [r3, #0]
 8008f36:	4853      	ldr	r0, [pc, #332]	; (8009084 <_printf_i+0x23c>)
 8008f38:	2f6f      	cmp	r7, #111	; 0x6f
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2308      	moveq	r3, #8
 8008f3e:	230a      	movne	r3, #10
 8008f40:	2100      	movs	r1, #0
 8008f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f46:	6865      	ldr	r5, [r4, #4]
 8008f48:	60a5      	str	r5, [r4, #8]
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	bfa2      	ittt	ge
 8008f4e:	6821      	ldrge	r1, [r4, #0]
 8008f50:	f021 0104 	bicge.w	r1, r1, #4
 8008f54:	6021      	strge	r1, [r4, #0]
 8008f56:	b90e      	cbnz	r6, 8008f5c <_printf_i+0x114>
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d04b      	beq.n	8008ff4 <_printf_i+0x1ac>
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f62:	fb03 6711 	mls	r7, r3, r1, r6
 8008f66:	5dc7      	ldrb	r7, [r0, r7]
 8008f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f6c:	4637      	mov	r7, r6
 8008f6e:	42bb      	cmp	r3, r7
 8008f70:	460e      	mov	r6, r1
 8008f72:	d9f4      	bls.n	8008f5e <_printf_i+0x116>
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d10b      	bne.n	8008f90 <_printf_i+0x148>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	07de      	lsls	r6, r3, #31
 8008f7c:	d508      	bpl.n	8008f90 <_printf_i+0x148>
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	6861      	ldr	r1, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	bfde      	ittt	le
 8008f86:	2330      	movle	r3, #48	; 0x30
 8008f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f90:	1b52      	subs	r2, r2, r5
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	f8cd a000 	str.w	sl, [sp]
 8008f98:	464b      	mov	r3, r9
 8008f9a:	aa03      	add	r2, sp, #12
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7ff fee4 	bl	8008d6c <_printf_common>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d14a      	bne.n	800903e <_printf_i+0x1f6>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b004      	add	sp, #16
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f043 0320 	orr.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	4833      	ldr	r0, [pc, #204]	; (8009088 <_printf_i+0x240>)
 8008fbc:	2778      	movs	r7, #120	; 0x78
 8008fbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6829      	ldr	r1, [r5, #0]
 8008fc6:	061f      	lsls	r7, r3, #24
 8008fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fcc:	d402      	bmi.n	8008fd4 <_printf_i+0x18c>
 8008fce:	065f      	lsls	r7, r3, #25
 8008fd0:	bf48      	it	mi
 8008fd2:	b2b6      	uxthmi	r6, r6
 8008fd4:	07df      	lsls	r7, r3, #31
 8008fd6:	bf48      	it	mi
 8008fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8008fdc:	6029      	str	r1, [r5, #0]
 8008fde:	bf48      	it	mi
 8008fe0:	6023      	strmi	r3, [r4, #0]
 8008fe2:	b91e      	cbnz	r6, 8008fec <_printf_i+0x1a4>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	f023 0320 	bic.w	r3, r3, #32
 8008fea:	6023      	str	r3, [r4, #0]
 8008fec:	2310      	movs	r3, #16
 8008fee:	e7a7      	b.n	8008f40 <_printf_i+0xf8>
 8008ff0:	4824      	ldr	r0, [pc, #144]	; (8009084 <_printf_i+0x23c>)
 8008ff2:	e7e4      	b.n	8008fbe <_printf_i+0x176>
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	e7bd      	b.n	8008f74 <_printf_i+0x12c>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	6826      	ldr	r6, [r4, #0]
 8008ffc:	6961      	ldr	r1, [r4, #20]
 8008ffe:	1d18      	adds	r0, r3, #4
 8009000:	6028      	str	r0, [r5, #0]
 8009002:	0635      	lsls	r5, r6, #24
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	d501      	bpl.n	800900c <_printf_i+0x1c4>
 8009008:	6019      	str	r1, [r3, #0]
 800900a:	e002      	b.n	8009012 <_printf_i+0x1ca>
 800900c:	0670      	lsls	r0, r6, #25
 800900e:	d5fb      	bpl.n	8009008 <_printf_i+0x1c0>
 8009010:	8019      	strh	r1, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	4615      	mov	r5, r2
 8009018:	e7bc      	b.n	8008f94 <_printf_i+0x14c>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	602a      	str	r2, [r5, #0]
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	6862      	ldr	r2, [r4, #4]
 8009024:	2100      	movs	r1, #0
 8009026:	4628      	mov	r0, r5
 8009028:	f7f7 f8e2 	bl	80001f0 <memchr>
 800902c:	b108      	cbz	r0, 8009032 <_printf_i+0x1ea>
 800902e:	1b40      	subs	r0, r0, r5
 8009030:	6060      	str	r0, [r4, #4]
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	2300      	movs	r3, #0
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800903c:	e7aa      	b.n	8008f94 <_printf_i+0x14c>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	462a      	mov	r2, r5
 8009042:	4649      	mov	r1, r9
 8009044:	4640      	mov	r0, r8
 8009046:	47d0      	blx	sl
 8009048:	3001      	adds	r0, #1
 800904a:	d0ad      	beq.n	8008fa8 <_printf_i+0x160>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	079b      	lsls	r3, r3, #30
 8009050:	d413      	bmi.n	800907a <_printf_i+0x232>
 8009052:	68e0      	ldr	r0, [r4, #12]
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	4298      	cmp	r0, r3
 8009058:	bfb8      	it	lt
 800905a:	4618      	movlt	r0, r3
 800905c:	e7a6      	b.n	8008fac <_printf_i+0x164>
 800905e:	2301      	movs	r3, #1
 8009060:	4632      	mov	r2, r6
 8009062:	4649      	mov	r1, r9
 8009064:	4640      	mov	r0, r8
 8009066:	47d0      	blx	sl
 8009068:	3001      	adds	r0, #1
 800906a:	d09d      	beq.n	8008fa8 <_printf_i+0x160>
 800906c:	3501      	adds	r5, #1
 800906e:	68e3      	ldr	r3, [r4, #12]
 8009070:	9903      	ldr	r1, [sp, #12]
 8009072:	1a5b      	subs	r3, r3, r1
 8009074:	42ab      	cmp	r3, r5
 8009076:	dcf2      	bgt.n	800905e <_printf_i+0x216>
 8009078:	e7eb      	b.n	8009052 <_printf_i+0x20a>
 800907a:	2500      	movs	r5, #0
 800907c:	f104 0619 	add.w	r6, r4, #25
 8009080:	e7f5      	b.n	800906e <_printf_i+0x226>
 8009082:	bf00      	nop
 8009084:	0800952d 	.word	0x0800952d
 8009088:	0800953e 	.word	0x0800953e

0800908c <__sflush_r>:
 800908c:	898a      	ldrh	r2, [r1, #12]
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	4605      	mov	r5, r0
 8009094:	0710      	lsls	r0, r2, #28
 8009096:	460c      	mov	r4, r1
 8009098:	d458      	bmi.n	800914c <__sflush_r+0xc0>
 800909a:	684b      	ldr	r3, [r1, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dc05      	bgt.n	80090ac <__sflush_r+0x20>
 80090a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	dc02      	bgt.n	80090ac <__sflush_r+0x20>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d0f9      	beq.n	80090a6 <__sflush_r+0x1a>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090b8:	682f      	ldr	r7, [r5, #0]
 80090ba:	6a21      	ldr	r1, [r4, #32]
 80090bc:	602b      	str	r3, [r5, #0]
 80090be:	d032      	beq.n	8009126 <__sflush_r+0x9a>
 80090c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	075a      	lsls	r2, r3, #29
 80090c6:	d505      	bpl.n	80090d4 <__sflush_r+0x48>
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	1ac0      	subs	r0, r0, r3
 80090cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090ce:	b10b      	cbz	r3, 80090d4 <__sflush_r+0x48>
 80090d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090d2:	1ac0      	subs	r0, r0, r3
 80090d4:	2300      	movs	r3, #0
 80090d6:	4602      	mov	r2, r0
 80090d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090da:	6a21      	ldr	r1, [r4, #32]
 80090dc:	4628      	mov	r0, r5
 80090de:	47b0      	blx	r6
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	d106      	bne.n	80090f4 <__sflush_r+0x68>
 80090e6:	6829      	ldr	r1, [r5, #0]
 80090e8:	291d      	cmp	r1, #29
 80090ea:	d82b      	bhi.n	8009144 <__sflush_r+0xb8>
 80090ec:	4a29      	ldr	r2, [pc, #164]	; (8009194 <__sflush_r+0x108>)
 80090ee:	410a      	asrs	r2, r1
 80090f0:	07d6      	lsls	r6, r2, #31
 80090f2:	d427      	bmi.n	8009144 <__sflush_r+0xb8>
 80090f4:	2200      	movs	r2, #0
 80090f6:	6062      	str	r2, [r4, #4]
 80090f8:	04d9      	lsls	r1, r3, #19
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	6022      	str	r2, [r4, #0]
 80090fe:	d504      	bpl.n	800910a <__sflush_r+0x7e>
 8009100:	1c42      	adds	r2, r0, #1
 8009102:	d101      	bne.n	8009108 <__sflush_r+0x7c>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b903      	cbnz	r3, 800910a <__sflush_r+0x7e>
 8009108:	6560      	str	r0, [r4, #84]	; 0x54
 800910a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910c:	602f      	str	r7, [r5, #0]
 800910e:	2900      	cmp	r1, #0
 8009110:	d0c9      	beq.n	80090a6 <__sflush_r+0x1a>
 8009112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__sflush_r+0x94>
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fa92 	bl	8008644 <_free_r>
 8009120:	2000      	movs	r0, #0
 8009122:	6360      	str	r0, [r4, #52]	; 0x34
 8009124:	e7c0      	b.n	80090a8 <__sflush_r+0x1c>
 8009126:	2301      	movs	r3, #1
 8009128:	4628      	mov	r0, r5
 800912a:	47b0      	blx	r6
 800912c:	1c41      	adds	r1, r0, #1
 800912e:	d1c8      	bne.n	80090c2 <__sflush_r+0x36>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c5      	beq.n	80090c2 <__sflush_r+0x36>
 8009136:	2b1d      	cmp	r3, #29
 8009138:	d001      	beq.n	800913e <__sflush_r+0xb2>
 800913a:	2b16      	cmp	r3, #22
 800913c:	d101      	bne.n	8009142 <__sflush_r+0xb6>
 800913e:	602f      	str	r7, [r5, #0]
 8009140:	e7b1      	b.n	80090a6 <__sflush_r+0x1a>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	e7ad      	b.n	80090a8 <__sflush_r+0x1c>
 800914c:	690f      	ldr	r7, [r1, #16]
 800914e:	2f00      	cmp	r7, #0
 8009150:	d0a9      	beq.n	80090a6 <__sflush_r+0x1a>
 8009152:	0793      	lsls	r3, r2, #30
 8009154:	680e      	ldr	r6, [r1, #0]
 8009156:	bf08      	it	eq
 8009158:	694b      	ldreq	r3, [r1, #20]
 800915a:	600f      	str	r7, [r1, #0]
 800915c:	bf18      	it	ne
 800915e:	2300      	movne	r3, #0
 8009160:	eba6 0807 	sub.w	r8, r6, r7
 8009164:	608b      	str	r3, [r1, #8]
 8009166:	f1b8 0f00 	cmp.w	r8, #0
 800916a:	dd9c      	ble.n	80090a6 <__sflush_r+0x1a>
 800916c:	6a21      	ldr	r1, [r4, #32]
 800916e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009170:	4643      	mov	r3, r8
 8009172:	463a      	mov	r2, r7
 8009174:	4628      	mov	r0, r5
 8009176:	47b0      	blx	r6
 8009178:	2800      	cmp	r0, #0
 800917a:	dc06      	bgt.n	800918a <__sflush_r+0xfe>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e78e      	b.n	80090a8 <__sflush_r+0x1c>
 800918a:	4407      	add	r7, r0
 800918c:	eba8 0800 	sub.w	r8, r8, r0
 8009190:	e7e9      	b.n	8009166 <__sflush_r+0xda>
 8009192:	bf00      	nop
 8009194:	dfbffffe 	.word	0xdfbffffe

08009198 <_fflush_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	b913      	cbnz	r3, 80091a8 <_fflush_r+0x10>
 80091a2:	2500      	movs	r5, #0
 80091a4:	4628      	mov	r0, r5
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	b118      	cbz	r0, 80091b2 <_fflush_r+0x1a>
 80091aa:	6a03      	ldr	r3, [r0, #32]
 80091ac:	b90b      	cbnz	r3, 80091b2 <_fflush_r+0x1a>
 80091ae:	f7ff f81f 	bl	80081f0 <__sinit>
 80091b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0f3      	beq.n	80091a2 <_fflush_r+0xa>
 80091ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091bc:	07d0      	lsls	r0, r2, #31
 80091be:	d404      	bmi.n	80091ca <_fflush_r+0x32>
 80091c0:	0599      	lsls	r1, r3, #22
 80091c2:	d402      	bmi.n	80091ca <_fflush_r+0x32>
 80091c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091c6:	f7ff fa3a 	bl	800863e <__retarget_lock_acquire_recursive>
 80091ca:	4628      	mov	r0, r5
 80091cc:	4621      	mov	r1, r4
 80091ce:	f7ff ff5d 	bl	800908c <__sflush_r>
 80091d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091d4:	07da      	lsls	r2, r3, #31
 80091d6:	4605      	mov	r5, r0
 80091d8:	d4e4      	bmi.n	80091a4 <_fflush_r+0xc>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	059b      	lsls	r3, r3, #22
 80091de:	d4e1      	bmi.n	80091a4 <_fflush_r+0xc>
 80091e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091e2:	f7ff fa2d 	bl	8008640 <__retarget_lock_release_recursive>
 80091e6:	e7dd      	b.n	80091a4 <_fflush_r+0xc>

080091e8 <__swhatbuf_r>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	460c      	mov	r4, r1
 80091ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f0:	2900      	cmp	r1, #0
 80091f2:	b096      	sub	sp, #88	; 0x58
 80091f4:	4615      	mov	r5, r2
 80091f6:	461e      	mov	r6, r3
 80091f8:	da0d      	bge.n	8009216 <__swhatbuf_r+0x2e>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	bf0c      	ite	eq
 8009206:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800920a:	2340      	movne	r3, #64	; 0x40
 800920c:	2000      	movs	r0, #0
 800920e:	6031      	str	r1, [r6, #0]
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	b016      	add	sp, #88	; 0x58
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	466a      	mov	r2, sp
 8009218:	f000 f862 	bl	80092e0 <_fstat_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	dbec      	blt.n	80091fa <__swhatbuf_r+0x12>
 8009220:	9901      	ldr	r1, [sp, #4]
 8009222:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009226:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800922a:	4259      	negs	r1, r3
 800922c:	4159      	adcs	r1, r3
 800922e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009232:	e7eb      	b.n	800920c <__swhatbuf_r+0x24>

08009234 <__smakebuf_r>:
 8009234:	898b      	ldrh	r3, [r1, #12]
 8009236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009238:	079d      	lsls	r5, r3, #30
 800923a:	4606      	mov	r6, r0
 800923c:	460c      	mov	r4, r1
 800923e:	d507      	bpl.n	8009250 <__smakebuf_r+0x1c>
 8009240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	2301      	movs	r3, #1
 800924a:	6163      	str	r3, [r4, #20]
 800924c:	b002      	add	sp, #8
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	ab01      	add	r3, sp, #4
 8009252:	466a      	mov	r2, sp
 8009254:	f7ff ffc8 	bl	80091e8 <__swhatbuf_r>
 8009258:	9900      	ldr	r1, [sp, #0]
 800925a:	4605      	mov	r5, r0
 800925c:	4630      	mov	r0, r6
 800925e:	f7ff fa5d 	bl	800871c <_malloc_r>
 8009262:	b948      	cbnz	r0, 8009278 <__smakebuf_r+0x44>
 8009264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009268:	059a      	lsls	r2, r3, #22
 800926a:	d4ef      	bmi.n	800924c <__smakebuf_r+0x18>
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	f043 0302 	orr.w	r3, r3, #2
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	e7e3      	b.n	8009240 <__smakebuf_r+0xc>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	6020      	str	r0, [r4, #0]
 800927c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	9b00      	ldr	r3, [sp, #0]
 8009284:	6163      	str	r3, [r4, #20]
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	6120      	str	r0, [r4, #16]
 800928a:	b15b      	cbz	r3, 80092a4 <__smakebuf_r+0x70>
 800928c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f837 	bl	8009304 <_isatty_r>
 8009296:	b128      	cbz	r0, 80092a4 <__smakebuf_r+0x70>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	f023 0303 	bic.w	r3, r3, #3
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	431d      	orrs	r5, r3
 80092a8:	81a5      	strh	r5, [r4, #12]
 80092aa:	e7cf      	b.n	800924c <__smakebuf_r+0x18>

080092ac <memmove>:
 80092ac:	4288      	cmp	r0, r1
 80092ae:	b510      	push	{r4, lr}
 80092b0:	eb01 0402 	add.w	r4, r1, r2
 80092b4:	d902      	bls.n	80092bc <memmove+0x10>
 80092b6:	4284      	cmp	r4, r0
 80092b8:	4623      	mov	r3, r4
 80092ba:	d807      	bhi.n	80092cc <memmove+0x20>
 80092bc:	1e43      	subs	r3, r0, #1
 80092be:	42a1      	cmp	r1, r4
 80092c0:	d008      	beq.n	80092d4 <memmove+0x28>
 80092c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ca:	e7f8      	b.n	80092be <memmove+0x12>
 80092cc:	4402      	add	r2, r0
 80092ce:	4601      	mov	r1, r0
 80092d0:	428a      	cmp	r2, r1
 80092d2:	d100      	bne.n	80092d6 <memmove+0x2a>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092de:	e7f7      	b.n	80092d0 <memmove+0x24>

080092e0 <_fstat_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	; (8009300 <_fstat_r+0x20>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	4611      	mov	r1, r2
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	f7f9 f9e6 	bl	80026be <_fstat>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d102      	bne.n	80092fc <_fstat_r+0x1c>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	b103      	cbz	r3, 80092fc <_fstat_r+0x1c>
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop
 8009300:	20000be8 	.word	0x20000be8

08009304 <_isatty_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	; (8009320 <_isatty_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f9 f9e5 	bl	80026de <_isatty>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_isatty_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_isatty_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	20000be8 	.word	0x20000be8

08009324 <_sbrk_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d06      	ldr	r5, [pc, #24]	; (8009340 <_sbrk_r+0x1c>)
 8009328:	2300      	movs	r3, #0
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	602b      	str	r3, [r5, #0]
 8009330:	f7f9 f9ee 	bl	8002710 <_sbrk>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_sbrk_r+0x1a>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_sbrk_r+0x1a>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20000be8 	.word	0x20000be8

08009344 <memcpy>:
 8009344:	440a      	add	r2, r1
 8009346:	4291      	cmp	r1, r2
 8009348:	f100 33ff 	add.w	r3, r0, #4294967295
 800934c:	d100      	bne.n	8009350 <memcpy+0xc>
 800934e:	4770      	bx	lr
 8009350:	b510      	push	{r4, lr}
 8009352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800935a:	4291      	cmp	r1, r2
 800935c:	d1f9      	bne.n	8009352 <memcpy+0xe>
 800935e:	bd10      	pop	{r4, pc}

08009360 <_realloc_r>:
 8009360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009364:	4680      	mov	r8, r0
 8009366:	4614      	mov	r4, r2
 8009368:	460e      	mov	r6, r1
 800936a:	b921      	cbnz	r1, 8009376 <_realloc_r+0x16>
 800936c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	4611      	mov	r1, r2
 8009372:	f7ff b9d3 	b.w	800871c <_malloc_r>
 8009376:	b92a      	cbnz	r2, 8009384 <_realloc_r+0x24>
 8009378:	f7ff f964 	bl	8008644 <_free_r>
 800937c:	4625      	mov	r5, r4
 800937e:	4628      	mov	r0, r5
 8009380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009384:	f000 f81b 	bl	80093be <_malloc_usable_size_r>
 8009388:	4284      	cmp	r4, r0
 800938a:	4607      	mov	r7, r0
 800938c:	d802      	bhi.n	8009394 <_realloc_r+0x34>
 800938e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009392:	d812      	bhi.n	80093ba <_realloc_r+0x5a>
 8009394:	4621      	mov	r1, r4
 8009396:	4640      	mov	r0, r8
 8009398:	f7ff f9c0 	bl	800871c <_malloc_r>
 800939c:	4605      	mov	r5, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	d0ed      	beq.n	800937e <_realloc_r+0x1e>
 80093a2:	42bc      	cmp	r4, r7
 80093a4:	4622      	mov	r2, r4
 80093a6:	4631      	mov	r1, r6
 80093a8:	bf28      	it	cs
 80093aa:	463a      	movcs	r2, r7
 80093ac:	f7ff ffca 	bl	8009344 <memcpy>
 80093b0:	4631      	mov	r1, r6
 80093b2:	4640      	mov	r0, r8
 80093b4:	f7ff f946 	bl	8008644 <_free_r>
 80093b8:	e7e1      	b.n	800937e <_realloc_r+0x1e>
 80093ba:	4635      	mov	r5, r6
 80093bc:	e7df      	b.n	800937e <_realloc_r+0x1e>

080093be <_malloc_usable_size_r>:
 80093be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c2:	1f18      	subs	r0, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bfbc      	itt	lt
 80093c8:	580b      	ldrlt	r3, [r1, r0]
 80093ca:	18c0      	addlt	r0, r0, r3
 80093cc:	4770      	bx	lr
	...

080093d0 <_init>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr

080093dc <_fini>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	bf00      	nop
 80093e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e2:	bc08      	pop	{r3}
 80093e4:	469e      	mov	lr, r3
 80093e6:	4770      	bx	lr
