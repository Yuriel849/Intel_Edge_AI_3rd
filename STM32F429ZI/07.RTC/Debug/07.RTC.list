
07.RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a18c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a664  0800a664  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a66c  0800a66c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a670  0800a670  0001a670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000be4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c58  20000c58  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c370  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e33  00000000  00000000  0003c457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001870  00000000  00000000  00040290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001315  00000000  00000000  00041b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027f67  00000000  00000000  00042e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f1b4  00000000  00000000  0006ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed88b  00000000  00000000  00089f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000072a8  00000000  00000000  001777bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0017ea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a324 	.word	0x0800a324

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800a324 	.word	0x0800a324

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <DHT11_processing>:
	
}

int dht11time=150;
void DHT11_processing(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if(dht11_on)
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <DHT11_processing+0x9c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d041      	beq.n	8000e0a <DHT11_processing+0x92>
	{
		if (TIM10_10ms_counter >= dht11time)  //1500ms
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <DHT11_processing+0xa0>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <DHT11_processing+0xa4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db3b      	blt.n	8000e0a <DHT11_processing+0x92>
		{
			TIM10_10ms_counter=0;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <DHT11_processing+0xa0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			DHT11_trriger();
 8000d98:	f000 f85c 	bl	8000e54 <DHT11_trriger>
			DHT11_DataLine_Input();
 8000d9c:	f000 f870 	bl	8000e80 <DHT11_DataLine_Input>
			DHT11_dumi_read();
 8000da0:	f000 f8de 	bl	8000f60 <DHT11_dumi_read>

			i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a6 	bl	8000ef4 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
			d_RH = DHT11_rx_Data();
 8000dac:	f000 f8a2 	bl	8000ef4 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
			i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f89e 	bl	8000ef4 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
			d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f89a 	bl	8000ef4 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

			DHT11_DataLine_Output();
 8000dc4:	f000 f878 	bl	8000eb8 <DHT11_DataLine_Output>
			HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <DHT11_processing+0xa8>)
 8000dce:	f003 f8fb 	bl	8003fc8 <HAL_GPIO_WritePin>
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <DHT11_processing+0xac>)
 8000dd8:	f008 f9d6 	bl	8009188 <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <DHT11_processing+0xb0>)
 8000de2:	f008 f9d1 	bl	8009188 <iprintf>

			if(lcd_display_mode_flag == 1)
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <DHT11_processing+0xb4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10d      	bne.n	8000e0a <DHT11_processing+0x92>
			{
//				lcd_command(CLEAR_DISPLAY);
				sprintf(lcd_buff, "[Tmp]%d [Wet]%d", (int)i_Tmp, (int)i_RH);
 8000dee:	7d7a      	ldrb	r2, [r7, #21]
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	4638      	mov	r0, r7
 8000df4:	490e      	ldr	r1, [pc, #56]	; (8000e30 <DHT11_processing+0xb8>)
 8000df6:	f008 fa35 	bl	8009264 <siprintf>
				move_cursor(0,0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f9f3 	bl	80011e8 <move_cursor>
				lcd_string(lcd_buff);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f9da 	bl	80011be <lcd_string>
			}
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000a84 	.word	0x20000a84
 8000e18:	20000a7c 	.word	0x20000a7c
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	40020000 	.word	0x40020000
 8000e24:	0800a34c 	.word	0x0800a34c
 8000e28:	0800a358 	.word	0x0800a358
 8000e2c:	20000090 	.word	0x20000090
 8000e30:	0800a364 	.word	0x0800a364

08000e34 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <DHT11_Init+0x1c>)
 8000e3e:	f003 f8c3 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e46:	f002 fa0b 	bl	8003260 <HAL_Delay>
	return;
 8000e4a:	bf00      	nop
}
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020000 	.word	0x40020000

08000e54 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <DHT11_trriger+0x28>)
 8000e5e:	f003 f8b3 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e62:	2014      	movs	r0, #20
 8000e64:	f002 f9fc 	bl	8003260 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <DHT11_trriger+0x28>)
 8000e6e:	f003 f8ab 	bl	8003fc8 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e72:	2007      	movs	r0, #7
 8000e74:	f000 fd44 	bl	8001900 <delay_us>
	return;
 8000e78:	bf00      	nop
}
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40020000 	.word	0x40020000

08000e80 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <DHT11_DataLine_Input+0x34>)
 8000ea6:	f002 fecb 	bl	8003c40 <HAL_GPIO_Init>
	
	return;
 8000eaa:	bf00      	nop
}
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <DHT11_DataLine_Output+0x38>)
 8000ee2:	f002 fead 	bl	8003c40 <HAL_GPIO_Init>
	
	return;
 8000ee6:	bf00      	nop
}
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	e023      	b.n	8000f4c <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f04:	bf00      	nop
 8000f06:	2101      	movs	r1, #1
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <DHT11_rx_Data+0x68>)
 8000f0a:	f003 f845 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f8      	beq.n	8000f06 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000f14:	2028      	movs	r0, #40	; 0x28
 8000f16:	f000 fcf3 	bl	8001900 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f20:	2101      	movs	r1, #1
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <DHT11_rx_Data+0x68>)
 8000f24:	f003 f838 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f36:	bf00      	nop
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <DHT11_rx_Data+0x68>)
 8000f3c:	f003 f82c 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d0f8      	beq.n	8000f38 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	ddd8      	ble.n	8000f04 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020000 	.word	0x40020000

08000f60 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f64:	bf00      	nop
 8000f66:	2101      	movs	r1, #1
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <DHT11_dumi_read+0x38>)
 8000f6a:	f003 f815 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d0f8      	beq.n	8000f66 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f74:	bf00      	nop
 8000f76:	2101      	movs	r1, #1
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <DHT11_dumi_read+0x38>)
 8000f7a:	f003 f80d 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f8      	beq.n	8000f76 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f84:	bf00      	nop
 8000f86:	2101      	movs	r1, #1
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <DHT11_dumi_read+0x38>)
 8000f8a:	f003 f805 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d0f8      	beq.n	8000f86 <DHT11_dumi_read+0x26>
	return;
 8000f94:	bf00      	nop
}
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020000 	.word	0x40020000

08000f9c <lcd_display_mode_select>:
RTC_TimeTypeDef mTime;  // time when button four is pressed

void lcd_display_mode_select(void);

void lcd_display_mode_select(void)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af02      	add	r7, sp, #8
	char lcd_buff[40];
	if(get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa8:	4823      	ldr	r0, [pc, #140]	; (8001038 <lcd_display_mode_select+0x9c>)
 8000faa:	f000 f84f 	bl	800104c <get_button>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13d      	bne.n	8001030 <lcd_display_mode_select+0x94>
	{
		lcd_command(CLEAR_DISPLAY);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 f881 	bl	80010bc <lcd_command>
		lcd_display_mode_flag++;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <lcd_display_mode_select+0xa0>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <lcd_display_mode_select+0xa0>)
 8000fc4:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 4;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <lcd_display_mode_select+0xa0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <lcd_display_mode_select+0xa0>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		if(lcd_display_mode_flag == 3)
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <lcd_display_mode_select+0xa0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d129      	bne.n	8001030 <lcd_display_mode_select+0x94>
		{
			HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BCD);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4918      	ldr	r1, [pc, #96]	; (8001040 <lcd_display_mode_select+0xa4>)
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <lcd_display_mode_select+0xa8>)
 8000fe2:	f004 fd57 	bl	8005a94 <HAL_RTC_GetTime>
//			lcd_command(CLEAR_DISPLAY);
			sprintf(lcd_buff, "TIME: %02d:%02d:%02d",
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <lcd_display_mode_select+0xa4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
			sprintf(lcd_buff, "TIME: %02d:%02d:%02d",
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f914 	bl	8001218 <bin2dec>
 8000ff0:	4604      	mov	r4, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <lcd_display_mode_select+0xa4>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
			sprintf(lcd_buff, "TIME: %02d:%02d:%02d",
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f90e 	bl	8001218 <bin2dec>
 8000ffc:	4605      	mov	r5, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <lcd_display_mode_select+0xa4>)
 8001000:	789b      	ldrb	r3, [r3, #2]
			sprintf(lcd_buff, "TIME: %02d:%02d:%02d",
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f908 	bl	8001218 <bin2dec>
 8001008:	4603      	mov	r3, r0
 800100a:	4638      	mov	r0, r7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	462b      	mov	r3, r5
 8001010:	4622      	mov	r2, r4
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <lcd_display_mode_select+0xac>)
 8001014:	f008 f926 	bl	8009264 <siprintf>
			move_cursor(1,0);
 8001018:	2100      	movs	r1, #0
 800101a:	2001      	movs	r0, #1
 800101c:	f000 f8e4 	bl	80011e8 <move_cursor>
			lcd_string(lcd_buff);
 8001020:	463b      	mov	r3, r7
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f8cb 	bl	80011be <lcd_string>
			move_cursor(1,6); // 시간 정보 field로 커서 이동
 8001028:	2106      	movs	r1, #6
 800102a:	2001      	movs	r0, #1
 800102c:	f000 f8dc 	bl	80011e8 <move_cursor>
		}
	}
}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	40020800 	.word	0x40020800
 800103c:	20000090 	.word	0x20000090
 8001040:	20000094 	.word	0x20000094
 8001044:	2000035c 	.word	0x2000035c
 8001048:	0800a374 	.word	0x0800a374

0800104c <get_button>:
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f002 ff99 	bl	8003f98 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10d      	bne.n	800108c <get_button+0x40>
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <get_button+0x6c>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 800107a:	2050      	movs	r0, #80	; 0x50
 800107c:	f002 f8f0 	bl	8003260 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <get_button+0x6c>)
 8001084:	2100      	movs	r1, #0
 8001086:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8001088:	2301      	movs	r3, #1
 800108a:	e011      	b.n	80010b0 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10d      	bne.n	80010ae <get_button+0x62>
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <get_button+0x6c>)
 8001096:	5cd3      	ldrb	r3, [r2, r3]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d108      	bne.n	80010ae <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 800109c:	201e      	movs	r0, #30
 800109e:	f002 f8df 	bl	8003260 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80010a2:	787b      	ldrb	r3, [r7, #1]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <get_button+0x6c>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000004 	.word	0x20000004

080010bc <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f023 030f 	bic.w	r3, r3, #15
 80010cc:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f043 030c 	orr.w	r3, r3, #12
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	f043 030c 	orr.w	r3, r3, #12
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80010fc:	bf00      	nop
 80010fe:	f107 0208 	add.w	r2, r7, #8
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2304      	movs	r3, #4
 8001108:	214e      	movs	r1, #78	; 0x4e
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <lcd_command+0x64>)
 800110c:	f003 f8ba 	bl	8004284 <HAL_I2C_Master_Transmit>
 8001110:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 8001116:	bf00      	nop
}
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000308 	.word	0x20000308

08001124 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f043 030d 	orr.w	r3, r3, #13
 8001142:	b2db      	uxtb	r3, r3
 8001144:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0309 	orr.w	r3, r3, #9
 800114c:	b2db      	uxtb	r3, r3
 800114e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f043 030d 	orr.w	r3, r3, #13
 8001156:	b2db      	uxtb	r3, r3
 8001158:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f043 0309 	orr.w	r3, r3, #9
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001164:	bf00      	nop
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2304      	movs	r3, #4
 8001170:	214e      	movs	r1, #78	; 0x4e
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <lcd_data+0x64>)
 8001174:	f003 f886 	bl	8004284 <HAL_I2C_Master_Transmit>
 8001178:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f3      	bne.n	8001166 <lcd_data+0x42>
		//HAL_Delay(1);
	}
	return;
 800117e:	bf00      	nop
}
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000308 	.word	0x20000308

0800118c <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8001190:	2033      	movs	r0, #51	; 0x33
 8001192:	f7ff ff93 	bl	80010bc <lcd_command>
	lcd_command(0x32);
 8001196:	2032      	movs	r0, #50	; 0x32
 8001198:	f7ff ff90 	bl	80010bc <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 800119c:	2028      	movs	r0, #40	; 0x28
 800119e:	f7ff ff8d 	bl	80010bc <lcd_command>
	lcd_command(DISPLAY_ON);
 80011a2:	200c      	movs	r0, #12
 80011a4:	f7ff ff8a 	bl	80010bc <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80011a8:	2006      	movs	r0, #6
 80011aa:	f7ff ff87 	bl	80010bc <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff84 	bl	80010bc <lcd_command>
	HAL_Delay(2);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f002 f853 	bl	8003260 <HAL_Delay>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}

080011be <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	while(*str)
 80011c6:	e006      	b.n	80011d6 <lcd_string+0x18>
	{
		lcd_data(*str++);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffa7 	bl	8001124 <lcd_data>
	while(*str)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f4      	bne.n	80011c8 <lcd_string+0xa>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	019b      	lsls	r3, r3, #6
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	4313      	orrs	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff56 	bl	80010bc <lcd_command>
	return;
 8001210:	bf00      	nop
}
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <bin2dec>:
// 23년이 save된 binary format
// 7564 3210
// 0010 0011
// STM32의 RTC로부터 시간 & 날짜 정보를 읽어오는 함수
unsigned char bin2dec(unsigned char byte)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	low = byte & 0x0f; // 하위 4비트 (low nibble)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10; // 상위 4비트 (high nibble)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800123a:	7bba      	ldrb	r2, [r7, #14]
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4413      	add	r3, r2
 8001240:	b2db      	uxtb	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <dec2bin>:

unsigned char dec2bin(int byte)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	unsigned char high, low;

	high = (byte / 10) << 4;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <dec2bin+0x4c>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1092      	asrs	r2, r2, #2
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <dec2bin+0x4c>)
 8001270:	fb83 1302 	smull	r1, r3, r3, r2
 8001274:	1099      	asrs	r1, r3, #2
 8001276:	17d3      	asrs	r3, r2, #31
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	460b      	mov	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	1ad1      	subs	r1, r2, r3
 8001284:	460b      	mov	r3, r1
 8001286:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	4413      	add	r3, r2
 800128e:	b2db      	uxtb	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	66666667 	.word	0x66666667

080012a0 <get_rtc>:

void get_rtc(void)
{
 80012a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a4:	b08f      	sub	sp, #60	; 0x3c
 80012a6:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oldTime; // 이전 시간 정보를 가지고 있기 위함이다.
	char buff[40];
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80012a8:	2201      	movs	r2, #1
 80012aa:	494b      	ldr	r1, [pc, #300]	; (80013d8 <get_rtc+0x138>)
 80012ac:	484b      	ldr	r0, [pc, #300]	; (80013dc <get_rtc+0x13c>)
 80012ae:	f004 fcd3 	bl	8005c58 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80012b2:	2201      	movs	r2, #1
 80012b4:	494a      	ldr	r1, [pc, #296]	; (80013e0 <get_rtc+0x140>)
 80012b6:	4849      	ldr	r0, [pc, #292]	; (80013dc <get_rtc+0x13c>)
 80012b8:	f004 fbec 	bl	8005a94 <HAL_RTC_GetTime>

	if(oldTime.Seconds != sTime.Seconds)
 80012bc:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <get_rtc+0x144>)
 80012be:	789a      	ldrb	r2, [r3, #2]
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <get_rtc+0x140>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d07d      	beq.n	80013c4 <get_rtc+0x124>
	{
		// YYYY-MM-DD HH:mm:ss
		printf("%04d-%02d-%02d %02d:%02d:%02d\n", bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <get_rtc+0x138>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ffa3 	bl	8001218 <bin2dec>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <get_rtc+0x138>)
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff9b 	bl	8001218 <bin2dec>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4698      	mov	r8, r3
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <get_rtc+0x138>)
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff94 	bl	8001218 <bin2dec>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4699      	mov	r9, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <get_rtc+0x140>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff8d 	bl	8001218 <bin2dec>
 80012fe:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n", bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 8001300:	461d      	mov	r5, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <get_rtc+0x140>)
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff86 	bl	8001218 <bin2dec>
 800130c:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n", bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 800130e:	461e      	mov	r6, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <get_rtc+0x140>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff7f 	bl	8001218 <bin2dec>
 800131a:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n", bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	9601      	str	r6, [sp, #4]
 8001320:	9500      	str	r5, [sp, #0]
 8001322:	464b      	mov	r3, r9
 8001324:	4642      	mov	r2, r8
 8001326:	4621      	mov	r1, r4
 8001328:	482f      	ldr	r0, [pc, #188]	; (80013e8 <get_rtc+0x148>)
 800132a:	f007 ff2d 	bl	8009188 <iprintf>

		if(lcd_display_mode_flag == 0)
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <get_rtc+0x14c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d146      	bne.n	80013c4 <get_rtc+0x124>
		{
			sprintf(buff, "DATE: %04d-%02d-%02d", bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <get_rtc+0x138>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff6c 	bl	8001218 <bin2dec>
 8001340:	4603      	mov	r3, r0
 8001342:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <get_rtc+0x138>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff64 	bl	8001218 <bin2dec>
 8001350:	4603      	mov	r3, r0
 8001352:	461d      	mov	r5, r3
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <get_rtc+0x138>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <bin2dec>
 800135e:	4603      	mov	r3, r0
 8001360:	4638      	mov	r0, r7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	462b      	mov	r3, r5
 8001366:	4622      	mov	r2, r4
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <get_rtc+0x150>)
 800136a:	f007 ff7b 	bl	8009264 <siprintf>
			move_cursor(0, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff39 	bl	80011e8 <move_cursor>
			lcd_string(buff);
 8001376:	463b      	mov	r3, r7
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff20 	bl	80011be <lcd_string>
			sprintf(buff, "TIME: %02d:%02d:%02d", bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <get_rtc+0x140>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff48 	bl	8001218 <bin2dec>
 8001388:	4603      	mov	r3, r0
 800138a:	461c      	mov	r4, r3
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <get_rtc+0x140>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff41 	bl	8001218 <bin2dec>
 8001396:	4603      	mov	r3, r0
 8001398:	461d      	mov	r5, r3
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <get_rtc+0x140>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff3a 	bl	8001218 <bin2dec>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4638      	mov	r0, r7
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	462b      	mov	r3, r5
 80013ac:	4622      	mov	r2, r4
 80013ae:	4911      	ldr	r1, [pc, #68]	; (80013f4 <get_rtc+0x154>)
 80013b0:	f007 ff58 	bl	8009264 <siprintf>
			move_cursor(1, 0);
 80013b4:	2100      	movs	r1, #0
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ff16 	bl	80011e8 <move_cursor>
			lcd_string(buff);
 80013bc:	463b      	mov	r3, r7
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fefd 	bl	80011be <lcd_string>
		}
	}

	oldTime.Seconds = sTime.Seconds;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <get_rtc+0x140>)
 80013c6:	789a      	ldrb	r2, [r3, #2]
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <get_rtc+0x144>)
 80013ca:	709a      	strb	r2, [r3, #2]
}
 80013cc:	bf00      	nop
 80013ce:	372c      	adds	r7, #44	; 0x2c
 80013d0:	46bd      	mov	sp, r7
 80013d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d6:	bf00      	nop
 80013d8:	200000bc 	.word	0x200000bc
 80013dc:	2000035c 	.word	0x2000035c
 80013e0:	200000a8 	.word	0x200000a8
 80013e4:	200000c0 	.word	0x200000c0
 80013e8:	0800a38c 	.word	0x0800a38c
 80013ec:	20000090 	.word	0x20000090
 80013f0:	0800a3ac 	.word	0x0800a3ac
 80013f4:	0800a3c4 	.word	0x0800a3c4

080013f8 <set_rtc>:

// expected user input: setrtc231016103900
//							  678901234567
void set_rtc(char * date_time)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4]; // date
	char hh[4], min[4], ss[4]; // time

	strncpy(yy, date_time+6, 2); // yy[0] = '2', yy[1] = '3', yy[2] = \0, yy[3] = \0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1d99      	adds	r1, r3, #6
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2202      	movs	r2, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f008 f83c 	bl	8009488 <strncpy>
	strncpy(mm, date_time+8, 2);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f103 0108 	add.w	r1, r3, #8
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2202      	movs	r2, #2
 800141c:	4618      	mov	r0, r3
 800141e:	f008 f833 	bl	8009488 <strncpy>
	strncpy(dd, date_time+10, 2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f103 010a 	add.w	r1, r3, #10
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2202      	movs	r2, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f008 f82a 	bl	8009488 <strncpy>
	strncpy(hh, date_time+12, 2);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f103 010c 	add.w	r1, r3, #12
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2202      	movs	r2, #2
 8001440:	4618      	mov	r0, r3
 8001442:	f008 f821 	bl	8009488 <strncpy>
	strncpy(min, date_time+14, 2);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 010e 	add.w	r1, r3, #14
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2202      	movs	r2, #2
 8001452:	4618      	mov	r0, r3
 8001454:	f008 f818 	bl	8009488 <strncpy>
	strncpy(ss, date_time+16, 2);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f103 0110 	add.w	r1, r3, #16
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2202      	movs	r2, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f008 f80f 	bl	8009488 <strncpy>

	// ascii -> int -> bcd
	sDate.Year = dec2bin(atoi(yy));
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4618      	mov	r0, r3
 8001470:	f007 fd38 	bl	8008ee4 <atoi>
 8001474:	4603      	mov	r3, r0
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff feea 	bl	8001250 <dec2bin>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <set_rtc+0x12c>)
 8001482:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f007 fd2b 	bl	8008ee4 <atoi>
 800148e:	4603      	mov	r3, r0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fedd 	bl	8001250 <dec2bin>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <set_rtc+0x12c>)
 800149c:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4618      	mov	r0, r3
 80014a4:	f007 fd1e 	bl	8008ee4 <atoi>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fed0 	bl	8001250 <dec2bin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <set_rtc+0x12c>)
 80014b6:	709a      	strb	r2, [r3, #2]
	sTime.Hours = dec2bin(atoi(hh));
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f007 fd11 	bl	8008ee4 <atoi>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fec3 	bl	8001250 <dec2bin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <set_rtc+0x130>)
 80014d0:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4618      	mov	r0, r3
 80014d8:	f007 fd04 	bl	8008ee4 <atoi>
 80014dc:	4603      	mov	r3, r0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff feb6 	bl	8001250 <dec2bin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <set_rtc+0x130>)
 80014ea:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fcf7 	bl	8008ee4 <atoi>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fea9 	bl	8001250 <dec2bin>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <set_rtc+0x130>)
 8001504:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001506:	2201      	movs	r2, #1
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <set_rtc+0x12c>)
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <set_rtc+0x134>)
 800150c:	f004 fb20 	bl	8005b50 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001510:	2201      	movs	r2, #1
 8001512:	4905      	ldr	r1, [pc, #20]	; (8001528 <set_rtc+0x130>)
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <set_rtc+0x134>)
 8001516:	f004 fa23 	bl	8005960 <HAL_RTC_SetTime>
}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000bc 	.word	0x200000bc
 8001528:	200000a8 	.word	0x200000a8
 800152c:	2000035c 	.word	0x2000035c

08001530 <set_time_button_ui>:
// buttom1 : 분을 변경하는 버튼. 00~59 (up counter)
// button2 : 초를 변경하는 버튼. 00~59 (up counter)
// button3 : 변경 완료. 현재까지 변경된 내용을 저장
// HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
void set_time_button_ui(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	if(lcd_display_mode_flag == 3)
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <set_time_button_ui+0x100>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d173      	bne.n	8001626 <set_time_button_ui+0xf6>
	{
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001544:	483b      	ldr	r0, [pc, #236]	; (8001634 <set_time_button_ui+0x104>)
 8001546:	f7ff fd81 	bl	800104c <get_button>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10f      	bne.n	8001570 <set_time_button_ui+0x40>
		{
			printf("Button 0 pressed\n");
 8001550:	4839      	ldr	r0, [pc, #228]	; (8001638 <set_time_button_ui+0x108>)
 8001552:	f007 fe7f 	bl	8009254 <puts>
			// 시간 정보 modify +1
			mTime.Hours++;
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <set_time_button_ui+0x10c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <set_time_button_ui+0x10c>)
 8001560:	701a      	strb	r2, [r3, #0]
			if(mTime.Hours > 23)
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <set_time_button_ui+0x10c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b17      	cmp	r3, #23
 8001568:	d902      	bls.n	8001570 <set_time_button_ui+0x40>
			{
				mTime.Hours = 0;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <set_time_button_ui+0x10c>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001576:	482f      	ldr	r0, [pc, #188]	; (8001634 <set_time_button_ui+0x104>)
 8001578:	f7ff fd68 	bl	800104c <get_button>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <set_time_button_ui+0x72>
		{
			printf("Button 1 pressed\n");
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <set_time_button_ui+0x110>)
 8001584:	f007 fe66 	bl	8009254 <puts>
			// 분 정보 modify +1
			mTime.Minutes++;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <set_time_button_ui+0x10c>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	3301      	adds	r3, #1
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <set_time_button_ui+0x10c>)
 8001592:	705a      	strb	r2, [r3, #1]
			if(mTime.Minutes > 59)
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <set_time_button_ui+0x10c>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2b3b      	cmp	r3, #59	; 0x3b
 800159a:	d902      	bls.n	80015a2 <set_time_button_ui+0x72>
			{
				mTime.Minutes = 0;
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <set_time_button_ui+0x10c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	705a      	strb	r2, [r3, #1]
			}
		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80015a2:	2202      	movs	r2, #2
 80015a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a8:	4822      	ldr	r0, [pc, #136]	; (8001634 <set_time_button_ui+0x104>)
 80015aa:	f7ff fd4f 	bl	800104c <get_button>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <set_time_button_ui+0xa4>
		{
			printf("Button 2 pressed\n");
 80015b4:	4823      	ldr	r0, [pc, #140]	; (8001644 <set_time_button_ui+0x114>)
 80015b6:	f007 fe4d 	bl	8009254 <puts>
			// 초 정보 modify +1
			mTime.Seconds++;
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <set_time_button_ui+0x10c>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <set_time_button_ui+0x10c>)
 80015c4:	709a      	strb	r2, [r3, #2]
			if(mTime.Seconds > 59)
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <set_time_button_ui+0x10c>)
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	2b3b      	cmp	r3, #59	; 0x3b
 80015cc:	d902      	bls.n	80015d4 <set_time_button_ui+0xa4>
			{
				mTime.Seconds = 0;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <set_time_button_ui+0x10c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	709a      	strb	r2, [r3, #2]
			}
		}
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80015d4:	2203      	movs	r2, #3
 80015d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <set_time_button_ui+0x104>)
 80015dc:	f7ff fd36 	bl	800104c <get_button>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d11f      	bne.n	8001626 <set_time_button_ui+0xf6>
		{
			printf("Button 3 pressed\n");
 80015e6:	4818      	ldr	r0, [pc, #96]	; (8001648 <set_time_button_ui+0x118>)
 80015e8:	f007 fe34 	bl	8009254 <puts>
//			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD); // 누르면 최종적으로 업데이트
			for(int i = 0; i < 5; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e016      	b.n	8001620 <set_time_button_ui+0xf0>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <set_time_button_ui+0x11c>)
 80015f8:	f002 fce6 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_Delay(200 * i);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	22c8      	movs	r2, #200	; 0xc8
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fe2b 	bl	8003260 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2108      	movs	r1, #8
 800160e:	480f      	ldr	r0, [pc, #60]	; (800164c <set_time_button_ui+0x11c>)
 8001610:	f002 fcda 	bl	8003fc8 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001614:	20c8      	movs	r0, #200	; 0xc8
 8001616:	f001 fe23 	bl	8003260 <HAL_Delay>
			for(int i = 0; i < 5; i++)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	dde5      	ble.n	80015f2 <set_time_button_ui+0xc2>
			}
		}
	}
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000090 	.word	0x20000090
 8001634:	40021000 	.word	0x40021000
 8001638:	0800a3dc 	.word	0x0800a3dc
 800163c:	20000094 	.word	0x20000094
 8001640:	0800a3f0 	.word	0x0800a3f0
 8001644:	0800a404 	.word	0x0800a404
 8001648:	0800a418 	.word	0x0800a418
 800164c:	40020000 	.word	0x40020000

08001650 <flower_on>:
#endif
	}
}

void flower_on()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	21ff      	movs	r1, #255	; 0xff
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <flower_on+0x5c>)
 800165c:	f002 fcb4 	bl	8003fc8 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	e01a      	b.n	800169c <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8001666:	2210      	movs	r2, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	b29b      	uxth	r3, r3
 8001670:	2201      	movs	r2, #1
 8001672:	4619      	mov	r1, r3
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <flower_on+0x5c>)
 8001676:	f002 fca7 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 800167a:	2208      	movs	r2, #8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	fa42 f303 	asr.w	r3, r2, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <flower_on+0x5c>)
 800168a:	f002 fc9d 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800168e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001692:	f001 fde5 	bl	8003260 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	dde1      	ble.n	8001666 <flower_on+0x16>
	}
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020c00 	.word	0x40020c00

080016b0 <flower_off>:


void flower_off()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	21ff      	movs	r1, #255	; 0xff
 80016ba:	4814      	ldr	r0, [pc, #80]	; (800170c <flower_off+0x5c>)
 80016bc:	f002 fc84 	bl	8003fc8 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	e01a      	b.n	80016fc <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	fa42 f303 	asr.w	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <flower_off+0x5c>)
 80016d6:	f002 fc77 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 80016da:	2201      	movs	r2, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <flower_off+0x5c>)
 80016ea:	f002 fc6d 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80016ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016f2:	f001 fdb5 	bl	8003260 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3301      	adds	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	dde1      	ble.n	80016c6 <flower_off+0x16>
	}
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020c00 	.word	0x40020c00

08001710 <led_keepon_up>:

void led_keepon_up()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	e00f      	b.n	800173c <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <led_keepon_up+0x3c>)
 800172c:	f002 fc4c 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001730:	20c8      	movs	r0, #200	; 0xc8
 8001732:	f001 fd95 	bl	8003260 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b07      	cmp	r3, #7
 8001740:	ddec      	ble.n	800171c <led_keepon_up+0xc>
	}
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40020c00 	.word	0x40020c00

08001750 <led_keepon_down>:

void led_keepon_down()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e00f      	b.n	800177c <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	fa42 f303 	asr.w	r3, r2, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	2201      	movs	r2, #1
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <led_keepon_down+0x3c>)
 800176c:	f002 fc2c 	bl	8003fc8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001770:	20c8      	movs	r0, #200	; 0xc8
 8001772:	f001 fd75 	bl	8003260 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3301      	adds	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b07      	cmp	r3, #7
 8001780:	ddec      	ble.n	800175c <led_keepon_down+0xc>
	}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40020c00 	.word	0x40020c00

08001790 <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <led_on_up+0x50>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2bc7      	cmp	r3, #199	; 0xc7
 800179a:	dd1e      	ble.n	80017da <led_on_up+0x4a>
	{
		t1ms_counter=0;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <led_on_up+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
		led_all_off();
 80017a2:	f000 f861 	bl	8001868 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <led_on_up+0x54>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <led_on_up+0x58>)
 80017b8:	f002 fc06 	bl	8003fc8 <HAL_GPIO_WritePin>
		i++;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <led_on_up+0x54>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <led_on_up+0x54>)
 80017c4:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <led_on_up+0x54>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	dd05      	ble.n	80017da <led_on_up+0x4a>
		{
			i=0;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <led_on_up+0x54>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <led_on_up+0x5c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000a8c 	.word	0x20000a8c
 80017e4:	200000d8 	.word	0x200000d8
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	200000d4 	.word	0x200000d4

080017f0 <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <led_on_down+0x50>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2bc7      	cmp	r3, #199	; 0xc7
 80017fa:	dd1e      	ble.n	800183a <led_on_down+0x4a>
	{
		t1ms_counter=0;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <led_on_down+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		led_all_off();
 8001802:	f000 f831 	bl	8001868 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <led_on_down+0x54>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	fa42 f303 	asr.w	r3, r2, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	2201      	movs	r2, #1
 8001814:	4619      	mov	r1, r3
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <led_on_down+0x58>)
 8001818:	f002 fbd6 	bl	8003fc8 <HAL_GPIO_WritePin>
		i++;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <led_on_down+0x54>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <led_on_down+0x54>)
 8001824:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <led_on_down+0x54>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b07      	cmp	r3, #7
 800182c:	dd05      	ble.n	800183a <led_on_down+0x4a>
		{
			i=0;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <led_on_down+0x54>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <led_on_down+0x5c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000a8c 	.word	0x20000a8c
 8001844:	200000dc 	.word	0x200000dc
 8001848:	40020c00 	.word	0x40020c00
 800184c:	200000d4 	.word	0x200000d4

08001850 <led_all_on>:

void led_all_on(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	21ff      	movs	r1, #255	; 0xff
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <led_all_on+0x14>)
 800185a:	f002 fbb5 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020c00 	.word	0x40020c00

08001868 <led_all_off>:

void led_all_off(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	21ff      	movs	r1, #255	; 0xff
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <led_all_off+0x14>)
 8001872:	f002 fba9 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020c00 	.word	0x40020c00

08001880 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_SYSTICK_Handler+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_SYSTICK_Handler+0x18>)
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000a8c 	.word	0x20000a8c

0800189c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80018a4:	1d39      	adds	r1, r7, #4
 80018a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018aa:	2201      	movs	r2, #1
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <__io_putchar+0x20>)
 80018ae:	f005 ffec 	bl	800788a <HAL_UART_Transmit>

  return ch;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200004e4 	.word	0x200004e4

080018c0 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d109      	bne.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018da:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018e4:	6013      	str	r3, [r2, #0]
	}
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40014400 	.word	0x40014400
 80018f8:	20000a7c 	.word	0x20000a7c
 80018fc:	20000a80 	.word	0x20000a80

08001900 <delay_us>:

void delay_us(unsigned long us)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <delay_us+0x2c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001910:	bf00      	nop
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <delay_us+0x2c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d8f9      	bhi.n	8001912 <delay_us+0x12>
		;
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	2000049c 	.word	0x2000049c

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f001 fc22 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f85e 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 fb9e 	bl	800207c <MX_GPIO_Init>
  MX_ETH_Init();
 8001940:	f000 f8c6 	bl	8001ad0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001944:	f000 fb18 	bl	8001f78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001948:	f000 fb6a 	bl	8002020 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 800194c:	f000 fb3e 	bl	8001fcc <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001950:	f000 faca 	bl	8001ee8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001954:	f000 faec 	bl	8001f30 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001958:	f000 f9fc 	bl	8001d54 <MX_TIM3_Init>
  MX_I2C1_Init();
 800195c:	f000 f906 	bl	8001b6c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001960:	f000 fa4c 	bl	8001dfc <MX_TIM4_Init>
  MX_TIM2_Init();
 8001964:	f000 f99c 	bl	8001ca0 <MX_TIM2_Init>
  MX_RTC_Init();
 8001968:	f000 f940 	bl	8001bec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 800196c:	2201      	movs	r2, #1
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <main+0xa0>)
 8001970:	4818      	ldr	r0, [pc, #96]	; (80019d4 <main+0xa4>)
 8001972:	f006 f81c 	bl	80079ae <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8001976:	2201      	movs	r2, #1
 8001978:	4917      	ldr	r1, [pc, #92]	; (80019d8 <main+0xa8>)
 800197a:	4818      	ldr	r0, [pc, #96]	; (80019dc <main+0xac>)
 800197c:	f006 f817 	bl	80079ae <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <main+0xb0>)
 8001982:	f004 fac5 	bl	8005f10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <main+0xb4>)
 8001988:	f004 fac2 	bl	8005f10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 800198c:	2100      	movs	r1, #0
 800198e:	4816      	ldr	r0, [pc, #88]	; (80019e8 <main+0xb8>)
 8001990:	f004 fdac 	bl	80064ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control
 8001994:	2100      	movs	r1, #0
 8001996:	4815      	ldr	r0, [pc, #84]	; (80019ec <main+0xbc>)
 8001998:	f004 fc42 	bl	8006220 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // for servo motor PWM control
 800199c:	2100      	movs	r1, #0
 800199e:	4814      	ldr	r0, [pc, #80]	; (80019f0 <main+0xc0>)
 80019a0:	f004 fb76 	bl	8006090 <HAL_TIM_PWM_Start>


  DHT11_Init();
 80019a4:	f7ff fa46 	bl	8000e34 <DHT11_Init>
  i2c_lcd_init();
 80019a8:	f7ff fbf0 	bl	800118c <i2c_lcd_init>

  TIM10_10ms_counter=0;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <main+0xc4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT11_processing();
 80019b2:	f7ff f9e1 	bl	8000d78 <DHT11_processing>
 	pc_command_processing();
 80019b6:	f001 f9c1 	bl	8002d3c <pc_command_processing>
 	bt_command_processing();
 80019ba:	f001 fa83 	bl	8002ec4 <bt_command_processing>
 	ultrasonic_processing();
 80019be:	f001 fb33 	bl	8003028 <ultrasonic_processing>
// 	dcmotor_pwm_control();

 	get_rtc();
 80019c2:	f7ff fc6d 	bl	80012a0 <get_rtc>
 	lcd_display_mode_select();
 80019c6:	f7ff fae9 	bl	8000f9c <lcd_display_mode_select>
 	set_time_button_ui();
 80019ca:	f7ff fdb1 	bl	8001530 <set_time_button_ui>
	DHT11_processing();
 80019ce:	e7f0      	b.n	80019b2 <main+0x82>
 80019d0:	20000a78 	.word	0x20000a78
 80019d4:	200004e4 	.word	0x200004e4
 80019d8:	20000a79 	.word	0x20000a79
 80019dc:	20000528 	.word	0x20000528
 80019e0:	20000454 	.word	0x20000454
 80019e4:	2000049c 	.word	0x2000049c
 80019e8:	200003c4 	.word	0x200003c4
 80019ec:	2000040c 	.word	0x2000040c
 80019f0:	2000037c 	.word	0x2000037c
 80019f4:	20000a7c 	.word	0x20000a7c

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	; 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	2230      	movs	r2, #48	; 0x30
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fd24 	bl	8009454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <SystemClock_Config+0xd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <SystemClock_Config+0xd4>)
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <SystemClock_Config+0xd4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a54:	2309      	movs	r3, #9
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a70:	23a8      	movs	r3, #168	; 0xa8
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 f89f 	bl	8004bc4 <HAL_RCC_OscConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a8c:	f000 fc24 	bl	80022d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2105      	movs	r1, #5
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fb00 	bl	80050b4 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aba:	f000 fc0d 	bl	80022d8 <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_ETH_Init+0x84>)
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <MX_ETH_Init+0x88>)
 8001ad8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001ae8:	22e1      	movs	r2, #225	; 0xe1
 8001aea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001b02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <MX_ETH_Init+0x90>)
 8001b10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_ETH_Init+0x94>)
 8001b16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b22:	f001 fd65 	bl	80035f0 <HAL_ETH_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f000 fbd4 	bl	80022d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b30:	2238      	movs	r2, #56	; 0x38
 8001b32:	2100      	movs	r1, #0
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b36:	f007 fc8d 	bl	8009454 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b3c:	2221      	movs	r2, #33	; 0x21
 8001b3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000258 	.word	0x20000258
 8001b58:	40028000 	.word	0x40028000
 8001b5c:	20000a90 	.word	0x20000a90
 8001b60:	200001b8 	.word	0x200001b8
 8001b64:	20000118 	.word	0x20000118
 8001b68:	200000e0 	.word	0x200000e0

08001b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_I2C1_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <MX_I2C1_Init+0x7c>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001baa:	f002 fa27 	bl	8003ffc <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 fb90 	bl	80022d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bbc:	f002 fe69 	bl	8004892 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bc6:	f000 fb87 	bl	80022d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bce:	f002 fe9c 	bl	800490a <HAL_I2CEx_ConfigDigitalFilter>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 fb7e 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000308 	.word	0x20000308
 8001be4:	40005400 	.word	0x40005400
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c06:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <MX_RTC_Init+0xb0>)
 8001c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c12:	227f      	movs	r2, #127	; 0x7f
 8001c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c18:	22ff      	movs	r2, #255	; 0xff
 8001c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c2e:	481a      	ldr	r0, [pc, #104]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c30:	f003 fe20 	bl	8005874 <HAL_RTC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f000 fb4d 	bl	80022d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001c3e:	2309      	movs	r3, #9
 8001c40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2201      	movs	r2, #1
 8001c56:	4619      	mov	r1, r3
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c5a:	f003 fe81 	bl	8005960 <HAL_RTC_SetTime>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f000 fb38 	bl	80022d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001c70:	2316      	movs	r3, #22
 8001c72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001c74:	2323      	movs	r3, #35	; 0x23
 8001c76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_RTC_Init+0xac>)
 8001c80:	f003 ff66 	bl	8005b50 <HAL_RTC_SetDate>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c8a:	f000 fb25 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000035c 	.word	0x2000035c
 8001c9c:	40002800 	.word	0x40002800

08001ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001ccc:	f240 628f 	movw	r2, #1679	; 0x68f
 8001cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cec:	4818      	ldr	r0, [pc, #96]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001cee:	f004 f97f 	bl	8005ff0 <HAL_TIM_PWM_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001cf8:	f000 faee 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4811      	ldr	r0, [pc, #68]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001d0c:	f005 fce0 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d16:	f000 fadf 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1a:	2360      	movs	r3, #96	; 0x60
 8001d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001d1e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001d34:	f004 fea6 	bl	8006a84 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001d3e:	f000 facb 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM2_Init+0xb0>)
 8001d44:	f000 fd08 	bl	8002758 <HAL_TIM_MspPostInit>

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000037c 	.word	0x2000037c

08001d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <MX_TIM3_Init+0xa4>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d78:	2253      	movs	r2, #83	; 0x53
 8001d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d96:	4817      	ldr	r0, [pc, #92]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d98:	f004 fb58 	bl	800644c <HAL_TIM_IC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001da2:	f000 fa99 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	480f      	ldr	r0, [pc, #60]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001db6:	f005 fc8b 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001dc0:	f000 fa8a 	bl	80022d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001ddc:	f004 fdb6 	bl	800694c <HAL_TIM_IC_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001de6:	f000 fa77 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200003c4 	.word	0x200003c4
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]
 8001e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <MX_TIM4_Init+0xe8>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e34:	f240 3247 	movw	r2, #839	; 0x347
 8001e38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e42:	2263      	movs	r2, #99	; 0x63
 8001e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e54:	f004 f80c 	bl	8005e70 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e5e:	f000 fa3b 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e70:	f004 feca 	bl	8006c08 <HAL_TIM_ConfigClockSource>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e7a:	f000 fa2d 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e80:	f004 f8b6 	bl	8005ff0 <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e8a:	f000 fa25 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001e9e:	f005 fc17 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ea8:	f000 fa16 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001eb0:	2345      	movs	r3, #69	; 0x45
 8001eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001ec4:	f004 fdde 	bl	8006a84 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ece:	f000 fa03 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM4_Init+0xe4>)
 8001ed4:	f000 fc40 	bl	8002758 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000040c 	.word	0x2000040c
 8001ee4:	40000800 	.word	0x40000800

08001ee8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <MX_TIM10_Init+0x44>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001ef4:	22a7      	movs	r2, #167	; 0xa7
 8001ef6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001f00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_TIM10_Init+0x40>)
 8001f14:	f003 ffac 	bl	8005e70 <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f1e:	f000 f9db 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000454 	.word	0x20000454
 8001f2c:	40014400 	.word	0x40014400

08001f30 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <MX_TIM11_Init+0x44>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f3c:	22a7      	movs	r2, #167	; 0xa7
 8001f3e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_TIM11_Init+0x40>)
 8001f5c:	f003 ff88 	bl	8005e70 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001f66:	f000 f9b7 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000049c 	.word	0x2000049c
 8001f74:	40014800 	.word	0x40014800

08001f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_USART3_UART_Init+0x50>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART3_UART_Init+0x4c>)
 8001fb0:	f005 fc1e 	bl	80077f0 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fba:	f000 f98d 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004e4 	.word	0x200004e4
 8001fc8:	40004800 	.word	0x40004800

08001fcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <MX_USART6_UART_Init+0x50>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001fd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USART6_UART_Init+0x4c>)
 8002004:	f005 fbf4 	bl	80077f0 <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800200e:	f000 f963 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000528 	.word	0x20000528
 800201c:	40011400 	.word	0x40011400

08002020 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800202a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800202e:	2204      	movs	r2, #4
 8002030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002034:	2202      	movs	r2, #2
 8002036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002040:	2202      	movs	r2, #2
 8002042:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002046:	2201      	movs	r2, #1
 8002048:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002058:	2201      	movs	r2, #1
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002064:	f002 fc90 	bl	8004988 <HAL_PCD_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f933 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000056c 	.word	0x2000056c

0800207c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a87      	ldr	r2, [pc, #540]	; (80022b8 <MX_GPIO_Init+0x23c>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a80      	ldr	r2, [pc, #512]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b7e      	ldr	r3, [pc, #504]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a79      	ldr	r2, [pc, #484]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <MX_GPIO_Init+0x23c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a6b      	ldr	r2, [pc, #428]	; (80022b8 <MX_GPIO_Init+0x23c>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a64      	ldr	r2, [pc, #400]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002128:	f043 0310 	orr.w	r3, r3, #16
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a5d      	ldr	r2, [pc, #372]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <MX_GPIO_Init+0x23c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <MX_GPIO_Init+0x23c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <MX_GPIO_Init+0x23c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2109      	movs	r1, #9
 8002176:	4851      	ldr	r0, [pc, #324]	; (80022bc <MX_GPIO_Init+0x240>)
 8002178:	f001 ff26 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002182:	484f      	ldr	r0, [pc, #316]	; (80022c0 <MX_GPIO_Init+0x244>)
 8002184:	f001 ff20 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218e:	484d      	ldr	r0, [pc, #308]	; (80022c4 <MX_GPIO_Init+0x248>)
 8002190:	f001 ff1a 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_MOTOR1_Pin|IN2_MOTOR1_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 7140 	mov.w	r1, #768	; 0x300
 800219a:	484b      	ldr	r0, [pc, #300]	; (80022c8 <MX_GPIO_Init+0x24c>)
 800219c:	f001 ff14 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	4849      	ldr	r0, [pc, #292]	; (80022cc <MX_GPIO_Init+0x250>)
 80021a6:	f001 ff0f 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021aa:	2200      	movs	r2, #0
 80021ac:	21ff      	movs	r1, #255	; 0xff
 80021ae:	4848      	ldr	r0, [pc, #288]	; (80022d0 <MX_GPIO_Init+0x254>)
 80021b0:	f001 ff0a 	bl	8003fc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4842      	ldr	r0, [pc, #264]	; (80022d4 <MX_GPIO_Init+0x258>)
 80021cc:	f001 fd38 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin PA3 */
  GPIO_InitStruct.Pin = DHT11_Pin|GPIO_PIN_3;
 80021d0:	2309      	movs	r3, #9
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4835      	ldr	r0, [pc, #212]	; (80022bc <MX_GPIO_Init+0x240>)
 80021e8:	f001 fd2a 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80021ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	482e      	ldr	r0, [pc, #184]	; (80022c0 <MX_GPIO_Init+0x244>)
 8002206:	f001 fd1b 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 800220a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4828      	ldr	r0, [pc, #160]	; (80022c4 <MX_GPIO_Init+0x248>)
 8002224:	f001 fd0c 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_MOTOR1_Pin IN2_MOTOR1_Pin */
  GPIO_InitStruct.Pin = IN1_MOTOR1_Pin|IN2_MOTOR1_Pin;
 8002228:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_GPIO_Init+0x24c>)
 8002242:	f001 fcfd 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8002246:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	481b      	ldr	r0, [pc, #108]	; (80022c8 <MX_GPIO_Init+0x24c>)
 800225c:	f001 fcf0 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <MX_GPIO_Init+0x250>)
 8002278:	f001 fce2 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <MX_GPIO_Init+0x250>)
 8002290:	f001 fcd6 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002294:	23ff      	movs	r3, #255	; 0xff
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4809      	ldr	r0, [pc, #36]	; (80022d0 <MX_GPIO_Init+0x254>)
 80022ac:	f001 fcc8 	bl	8003c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b0:	bf00      	nop
 80022b2:	3738      	adds	r7, #56	; 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021800 	.word	0x40021800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40020800 	.word	0x40020800

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>
	...

080022e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_MspInit+0x4c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_MspInit+0x4c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x4c>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x4c>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <HAL_ETH_MspInit+0x174>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f040 80a4 	bne.w	80024a0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_ETH_MspInit+0x178>)
 8002362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800237e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_ETH_MspInit+0x178>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_ETH_MspInit+0x178>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800239a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a36      	ldr	r2, [pc, #216]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a2f      	ldr	r2, [pc, #188]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	6313      	str	r3, [r2, #48]	; 0x30
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_ETH_MspInit+0x178>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_ETH_MspInit+0x178>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_ETH_MspInit+0x178>)
 800240a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_ETH_MspInit+0x178>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800241c:	2332      	movs	r3, #50	; 0x32
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800242c:	230b      	movs	r3, #11
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	481e      	ldr	r0, [pc, #120]	; (80024b0 <HAL_ETH_MspInit+0x17c>)
 8002438:	f001 fc02 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800243c:	2386      	movs	r3, #134	; 0x86
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800244c:	230b      	movs	r3, #11
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4817      	ldr	r0, [pc, #92]	; (80024b4 <HAL_ETH_MspInit+0x180>)
 8002458:	f001 fbf2 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800245c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800246e:	230b      	movs	r3, #11
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <HAL_ETH_MspInit+0x184>)
 800247a:	f001 fbe1 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800247e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002490:	230b      	movs	r3, #11
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002498:	4619      	mov	r1, r3
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <HAL_ETH_MspInit+0x188>)
 800249c:	f001 fbd0 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3738      	adds	r7, #56	; 0x38
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40028000 	.word	0x40028000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40021800 	.word	0x40021800

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_I2C_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12c      	bne.n	800253c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	480c      	ldr	r0, [pc, #48]	; (800254c <HAL_I2C_MspInit+0x8c>)
 800251c:	f001 fb90 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_I2C_MspInit+0x88>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_I2C_MspInit+0x88>)
 800252a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252e:	6413      	str	r3, [r2, #64]	; 0x40
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_I2C_MspInit+0x88>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800253c:	bf00      	nop
 800253e:	3728      	adds	r7, #40	; 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40005400 	.word	0x40005400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	2230      	movs	r2, #48	; 0x30
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f006 ff77 	bl	8009454 <memset>
  if(hrtc->Instance==RTC)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_RTC_MspInit+0x4c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002570:	2320      	movs	r3, #32
 8002572:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4618      	mov	r0, r3
 8002580:	f002 ffb8 	bl	80054f4 <HAL_RCCEx_PeriphCLKConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800258a:	f7ff fea5 	bl	80022d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RTC_MspInit+0x50>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	3738      	adds	r7, #56	; 0x38
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40002800 	.word	0x40002800
 80025a0:	42470e3c 	.word	0x42470e3c

080025a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d115      	bne.n	80025e2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_TIM_PWM_MspInit+0x48>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_TIM_PWM_MspInit+0x48>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_TIM_PWM_MspInit+0x48>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	201c      	movs	r0, #28
 80025d8:	f000 ff41 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025dc:	201c      	movs	r0, #28
 80025de:	f000 ff5a 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_TIM_IC_MspInit+0x94>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d133      	bne.n	800267a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_TIM_IC_MspInit+0x98>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800264a:	2340      	movs	r3, #64	; 0x40
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800265a:	2302      	movs	r3, #2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4809      	ldr	r0, [pc, #36]	; (800268c <HAL_TIM_IC_MspInit+0x9c>)
 8002666:	f001 faeb 	bl	8003c40 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201d      	movs	r0, #29
 8002670:	f000 fef5 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002674:	201d      	movs	r0, #29
 8002676:	f000 ff0e 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40000400 	.word	0x40000400
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_TIM_Base_MspInit+0xb8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d116      	bne.n	80026d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	201e      	movs	r0, #30
 80026c4:	f000 fecb 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026c8:	201e      	movs	r0, #30
 80026ca:	f000 fee4 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026ce:	e036      	b.n	800273e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_TIM_Base_MspInit+0xc0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d116      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2019      	movs	r0, #25
 80026fc:	f000 feaf 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002700:	2019      	movs	r0, #25
 8002702:	f000 fec8 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 8002706:	e01a      	b.n	800273e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_TIM_Base_MspInit+0xc4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_TIM_Base_MspInit+0xbc>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	201a      	movs	r0, #26
 8002734:	f000 fe93 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002738:	201a      	movs	r0, #26
 800273a:	f000 feac 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40000800 	.word	0x40000800
 800274c:	40023800 	.word	0x40023800
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800

08002758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d11e      	bne.n	80027b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVOMOTOR_TIM2_CH1_Pin;
 8002796:	2320      	movs	r3, #32
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a6:	2301      	movs	r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVOMOTOR_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4816      	ldr	r0, [pc, #88]	; (800280c <HAL_TIM_MspPostInit+0xb4>)
 80027b2:	f001 fa45 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027b6:	e023      	b.n	8002800 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_TIM_MspPostInit+0xb8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11e      	bne.n	8002800 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_TIM_MspPostInit+0xb0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_TIM4_CH1_Pin;
 80027de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027f0:	2302      	movs	r3, #2
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_TIM4_CH1_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4806      	ldr	r0, [pc, #24]	; (8002814 <HAL_TIM_MspPostInit+0xbc>)
 80027fc:	f001 fa20 	bl	8003c40 <HAL_GPIO_Init>
}
 8002800:	bf00      	nop
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40000800 	.word	0x40000800
 8002814:	40020c00 	.word	0x40020c00

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_UART_MspInit+0x108>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d135      	bne.n	80028a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_UART_MspInit+0x10c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_UART_MspInit+0x10c>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_UART_MspInit+0x10c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_UART_MspInit+0x10c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_UART_MspInit+0x10c>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_UART_MspInit+0x10c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002884:	2307      	movs	r3, #7
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	4826      	ldr	r0, [pc, #152]	; (8002928 <HAL_UART_MspInit+0x110>)
 8002890:	f001 f9d6 	bl	8003c40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2027      	movs	r0, #39	; 0x27
 800289a:	f000 fde0 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800289e:	2027      	movs	r0, #39	; 0x27
 80028a0:	f000 fdf9 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028a4:	e038      	b.n	8002918 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_UART_MspInit+0x114>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d133      	bne.n	8002918 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	6453      	str	r3, [r2, #68]	; 0x44
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6313      	str	r3, [r2, #48]	; 0x30
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_UART_MspInit+0x10c>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e8:	23c0      	movs	r3, #192	; 0xc0
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028f8:	2308      	movs	r3, #8
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <HAL_UART_MspInit+0x118>)
 8002904:	f001 f99c 	bl	8003c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2047      	movs	r0, #71	; 0x47
 800290e:	f000 fda6 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002912:	2047      	movs	r0, #71	; 0x47
 8002914:	f000 fdbf 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40004800 	.word	0x40004800
 8002924:	40023800 	.word	0x40023800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40011400 	.word	0x40011400
 8002930:	40020800 	.word	0x40020800

08002934 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d13f      	bne.n	80029d6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002972:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002984:	230a      	movs	r3, #10
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4815      	ldr	r0, [pc, #84]	; (80029e4 <HAL_PCD_MspInit+0xb0>)
 8002990:	f001 f956 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	480e      	ldr	r0, [pc, #56]	; (80029e4 <HAL_PCD_MspInit+0xb0>)
 80029aa:	f001 f949 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	6353      	str	r3, [r2, #52]	; 0x34
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_PCD_MspInit+0xac>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000

080029e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <NMI_Handler+0x4>

080029ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <HardFault_Handler+0x4>

080029f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <MemManage_Handler+0x4>

080029fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <BusFault_Handler+0x4>

08002a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler+0x4>

08002a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a34:	f000 fbf4 	bl	8003220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8002a38:	f7fe ff22 	bl	8001880 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a46:	f003 fe79 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000454 	.word	0x20000454

08002a54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a5a:	f003 fe6f 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	2000049c 	.word	0x2000049c

08002a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <TIM2_IRQHandler+0x10>)
 8002a6e:	f003 fe65 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000037c 	.word	0x2000037c

08002a7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM3_IRQHandler+0x10>)
 8002a82:	f003 fe5b 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200003c4 	.word	0x200003c4

08002a90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <TIM4_IRQHandler+0x10>)
 8002a96:	f003 fe51 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000040c 	.word	0x2000040c

08002aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <USART3_IRQHandler+0x10>)
 8002aaa:	f004 ffb1 	bl	8007a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200004e4 	.word	0x200004e4

08002ab8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <USART6_IRQHandler+0x10>)
 8002abe:	f004 ffa7 	bl	8007a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000528 	.word	0x20000528

08002acc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e00a      	b.n	8002af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ade:	f3af 8000 	nop.w
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf0      	blt.n	8002ade <_read+0x12>
  }

  return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e009      	b.n	8002b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe febb 	bl	800189c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf1      	blt.n	8002b18 <_write+0x12>
  }
  return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_close>:

int _close(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b66:	605a      	str	r2, [r3, #4]
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_isatty>:

int _isatty(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <_sbrk+0x5c>)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <_sbrk+0x60>)
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_sbrk+0x64>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <_sbrk+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd8:	f006 fcb0 	bl	800953c <__errno>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	220c      	movs	r2, #12
 8002be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e009      	b.n	8002bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <_sbrk+0x64>)
 8002bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20030000 	.word	0x20030000
 8002c08:	00000400 	.word	0x00000400
 8002c0c:	20000a98 	.word	0x20000a98
 8002c10:	20000c58 	.word	0x20000c58

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SystemInit+0x20>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <SystemInit+0x20>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_UART_RxCpltCallback+0xd4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d12c      	bne.n	8002ca2 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b27      	cmp	r3, #39	; 0x27
 8002c4e:	dc1d      	bgt.n	8002c8c <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_UART_RxCpltCallback+0xdc>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b0a      	cmp	r3, #10
 8002c56:	d003      	beq.n	8002c60 <HAL_UART_RxCpltCallback+0x28>
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_UART_RxCpltCallback+0xdc>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b0d      	cmp	r3, #13
 8002c5e:	d10b      	bne.n	8002c78 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <HAL_UART_RxCpltCallback+0xe0>)
 8002c66:	2100      	movs	r1, #0
 8002c68:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_UART_RxCpltCallback+0xe4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	4924      	ldr	r1, [pc, #144]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c80:	600a      	str	r2, [r1, #0]
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_UART_RxCpltCallback+0xdc>)
 8002c84:	7811      	ldrb	r1, [r2, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_UART_RxCpltCallback+0xe0>)
 8002c88:	54d1      	strb	r1, [r2, r3]
 8002c8a:	e005      	b.n	8002c98 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8002c92:	4823      	ldr	r0, [pc, #140]	; (8002d20 <HAL_UART_RxCpltCallback+0xe8>)
 8002c94:	f006 fade 	bl	8009254 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	491e      	ldr	r1, [pc, #120]	; (8002d14 <HAL_UART_RxCpltCallback+0xdc>)
 8002c9c:	481b      	ldr	r0, [pc, #108]	; (8002d0c <HAL_UART_RxCpltCallback+0xd4>)
 8002c9e:	f004 fe86 	bl	80079ae <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <HAL_UART_RxCpltCallback+0xec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12c      	bne.n	8002d04 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_UART_RxCpltCallback+0xf0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b27      	cmp	r3, #39	; 0x27
 8002cb0:	dc1d      	bgt.n	8002cee <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_UART_RxCpltCallback+0xf4>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b0a      	cmp	r3, #10
 8002cb8:	d003      	beq.n	8002cc2 <HAL_UART_RxCpltCallback+0x8a>
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_UART_RxCpltCallback+0xf4>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b0d      	cmp	r3, #13
 8002cc0:	d10b      	bne.n	8002cda <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_UART_RxCpltCallback+0xd8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_UART_RxCpltCallback+0xf8>)
 8002cc8:	2100      	movs	r1, #0
 8002cca:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_UART_RxCpltCallback+0xfc>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_UART_RxCpltCallback+0xf0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e00f      	b.n	8002cfa <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_UART_RxCpltCallback+0xf0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4911      	ldr	r1, [pc, #68]	; (8002d28 <HAL_UART_RxCpltCallback+0xf0>)
 8002ce2:	600a      	str	r2, [r1, #0]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_UART_RxCpltCallback+0xf4>)
 8002ce6:	7811      	ldrb	r1, [r2, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_UART_RxCpltCallback+0xf8>)
 8002cea:	54d1      	strb	r1, [r2, r3]
 8002cec:	e005      	b.n	8002cfa <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_UART_RxCpltCallback+0xf0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8002cf4:	4810      	ldr	r0, [pc, #64]	; (8002d38 <HAL_UART_RxCpltCallback+0x100>)
 8002cf6:	f006 faad 	bl	8009254 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	490b      	ldr	r1, [pc, #44]	; (8002d2c <HAL_UART_RxCpltCallback+0xf4>)
 8002cfe:	4809      	ldr	r0, [pc, #36]	; (8002d24 <HAL_UART_RxCpltCallback+0xec>)
 8002d00:	f004 fe55 	bl	80079ae <HAL_UART_Receive_IT>
	}
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200004e4 	.word	0x200004e4
 8002d10:	20000ac4 	.word	0x20000ac4
 8002d14:	20000a78 	.word	0x20000a78
 8002d18:	20000a9c 	.word	0x20000a9c
 8002d1c:	20000ac8 	.word	0x20000ac8
 8002d20:	0800a42c 	.word	0x0800a42c
 8002d24:	20000528 	.word	0x20000528
 8002d28:	20000af4 	.word	0x20000af4
 8002d2c:	20000a79 	.word	0x20000a79
 8002d30:	20000acc 	.word	0x20000acc
 8002d34:	20000af8 	.word	0x20000af8
 8002d38:	0800a444 	.word	0x0800a444

08002d3c <pc_command_processing>:

void pc_command_processing(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002d40:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <pc_command_processing+0x144>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 809a 	beq.w	8002e7e <pc_command_processing+0x142>
	{
		newline_detect_flag=0;
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <pc_command_processing+0x144>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 8002d50:	484c      	ldr	r0, [pc, #304]	; (8002e84 <pc_command_processing+0x148>)
 8002d52:	f006 fa7f 	bl	8009254 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002d56:	220a      	movs	r2, #10
 8002d58:	494b      	ldr	r1, [pc, #300]	; (8002e88 <pc_command_processing+0x14c>)
 8002d5a:	484a      	ldr	r0, [pc, #296]	; (8002e84 <pc_command_processing+0x148>)
 8002d5c:	f006 fb82 	bl	8009464 <strncmp>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <pc_command_processing+0x30>
		{
			led_all_on();
 8002d66:	f7fe fd73 	bl	8001850 <led_all_on>
			return;
 8002d6a:	e088      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002d6c:	220b      	movs	r2, #11
 8002d6e:	4947      	ldr	r1, [pc, #284]	; (8002e8c <pc_command_processing+0x150>)
 8002d70:	4844      	ldr	r0, [pc, #272]	; (8002e84 <pc_command_processing+0x148>)
 8002d72:	f006 fb77 	bl	8009464 <strncmp>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <pc_command_processing+0x46>
		{
			led_all_off();
 8002d7c:	f7fe fd74 	bl	8001868 <led_all_off>
			return;
 8002d80:	e07d      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002d82:	220b      	movs	r2, #11
 8002d84:	4942      	ldr	r1, [pc, #264]	; (8002e90 <pc_command_processing+0x154>)
 8002d86:	483f      	ldr	r0, [pc, #252]	; (8002e84 <pc_command_processing+0x148>)
 8002d88:	f006 fb6c 	bl	8009464 <strncmp>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <pc_command_processing+0x5c>
		{
			led_on_down();
 8002d92:	f7fe fd2d 	bl	80017f0 <led_on_down>
			return;
 8002d96:	e072      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002d98:	2209      	movs	r2, #9
 8002d9a:	493e      	ldr	r1, [pc, #248]	; (8002e94 <pc_command_processing+0x158>)
 8002d9c:	4839      	ldr	r0, [pc, #228]	; (8002e84 <pc_command_processing+0x148>)
 8002d9e:	f006 fb61 	bl	8009464 <strncmp>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <pc_command_processing+0x72>
		{
			led_on_up();
 8002da8:	f7fe fcf2 	bl	8001790 <led_on_up>
			return;
 8002dac:	e067      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002dae:	2209      	movs	r2, #9
 8002db0:	4939      	ldr	r1, [pc, #228]	; (8002e98 <pc_command_processing+0x15c>)
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <pc_command_processing+0x148>)
 8002db4:	f006 fb56 	bl	8009464 <strncmp>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <pc_command_processing+0x88>
		{
			flower_on();
 8002dbe:	f7fe fc47 	bl	8001650 <flower_on>
			return;
 8002dc2:	e05c      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	4935      	ldr	r1, [pc, #212]	; (8002e9c <pc_command_processing+0x160>)
 8002dc8:	482e      	ldr	r0, [pc, #184]	; (8002e84 <pc_command_processing+0x148>)
 8002dca:	f006 fb4b 	bl	8009464 <strncmp>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <pc_command_processing+0x9e>
		{
			flower_off();
 8002dd4:	f7fe fc6c 	bl	80016b0 <flower_off>
			return;
 8002dd8:	e051      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002dda:	220d      	movs	r2, #13
 8002ddc:	4930      	ldr	r1, [pc, #192]	; (8002ea0 <pc_command_processing+0x164>)
 8002dde:	4829      	ldr	r0, [pc, #164]	; (8002e84 <pc_command_processing+0x148>)
 8002de0:	f006 fb40 	bl	8009464 <strncmp>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <pc_command_processing+0xb4>
		{
			led_keepon_up();
 8002dea:	f7fe fc91 	bl	8001710 <led_keepon_up>
			return;
 8002dee:	e046      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002df0:	220f      	movs	r2, #15
 8002df2:	492c      	ldr	r1, [pc, #176]	; (8002ea4 <pc_command_processing+0x168>)
 8002df4:	4823      	ldr	r0, [pc, #140]	; (8002e84 <pc_command_processing+0x148>)
 8002df6:	f006 fb35 	bl	8009464 <strncmp>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <pc_command_processing+0xca>
		{
			led_keepon_down();
 8002e00:	f7fe fca6 	bl	8001750 <led_keepon_down>
			return;
 8002e04:	e03b      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if(!strncmp(rx_buff, "dht11on", strlen("dht11on")))  //
 8002e06:	2207      	movs	r2, #7
 8002e08:	4927      	ldr	r1, [pc, #156]	; (8002ea8 <pc_command_processing+0x16c>)
 8002e0a:	481e      	ldr	r0, [pc, #120]	; (8002e84 <pc_command_processing+0x148>)
 8002e0c:	f006 fb2a 	bl	8009464 <strncmp>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <pc_command_processing+0xe2>
		{
			dht11_on = 1;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <pc_command_processing+0x170>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
			return;
 8002e1c:	e02f      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if(!strncmp(rx_buff, "dht11off", strlen("dht11off")))  //
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4923      	ldr	r1, [pc, #140]	; (8002eb0 <pc_command_processing+0x174>)
 8002e22:	4818      	ldr	r0, [pc, #96]	; (8002e84 <pc_command_processing+0x148>)
 8002e24:	f006 fb1e 	bl	8009464 <strncmp>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <pc_command_processing+0xfa>
		{
			dht11_on = 0;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <pc_command_processing+0x170>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
			return;
 8002e34:	e023      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if(!strncmp(rx_buff, "ultra_on", strlen("ultra_on")))  //
 8002e36:	2208      	movs	r2, #8
 8002e38:	491e      	ldr	r1, [pc, #120]	; (8002eb4 <pc_command_processing+0x178>)
 8002e3a:	4812      	ldr	r0, [pc, #72]	; (8002e84 <pc_command_processing+0x148>)
 8002e3c:	f006 fb12 	bl	8009464 <strncmp>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <pc_command_processing+0x112>
		{
			ultrasonic_on = 1;
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <pc_command_processing+0x17c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
			return;
 8002e4c:	e017      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if(!strncmp(rx_buff, "ultra_off", strlen("ultra_off")))  //
 8002e4e:	2209      	movs	r2, #9
 8002e50:	491a      	ldr	r1, [pc, #104]	; (8002ebc <pc_command_processing+0x180>)
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <pc_command_processing+0x148>)
 8002e54:	f006 fb06 	bl	8009464 <strncmp>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <pc_command_processing+0x12a>
		{
			ultrasonic_on = 0;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <pc_command_processing+0x17c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
			return;
 8002e64:	e00b      	b.n	8002e7e <pc_command_processing+0x142>
		}
		if(!strncmp(rx_buff, "setrtc", strlen("setrtc")))
 8002e66:	2206      	movs	r2, #6
 8002e68:	4915      	ldr	r1, [pc, #84]	; (8002ec0 <pc_command_processing+0x184>)
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <pc_command_processing+0x148>)
 8002e6c:	f006 fafa 	bl	8009464 <strncmp>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <pc_command_processing+0x142>
		{
			set_rtc(rx_buff);
 8002e76:	4803      	ldr	r0, [pc, #12]	; (8002e84 <pc_command_processing+0x148>)
 8002e78:	f7fe fabe 	bl	80013f8 <set_rtc>
			return;
 8002e7c:	bf00      	nop
//			dht11time = atoi(rx_buff+9);
//			return;
//		}

	}
}
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000ac8 	.word	0x20000ac8
 8002e84:	20000a9c 	.word	0x20000a9c
 8002e88:	0800a460 	.word	0x0800a460
 8002e8c:	0800a46c 	.word	0x0800a46c
 8002e90:	0800a478 	.word	0x0800a478
 8002e94:	0800a484 	.word	0x0800a484
 8002e98:	0800a490 	.word	0x0800a490
 8002e9c:	0800a49c 	.word	0x0800a49c
 8002ea0:	0800a4a8 	.word	0x0800a4a8
 8002ea4:	0800a4b8 	.word	0x0800a4b8
 8002ea8:	0800a4c8 	.word	0x0800a4c8
 8002eac:	20000a84 	.word	0x20000a84
 8002eb0:	0800a4d0 	.word	0x0800a4d0
 8002eb4:	0800a4dc 	.word	0x0800a4dc
 8002eb8:	20000a88 	.word	0x20000a88
 8002ebc:	0800a4e8 	.word	0x0800a4e8
 8002ec0:	0800a4f4 	.word	0x0800a4f4

08002ec4 <bt_command_processing>:

void bt_command_processing(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <bt_command_processing+0xcc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05d      	beq.n	8002f8c <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <bt_command_processing+0xcc>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002ed6:	482f      	ldr	r0, [pc, #188]	; (8002f94 <bt_command_processing+0xd0>)
 8002ed8:	f006 f9bc 	bl	8009254 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002edc:	220a      	movs	r2, #10
 8002ede:	492e      	ldr	r1, [pc, #184]	; (8002f98 <bt_command_processing+0xd4>)
 8002ee0:	482c      	ldr	r0, [pc, #176]	; (8002f94 <bt_command_processing+0xd0>)
 8002ee2:	f006 fabf 	bl	8009464 <strncmp>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <bt_command_processing+0x2e>
		{
			led_all_on();
 8002eec:	f7fe fcb0 	bl	8001850 <led_all_on>
			return;
 8002ef0:	e04c      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	4929      	ldr	r1, [pc, #164]	; (8002f9c <bt_command_processing+0xd8>)
 8002ef6:	4827      	ldr	r0, [pc, #156]	; (8002f94 <bt_command_processing+0xd0>)
 8002ef8:	f006 fab4 	bl	8009464 <strncmp>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <bt_command_processing+0x44>
		{
			led_all_off();
 8002f02:	f7fe fcb1 	bl	8001868 <led_all_off>
			return;
 8002f06:	e041      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f08:	220b      	movs	r2, #11
 8002f0a:	4925      	ldr	r1, [pc, #148]	; (8002fa0 <bt_command_processing+0xdc>)
 8002f0c:	4821      	ldr	r0, [pc, #132]	; (8002f94 <bt_command_processing+0xd0>)
 8002f0e:	f006 faa9 	bl	8009464 <strncmp>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <bt_command_processing+0x5a>
		{
			led_on_down();
 8002f18:	f7fe fc6a 	bl	80017f0 <led_on_down>
			return;
 8002f1c:	e036      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f1e:	2209      	movs	r2, #9
 8002f20:	4920      	ldr	r1, [pc, #128]	; (8002fa4 <bt_command_processing+0xe0>)
 8002f22:	481c      	ldr	r0, [pc, #112]	; (8002f94 <bt_command_processing+0xd0>)
 8002f24:	f006 fa9e 	bl	8009464 <strncmp>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <bt_command_processing+0x70>
		{
			led_on_up();
 8002f2e:	f7fe fc2f 	bl	8001790 <led_on_up>
			return;
 8002f32:	e02b      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f34:	2209      	movs	r2, #9
 8002f36:	491c      	ldr	r1, [pc, #112]	; (8002fa8 <bt_command_processing+0xe4>)
 8002f38:	4816      	ldr	r0, [pc, #88]	; (8002f94 <bt_command_processing+0xd0>)
 8002f3a:	f006 fa93 	bl	8009464 <strncmp>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <bt_command_processing+0x86>
		{
			flower_on();
 8002f44:	f7fe fb84 	bl	8001650 <flower_on>
			return;
 8002f48:	e020      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f4a:	220a      	movs	r2, #10
 8002f4c:	4917      	ldr	r1, [pc, #92]	; (8002fac <bt_command_processing+0xe8>)
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <bt_command_processing+0xd0>)
 8002f50:	f006 fa88 	bl	8009464 <strncmp>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <bt_command_processing+0x9c>
		{
			flower_off();
 8002f5a:	f7fe fba9 	bl	80016b0 <flower_off>
			return;
 8002f5e:	e015      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f60:	220d      	movs	r2, #13
 8002f62:	4913      	ldr	r1, [pc, #76]	; (8002fb0 <bt_command_processing+0xec>)
 8002f64:	480b      	ldr	r0, [pc, #44]	; (8002f94 <bt_command_processing+0xd0>)
 8002f66:	f006 fa7d 	bl	8009464 <strncmp>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <bt_command_processing+0xb2>
		{
			led_keepon_up();
 8002f70:	f7fe fbce 	bl	8001710 <led_keepon_up>
			return;
 8002f74:	e00a      	b.n	8002f8c <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f76:	220f      	movs	r2, #15
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <bt_command_processing+0xf0>)
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <bt_command_processing+0xd0>)
 8002f7c:	f006 fa72 	bl	8009464 <strncmp>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002f86:	f7fe fbe3 	bl	8001750 <led_keepon_down>
			return;
 8002f8a:	bf00      	nop
		}
	}
}
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000af8 	.word	0x20000af8
 8002f94:	20000acc 	.word	0x20000acc
 8002f98:	0800a460 	.word	0x0800a460
 8002f9c:	0800a46c 	.word	0x0800a46c
 8002fa0:	0800a478 	.word	0x0800a478
 8002fa4:	0800a484 	.word	0x0800a484
 8002fa8:	0800a490 	.word	0x0800a490
 8002fac:	0800a49c 	.word	0x0800a49c
 8002fb0:	0800a4a8 	.word	0x0800a4a8
 8002fb4:	0800a4b8 	.word	0x0800a4b8

08002fb8 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d11f      	bne.n	800300a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002fe2:	e012      	b.n	800300a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f003 fece 	bl	8006d98 <HAL_TIM_ReadCapturedValue>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_TIM_IC_CaptureCallback+0x64>)
 8003002:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40000400 	.word	0x40000400
 8003018:	20000b04 	.word	0x20000b04
 800301c:	20000afc 	.word	0x20000afc
 8003020:	20000b00 	.word	0x20000b00
 8003024:	00000000 	.word	0x00000000

08003028 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if(ultrasonic_on)
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <ultrasonic_processing+0xa8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d042      	beq.n	80030bc <ultrasonic_processing+0x94>
	{
		if (TIM10_10ms_ultrasonic >= 100)   // 1초
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <ultrasonic_processing+0xac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b63      	cmp	r3, #99	; 0x63
 800303c:	dd3e      	ble.n	80030bc <ultrasonic_processing+0x94>
		{
			TIM10_10ms_ultrasonic=0;
 800303e:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <ultrasonic_processing+0xac>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
			make_trigger();
 8003044:	f000 f852 	bl	80030ec <make_trigger>
			if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <ultrasonic_processing+0xb0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d035      	beq.n	80030bc <ultrasonic_processing+0x94>
			{
				ic_cpt_finish_flag=0;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <ultrasonic_processing+0xb0>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
				dis = distance;
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <ultrasonic_processing+0xb4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
				dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 800305c:	6978      	ldr	r0, [r7, #20]
 800305e:	f7fd fa69 	bl	8000534 <__aeabi_i2d>
 8003062:	a319      	add	r3, pc, #100	; (adr r3, 80030c8 <ultrasonic_processing+0xa0>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd face 	bl	8000608 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800307c:	f7fd fbee 	bl	800085c <__aeabi_ddiv>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fcd0 	bl	8000a2c <__aeabi_d2iz>
 800308c:	4603      	mov	r3, r0
 800308e:	617b      	str	r3, [r7, #20]
				// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
				printf("dis: %dcm\n", dis);
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	4813      	ldr	r0, [pc, #76]	; (80030e0 <ultrasonic_processing+0xb8>)
 8003094:	f006 f878 	bl	8009188 <iprintf>
				if(lcd_display_mode_flag == 2)
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <ultrasonic_processing+0xbc>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d10d      	bne.n	80030bc <ultrasonic_processing+0x94>
				{
//					lcd_command(CLEAR_DISPLAY);
					sprintf(lcd_buff, "DISTANCE : %dcm", dis);
 80030a0:	463b      	mov	r3, r7
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4910      	ldr	r1, [pc, #64]	; (80030e8 <ultrasonic_processing+0xc0>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f006 f8dc 	bl	8009264 <siprintf>
					move_cursor(0,0);
 80030ac:	2100      	movs	r1, #0
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fe f89a 	bl	80011e8 <move_cursor>
					lcd_string(lcd_buff);
 80030b4:	463b      	mov	r3, r7
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f881 	bl	80011be <lcd_string>
				}
			}
		}
	}
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	b020c49c 	.word	0xb020c49c
 80030cc:	3fa16872 	.word	0x3fa16872
 80030d0:	20000a88 	.word	0x20000a88
 80030d4:	20000a80 	.word	0x20000a80
 80030d8:	20000b00 	.word	0x20000b00
 80030dc:	20000afc 	.word	0x20000afc
 80030e0:	0800a4fc 	.word	0x0800a4fc
 80030e4:	20000090 	.word	0x20000090
 80030e8:	0800a508 	.word	0x0800a508

080030ec <make_trigger>:

void make_trigger()
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f6:	480b      	ldr	r0, [pc, #44]	; (8003124 <make_trigger+0x38>)
 80030f8:	f000 ff66 	bl	8003fc8 <HAL_GPIO_WritePin>
	delay_us(2);
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7fe fbff 	bl	8001900 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8003102:	2201      	movs	r2, #1
 8003104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003108:	4806      	ldr	r0, [pc, #24]	; (8003124 <make_trigger+0x38>)
 800310a:	f000 ff5d 	bl	8003fc8 <HAL_GPIO_WritePin>
	delay_us(10);
 800310e:	200a      	movs	r0, #10
 8003110:	f7fe fbf6 	bl	8001900 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800311a:	4802      	ldr	r0, [pc, #8]	; (8003124 <make_trigger+0x38>)
 800311c:	f000 ff54 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021400 	.word	0x40021400

08003128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003160 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800312c:	480d      	ldr	r0, [pc, #52]	; (8003164 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800312e:	490e      	ldr	r1, [pc, #56]	; (8003168 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003130:	4a0e      	ldr	r2, [pc, #56]	; (800316c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003134:	e002      	b.n	800313c <LoopCopyDataInit>

08003136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313a:	3304      	adds	r3, #4

0800313c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800313c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003140:	d3f9      	bcc.n	8003136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003144:	4c0b      	ldr	r4, [pc, #44]	; (8003174 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003148:	e001      	b.n	800314e <LoopFillZerobss>

0800314a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800314c:	3204      	adds	r2, #4

0800314e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003150:	d3fb      	bcc.n	800314a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003152:	f7ff fd5f 	bl	8002c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003156:	f006 f9f7 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800315a:	f7fe fbe9 	bl	8001930 <main>
  bx  lr    
 800315e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003160:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003168:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800316c:	0800a674 	.word	0x0800a674
  ldr r2, =_sbss
 8003170:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003174:	20000c58 	.word	0x20000c58

08003178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003178:	e7fe      	b.n	8003178 <ADC_IRQHandler>
	...

0800317c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_Init+0x40>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_Init+0x40>)
 8003186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_Init+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_Init+0x40>)
 8003192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <HAL_Init+0x40>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a4:	2003      	movs	r0, #3
 80031a6:	f000 f94f 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f000 f808 	bl	80031c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b0:	f7ff f898 	bl	80022e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00

080031c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_InitTick+0x54>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_InitTick+0x58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f967 	bl	80034b2 <HAL_SYSTICK_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00e      	b.n	800320c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d80a      	bhi.n	800320a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f000 f92f 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003200:	4a06      	ldr	r2, [pc, #24]	; (800321c <HAL_InitTick+0x5c>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	2000000c 	.word	0x2000000c
 8003218:	20000014 	.word	0x20000014
 800321c:	20000010 	.word	0x20000010

08003220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_IncTick+0x24>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_IncTick+0x24>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000014 	.word	0x20000014
 8003244:	20000b08 	.word	0x20000b08

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetTick+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000b08 	.word	0x20000b08

08003260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003268:	f7ff ffee 	bl	8003248 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d005      	beq.n	8003286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_Delay+0x44>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003286:	bf00      	nop
 8003288:	f7ff ffde 	bl	8003248 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d8f7      	bhi.n	8003288 <HAL_Delay+0x28>
  {
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000014 	.word	0x20000014

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff3e 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff8e 	bl	800339c <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5d 	bl	8003348 <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff31 	bl	800330c <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa2 	bl	8003404 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034d8:	f7ff feb6 	bl	8003248 <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d008      	beq.n	80034fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e052      	b.n	80035a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0216 	bic.w	r2, r2, #22
 800350a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800351a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <HAL_DMA_Abort+0x62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0208 	bic.w	r2, r2, #8
 800353a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	e013      	b.n	8003576 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354e:	f7ff fe7b 	bl	8003248 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b05      	cmp	r3, #5
 800355a:	d90c      	bls.n	8003576 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e015      	b.n	80035a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e4      	bne.n	800354e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d004      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e00c      	b.n	80035e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2205      	movs	r2, #5
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e06c      	b.n	80036dc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2223      	movs	r2, #35	; 0x23
 8003610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fe fe8d 	bl	8002334 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_ETH_Init+0xf4>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4a30      	ldr	r2, [pc, #192]	; (80036e4 <HAL_ETH_Init+0xf4>)
 8003624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003628:	6453      	str	r3, [r2, #68]	; 0x44
 800362a:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <HAL_ETH_Init+0xf4>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_ETH_Init+0xf8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <HAL_ETH_Init+0xf8>)
 800363c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003640:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_ETH_Init+0xf8>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4927      	ldr	r1, [pc, #156]	; (80036e8 <HAL_ETH_Init+0xf8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_ETH_Init+0xf8>)
 8003652:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800366a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800366c:	f7ff fdec 	bl	8003248 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003672:	e011      	b.n	8003698 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003674:	f7ff fde8 	bl	8003248 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003682:	d909      	bls.n	8003698 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2204      	movs	r2, #4
 8003688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	22e0      	movs	r2, #224	; 0xe0
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e021      	b.n	80036dc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e4      	bne.n	8003674 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f958 	bl	8003960 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f9ff 	bl	8003ab4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa55 	bl	8003b66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	461a      	mov	r2, r3
 80036c2:	2100      	movs	r1, #0
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f9bd 	bl	8003a44 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2210      	movs	r2, #16
 80036d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40013800 	.word	0x40013800

080036ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4b51      	ldr	r3, [pc, #324]	; (8003848 <ETH_SetMACConfig+0x15c>)
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	7c1b      	ldrb	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <ETH_SetMACConfig+0x28>
 800370e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003712:	e000      	b.n	8003716 <ETH_SetMACConfig+0x2a>
 8003714:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	7c5b      	ldrb	r3, [r3, #17]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <ETH_SetMACConfig+0x38>
 800371e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003722:	e000      	b.n	8003726 <ETH_SetMACConfig+0x3a>
 8003724:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003726:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800372c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	7fdb      	ldrb	r3, [r3, #31]
 8003732:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003734:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800373a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	7f92      	ldrb	r2, [r2, #30]
 8003740:	2a00      	cmp	r2, #0
 8003742:	d102      	bne.n	800374a <ETH_SetMACConfig+0x5e>
 8003744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003748:	e000      	b.n	800374c <ETH_SetMACConfig+0x60>
 800374a:	2200      	movs	r2, #0
                        macconf->Speed |
 800374c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	7f1b      	ldrb	r3, [r3, #28]
 8003752:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003754:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800375a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	791b      	ldrb	r3, [r3, #4]
 8003760:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003762:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	f892 2020 	ldrb.w	r2, [r2, #32]
 800376a:	2a00      	cmp	r2, #0
 800376c:	d102      	bne.n	8003774 <ETH_SetMACConfig+0x88>
 800376e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003772:	e000      	b.n	8003776 <ETH_SetMACConfig+0x8a>
 8003774:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003776:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	7bdb      	ldrb	r3, [r3, #15]
 800377c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800377e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003784:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800378c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800378e:	4313      	orrs	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7ff fd5a 	bl	8003260 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80037c2:	4013      	ands	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	d101      	bne.n	80037da <ETH_SetMACConfig+0xee>
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	e000      	b.n	80037dc <ETH_SetMACConfig+0xf0>
 80037da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80037ea:	2a01      	cmp	r2, #1
 80037ec:	d101      	bne.n	80037f2 <ETH_SetMACConfig+0x106>
 80037ee:	2208      	movs	r2, #8
 80037f0:	e000      	b.n	80037f4 <ETH_SetMACConfig+0x108>
 80037f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80037f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80037fc:	2a01      	cmp	r2, #1
 80037fe:	d101      	bne.n	8003804 <ETH_SetMACConfig+0x118>
 8003800:	2204      	movs	r2, #4
 8003802:	e000      	b.n	8003806 <ETH_SetMACConfig+0x11a>
 8003804:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800380e:	2a01      	cmp	r2, #1
 8003810:	d101      	bne.n	8003816 <ETH_SetMACConfig+0x12a>
 8003812:	2202      	movs	r2, #2
 8003814:	e000      	b.n	8003818 <ETH_SetMACConfig+0x12c>
 8003816:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003818:	4313      	orrs	r3, r2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003830:	2001      	movs	r0, #1
 8003832:	f7ff fd15 	bl	8003260 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	619a      	str	r2, [r3, #24]
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	ff20810f 	.word	0xff20810f

0800384c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4b3d      	ldr	r3, [pc, #244]	; (800395c <ETH_SetDMAConfig+0x110>)
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	7b1b      	ldrb	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <ETH_SetDMAConfig+0x2c>
 8003872:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003876:	e000      	b.n	800387a <ETH_SetDMAConfig+0x2e>
 8003878:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	7b5b      	ldrb	r3, [r3, #13]
 800387e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003880:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	7f52      	ldrb	r2, [r2, #29]
 8003886:	2a00      	cmp	r2, #0
 8003888:	d102      	bne.n	8003890 <ETH_SetDMAConfig+0x44>
 800388a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800388e:	e000      	b.n	8003892 <ETH_SetDMAConfig+0x46>
 8003890:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003892:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	7b9b      	ldrb	r3, [r3, #14]
 8003898:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800389a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	7f1b      	ldrb	r3, [r3, #28]
 80038a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80038a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7f9b      	ldrb	r3, [r3, #30]
 80038ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038c0:	4313      	orrs	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7ff fcbc 	bl	8003260 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f0:	461a      	mov	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003900:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003906:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800390c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003914:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003916:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800391e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003924:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800392e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003932:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003940:	2001      	movs	r0, #1
 8003942:	f7ff fc8d 	bl	8003260 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394e:	461a      	mov	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	f8de3f23 	.word	0xf8de3f23

08003960 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0a6      	sub	sp, #152	; 0x98
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003974:	2300      	movs	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003996:	2300      	movs	r3, #0
 8003998:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800399c:	2300      	movs	r3, #0
 800399e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80039c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80039c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fe86 	bl	80036ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a14:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff ff08 	bl	800384c <ETH_SetDMAConfig>
}
 8003a3c:	bf00      	nop
 8003a3e:	3798      	adds	r7, #152	; 0x98
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3305      	adds	r3, #5
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	3204      	adds	r2, #4
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <ETH_MACAddressConfig+0x68>)
 8003a66:	4413      	add	r3, r2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3303      	adds	r3, #3
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	061a      	lsls	r2, r3, #24
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3302      	adds	r3, #2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3301      	adds	r3, #1
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <ETH_MACAddressConfig+0x6c>)
 8003a96:	4413      	add	r3, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6013      	str	r3, [r2, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40028040 	.word	0x40028040
 8003ab0:	40028044 	.word	0x40028044

08003ab4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e03e      	b.n	8003b40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	440b      	add	r3, r1
 8003ad2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	3206      	adds	r2, #6
 8003af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d80c      	bhi.n	8003b24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e004      	b.n	8003b2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d9bd      	bls.n	8003ac2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b58:	611a      	str	r2, [r3, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e046      	b.n	8003c02 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6919      	ldr	r1, [r3, #16]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003bb8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	3212      	adds	r2, #18
 8003bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d80c      	bhi.n	8003bf2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6919      	ldr	r1, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	e004      	b.n	8003bfc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d9b5      	bls.n	8003b74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e177      	b.n	8003f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f040 8166 	bne.w	8003f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d005      	beq.n	8003c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d130      	bne.n	8003cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 0201 	and.w	r2, r3, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d017      	beq.n	8003d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d123      	bne.n	8003d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	08da      	lsrs	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3208      	adds	r2, #8
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80c0 	beq.w	8003f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a65      	ldr	r2, [pc, #404]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003de2:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_GPIO_Init+0x328>)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_GPIO_Init+0x32c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d037      	beq.n	8003e7e <HAL_GPIO_Init+0x23e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_GPIO_Init+0x23a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a56      	ldr	r2, [pc, #344]	; (8003f74 <HAL_GPIO_Init+0x334>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02b      	beq.n	8003e76 <HAL_GPIO_Init+0x236>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a55      	ldr	r2, [pc, #340]	; (8003f78 <HAL_GPIO_Init+0x338>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d025      	beq.n	8003e72 <HAL_GPIO_Init+0x232>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_GPIO_Init+0x33c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <HAL_GPIO_Init+0x22e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a53      	ldr	r2, [pc, #332]	; (8003f80 <HAL_GPIO_Init+0x340>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_GPIO_Init+0x22a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_GPIO_Init+0x344>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_GPIO_Init+0x348>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00d      	beq.n	8003e62 <HAL_GPIO_Init+0x222>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_GPIO_Init+0x34c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <HAL_GPIO_Init+0x21e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4f      	ldr	r2, [pc, #316]	; (8003f90 <HAL_GPIO_Init+0x350>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_GPIO_Init+0x21a>
 8003e56:	2309      	movs	r3, #9
 8003e58:	e012      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e010      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	e00e      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e62:	2307      	movs	r3, #7
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e66:	2306      	movs	r3, #6
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	; (8003f68 <HAL_GPIO_Init+0x328>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec2:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec8:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae84 	bls.w	8003c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40021c00 	.word	0x40021c00
 8003f8c:	40022000 	.word	0x40022000
 8003f90:	40022400 	.word	0x40022400
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e12b      	b.n	8004266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fa4c 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004060:	f001 fa20 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a81      	ldr	r2, [pc, #516]	; (8004270 <HAL_I2C_Init+0x274>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d807      	bhi.n	8004080 <HAL_I2C_Init+0x84>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a80      	ldr	r2, [pc, #512]	; (8004274 <HAL_I2C_Init+0x278>)
 8004074:	4293      	cmp	r3, r2
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e006      	b.n	800408e <HAL_I2C_Init+0x92>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a7d      	ldr	r2, [pc, #500]	; (8004278 <HAL_I2C_Init+0x27c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	bf94      	ite	ls
 8004088:	2301      	movls	r3, #1
 800408a:	2300      	movhi	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0e7      	b.n	8004266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a78      	ldr	r2, [pc, #480]	; (800427c <HAL_I2C_Init+0x280>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a6a      	ldr	r2, [pc, #424]	; (8004270 <HAL_I2C_Init+0x274>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <HAL_I2C_Init+0xd4>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3301      	adds	r3, #1
 80040ce:	e009      	b.n	80040e4 <HAL_I2C_Init+0xe8>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <HAL_I2C_Init+0x284>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	3301      	adds	r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	495c      	ldr	r1, [pc, #368]	; (8004270 <HAL_I2C_Init+0x274>)
 8004100:	428b      	cmp	r3, r1
 8004102:	d819      	bhi.n	8004138 <HAL_I2C_Init+0x13c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e59      	subs	r1, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004118:	400b      	ands	r3, r1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_I2C_Init+0x138>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1e59      	subs	r1, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	fbb1 f3f3 	udiv	r3, r1, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	e051      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004134:	2304      	movs	r3, #4
 8004136:	e04f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d111      	bne.n	8004164 <HAL_I2C_Init+0x168>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e58      	subs	r0, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	440b      	add	r3, r1
 800414e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e012      	b.n	800418a <HAL_I2C_Init+0x18e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	0099      	lsls	r1, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Init+0x196>
 800418e:	2301      	movs	r3, #1
 8004190:	e022      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10e      	bne.n	80041b8 <HAL_I2C_Init+0x1bc>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1e58      	subs	r0, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	440b      	add	r3, r1
 80041a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	e00f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e58      	subs	r0, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	0099      	lsls	r1, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6809      	ldr	r1, [r1, #0]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6911      	ldr	r1, [r2, #16]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	000186a0 	.word	0x000186a0
 8004274:	001e847f 	.word	0x001e847f
 8004278:	003d08ff 	.word	0x003d08ff
 800427c:	431bde83 	.word	0x431bde83
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	461a      	mov	r2, r3
 8004290:	460b      	mov	r3, r1
 8004292:	817b      	strh	r3, [r7, #10]
 8004294:	4613      	mov	r3, r2
 8004296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004298:	f7fe ffd6 	bl	8003248 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 80e0 	bne.w	800446c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2319      	movs	r3, #25
 80042b2:	2201      	movs	r2, #1
 80042b4:	4970      	ldr	r1, [pc, #448]	; (8004478 <HAL_I2C_Master_Transmit+0x1f4>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f964 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	e0d3      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2C_Master_Transmit+0x50>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0cc      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d007      	beq.n	80042fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2221      	movs	r2, #33	; 0x21
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2210      	movs	r2, #16
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	893a      	ldrh	r2, [r7, #8]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a50      	ldr	r2, [pc, #320]	; (800447c <HAL_I2C_Master_Transmit+0x1f8>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800433c:	8979      	ldrh	r1, [r7, #10]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f89c 	bl	8004480 <I2C_MasterRequestWrite>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e08d      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004368:	e066      	b.n	8004438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f9de 	bl	8004730 <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06b      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d11b      	bne.n	800440c <HAL_I2C_Master_Transmit+0x188>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d017      	beq.n	800440c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	6a39      	ldr	r1, [r7, #32]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9ce 	bl	80047b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00d      	beq.n	8004438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b04      	cmp	r3, #4
 8004422:	d107      	bne.n	8004434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e01a      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d194      	bne.n	800436a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	00100002 	.word	0x00100002
 800447c:	ffff0000 	.word	0xffff0000

08004480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	460b      	mov	r3, r1
 800448e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d006      	beq.n	80044aa <I2C_MasterRequestWrite+0x2a>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d003      	beq.n	80044aa <I2C_MasterRequestWrite+0x2a>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a8:	d108      	bne.n	80044bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e00b      	b.n	80044d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	2b12      	cmp	r3, #18
 80044c2:	d107      	bne.n	80044d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f84f 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fa:	d103      	bne.n	8004504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e035      	b.n	8004574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004510:	d108      	bne.n	8004524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004512:	897b      	ldrh	r3, [r7, #10]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004520:	611a      	str	r2, [r3, #16]
 8004522:	e01b      	b.n	800455c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004524:	897b      	ldrh	r3, [r7, #10]
 8004526:	11db      	asrs	r3, r3, #7
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f063 030f 	orn	r3, r3, #15
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	490e      	ldr	r1, [pc, #56]	; (800457c <I2C_MasterRequestWrite+0xfc>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f875 	bl	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e010      	b.n	8004574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4907      	ldr	r1, [pc, #28]	; (8004580 <I2C_MasterRequestWrite+0x100>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f865 	bl	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	00010008 	.word	0x00010008
 8004580:	00010002 	.word	0x00010002

08004584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004594:	e025      	b.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d021      	beq.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe fe53 	bl	8003248 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e023      	b.n	800462a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10d      	bne.n	8004608 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	e00c      	b.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	43da      	mvns	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d0b6      	beq.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004640:	e051      	b.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d123      	bne.n	800469a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800466a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e046      	b.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe fdd1 	bl	8003248 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e020      	b.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10c      	bne.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e00b      	b.n	8004722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d18d      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800473c:	e02d      	b.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f878 	bl	8004834 <I2C_IsAcknowledgeFailed>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e02d      	b.n	80047aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d021      	beq.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fe fd77 	bl	8003248 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e007      	b.n	80047aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d1ca      	bne.n	800473e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047be:	e02d      	b.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f837 	bl	8004834 <I2C_IsAcknowledgeFailed>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e02d      	b.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d021      	beq.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7fe fd36 	bl	8003248 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d1ca      	bne.n	80047c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484a:	d11b      	bne.n	8004884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0204 	orr.w	r2, r3, #4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d129      	bne.n	80048fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0210 	bic.w	r2, r2, #16
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b20      	cmp	r3, #32
 8004922:	d12a      	bne.n	800497a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004944:	89fb      	ldrh	r3, [r7, #14]
 8004946:	f023 030f 	bic.w	r3, r3, #15
 800494a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b29a      	uxth	r2, r3
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	4313      	orrs	r3, r2
 8004954:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	89fa      	ldrh	r2, [r7, #14]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b08f      	sub	sp, #60	; 0x3c
 800498c:	af0a      	add	r7, sp, #40	; 0x28
 800498e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e10f      	b.n	8004bba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fd ffbd 	bl	8002934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 ffe2 	bl	80089a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	687e      	ldr	r6, [r7, #4]
 80049e6:	466d      	mov	r5, sp
 80049e8:	f106 0410 	add.w	r4, r6, #16
 80049ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80049fc:	1d33      	adds	r3, r6, #4
 80049fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a00:	6838      	ldr	r0, [r7, #0]
 8004a02:	f003 ff6d 	bl	80088e0 <USB_CoreInit>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0d0      	b.n	8004bba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f003 ffd0 	bl	80089c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e04a      	b.n	8004ac0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	333d      	adds	r3, #61	; 0x3d
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	333c      	adds	r3, #60	; 0x3c
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	b298      	uxth	r0, r3
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3344      	adds	r3, #68	; 0x44
 8004a66:	4602      	mov	r2, r0
 8004a68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3340      	adds	r3, #64	; 0x40
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3348      	adds	r3, #72	; 0x48
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334c      	adds	r3, #76	; 0x4c
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3354      	adds	r3, #84	; 0x54
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	3301      	adds	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d3af      	bcc.n	8004a2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
 8004ace:	e044      	b.n	8004b5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ad0:	7bfa      	ldrb	r2, [r7, #15]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004afc:	7bfa      	ldrb	r2, [r7, #15]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	3301      	adds	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3b5      	bcc.n	8004ad0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	687e      	ldr	r6, [r7, #4]
 8004b6c:	466d      	mov	r5, sp
 8004b6e:	f106 0410 	add.w	r4, r6, #16
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b82:	1d33      	adds	r3, r6, #4
 8004b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b86:	6838      	ldr	r0, [r7, #0]
 8004b88:	f003 ff68 	bl	8008a5c <USB_DevInit>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00d      	b.n	8004bba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f004 f933 	bl	8008e1e <USB_DevDisconnect>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e267      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d075      	beq.n	8004cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be2:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bee:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d112      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfa:	4b82      	ldr	r3, [pc, #520]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c06:	d10b      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	4b7e      	ldr	r3, [pc, #504]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05b      	beq.n	8004ccc <HAL_RCC_OscConfig+0x108>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d157      	bne.n	8004ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e242      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x74>
 8004c2a:	4b76      	ldr	r3, [pc, #472]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a75      	ldr	r2, [pc, #468]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e01d      	b.n	8004c74 <HAL_RCC_OscConfig+0xb0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x98>
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a6f      	ldr	r2, [pc, #444]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b6d      	ldr	r3, [pc, #436]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6c      	ldr	r2, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0xb0>
 8004c5c:	4b69      	ldr	r3, [pc, #420]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a68      	ldr	r2, [pc, #416]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fae4 	bl	8003248 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fe fae0 	bl	8003248 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e207      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b5b      	ldr	r3, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0xc0>
 8004ca2:	e014      	b.n	8004cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe fad0 	bl	8003248 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fe facc 	bl	8003248 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1f3      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0xe8>
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d063      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cda:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d11c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf2:	4b44      	ldr	r3, [pc, #272]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d116      	bne.n	8004d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x152>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e1c7      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4937      	ldr	r1, [pc, #220]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	e03a      	b.n	8004da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d020      	beq.n	8004d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <HAL_RCC_OscConfig+0x244>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fe fa85 	bl	8003248 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d42:	f7fe fa81 	bl	8003248 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e1a8      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4925      	ldr	r1, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]
 8004d74:	e015      	b.n	8004da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_OscConfig+0x244>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fa64 	bl	8003248 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d84:	f7fe fa60 	bl	8003248 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e187      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d036      	beq.n	8004e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_RCC_OscConfig+0x248>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fe fa44 	bl	8003248 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc4:	f7fe fa40 	bl	8003248 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e167      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x200>
 8004de2:	e01b      	b.n	8004e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x248>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fe fa2d 	bl	8003248 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	e00e      	b.n	8004e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fe fa29 	bl	8003248 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d907      	bls.n	8004e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e150      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	42470000 	.word	0x42470000
 8004e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ea      	bne.n	8004df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8097 	beq.w	8004f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b81      	ldr	r3, [pc, #516]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b7d      	ldr	r3, [pc, #500]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a7c      	ldr	r2, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b7a      	ldr	r3, [pc, #488]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b77      	ldr	r3, [pc, #476]	; (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b74      	ldr	r3, [pc, #464]	; (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a73      	ldr	r2, [pc, #460]	; (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fe f9e9 	bl	8003248 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fe f9e5 	bl	8003248 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e10c      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x2ea>
 8004ea0:	4b64      	ldr	r3, [pc, #400]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a63      	ldr	r2, [pc, #396]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x324>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x30c>
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a5e      	ldr	r2, [pc, #376]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a5b      	ldr	r2, [pc, #364]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x324>
 8004ed0:	4b58      	ldr	r3, [pc, #352]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a57      	ldr	r2, [pc, #348]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
 8004edc:	4b55      	ldr	r3, [pc, #340]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a54      	ldr	r2, [pc, #336]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fe f9aa 	bl	8003248 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fe f9a6 	bl	8003248 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0cb      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b49      	ldr	r3, [pc, #292]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x334>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1c:	f7fe f994 	bl	8003248 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe f990 	bl	8003248 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0b5      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	4b3e      	ldr	r3, [pc, #248]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b39      	ldr	r3, [pc, #228]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4a38      	ldr	r2, [pc, #224]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80a1 	beq.w	80050a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f62:	4b34      	ldr	r3, [pc, #208]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d05c      	beq.n	8005028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d141      	bne.n	8004ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_RCC_OscConfig+0x478>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fe f964 	bl	8003248 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe f960 	bl	8003248 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e087      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	491b      	ldr	r1, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x478>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fe f939 	bl	8003248 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fda:	f7fe f935 	bl	8003248 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e05c      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x416>
 8004ff8:	e054      	b.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffa:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCC_OscConfig+0x478>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fe f922 	bl	8003248 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005008:	f7fe f91e 	bl	8003248 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e045      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_RCC_OscConfig+0x470>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x444>
 8005026:	e03d      	b.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e038      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
 8005034:	40023800 	.word	0x40023800
 8005038:	40007000 	.word	0x40007000
 800503c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x4ec>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d028      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d121      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d11a      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800

080050b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0cc      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c8:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90c      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b65      	ldr	r3, [pc, #404]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b63      	ldr	r3, [pc, #396]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005108:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a58      	ldr	r2, [pc, #352]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800512a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d044      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d119      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d003      	beq.n	8005172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516e:	2b03      	cmp	r3, #3
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005172:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005182:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e067      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005192:	4b37      	ldr	r3, [pc, #220]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0203 	bic.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4934      	ldr	r1, [pc, #208]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a4:	f7fe f850 	bl	8003248 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fe f84c 	bl	8003248 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e04f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c2:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 020c 	and.w	r2, r3, #12
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d1eb      	bne.n	80051ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d4:	4b25      	ldr	r3, [pc, #148]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d20c      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e032      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4916      	ldr	r1, [pc, #88]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490e      	ldr	r1, [pc, #56]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	490a      	ldr	r1, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	5ccb      	ldrb	r3, [r1, r3]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd ffb0 	bl	80031c0 <HAL_InitTick>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023c00 	.word	0x40023c00
 8005270:	40023800 	.word	0x40023800
 8005274:	0800a518 	.word	0x0800a518
 8005278:	2000000c 	.word	0x2000000c
 800527c:	20000010 	.word	0x20000010

08005280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005284:	b094      	sub	sp, #80	; 0x50
 8005286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	2300      	movs	r3, #0
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	2300      	movs	r3, #0
 8005292:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005298:	4b79      	ldr	r3, [pc, #484]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d00d      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x40>
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	f200 80e1 	bhi.w	800546c <HAL_RCC_GetSysClockFreq+0x1ec>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x3a>
 80052b2:	e0db      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b73      	ldr	r3, [pc, #460]	; (8005484 <HAL_RCC_GetSysClockFreq+0x204>)
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052b8:	e0db      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <HAL_RCC_GetSysClockFreq+0x208>)
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052be:	e0d8      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c0:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ca:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d063      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	2200      	movs	r2, #0
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ea:	2300      	movs	r3, #0
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	f04f 0000 	mov.w	r0, #0
 80052fa:	f04f 0100 	mov.w	r1, #0
 80052fe:	0159      	lsls	r1, r3, #5
 8005300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005304:	0150      	lsls	r0, r2, #5
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4621      	mov	r1, r4
 800530c:	1a51      	subs	r1, r2, r1
 800530e:	6139      	str	r1, [r7, #16]
 8005310:	4629      	mov	r1, r5
 8005312:	eb63 0301 	sbc.w	r3, r3, r1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005324:	4659      	mov	r1, fp
 8005326:	018b      	lsls	r3, r1, #6
 8005328:	4651      	mov	r1, sl
 800532a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800532e:	4651      	mov	r1, sl
 8005330:	018a      	lsls	r2, r1, #6
 8005332:	4651      	mov	r1, sl
 8005334:	ebb2 0801 	subs.w	r8, r2, r1
 8005338:	4659      	mov	r1, fp
 800533a:	eb63 0901 	sbc.w	r9, r3, r1
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800534e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005352:	4690      	mov	r8, r2
 8005354:	4699      	mov	r9, r3
 8005356:	4623      	mov	r3, r4
 8005358:	eb18 0303 	adds.w	r3, r8, r3
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	462b      	mov	r3, r5
 8005360:	eb49 0303 	adc.w	r3, r9, r3
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005372:	4629      	mov	r1, r5
 8005374:	024b      	lsls	r3, r1, #9
 8005376:	4621      	mov	r1, r4
 8005378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800537c:	4621      	mov	r1, r4
 800537e:	024a      	lsls	r2, r1, #9
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005386:	2200      	movs	r2, #0
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
 800538a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800538c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005390:	f7fb fb74 	bl	8000a7c <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	e058      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b38      	ldr	r3, [pc, #224]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	4611      	mov	r1, r2
 80053aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	2300      	movs	r3, #0
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
 80053b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	f04f 0000 	mov.w	r0, #0
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	0159      	lsls	r1, r3, #5
 80053c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ca:	0150      	lsls	r0, r2, #5
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4641      	mov	r1, r8
 80053d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053f0:	ebb2 040a 	subs.w	r4, r2, sl
 80053f4:	eb63 050b 	sbc.w	r5, r3, fp
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	00eb      	lsls	r3, r5, #3
 8005402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005406:	00e2      	lsls	r2, r4, #3
 8005408:	4614      	mov	r4, r2
 800540a:	461d      	mov	r5, r3
 800540c:	4643      	mov	r3, r8
 800540e:	18e3      	adds	r3, r4, r3
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	464b      	mov	r3, r9
 8005414:	eb45 0303 	adc.w	r3, r5, r3
 8005418:	607b      	str	r3, [r7, #4]
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005426:	4629      	mov	r1, r5
 8005428:	028b      	lsls	r3, r1, #10
 800542a:	4621      	mov	r1, r4
 800542c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005430:	4621      	mov	r1, r4
 8005432:	028a      	lsls	r2, r1, #10
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800543a:	2200      	movs	r2, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	61fa      	str	r2, [r7, #28]
 8005440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005444:	f7fb fb1a 	bl	8000a7c <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	3301      	adds	r3, #1
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800546a:	e002      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCC_GetSysClockFreq+0x204>)
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005474:	4618      	mov	r0, r3
 8005476:	3750      	adds	r7, #80	; 0x50
 8005478:	46bd      	mov	sp, r7
 800547a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	00f42400 	.word	0x00f42400
 8005488:	007a1200 	.word	0x007a1200

0800548c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054a8:	f7ff fff0 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0a9b      	lsrs	r3, r3, #10
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	0800a528 	.word	0x0800a528

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054d0:	f7ff ffdc 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0b5b      	lsrs	r3, r3, #13
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	; (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800a528 	.word	0x0800a528

080054f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005524:	2b00      	cmp	r3, #0
 8005526:	d075      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005528:	4b91      	ldr	r3, [pc, #580]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552e:	f7fd fe8b 	bl	8003248 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005536:	f7fd fe87 	bl	8003248 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e189      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005548:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	019a      	lsls	r2, r3, #6
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	071b      	lsls	r3, r3, #28
 800556c:	4981      	ldr	r1, [pc, #516]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01f      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005580:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005586:	0f1b      	lsrs	r3, r3, #28
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	019a      	lsls	r2, r3, #6
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	061b      	lsls	r3, r3, #24
 800559a:	431a      	orrs	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	071b      	lsls	r3, r3, #28
 80055a0:	4974      	ldr	r1, [pc, #464]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055a8:	4b72      	ldr	r3, [pc, #456]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ae:	f023 021f 	bic.w	r2, r3, #31
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	496e      	ldr	r1, [pc, #440]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	019a      	lsls	r2, r3, #6
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	071b      	lsls	r3, r3, #28
 80055e0:	4964      	ldr	r1, [pc, #400]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055e8:	4b61      	ldr	r3, [pc, #388]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055ee:	f7fd fe2b 	bl	8003248 <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055f6:	f7fd fe27 	bl	8003248 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e129      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005608:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005628:	2b00      	cmp	r3, #0
 800562a:	d079      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800562c:	4b52      	ldr	r3, [pc, #328]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005632:	f7fd fe09 	bl	8003248 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005638:	e008      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800563a:	f7fd fe05 	bl	8003248 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e107      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800564c:	4b49      	ldr	r3, [pc, #292]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005658:	d0ef      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005666:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	0f1b      	lsrs	r3, r3, #28
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	019a      	lsls	r2, r3, #6
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	431a      	orrs	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	071b      	lsls	r3, r3, #28
 8005686:	493b      	ldr	r1, [pc, #236]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005694:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	3b01      	subs	r3, #1
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	4934      	ldr	r1, [pc, #208]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01e      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056b4:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	0e1b      	lsrs	r3, r3, #24
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	4927      	ldr	r1, [pc, #156]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	4922      	ldr	r1, [pc, #136]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056f2:	4b21      	ldr	r3, [pc, #132]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056f8:	f7fd fda6 	bl	8003248 <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005700:	f7fd fda2 	bl	8003248 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e0a4      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005712:	4b18      	ldr	r3, [pc, #96]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800571a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571e:	d1ef      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 808b 	beq.w	8005844 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a0b      	ldr	r2, [pc, #44]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005756:	f7fd fd77 	bl	8003248 <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800575c:	e010      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fd fd73 	bl	8003248 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d909      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e075      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005770:	42470068 	.word	0x42470068
 8005774:	40023800 	.word	0x40023800
 8005778:	42470070 	.word	0x42470070
 800577c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005780:	4b38      	ldr	r3, [pc, #224]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0e8      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02f      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d028      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057aa:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057b4:	4b2d      	ldr	r3, [pc, #180]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057c0:	4a29      	ldr	r2, [pc, #164]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057c6:	4b28      	ldr	r3, [pc, #160]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d114      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd fd39 	bl	8003248 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fd fd35 	bl	8003248 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e035      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f0:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ee      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005808:	d10d      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	4912      	ldr	r1, [pc, #72]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]
 8005824:	e005      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800582c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005830:	6093      	str	r3, [r2, #8]
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583e:	490a      	ldr	r1, [pc, #40]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005840:	4313      	orrs	r3, r2
 8005842:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005858:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40007000 	.word	0x40007000
 8005868:	40023800 	.word	0x40023800
 800586c:	42470e40 	.word	0x42470e40
 8005870:	424711e0 	.word	0x424711e0

08005874 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e066      	b.n	8005958 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7f5b      	ldrb	r3, [r3, #29]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fc fe58 	bl	8002550 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	22ca      	movs	r2, #202	; 0xca
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2253      	movs	r2, #83	; 0x53
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa45 	bl	8005d46 <RTC_EnterInitMode>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d12c      	bne.n	8005920 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6899      	ldr	r1, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68d2      	ldr	r2, [r2, #12]
 8005900:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6919      	ldr	r1, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	041a      	lsls	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fa4c 	bl	8005db4 <RTC_ExitInitMode>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d113      	bne.n	800594e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7f1b      	ldrb	r3, [r3, #28]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_RTC_SetTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e087      	b.n	8005a8c <HAL_RTC_SetTime+0x12c>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2202      	movs	r2, #2
 8005986:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d126      	bne.n	80059dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa29 	bl	8005dfe <RTC_ByteToBcd2>
 80059ac:	4603      	mov	r3, r0
 80059ae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fa22 	bl	8005dfe <RTC_ByteToBcd2>
 80059ba:	4603      	mov	r3, r0
 80059bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059be:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	789b      	ldrb	r3, [r3, #2]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa1a 	bl	8005dfe <RTC_ByteToBcd2>
 80059ca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	78db      	ldrb	r3, [r3, #3]
 80059d4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e018      	b.n	8005a0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2200      	movs	r2, #0
 80059ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	22ca      	movs	r2, #202	; 0xca
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2253      	movs	r2, #83	; 0x53
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f991 	bl	8005d46 <RTC_EnterInitMode>
 8005a24:	4603      	mov	r3, r0
 8005a26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d120      	bne.n	8005a70 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6899      	ldr	r1, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f9a4 	bl	8005db4 <RTC_ExitInitMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	22ff      	movs	r2, #255	; 0xff
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]

  return status;
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}

08005a94 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ac6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005aca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	0c1b      	lsrs	r3, r3, #16
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	0d9b      	lsrs	r3, r3, #22
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11a      	bne.n	8005b46 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f98f 	bl	8005e38 <RTC_Bcd2ToByte>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f986 	bl	8005e38 <RTC_Bcd2ToByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f97d 	bl	8005e38 <RTC_Bcd2ToByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	7f1b      	ldrb	r3, [r3, #28]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_RTC_SetDate+0x1c>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e071      	b.n	8005c50 <HAL_RTC_SetDate+0x100>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2202      	movs	r2, #2
 8005b76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10e      	bne.n	8005b9c <HAL_RTC_SetDate+0x4c>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	330a      	adds	r3, #10
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11c      	bne.n	8005bdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	78db      	ldrb	r3, [r3, #3]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f929 	bl	8005dfe <RTC_ByteToBcd2>
 8005bac:	4603      	mov	r3, r0
 8005bae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f922 	bl	8005dfe <RTC_ByteToBcd2>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	789b      	ldrb	r3, [r3, #2]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f91a 	bl	8005dfe <RTC_ByteToBcd2>
 8005bca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bcc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e00e      	b.n	8005bfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	78db      	ldrb	r3, [r3, #3]
 8005be0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005be8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	22ca      	movs	r2, #202	; 0xca
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2253      	movs	r2, #83	; 0x53
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f89b 	bl	8005d46 <RTC_EnterInitMode>
 8005c10:	4603      	mov	r3, r0
 8005c12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c14:	7cfb      	ldrb	r3, [r7, #19]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8c2 	bl	8005db4 <RTC_ExitInitMode>
 8005c30:	4603      	mov	r3, r0
 8005c32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	771a      	strb	r2, [r3, #28]

  return status;
 8005c4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11a      	bne.n	8005cec <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f8bc 	bl	8005e38 <RTC_Bcd2ToByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f8b3 	bl	8005e38 <RTC_Bcd2ToByte>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	789b      	ldrb	r3, [r3, #2]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f8aa 	bl	8005e38 <RTC_Bcd2ToByte>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d10:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d12:	f7fd fa99 	bl	8003248 <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d18:	e009      	b.n	8005d2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d1a:	f7fd fa95 	bl	8003248 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d28:	d901      	bls.n	8005d2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e007      	b.n	8005d3e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ee      	beq.n	8005d1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d122      	bne.n	8005daa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d74:	f7fd fa68 	bl	8003248 <HAL_GetTick>
 8005d78:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d7a:	e00c      	b.n	8005d96 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d7c:	f7fd fa64 	bl	8003248 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d8a:	d904      	bls.n	8005d96 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <RTC_EnterInitMode+0x64>
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d1e8      	bne.n	8005d7c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff89 	bl	8005cf6 <HAL_RTC_WaitForSynchro>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2204      	movs	r2, #4
 8005dee:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	4603      	mov	r3, r0
 8005e06:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e0c:	e005      	b.n	8005e1a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3301      	adds	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	3b0a      	subs	r3, #10
 8005e18:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b09      	cmp	r3, #9
 8005e1e:	d8f6      	bhi.n	8005e0e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b2db      	uxtb	r3, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	0092      	lsls	r2, r2, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	4413      	add	r3, r2
 8005e62:	b2db      	uxtb	r3, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e041      	b.n	8005f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc fbfa 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 ffd4 	bl	8006e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d001      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e04e      	b.n	8005fc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d022      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d01d      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d018      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_TIM_Base_Start_IT+0xcc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00e      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x80>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_TIM_Base_Start_IT+0xdc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d111      	bne.n	8005fb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b06      	cmp	r3, #6
 8005fa0:	d010      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	e007      	b.n	8005fc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40001800 	.word	0x40001800

08005ff0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e041      	b.n	8006086 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fc fac4 	bl	80025a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f000 ff14 	bl	8006e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_TIM_PWM_Start+0x24>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e022      	b.n	80060fa <HAL_TIM_PWM_Start+0x6a>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d109      	bne.n	80060ce <HAL_TIM_PWM_Start+0x3e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	bf14      	ite	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	2300      	moveq	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e015      	b.n	80060fa <HAL_TIM_PWM_Start+0x6a>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d109      	bne.n	80060e8 <HAL_TIM_PWM_Start+0x58>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e008      	b.n	80060fa <HAL_TIM_PWM_Start+0x6a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e07c      	b.n	80061fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0x82>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	e013      	b.n	800613a <HAL_TIM_PWM_Start+0xaa>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d104      	bne.n	8006122 <HAL_TIM_PWM_Start+0x92>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006120:	e00b      	b.n	800613a <HAL_TIM_PWM_Start+0xaa>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d104      	bne.n	8006132 <HAL_TIM_PWM_Start+0xa2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006130:	e003      	b.n	800613a <HAL_TIM_PWM_Start+0xaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f001 fa9e 	bl	8007684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2d      	ldr	r2, [pc, #180]	; (8006204 <HAL_TIM_PWM_Start+0x174>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <HAL_TIM_PWM_Start+0xcc>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2c      	ldr	r2, [pc, #176]	; (8006208 <HAL_TIM_PWM_Start+0x178>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <HAL_TIM_PWM_Start+0xd0>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_TIM_PWM_Start+0xd2>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_TIM_PWM_Start+0x174>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006188:	d01d      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_TIM_PWM_Start+0x17c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <HAL_TIM_PWM_Start+0x180>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <HAL_TIM_PWM_Start+0x184>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a16      	ldr	r2, [pc, #88]	; (8006208 <HAL_TIM_PWM_Start+0x178>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_TIM_PWM_Start+0x188>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x136>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a16      	ldr	r2, [pc, #88]	; (800621c <HAL_TIM_PWM_Start+0x18c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d111      	bne.n	80061ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d010      	beq.n	80061fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	e007      	b.n	80061fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40010000 	.word	0x40010000
 8006208:	40010400 	.word	0x40010400
 800620c:	40000400 	.word	0x40000400
 8006210:	40000800 	.word	0x40000800
 8006214:	40000c00 	.word	0x40000c00
 8006218:	40014000 	.word	0x40014000
 800621c:	40001800 	.word	0x40001800

08006220 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start_IT+0x28>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start_IT+0x6e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start_IT+0x42>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start_IT+0x6e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start_IT+0x5c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start_IT+0x6e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0c7      	b.n	8006426 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start_IT+0x86>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	e013      	b.n	80062ce <HAL_TIM_PWM_Start_IT+0xae>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start_IT+0x96>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	e00b      	b.n	80062ce <HAL_TIM_PWM_Start_IT+0xae>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start_IT+0xa6>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	e003      	b.n	80062ce <HAL_TIM_PWM_Start_IT+0xae>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	d841      	bhi.n	8006358 <HAL_TIM_PWM_Start_IT+0x138>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <HAL_TIM_PWM_Start_IT+0xbc>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006311 	.word	0x08006311
 80062e0:	08006359 	.word	0x08006359
 80062e4:	08006359 	.word	0x08006359
 80062e8:	08006359 	.word	0x08006359
 80062ec:	08006323 	.word	0x08006323
 80062f0:	08006359 	.word	0x08006359
 80062f4:	08006359 	.word	0x08006359
 80062f8:	08006359 	.word	0x08006359
 80062fc:	08006335 	.word	0x08006335
 8006300:	08006359 	.word	0x08006359
 8006304:	08006359 	.word	0x08006359
 8006308:	08006359 	.word	0x08006359
 800630c:	08006347 	.word	0x08006347
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0202 	orr.w	r2, r2, #2
 800631e:	60da      	str	r2, [r3, #12]
      break;
 8006320:	e01d      	b.n	800635e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0204 	orr.w	r2, r2, #4
 8006330:	60da      	str	r2, [r3, #12]
      break;
 8006332:	e014      	b.n	800635e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	60da      	str	r2, [r3, #12]
      break;
 8006344:	e00b      	b.n	800635e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0210 	orr.w	r2, r2, #16
 8006354:	60da      	str	r2, [r3, #12]
      break;
 8006356:	e002      	b.n	800635e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	bf00      	nop
  }

  if (status == HAL_OK)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d15f      	bne.n	8006424 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f989 	bl	8007684 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2e      	ldr	r2, [pc, #184]	; (8006430 <HAL_TIM_PWM_Start_IT+0x210>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIM_PWM_Start_IT+0x166>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <HAL_TIM_PWM_Start_IT+0x214>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <HAL_TIM_PWM_Start_IT+0x16a>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <HAL_TIM_PWM_Start_IT+0x16c>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800639e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_TIM_PWM_Start_IT+0x210>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d01d      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <HAL_TIM_PWM_Start_IT+0x218>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <HAL_TIM_PWM_Start_IT+0x21c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <HAL_TIM_PWM_Start_IT+0x220>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a17      	ldr	r2, [pc, #92]	; (8006434 <HAL_TIM_PWM_Start_IT+0x214>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_TIM_PWM_Start_IT+0x224>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <HAL_TIM_PWM_Start_IT+0x228>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d111      	bne.n	8006414 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b06      	cmp	r3, #6
 8006400:	d010      	beq.n	8006424 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	e007      	b.n	8006424 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40014000 	.word	0x40014000
 8006448:	40001800 	.word	0x40001800

0800644c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e041      	b.n	80064e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc f8bc 	bl	80025f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f000 fce6 	bl	8006e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_TIM_IC_Start_IT+0x1e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006506:	b2db      	uxtb	r3, r3
 8006508:	e013      	b.n	8006532 <HAL_TIM_IC_Start_IT+0x46>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d104      	bne.n	800651a <HAL_TIM_IC_Start_IT+0x2e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e00b      	b.n	8006532 <HAL_TIM_IC_Start_IT+0x46>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d104      	bne.n	800652a <HAL_TIM_IC_Start_IT+0x3e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006526:	b2db      	uxtb	r3, r3
 8006528:	e003      	b.n	8006532 <HAL_TIM_IC_Start_IT+0x46>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <HAL_TIM_IC_Start_IT+0x58>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e013      	b.n	800656c <HAL_TIM_IC_Start_IT+0x80>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b04      	cmp	r3, #4
 8006548:	d104      	bne.n	8006554 <HAL_TIM_IC_Start_IT+0x68>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e00b      	b.n	800656c <HAL_TIM_IC_Start_IT+0x80>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d104      	bne.n	8006564 <HAL_TIM_IC_Start_IT+0x78>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e003      	b.n	800656c <HAL_TIM_IC_Start_IT+0x80>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800656a:	b2db      	uxtb	r3, r3
 800656c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006574:	7b7b      	ldrb	r3, [r7, #13]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d001      	beq.n	800657e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e0cc      	b.n	8006718 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_IC_Start_IT+0xa2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658c:	e013      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0xca>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d104      	bne.n	800659e <HAL_TIM_IC_Start_IT+0xb2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659c:	e00b      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0xca>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_IC_Start_IT+0xc2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ac:	e003      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0xca>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_IC_Start_IT+0xda>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	e013      	b.n	80065ee <HAL_TIM_IC_Start_IT+0x102>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_IC_Start_IT+0xea>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d4:	e00b      	b.n	80065ee <HAL_TIM_IC_Start_IT+0x102>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_IC_Start_IT+0xfa>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e4:	e003      	b.n	80065ee <HAL_TIM_IC_Start_IT+0x102>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d841      	bhi.n	8006678 <HAL_TIM_IC_Start_IT+0x18c>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_TIM_IC_Start_IT+0x110>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006679 	.word	0x08006679
 8006604:	08006679 	.word	0x08006679
 8006608:	08006679 	.word	0x08006679
 800660c:	08006643 	.word	0x08006643
 8006610:	08006679 	.word	0x08006679
 8006614:	08006679 	.word	0x08006679
 8006618:	08006679 	.word	0x08006679
 800661c:	08006655 	.word	0x08006655
 8006620:	08006679 	.word	0x08006679
 8006624:	08006679 	.word	0x08006679
 8006628:	08006679 	.word	0x08006679
 800662c:	08006667 	.word	0x08006667
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0202 	orr.w	r2, r2, #2
 800663e:	60da      	str	r2, [r3, #12]
      break;
 8006640:	e01d      	b.n	800667e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0204 	orr.w	r2, r2, #4
 8006650:	60da      	str	r2, [r3, #12]
      break;
 8006652:	e014      	b.n	800667e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0208 	orr.w	r2, r2, #8
 8006662:	60da      	str	r2, [r3, #12]
      break;
 8006664:	e00b      	b.n	800667e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0210 	orr.w	r2, r2, #16
 8006674:	60da      	str	r2, [r3, #12]
      break;
 8006676:	e002      	b.n	800667e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
      break;
 800667c:	bf00      	nop
  }

  if (status == HAL_OK)
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d148      	bne.n	8006716 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2201      	movs	r2, #1
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fff9 	bl	8007684 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a22      	ldr	r2, [pc, #136]	; (8006720 <HAL_TIM_IC_Start_IT+0x234>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d022      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d01d      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <HAL_TIM_IC_Start_IT+0x238>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_TIM_IC_Start_IT+0x23c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1b      	ldr	r2, [pc, #108]	; (800672c <HAL_TIM_IC_Start_IT+0x240>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a19      	ldr	r2, [pc, #100]	; (8006730 <HAL_TIM_IC_Start_IT+0x244>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_TIM_IC_Start_IT+0x248>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_TIM_IC_Start_IT+0x24c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d111      	bne.n	8006706 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b06      	cmp	r3, #6
 80066f2:	d010      	beq.n	8006716 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006704:	e007      	b.n	8006716 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0201 	orr.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40010400 	.word	0x40010400
 8006734:	40014000 	.word	0x40014000
 8006738:	40001800 	.word	0x40001800

0800673c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b02      	cmp	r3, #2
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0202 	mvn.w	r2, #2
 8006768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fc fc1a 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fb4a 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb51 	bl	8006e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0204 	mvn.w	r2, #4
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fc fbf0 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb20 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fb27 	bl	8006e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b08      	cmp	r3, #8
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0208 	mvn.w	r2, #8
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2204      	movs	r2, #4
 8006816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fc fbc6 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 faf6 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fafd 	bl	8006e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b10      	cmp	r3, #16
 800684c:	d122      	bne.n	8006894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b10      	cmp	r3, #16
 800685a:	d11b      	bne.n	8006894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0210 	mvn.w	r2, #16
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2208      	movs	r2, #8
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc fb9c 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 facc 	bl	8006e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fad3 	bl	8006e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10e      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0201 	mvn.w	r2, #1
 80068b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fb f800 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d10e      	bne.n	80068ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d8:	2b80      	cmp	r3, #128	; 0x80
 80068da:	d107      	bne.n	80068ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 ff78 	bl	80077dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d10e      	bne.n	8006918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d107      	bne.n	8006918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa98 	bl	8006e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b20      	cmp	r3, #32
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b20      	cmp	r3, #32
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0220 	mvn.w	r2, #32
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 ff42 	bl	80077c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006966:	2302      	movs	r3, #2
 8006968:	e088      	b.n	8006a7c <HAL_TIM_IC_ConfigChannel+0x130>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d11b      	bne.n	80069b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f000 fcb8 	bl	80072fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 020c 	bic.w	r2, r2, #12
 800699a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	619a      	str	r2, [r3, #24]
 80069ae:	e060      	b.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d11c      	bne.n	80069f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f000 fd3c 	bl	8007442 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699a      	ldr	r2, [r3, #24]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6999      	ldr	r1, [r3, #24]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	021a      	lsls	r2, r3, #8
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	619a      	str	r2, [r3, #24]
 80069ee:	e040      	b.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d11b      	bne.n	8006a2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f000 fd89 	bl	800751c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 020c 	bic.w	r2, r2, #12
 8006a18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69d9      	ldr	r1, [r3, #28]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	61da      	str	r2, [r3, #28]
 8006a2c:	e021      	b.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b0c      	cmp	r3, #12
 8006a32:	d11c      	bne.n	8006a6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f000 fda6 	bl	8007594 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69d9      	ldr	r1, [r3, #28]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	021a      	lsls	r2, r3, #8
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e001      	b.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e0ae      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	f200 809f 	bhi.w	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006bf1 	.word	0x08006bf1
 8006ac0:	08006bf1 	.word	0x08006bf1
 8006ac4:	08006bf1 	.word	0x08006bf1
 8006ac8:	08006b2d 	.word	0x08006b2d
 8006acc:	08006bf1 	.word	0x08006bf1
 8006ad0:	08006bf1 	.word	0x08006bf1
 8006ad4:	08006bf1 	.word	0x08006bf1
 8006ad8:	08006b6f 	.word	0x08006b6f
 8006adc:	08006bf1 	.word	0x08006bf1
 8006ae0:	08006bf1 	.word	0x08006bf1
 8006ae4:	08006bf1 	.word	0x08006bf1
 8006ae8:	08006baf 	.word	0x08006baf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fa52 	bl	8006f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6999      	ldr	r1, [r3, #24]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	619a      	str	r2, [r3, #24]
      break;
 8006b2a:	e064      	b.n	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 faa2 	bl	800707c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	619a      	str	r2, [r3, #24]
      break;
 8006b6c:	e043      	b.n	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 faf7 	bl	8007168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0208 	orr.w	r2, r2, #8
 8006b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0204 	bic.w	r2, r2, #4
 8006b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69d9      	ldr	r1, [r3, #28]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	61da      	str	r2, [r3, #28]
      break;
 8006bac:	e023      	b.n	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fb4b 	bl	8007250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	021a      	lsls	r2, r3, #8
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	61da      	str	r2, [r3, #28]
      break;
 8006bee:	e002      	b.n	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e0b4      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x186>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5c:	d03e      	beq.n	8006cdc <HAL_TIM_ConfigClockSource+0xd4>
 8006c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c62:	f200 8087 	bhi.w	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	f000 8086 	beq.w	8006d7a <HAL_TIM_ConfigClockSource+0x172>
 8006c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c72:	d87f      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b70      	cmp	r3, #112	; 0x70
 8006c76:	d01a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0xa6>
 8006c78:	2b70      	cmp	r3, #112	; 0x70
 8006c7a:	d87b      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c7c:	2b60      	cmp	r3, #96	; 0x60
 8006c7e:	d050      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x11a>
 8006c80:	2b60      	cmp	r3, #96	; 0x60
 8006c82:	d877      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c84:	2b50      	cmp	r3, #80	; 0x50
 8006c86:	d03c      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0xfa>
 8006c88:	2b50      	cmp	r3, #80	; 0x50
 8006c8a:	d873      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d058      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x13a>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d86f      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b30      	cmp	r3, #48	; 0x30
 8006c96:	d064      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006c98:	2b30      	cmp	r3, #48	; 0x30
 8006c9a:	d86b      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d060      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d867      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05c      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d05a      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006cac:	e062      	b.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6899      	ldr	r1, [r3, #8]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f000 fcc1 	bl	8007644 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]
      break;
 8006cda:	e04f      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6899      	ldr	r1, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f000 fcaa 	bl	8007644 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cfe:	609a      	str	r2, [r3, #8]
      break;
 8006d00:	e03c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6859      	ldr	r1, [r3, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f000 fb68 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2150      	movs	r1, #80	; 0x50
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fc77 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8006d20:	e02c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6859      	ldr	r1, [r3, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f000 fbc4 	bl	80074bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2160      	movs	r1, #96	; 0x60
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc67 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8006d40:	e01c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6859      	ldr	r1, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f000 fb48 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fc57 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8006d60:	e00c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f000 fc4e 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8006d72:	e003      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d831      	bhi.n	8006e10 <HAL_TIM_ReadCapturedValue+0x78>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006e11 	.word	0x08006e11
 8006dcc:	08006e11 	.word	0x08006e11
 8006dd0:	08006e11 	.word	0x08006e11
 8006dd4:	08006dfd 	.word	0x08006dfd
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e07 	.word	0x08006e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	60fb      	str	r3, [r7, #12]

      break;
 8006df0:	e00f      	b.n	8006e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	60fb      	str	r3, [r7, #12]

      break;
 8006dfa:	e00a      	b.n	8006e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	60fb      	str	r3, [r7, #12]

      break;
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	60fb      	str	r3, [r7, #12]

      break;
 8006e0e:	e000      	b.n	8006e12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e10:	bf00      	nop
  }

  return tmpreg;
 8006e12:	68fb      	ldr	r3, [r7, #12]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a40      	ldr	r2, [pc, #256]	; (8006f70 <TIM_Base_SetConfig+0x114>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d013      	beq.n	8006e9c <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7a:	d00f      	beq.n	8006e9c <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3d      	ldr	r2, [pc, #244]	; (8006f74 <TIM_Base_SetConfig+0x118>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00b      	beq.n	8006e9c <TIM_Base_SetConfig+0x40>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a3c      	ldr	r2, [pc, #240]	; (8006f78 <TIM_Base_SetConfig+0x11c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <TIM_Base_SetConfig+0x40>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a3b      	ldr	r2, [pc, #236]	; (8006f7c <TIM_Base_SetConfig+0x120>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_Base_SetConfig+0x40>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a3a      	ldr	r2, [pc, #232]	; (8006f80 <TIM_Base_SetConfig+0x124>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d108      	bne.n	8006eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2f      	ldr	r2, [pc, #188]	; (8006f70 <TIM_Base_SetConfig+0x114>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d02b      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebc:	d027      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a2c      	ldr	r2, [pc, #176]	; (8006f74 <TIM_Base_SetConfig+0x118>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d023      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a2b      	ldr	r2, [pc, #172]	; (8006f78 <TIM_Base_SetConfig+0x11c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01f      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	; (8006f7c <TIM_Base_SetConfig+0x120>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01b      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <TIM_Base_SetConfig+0x124>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d017      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <TIM_Base_SetConfig+0x128>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <TIM_Base_SetConfig+0x12c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00f      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a26      	ldr	r2, [pc, #152]	; (8006f8c <TIM_Base_SetConfig+0x130>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00b      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <TIM_Base_SetConfig+0x134>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d007      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <TIM_Base_SetConfig+0x138>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d003      	beq.n	8006f0e <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <TIM_Base_SetConfig+0x13c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d108      	bne.n	8006f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <TIM_Base_SetConfig+0x114>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_Base_SetConfig+0xf8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a0c      	ldr	r2, [pc, #48]	; (8006f80 <TIM_Base_SetConfig+0x124>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d103      	bne.n	8006f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	615a      	str	r2, [r3, #20]
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800
 8006f90:	40001800 	.word	0x40001800
 8006f94:	40001c00 	.word	0x40001c00
 8006f98:	40002000 	.word	0x40002000

08006f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f023 0201 	bic.w	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f023 0302 	bic.w	r3, r3, #2
 8006fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a20      	ldr	r2, [pc, #128]	; (8007074 <TIM_OC1_SetConfig+0xd8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_OC1_SetConfig+0x64>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1f      	ldr	r2, [pc, #124]	; (8007078 <TIM_OC1_SetConfig+0xdc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10c      	bne.n	800701a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0308 	bic.w	r3, r3, #8
 8007006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 0304 	bic.w	r3, r3, #4
 8007018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a15      	ldr	r2, [pc, #84]	; (8007074 <TIM_OC1_SetConfig+0xd8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_OC1_SetConfig+0x8e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a14      	ldr	r2, [pc, #80]	; (8007078 <TIM_OC1_SetConfig+0xdc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d111      	bne.n	800704e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	621a      	str	r2, [r3, #32]
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0210 	bic.w	r2, r3, #16
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0320 	bic.w	r3, r3, #32
 80070c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a22      	ldr	r2, [pc, #136]	; (8007160 <TIM_OC2_SetConfig+0xe4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC2_SetConfig+0x68>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <TIM_OC2_SetConfig+0xe8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10d      	bne.n	8007100 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <TIM_OC2_SetConfig+0xe4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_OC2_SetConfig+0x94>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a16      	ldr	r2, [pc, #88]	; (8007164 <TIM_OC2_SetConfig+0xe8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d113      	bne.n	8007138 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40010400 	.word	0x40010400

08007168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a21      	ldr	r2, [pc, #132]	; (8007248 <TIM_OC3_SetConfig+0xe0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_OC3_SetConfig+0x66>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a20      	ldr	r2, [pc, #128]	; (800724c <TIM_OC3_SetConfig+0xe4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d10d      	bne.n	80071ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a16      	ldr	r2, [pc, #88]	; (8007248 <TIM_OC3_SetConfig+0xe0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_OC3_SetConfig+0x92>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a15      	ldr	r2, [pc, #84]	; (800724c <TIM_OC3_SetConfig+0xe4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d113      	bne.n	8007222 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	621a      	str	r2, [r3, #32]
}
 800723c:	bf00      	nop
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40010000 	.word	0x40010000
 800724c:	40010400 	.word	0x40010400

08007250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800729a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <TIM_OC4_SetConfig+0xa4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC4_SetConfig+0x68>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a11      	ldr	r2, [pc, #68]	; (80072f8 <TIM_OC4_SetConfig+0xa8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a28      	ldr	r2, [pc, #160]	; (80073c8 <TIM_TI1_SetConfig+0xcc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01b      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d017      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_TI1_SetConfig+0xd0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_TI1_SetConfig+0xd4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00f      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_TI1_SetConfig+0xd8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00b      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <TIM_TI1_SetConfig+0xdc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d007      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a21      	ldr	r2, [pc, #132]	; (80073dc <TIM_TI1_SetConfig+0xe0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_TI1_SetConfig+0x66>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <TIM_TI1_SetConfig+0xe4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <TIM_TI1_SetConfig+0x6a>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <TIM_TI1_SetConfig+0x6c>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e003      	b.n	8007386 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800738c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	b2db      	uxtb	r3, r3
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f023 030a 	bic.w	r3, r3, #10
 80073a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f003 030a 	and.w	r3, r3, #10
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40001800 	.word	0x40001800

080073e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 030a 	bic.w	r3, r3, #10
 8007420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	f023 0210 	bic.w	r2, r3, #16
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	b29b      	uxth	r3, r3
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007494:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	621a      	str	r2, [r3, #32]
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f023 0210 	bic.w	r2, r3, #16
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	031b      	lsls	r3, r3, #12
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	621a      	str	r2, [r3, #32]
}
 8007510:	bf00      	nop
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f023 0303 	bic.w	r3, r3, #3
 8007548:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007558:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	b2db      	uxtb	r3, r3
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800756c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	621a      	str	r2, [r3, #32]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	031b      	lsls	r3, r3, #12
 80075d8:	b29b      	uxth	r3, r3
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	031b      	lsls	r3, r3, #12
 80075ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	f043 0307 	orr.w	r3, r3, #7
 8007630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800765e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	021a      	lsls	r2, r3, #8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	431a      	orrs	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4313      	orrs	r3, r2
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	2201      	movs	r2, #1
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	401a      	ands	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	fa01 f303 	lsl.w	r3, r1, r3
 80076bc:	431a      	orrs	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e05a      	b.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a21      	ldr	r2, [pc, #132]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d022      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007734:	d01d      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1a      	ldr	r2, [pc, #104]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a18      	ldr	r2, [pc, #96]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10c      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40001800 	.word	0x40001800

080077c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e03f      	b.n	8007882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fa fffe 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2224      	movs	r2, #36	; 0x24
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fddf 	bl	80083f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695a      	ldr	r2, [r3, #20]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b08a      	sub	sp, #40	; 0x28
 800788e:	af02      	add	r7, sp, #8
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	603b      	str	r3, [r7, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d17c      	bne.n	80079a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_UART_Transmit+0x2c>
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e075      	b.n	80079a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_UART_Transmit+0x3e>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e06e      	b.n	80079a6 <HAL_UART_Transmit+0x11c>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2221      	movs	r2, #33	; 0x21
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078de:	f7fb fcb3 	bl	8003248 <HAL_GetTick>
 80078e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	88fa      	ldrh	r2, [r7, #6]
 80078ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f8:	d108      	bne.n	800790c <HAL_UART_Transmit+0x82>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e003      	b.n	8007914 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800791c:	e02a      	b.n	8007974 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fb1f 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e036      	b.n	80079a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800794c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3302      	adds	r3, #2
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	e007      	b.n	8007966 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	3301      	adds	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800796a:	b29b      	uxth	r3, r3
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1cf      	bne.n	800791e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	2140      	movs	r1, #64	; 0x40
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 faef 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	4613      	mov	r3, r2
 80079ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d11d      	bne.n	8007a04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_UART_Receive_IT+0x26>
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e016      	b.n	8007a06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Receive_IT+0x38>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e00f      	b.n	8007a06 <HAL_UART_Receive_IT+0x58>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	461a      	mov	r2, r3
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fb24 	bl	8008048 <UART_Start_Receive_IT>
 8007a00:	4603      	mov	r3, r0
 8007a02:	e000      	b.n	8007a06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a04:	2302      	movs	r3, #2
  }
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b0ba      	sub	sp, #232	; 0xe8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10f      	bne.n	8007a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_UART_IRQHandler+0x66>
 8007a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fc07 	bl	8008282 <UART_Receive_IT>
      return;
 8007a74:	e256      	b.n	8007f24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80de 	beq.w	8007c3c <HAL_UART_IRQHandler+0x22c>
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d106      	bne.n	8007a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80d1 	beq.w	8007c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <HAL_UART_IRQHandler+0xae>
 8007aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_UART_IRQHandler+0xd2>
 8007aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f043 0202 	orr.w	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <HAL_UART_IRQHandler+0xf6>
 8007aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0204 	orr.w	r2, r3, #4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d011      	beq.n	8007b36 <HAL_UART_IRQHandler+0x126>
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 81ed 	beq.w	8007f1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_UART_IRQHandler+0x14e>
 8007b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb92 	bl	8008282 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2301      	moveq	r3, #1
 8007b6e:	2300      	movne	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <HAL_UART_IRQHandler+0x17a>
 8007b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d04f      	beq.n	8007c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa9a 	bl	80080c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d141      	bne.n	8007c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3314      	adds	r3, #20
 8007bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1d9      	bne.n	8007b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d013      	beq.n	8007c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	4a7d      	ldr	r2, [pc, #500]	; (8007dec <HAL_UART_IRQHandler+0x3dc>)
 8007bf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fb fcd3 	bl	80035aa <HAL_DMA_Abort_IT>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e00e      	b.n	8007c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f990 	bl	8007f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	e00a      	b.n	8007c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f98c 	bl	8007f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c28:	e006      	b.n	8007c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f988 	bl	8007f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c36:	e170      	b.n	8007f1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	bf00      	nop
    return;
 8007c3a:	e16e      	b.n	8007f1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f040 814a 	bne.w	8007eda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8143 	beq.w	8007eda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 813c 	beq.w	8007eda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	f040 80b4 	bne.w	8007df0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8140 	beq.w	8007f1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	f080 8139 	bcs.w	8007f1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbe:	f000 8088 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1d9      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3314      	adds	r3, #20
 8007d14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d20:	f023 0301 	bic.w	r3, r3, #1
 8007d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3314      	adds	r3, #20
 8007d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e1      	bne.n	8007d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3314      	adds	r3, #20
 8007d50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3314      	adds	r3, #20
 8007d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e3      	bne.n	8007d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da2:	f023 0310 	bic.w	r3, r3, #16
 8007da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007db4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007db6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e3      	bne.n	8007d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fb fb7c 	bl	80034ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f8b6 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007de8:	e099      	b.n	8007f1e <HAL_UART_IRQHandler+0x50e>
 8007dea:	bf00      	nop
 8007dec:	0800818b 	.word	0x0800818b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 808b 	beq.w	8007f22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8086 	beq.w	8007f22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e3      	bne.n	8007e16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3314      	adds	r3, #20
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	f023 0301 	bic.w	r3, r3, #1
 8007e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e72:	633a      	str	r2, [r7, #48]	; 0x30
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e3      	bne.n	8007e4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	330c      	adds	r3, #12
 8007eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007eb8:	61fa      	str	r2, [r7, #28]
 8007eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e3      	bne.n	8007e94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f83e 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ed8:	e023      	b.n	8007f22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x4ea>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f95d 	bl	80081b2 <UART_Transmit_IT>
    return;
 8007ef8:	e014      	b.n	8007f24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00e      	beq.n	8007f24 <HAL_UART_IRQHandler+0x514>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f99d 	bl	8008252 <UART_EndTransmit_IT>
    return;
 8007f18:	e004      	b.n	8007f24 <HAL_UART_IRQHandler+0x514>
    return;
 8007f1a:	bf00      	nop
 8007f1c:	e002      	b.n	8007f24 <HAL_UART_IRQHandler+0x514>
      return;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <HAL_UART_IRQHandler+0x514>
      return;
 8007f22:	bf00      	nop
  }
}
 8007f24:	37e8      	adds	r7, #232	; 0xe8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop

08007f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b090      	sub	sp, #64	; 0x40
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7c:	e050      	b.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d04c      	beq.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8c:	f7fb f95c 	bl	8003248 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d241      	bcs.n	8008020 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3314      	adds	r3, #20
 8007fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff0:	623a      	str	r2, [r7, #32]
 8007ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e00f      	b.n	8008040 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	429a      	cmp	r2, r3
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	429a      	cmp	r2, r3
 800803c:	d09f      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3740      	adds	r7, #64	; 0x40
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2222      	movs	r2, #34	; 0x22
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008094:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0201 	orr.w	r2, r2, #1
 80080a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0220 	orr.w	r2, r2, #32
 80080b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b095      	sub	sp, #84	; 0x54
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	330c      	adds	r3, #12
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ec:	643a      	str	r2, [r7, #64]	; 0x40
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e5      	bne.n	80080cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3314      	adds	r3, #20
 8008106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	64bb      	str	r3, [r7, #72]	; 0x48
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e5      	bne.n	8008100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	d119      	bne.n	8008170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	330c      	adds	r3, #12
 8008142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	60bb      	str	r3, [r7, #8]
   return(result);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	647b      	str	r3, [r7, #68]	; 0x44
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800815c:	61ba      	str	r2, [r7, #24]
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	613b      	str	r3, [r7, #16]
   return(result);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800817e:	bf00      	nop
 8008180:	3754      	adds	r7, #84	; 0x54
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fecb 	bl	8007f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b21      	cmp	r3, #33	; 0x21
 80081c4:	d13e      	bne.n	8008244 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d114      	bne.n	80081fa <UART_Transmit_IT+0x48>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d110      	bne.n	80081fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	1c9a      	adds	r2, r3, #2
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	621a      	str	r2, [r3, #32]
 80081f8:	e008      	b.n	800820c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	1c59      	adds	r1, r3, #1
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6211      	str	r1, [r2, #32]
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29b      	uxth	r3, r3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	4619      	mov	r1, r3
 800821a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10f      	bne.n	8008240 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800822e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe5a 	bl	8007f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b08c      	sub	sp, #48	; 0x30
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	f040 80ab 	bne.w	80083ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a0:	d117      	bne.n	80082d2 <UART_Receive_IT+0x50>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d113      	bne.n	80082d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	1c9a      	adds	r2, r3, #2
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	629a      	str	r2, [r3, #40]	; 0x28
 80082d0:	e026      	b.n	8008320 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e4:	d007      	beq.n	80082f6 <UART_Receive_IT+0x74>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <UART_Receive_IT+0x82>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	e008      	b.n	8008316 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29b      	uxth	r3, r3
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4619      	mov	r1, r3
 800832e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008330:	2b00      	cmp	r3, #0
 8008332:	d15a      	bne.n	80083ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0220 	bic.w	r2, r2, #32
 8008342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0201 	bic.w	r2, r2, #1
 8008362:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	d135      	bne.n	80083e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	613b      	str	r3, [r7, #16]
   return(result);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f023 0310 	bic.w	r3, r3, #16
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839a:	623a      	str	r2, [r7, #32]
 800839c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	69f9      	ldr	r1, [r7, #28]
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d10a      	bne.n	80083d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff fdbb 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 80083de:	e002      	b.n	80083e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7fa fc29 	bl	8002c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e002      	b.n	80083f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
  }
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3730      	adds	r7, #48	; 0x30
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083fc:	b0c0      	sub	sp, #256	; 0x100
 80083fe:	af00      	add	r7, sp, #0
 8008400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	ea40 0301 	orr.w	r3, r0, r1
 8008420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008450:	f021 010c 	bic.w	r1, r1, #12
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800845e:	430b      	orrs	r3, r1
 8008460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008472:	6999      	ldr	r1, [r3, #24]
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	ea40 0301 	orr.w	r3, r0, r1
 800847e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b8f      	ldr	r3, [pc, #572]	; (80086c4 <UART_SetConfig+0x2cc>)
 8008488:	429a      	cmp	r2, r3
 800848a:	d005      	beq.n	8008498 <UART_SetConfig+0xa0>
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b8d      	ldr	r3, [pc, #564]	; (80086c8 <UART_SetConfig+0x2d0>)
 8008494:	429a      	cmp	r2, r3
 8008496:	d104      	bne.n	80084a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008498:	f7fd f818 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 800849c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084a0:	e003      	b.n	80084aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084a2:	f7fc ffff 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 80084a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b4:	f040 810c 	bne.w	80086d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	1891      	adds	r1, r2, r2
 80084d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084d2:	415b      	adcs	r3, r3
 80084d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084da:	4621      	mov	r1, r4
 80084dc:	eb12 0801 	adds.w	r8, r2, r1
 80084e0:	4629      	mov	r1, r5
 80084e2:	eb43 0901 	adc.w	r9, r3, r1
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084fa:	4690      	mov	r8, r2
 80084fc:	4699      	mov	r9, r3
 80084fe:	4623      	mov	r3, r4
 8008500:	eb18 0303 	adds.w	r3, r8, r3
 8008504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008508:	462b      	mov	r3, r5
 800850a:	eb49 0303 	adc.w	r3, r9, r3
 800850e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800851e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008526:	460b      	mov	r3, r1
 8008528:	18db      	adds	r3, r3, r3
 800852a:	653b      	str	r3, [r7, #80]	; 0x50
 800852c:	4613      	mov	r3, r2
 800852e:	eb42 0303 	adc.w	r3, r2, r3
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800853c:	f7f8 fa9e 	bl	8000a7c <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4b61      	ldr	r3, [pc, #388]	; (80086cc <UART_SetConfig+0x2d4>)
 8008546:	fba3 2302 	umull	r2, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	011c      	lsls	r4, r3, #4
 800854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800855c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	64b9      	str	r1, [r7, #72]	; 0x48
 8008568:	415b      	adcs	r3, r3
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008570:	4641      	mov	r1, r8
 8008572:	eb12 0a01 	adds.w	sl, r2, r1
 8008576:	4649      	mov	r1, r9
 8008578:	eb43 0b01 	adc.w	fp, r3, r1
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800858c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008590:	4692      	mov	sl, r2
 8008592:	469b      	mov	fp, r3
 8008594:	4643      	mov	r3, r8
 8008596:	eb1a 0303 	adds.w	r3, sl, r3
 800859a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800859e:	464b      	mov	r3, r9
 80085a0:	eb4b 0303 	adc.w	r3, fp, r3
 80085a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085bc:	460b      	mov	r3, r1
 80085be:	18db      	adds	r3, r3, r3
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
 80085c2:	4613      	mov	r3, r2
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085d2:	f7f8 fa53 	bl	8000a7c <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	4b3b      	ldr	r3, [pc, #236]	; (80086cc <UART_SetConfig+0x2d4>)
 80085de:	fba3 2301 	umull	r2, r3, r3, r1
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	2264      	movs	r2, #100	; 0x64
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	1acb      	subs	r3, r1, r3
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085f2:	4b36      	ldr	r3, [pc, #216]	; (80086cc <UART_SetConfig+0x2d4>)
 80085f4:	fba3 2302 	umull	r2, r3, r3, r2
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008600:	441c      	add	r4, r3
 8008602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008606:	2200      	movs	r2, #0
 8008608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800860c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	1891      	adds	r1, r2, r2
 800861a:	63b9      	str	r1, [r7, #56]	; 0x38
 800861c:	415b      	adcs	r3, r3
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008624:	4641      	mov	r1, r8
 8008626:	1851      	adds	r1, r2, r1
 8008628:	6339      	str	r1, [r7, #48]	; 0x30
 800862a:	4649      	mov	r1, r9
 800862c:	414b      	adcs	r3, r1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800863c:	4659      	mov	r1, fp
 800863e:	00cb      	lsls	r3, r1, #3
 8008640:	4651      	mov	r1, sl
 8008642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008646:	4651      	mov	r1, sl
 8008648:	00ca      	lsls	r2, r1, #3
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	4603      	mov	r3, r0
 8008650:	4642      	mov	r2, r8
 8008652:	189b      	adds	r3, r3, r2
 8008654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008658:	464b      	mov	r3, r9
 800865a:	460a      	mov	r2, r1
 800865c:	eb42 0303 	adc.w	r3, r2, r3
 8008660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008678:	460b      	mov	r3, r1
 800867a:	18db      	adds	r3, r3, r3
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
 800867e:	4613      	mov	r3, r2
 8008680:	eb42 0303 	adc.w	r3, r2, r3
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800868a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800868e:	f7f8 f9f5 	bl	8000a7c <__aeabi_uldivmod>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <UART_SetConfig+0x2d4>)
 8008698:	fba3 1302 	umull	r1, r3, r3, r2
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	2164      	movs	r1, #100	; 0x64
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	3332      	adds	r3, #50	; 0x32
 80086aa:	4a08      	ldr	r2, [pc, #32]	; (80086cc <UART_SetConfig+0x2d4>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f003 0207 	and.w	r2, r3, #7
 80086b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4422      	add	r2, r4
 80086be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086c0:	e106      	b.n	80088d0 <UART_SetConfig+0x4d8>
 80086c2:	bf00      	nop
 80086c4:	40011000 	.word	0x40011000
 80086c8:	40011400 	.word	0x40011400
 80086cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086e2:	4642      	mov	r2, r8
 80086e4:	464b      	mov	r3, r9
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	6239      	str	r1, [r7, #32]
 80086ea:	415b      	adcs	r3, r3
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
 80086ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086f2:	4641      	mov	r1, r8
 80086f4:	1854      	adds	r4, r2, r1
 80086f6:	4649      	mov	r1, r9
 80086f8:	eb43 0501 	adc.w	r5, r3, r1
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	00eb      	lsls	r3, r5, #3
 8008706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800870a:	00e2      	lsls	r2, r4, #3
 800870c:	4614      	mov	r4, r2
 800870e:	461d      	mov	r5, r3
 8008710:	4643      	mov	r3, r8
 8008712:	18e3      	adds	r3, r4, r3
 8008714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008718:	464b      	mov	r3, r9
 800871a:	eb45 0303 	adc.w	r3, r5, r3
 800871e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800872e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800873e:	4629      	mov	r1, r5
 8008740:	008b      	lsls	r3, r1, #2
 8008742:	4621      	mov	r1, r4
 8008744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008748:	4621      	mov	r1, r4
 800874a:	008a      	lsls	r2, r1, #2
 800874c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008750:	f7f8 f994 	bl	8000a7c <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4b60      	ldr	r3, [pc, #384]	; (80088dc <UART_SetConfig+0x4e4>)
 800875a:	fba3 2302 	umull	r2, r3, r3, r2
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	011c      	lsls	r4, r3, #4
 8008762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008766:	2200      	movs	r2, #0
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800876c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	1891      	adds	r1, r2, r2
 800877a:	61b9      	str	r1, [r7, #24]
 800877c:	415b      	adcs	r3, r3
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008784:	4641      	mov	r1, r8
 8008786:	1851      	adds	r1, r2, r1
 8008788:	6139      	str	r1, [r7, #16]
 800878a:	4649      	mov	r1, r9
 800878c:	414b      	adcs	r3, r1
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800879c:	4659      	mov	r1, fp
 800879e:	00cb      	lsls	r3, r1, #3
 80087a0:	4651      	mov	r1, sl
 80087a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087a6:	4651      	mov	r1, sl
 80087a8:	00ca      	lsls	r2, r1, #3
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	4642      	mov	r2, r8
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b8:	464b      	mov	r3, r9
 80087ba:	460a      	mov	r2, r1
 80087bc:	eb42 0303 	adc.w	r3, r2, r3
 80087c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087dc:	4649      	mov	r1, r9
 80087de:	008b      	lsls	r3, r1, #2
 80087e0:	4641      	mov	r1, r8
 80087e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087e6:	4641      	mov	r1, r8
 80087e8:	008a      	lsls	r2, r1, #2
 80087ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087ee:	f7f8 f945 	bl	8000a7c <__aeabi_uldivmod>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	4b38      	ldr	r3, [pc, #224]	; (80088dc <UART_SetConfig+0x4e4>)
 80087fa:	fba3 2301 	umull	r2, r3, r3, r1
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	2264      	movs	r2, #100	; 0x64
 8008802:	fb02 f303 	mul.w	r3, r2, r3
 8008806:	1acb      	subs	r3, r1, r3
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	3332      	adds	r3, #50	; 0x32
 800880c:	4a33      	ldr	r2, [pc, #204]	; (80088dc <UART_SetConfig+0x4e4>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008818:	441c      	add	r4, r3
 800881a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800881e:	2200      	movs	r2, #0
 8008820:	673b      	str	r3, [r7, #112]	; 0x70
 8008822:	677a      	str	r2, [r7, #116]	; 0x74
 8008824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	1891      	adds	r1, r2, r2
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	415b      	adcs	r3, r3
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008838:	4641      	mov	r1, r8
 800883a:	1851      	adds	r1, r2, r1
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	4649      	mov	r1, r9
 8008840:	414b      	adcs	r3, r1
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	f04f 0200 	mov.w	r2, #0
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008850:	4659      	mov	r1, fp
 8008852:	00cb      	lsls	r3, r1, #3
 8008854:	4651      	mov	r1, sl
 8008856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800885a:	4651      	mov	r1, sl
 800885c:	00ca      	lsls	r2, r1, #3
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	4603      	mov	r3, r0
 8008864:	4642      	mov	r2, r8
 8008866:	189b      	adds	r3, r3, r2
 8008868:	66bb      	str	r3, [r7, #104]	; 0x68
 800886a:	464b      	mov	r3, r9
 800886c:	460a      	mov	r2, r1
 800886e:	eb42 0303 	adc.w	r3, r2, r3
 8008872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	663b      	str	r3, [r7, #96]	; 0x60
 800887e:	667a      	str	r2, [r7, #100]	; 0x64
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800888c:	4649      	mov	r1, r9
 800888e:	008b      	lsls	r3, r1, #2
 8008890:	4641      	mov	r1, r8
 8008892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008896:	4641      	mov	r1, r8
 8008898:	008a      	lsls	r2, r1, #2
 800889a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800889e:	f7f8 f8ed 	bl	8000a7c <__aeabi_uldivmod>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <UART_SetConfig+0x4e4>)
 80088a8:	fba3 1302 	umull	r1, r3, r3, r2
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	2164      	movs	r1, #100	; 0x64
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	3332      	adds	r3, #50	; 0x32
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <UART_SetConfig+0x4e4>)
 80088bc:	fba2 2303 	umull	r2, r3, r2, r3
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	f003 020f 	and.w	r2, r3, #15
 80088c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4422      	add	r2, r4
 80088ce:	609a      	str	r2, [r3, #8]
}
 80088d0:	bf00      	nop
 80088d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088d6:	46bd      	mov	sp, r7
 80088d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088dc:	51eb851f 	.word	0x51eb851f

080088e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088e0:	b084      	sub	sp, #16
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	f107 001c 	add.w	r0, r7, #28
 80088ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d122      	bne.n	800893e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800890c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	2b01      	cmp	r3, #1
 8008924:	d105      	bne.n	8008932 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 faa2 	bl	8008e7c <USB_CoreReset>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	e01a      	b.n	8008974 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa96 	bl	8008e7c <USB_CoreReset>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
 8008966:	e005      	b.n	8008974 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	2b01      	cmp	r3, #1
 8008978:	d10b      	bne.n	8008992 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f043 0206 	orr.w	r2, r3, #6
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f043 0220 	orr.w	r2, r3, #32
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800899e:	b004      	add	sp, #16
 80089a0:	4770      	bx	lr

080089a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d115      	bne.n	8008a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089f2:	2001      	movs	r0, #1
 80089f4:	f7fa fc34 	bl	8003260 <HAL_Delay>
      ms++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa2e 	bl	8008e60 <USB_GetMode>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d01e      	beq.n	8008a48 <USB_SetCurrentMode+0x84>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b31      	cmp	r3, #49	; 0x31
 8008a0e:	d9f0      	bls.n	80089f2 <USB_SetCurrentMode+0x2e>
 8008a10:	e01a      	b.n	8008a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d115      	bne.n	8008a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a24:	2001      	movs	r0, #1
 8008a26:	f7fa fc1b 	bl	8003260 <HAL_Delay>
      ms++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fa15 	bl	8008e60 <USB_GetMode>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <USB_SetCurrentMode+0x84>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b31      	cmp	r3, #49	; 0x31
 8008a40:	d9f0      	bls.n	8008a24 <USB_SetCurrentMode+0x60>
 8008a42:	e001      	b.n	8008a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e005      	b.n	8008a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b32      	cmp	r3, #50	; 0x32
 8008a4c:	d101      	bne.n	8008a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b086      	sub	sp, #24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	e009      	b.n	8008a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	3340      	adds	r3, #64	; 0x40
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	2200      	movs	r2, #0
 8008a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	613b      	str	r3, [r7, #16]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b0e      	cmp	r3, #14
 8008a94:	d9f2      	bls.n	8008a7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11c      	bne.n	8008ad6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aaa:	f043 0302 	orr.w	r3, r3, #2
 8008aae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ad4:	e00b      	b.n	8008aee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af4:	461a      	mov	r2, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b00:	4619      	mov	r1, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b08:	461a      	mov	r2, r3
 8008b0a:	680b      	ldr	r3, [r1, #0]
 8008b0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d10c      	bne.n	8008b2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d104      	bne.n	8008b24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f965 	bl	8008dec <USB_SetDevSpeed>
 8008b22:	e008      	b.n	8008b36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b24:	2101      	movs	r1, #1
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f960 	bl	8008dec <USB_SetDevSpeed>
 8008b2c:	e003      	b.n	8008b36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b2e:	2103      	movs	r1, #3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f95b 	bl	8008dec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b36:	2110      	movs	r1, #16
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f8f3 	bl	8008d24 <USB_FlushTxFifo>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f91f 	bl	8008d8c <USB_FlushRxFifo>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b76:	461a      	mov	r2, r3
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	613b      	str	r3, [r7, #16]
 8008b80:	e043      	b.n	8008c0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b98:	d118      	bne.n	8008bcc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	461a      	mov	r2, r3
 8008bae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e013      	b.n	8008bde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	e008      	b.n	8008bde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bea:	461a      	mov	r2, r3
 8008bec:	2300      	movs	r3, #0
 8008bee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	3301      	adds	r3, #1
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d3b7      	bcc.n	8008b82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	e043      	b.n	8008ca0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c2e:	d118      	bne.n	8008c62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	461a      	mov	r2, r3
 8008c44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e013      	b.n	8008c74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	e008      	b.n	8008c74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c80:	461a      	mov	r2, r3
 8008c82:	2300      	movs	r3, #0
 8008c84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d3b7      	bcc.n	8008c18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d105      	bne.n	8008cdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f043 0210 	orr.w	r2, r3, #16
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699a      	ldr	r2, [r3, #24]
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <USB_DevInit+0x2c4>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f043 0208 	orr.w	r2, r3, #8
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d107      	bne.n	8008d10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d08:	f043 0304 	orr.w	r3, r3, #4
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d1c:	b004      	add	sp, #16
 8008d1e:	4770      	bx	lr
 8008d20:	803c3800 	.word	0x803c3800

08008d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <USB_FlushTxFifo+0x64>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d901      	bls.n	8008d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e01b      	b.n	8008d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	daf2      	bge.n	8008d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	019b      	lsls	r3, r3, #6
 8008d54:	f043 0220 	orr.w	r2, r3, #32
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4a08      	ldr	r2, [pc, #32]	; (8008d88 <USB_FlushTxFifo+0x64>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e006      	b.n	8008d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d0f0      	beq.n	8008d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	00030d40 	.word	0x00030d40

08008d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <USB_FlushRxFifo+0x5c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e018      	b.n	8008ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	daf2      	bge.n	8008d98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2210      	movs	r2, #16
 8008dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a08      	ldr	r2, [pc, #32]	; (8008de8 <USB_FlushRxFifo+0x5c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e006      	b.n	8008ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d0f0      	beq.n	8008dbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	00030d40 	.word	0x00030d40

08008dec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	68f9      	ldr	r1, [r7, #12]
 8008e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e38:	f023 0303 	bic.w	r3, r3, #3
 8008e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e4c:	f043 0302 	orr.w	r3, r3, #2
 8008e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <USB_CoreReset+0x64>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d901      	bls.n	8008e9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e01b      	b.n	8008ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	daf2      	bge.n	8008e88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f043 0201 	orr.w	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <USB_CoreReset+0x64>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e006      	b.n	8008ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d0f0      	beq.n	8008eb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	00030d40 	.word	0x00030d40

08008ee4 <atoi>:
 8008ee4:	220a      	movs	r2, #10
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f000 b882 	b.w	8008ff0 <strtol>

08008eec <_strtol_l.constprop.0>:
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef2:	d001      	beq.n	8008ef8 <_strtol_l.constprop.0+0xc>
 8008ef4:	2b24      	cmp	r3, #36	; 0x24
 8008ef6:	d906      	bls.n	8008f06 <_strtol_l.constprop.0+0x1a>
 8008ef8:	f000 fb20 	bl	800953c <__errno>
 8008efc:	2316      	movs	r3, #22
 8008efe:	6003      	str	r3, [r0, #0]
 8008f00:	2000      	movs	r0, #0
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008fec <_strtol_l.constprop.0+0x100>
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	462e      	mov	r6, r5
 8008f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f16:	f017 0708 	ands.w	r7, r7, #8
 8008f1a:	d1f7      	bne.n	8008f0c <_strtol_l.constprop.0+0x20>
 8008f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f1e:	d132      	bne.n	8008f86 <_strtol_l.constprop.0+0x9a>
 8008f20:	782c      	ldrb	r4, [r5, #0]
 8008f22:	2701      	movs	r7, #1
 8008f24:	1cb5      	adds	r5, r6, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d05b      	beq.n	8008fe2 <_strtol_l.constprop.0+0xf6>
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d109      	bne.n	8008f42 <_strtol_l.constprop.0+0x56>
 8008f2e:	2c30      	cmp	r4, #48	; 0x30
 8008f30:	d107      	bne.n	8008f42 <_strtol_l.constprop.0+0x56>
 8008f32:	782c      	ldrb	r4, [r5, #0]
 8008f34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f38:	2c58      	cmp	r4, #88	; 0x58
 8008f3a:	d14d      	bne.n	8008fd8 <_strtol_l.constprop.0+0xec>
 8008f3c:	786c      	ldrb	r4, [r5, #1]
 8008f3e:	2310      	movs	r3, #16
 8008f40:	3502      	adds	r5, #2
 8008f42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f46:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f4a:	f04f 0e00 	mov.w	lr, #0
 8008f4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f52:	4676      	mov	r6, lr
 8008f54:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008f5c:	f1bc 0f09 	cmp.w	ip, #9
 8008f60:	d816      	bhi.n	8008f90 <_strtol_l.constprop.0+0xa4>
 8008f62:	4664      	mov	r4, ip
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	dd24      	ble.n	8008fb2 <_strtol_l.constprop.0+0xc6>
 8008f68:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f6c:	d008      	beq.n	8008f80 <_strtol_l.constprop.0+0x94>
 8008f6e:	45b1      	cmp	r9, r6
 8008f70:	d31c      	bcc.n	8008fac <_strtol_l.constprop.0+0xc0>
 8008f72:	d101      	bne.n	8008f78 <_strtol_l.constprop.0+0x8c>
 8008f74:	45a2      	cmp	sl, r4
 8008f76:	db19      	blt.n	8008fac <_strtol_l.constprop.0+0xc0>
 8008f78:	fb06 4603 	mla	r6, r6, r3, r4
 8008f7c:	f04f 0e01 	mov.w	lr, #1
 8008f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f84:	e7e8      	b.n	8008f58 <_strtol_l.constprop.0+0x6c>
 8008f86:	2c2b      	cmp	r4, #43	; 0x2b
 8008f88:	bf04      	itt	eq
 8008f8a:	782c      	ldrbeq	r4, [r5, #0]
 8008f8c:	1cb5      	addeq	r5, r6, #2
 8008f8e:	e7ca      	b.n	8008f26 <_strtol_l.constprop.0+0x3a>
 8008f90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f94:	f1bc 0f19 	cmp.w	ip, #25
 8008f98:	d801      	bhi.n	8008f9e <_strtol_l.constprop.0+0xb2>
 8008f9a:	3c37      	subs	r4, #55	; 0x37
 8008f9c:	e7e2      	b.n	8008f64 <_strtol_l.constprop.0+0x78>
 8008f9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008fa2:	f1bc 0f19 	cmp.w	ip, #25
 8008fa6:	d804      	bhi.n	8008fb2 <_strtol_l.constprop.0+0xc6>
 8008fa8:	3c57      	subs	r4, #87	; 0x57
 8008faa:	e7db      	b.n	8008f64 <_strtol_l.constprop.0+0x78>
 8008fac:	f04f 3eff 	mov.w	lr, #4294967295
 8008fb0:	e7e6      	b.n	8008f80 <_strtol_l.constprop.0+0x94>
 8008fb2:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fb6:	d105      	bne.n	8008fc4 <_strtol_l.constprop.0+0xd8>
 8008fb8:	2322      	movs	r3, #34	; 0x22
 8008fba:	6003      	str	r3, [r0, #0]
 8008fbc:	4646      	mov	r6, r8
 8008fbe:	b942      	cbnz	r2, 8008fd2 <_strtol_l.constprop.0+0xe6>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	e79e      	b.n	8008f02 <_strtol_l.constprop.0+0x16>
 8008fc4:	b107      	cbz	r7, 8008fc8 <_strtol_l.constprop.0+0xdc>
 8008fc6:	4276      	negs	r6, r6
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	d0f9      	beq.n	8008fc0 <_strtol_l.constprop.0+0xd4>
 8008fcc:	f1be 0f00 	cmp.w	lr, #0
 8008fd0:	d000      	beq.n	8008fd4 <_strtol_l.constprop.0+0xe8>
 8008fd2:	1e69      	subs	r1, r5, #1
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	e7f3      	b.n	8008fc0 <_strtol_l.constprop.0+0xd4>
 8008fd8:	2430      	movs	r4, #48	; 0x30
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1b1      	bne.n	8008f42 <_strtol_l.constprop.0+0x56>
 8008fde:	2308      	movs	r3, #8
 8008fe0:	e7af      	b.n	8008f42 <_strtol_l.constprop.0+0x56>
 8008fe2:	2c30      	cmp	r4, #48	; 0x30
 8008fe4:	d0a5      	beq.n	8008f32 <_strtol_l.constprop.0+0x46>
 8008fe6:	230a      	movs	r3, #10
 8008fe8:	e7ab      	b.n	8008f42 <_strtol_l.constprop.0+0x56>
 8008fea:	bf00      	nop
 8008fec:	0800a531 	.word	0x0800a531

08008ff0 <strtol>:
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	4802      	ldr	r0, [pc, #8]	; (8009000 <strtol+0x10>)
 8008ff8:	6800      	ldr	r0, [r0, #0]
 8008ffa:	f7ff bf77 	b.w	8008eec <_strtol_l.constprop.0>
 8008ffe:	bf00      	nop
 8009000:	20000070 	.word	0x20000070

08009004 <std>:
 8009004:	2300      	movs	r3, #0
 8009006:	b510      	push	{r4, lr}
 8009008:	4604      	mov	r4, r0
 800900a:	e9c0 3300 	strd	r3, r3, [r0]
 800900e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009012:	6083      	str	r3, [r0, #8]
 8009014:	8181      	strh	r1, [r0, #12]
 8009016:	6643      	str	r3, [r0, #100]	; 0x64
 8009018:	81c2      	strh	r2, [r0, #14]
 800901a:	6183      	str	r3, [r0, #24]
 800901c:	4619      	mov	r1, r3
 800901e:	2208      	movs	r2, #8
 8009020:	305c      	adds	r0, #92	; 0x5c
 8009022:	f000 fa17 	bl	8009454 <memset>
 8009026:	4b0d      	ldr	r3, [pc, #52]	; (800905c <std+0x58>)
 8009028:	6263      	str	r3, [r4, #36]	; 0x24
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <std+0x5c>)
 800902c:	62a3      	str	r3, [r4, #40]	; 0x28
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <std+0x60>)
 8009030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009032:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <std+0x64>)
 8009034:	6323      	str	r3, [r4, #48]	; 0x30
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <std+0x68>)
 8009038:	6224      	str	r4, [r4, #32]
 800903a:	429c      	cmp	r4, r3
 800903c:	d006      	beq.n	800904c <std+0x48>
 800903e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009042:	4294      	cmp	r4, r2
 8009044:	d002      	beq.n	800904c <std+0x48>
 8009046:	33d0      	adds	r3, #208	; 0xd0
 8009048:	429c      	cmp	r4, r3
 800904a:	d105      	bne.n	8009058 <std+0x54>
 800904c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009054:	f000 ba9c 	b.w	8009590 <__retarget_lock_init_recursive>
 8009058:	bd10      	pop	{r4, pc}
 800905a:	bf00      	nop
 800905c:	080092a5 	.word	0x080092a5
 8009060:	080092c7 	.word	0x080092c7
 8009064:	080092ff 	.word	0x080092ff
 8009068:	08009323 	.word	0x08009323
 800906c:	20000b0c 	.word	0x20000b0c

08009070 <stdio_exit_handler>:
 8009070:	4a02      	ldr	r2, [pc, #8]	; (800907c <stdio_exit_handler+0xc>)
 8009072:	4903      	ldr	r1, [pc, #12]	; (8009080 <stdio_exit_handler+0x10>)
 8009074:	4803      	ldr	r0, [pc, #12]	; (8009084 <stdio_exit_handler+0x14>)
 8009076:	f000 b869 	b.w	800914c <_fwalk_sglue>
 800907a:	bf00      	nop
 800907c:	20000018 	.word	0x20000018
 8009080:	0800a0ed 	.word	0x0800a0ed
 8009084:	20000024 	.word	0x20000024

08009088 <cleanup_stdio>:
 8009088:	6841      	ldr	r1, [r0, #4]
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <cleanup_stdio+0x34>)
 800908c:	4299      	cmp	r1, r3
 800908e:	b510      	push	{r4, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	d001      	beq.n	8009098 <cleanup_stdio+0x10>
 8009094:	f001 f82a 	bl	800a0ec <_fflush_r>
 8009098:	68a1      	ldr	r1, [r4, #8]
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <cleanup_stdio+0x38>)
 800909c:	4299      	cmp	r1, r3
 800909e:	d002      	beq.n	80090a6 <cleanup_stdio+0x1e>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 f823 	bl	800a0ec <_fflush_r>
 80090a6:	68e1      	ldr	r1, [r4, #12]
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <cleanup_stdio+0x3c>)
 80090aa:	4299      	cmp	r1, r3
 80090ac:	d004      	beq.n	80090b8 <cleanup_stdio+0x30>
 80090ae:	4620      	mov	r0, r4
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f001 b81a 	b.w	800a0ec <_fflush_r>
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	20000b0c 	.word	0x20000b0c
 80090c0:	20000b74 	.word	0x20000b74
 80090c4:	20000bdc 	.word	0x20000bdc

080090c8 <global_stdio_init.part.0>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <global_stdio_init.part.0+0x30>)
 80090cc:	4c0b      	ldr	r4, [pc, #44]	; (80090fc <global_stdio_init.part.0+0x34>)
 80090ce:	4a0c      	ldr	r2, [pc, #48]	; (8009100 <global_stdio_init.part.0+0x38>)
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	4620      	mov	r0, r4
 80090d4:	2200      	movs	r2, #0
 80090d6:	2104      	movs	r1, #4
 80090d8:	f7ff ff94 	bl	8009004 <std>
 80090dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090e0:	2201      	movs	r2, #1
 80090e2:	2109      	movs	r1, #9
 80090e4:	f7ff ff8e 	bl	8009004 <std>
 80090e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090ec:	2202      	movs	r2, #2
 80090ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f2:	2112      	movs	r1, #18
 80090f4:	f7ff bf86 	b.w	8009004 <std>
 80090f8:	20000c44 	.word	0x20000c44
 80090fc:	20000b0c 	.word	0x20000b0c
 8009100:	08009071 	.word	0x08009071

08009104 <__sfp_lock_acquire>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__sfp_lock_acquire+0x8>)
 8009106:	f000 ba44 	b.w	8009592 <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	20000c4d 	.word	0x20000c4d

08009110 <__sfp_lock_release>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__sfp_lock_release+0x8>)
 8009112:	f000 ba3f 	b.w	8009594 <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	20000c4d 	.word	0x20000c4d

0800911c <__sinit>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	f7ff fff0 	bl	8009104 <__sfp_lock_acquire>
 8009124:	6a23      	ldr	r3, [r4, #32]
 8009126:	b11b      	cbz	r3, 8009130 <__sinit+0x14>
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	f7ff bff0 	b.w	8009110 <__sfp_lock_release>
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <__sinit+0x28>)
 8009132:	6223      	str	r3, [r4, #32]
 8009134:	4b04      	ldr	r3, [pc, #16]	; (8009148 <__sinit+0x2c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f5      	bne.n	8009128 <__sinit+0xc>
 800913c:	f7ff ffc4 	bl	80090c8 <global_stdio_init.part.0>
 8009140:	e7f2      	b.n	8009128 <__sinit+0xc>
 8009142:	bf00      	nop
 8009144:	08009089 	.word	0x08009089
 8009148:	20000c44 	.word	0x20000c44

0800914c <_fwalk_sglue>:
 800914c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009150:	4607      	mov	r7, r0
 8009152:	4688      	mov	r8, r1
 8009154:	4614      	mov	r4, r2
 8009156:	2600      	movs	r6, #0
 8009158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800915c:	f1b9 0901 	subs.w	r9, r9, #1
 8009160:	d505      	bpl.n	800916e <_fwalk_sglue+0x22>
 8009162:	6824      	ldr	r4, [r4, #0]
 8009164:	2c00      	cmp	r4, #0
 8009166:	d1f7      	bne.n	8009158 <_fwalk_sglue+0xc>
 8009168:	4630      	mov	r0, r6
 800916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d907      	bls.n	8009184 <_fwalk_sglue+0x38>
 8009174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009178:	3301      	adds	r3, #1
 800917a:	d003      	beq.n	8009184 <_fwalk_sglue+0x38>
 800917c:	4629      	mov	r1, r5
 800917e:	4638      	mov	r0, r7
 8009180:	47c0      	blx	r8
 8009182:	4306      	orrs	r6, r0
 8009184:	3568      	adds	r5, #104	; 0x68
 8009186:	e7e9      	b.n	800915c <_fwalk_sglue+0x10>

08009188 <iprintf>:
 8009188:	b40f      	push	{r0, r1, r2, r3}
 800918a:	b507      	push	{r0, r1, r2, lr}
 800918c:	4906      	ldr	r1, [pc, #24]	; (80091a8 <iprintf+0x20>)
 800918e:	ab04      	add	r3, sp, #16
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6881      	ldr	r1, [r0, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f000 fc77 	bl	8009a8c <_vfiprintf_r>
 800919e:	b003      	add	sp, #12
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b004      	add	sp, #16
 80091a6:	4770      	bx	lr
 80091a8:	20000070 	.word	0x20000070

080091ac <_puts_r>:
 80091ac:	6a03      	ldr	r3, [r0, #32]
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	6884      	ldr	r4, [r0, #8]
 80091b2:	4605      	mov	r5, r0
 80091b4:	460e      	mov	r6, r1
 80091b6:	b90b      	cbnz	r3, 80091bc <_puts_r+0x10>
 80091b8:	f7ff ffb0 	bl	800911c <__sinit>
 80091bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d405      	bmi.n	80091ce <_puts_r+0x22>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	0598      	lsls	r0, r3, #22
 80091c6:	d402      	bmi.n	80091ce <_puts_r+0x22>
 80091c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ca:	f000 f9e2 	bl	8009592 <__retarget_lock_acquire_recursive>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	0719      	lsls	r1, r3, #28
 80091d2:	d513      	bpl.n	80091fc <_puts_r+0x50>
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	b18b      	cbz	r3, 80091fc <_puts_r+0x50>
 80091d8:	3e01      	subs	r6, #1
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091e0:	3b01      	subs	r3, #1
 80091e2:	60a3      	str	r3, [r4, #8]
 80091e4:	b9e9      	cbnz	r1, 8009222 <_puts_r+0x76>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da2e      	bge.n	8009248 <_puts_r+0x9c>
 80091ea:	4622      	mov	r2, r4
 80091ec:	210a      	movs	r1, #10
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 f89b 	bl	800932a <__swbuf_r>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d007      	beq.n	8009208 <_puts_r+0x5c>
 80091f8:	250a      	movs	r5, #10
 80091fa:	e007      	b.n	800920c <_puts_r+0x60>
 80091fc:	4621      	mov	r1, r4
 80091fe:	4628      	mov	r0, r5
 8009200:	f000 f8d0 	bl	80093a4 <__swsetup_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	d0e7      	beq.n	80091d8 <_puts_r+0x2c>
 8009208:	f04f 35ff 	mov.w	r5, #4294967295
 800920c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920e:	07da      	lsls	r2, r3, #31
 8009210:	d405      	bmi.n	800921e <_puts_r+0x72>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	059b      	lsls	r3, r3, #22
 8009216:	d402      	bmi.n	800921e <_puts_r+0x72>
 8009218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921a:	f000 f9bb 	bl	8009594 <__retarget_lock_release_recursive>
 800921e:	4628      	mov	r0, r5
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	2b00      	cmp	r3, #0
 8009224:	da04      	bge.n	8009230 <_puts_r+0x84>
 8009226:	69a2      	ldr	r2, [r4, #24]
 8009228:	429a      	cmp	r2, r3
 800922a:	dc06      	bgt.n	800923a <_puts_r+0x8e>
 800922c:	290a      	cmp	r1, #10
 800922e:	d004      	beq.n	800923a <_puts_r+0x8e>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	7019      	strb	r1, [r3, #0]
 8009238:	e7cf      	b.n	80091da <_puts_r+0x2e>
 800923a:	4622      	mov	r2, r4
 800923c:	4628      	mov	r0, r5
 800923e:	f000 f874 	bl	800932a <__swbuf_r>
 8009242:	3001      	adds	r0, #1
 8009244:	d1c9      	bne.n	80091da <_puts_r+0x2e>
 8009246:	e7df      	b.n	8009208 <_puts_r+0x5c>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	250a      	movs	r5, #10
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	701d      	strb	r5, [r3, #0]
 8009252:	e7db      	b.n	800920c <_puts_r+0x60>

08009254 <puts>:
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <puts+0xc>)
 8009256:	4601      	mov	r1, r0
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f7ff bfa7 	b.w	80091ac <_puts_r>
 800925e:	bf00      	nop
 8009260:	20000070 	.word	0x20000070

08009264 <siprintf>:
 8009264:	b40e      	push	{r1, r2, r3}
 8009266:	b500      	push	{lr}
 8009268:	b09c      	sub	sp, #112	; 0x70
 800926a:	ab1d      	add	r3, sp, #116	; 0x74
 800926c:	9002      	str	r0, [sp, #8]
 800926e:	9006      	str	r0, [sp, #24]
 8009270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009274:	4809      	ldr	r0, [pc, #36]	; (800929c <siprintf+0x38>)
 8009276:	9107      	str	r1, [sp, #28]
 8009278:	9104      	str	r1, [sp, #16]
 800927a:	4909      	ldr	r1, [pc, #36]	; (80092a0 <siprintf+0x3c>)
 800927c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009280:	9105      	str	r1, [sp, #20]
 8009282:	6800      	ldr	r0, [r0, #0]
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	a902      	add	r1, sp, #8
 8009288:	f000 fad8 	bl	800983c <_svfiprintf_r>
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	b01c      	add	sp, #112	; 0x70
 8009294:	f85d eb04 	ldr.w	lr, [sp], #4
 8009298:	b003      	add	sp, #12
 800929a:	4770      	bx	lr
 800929c:	20000070 	.word	0x20000070
 80092a0:	ffff0208 	.word	0xffff0208

080092a4 <__sread>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	460c      	mov	r4, r1
 80092a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ac:	f000 f922 	bl	80094f4 <_read_r>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	bfab      	itete	ge
 80092b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092b6:	89a3      	ldrhlt	r3, [r4, #12]
 80092b8:	181b      	addge	r3, r3, r0
 80092ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092be:	bfac      	ite	ge
 80092c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092c2:	81a3      	strhlt	r3, [r4, #12]
 80092c4:	bd10      	pop	{r4, pc}

080092c6 <__swrite>:
 80092c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ca:	461f      	mov	r7, r3
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	05db      	lsls	r3, r3, #23
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	4616      	mov	r6, r2
 80092d6:	d505      	bpl.n	80092e4 <__swrite+0x1e>
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	2302      	movs	r3, #2
 80092de:	2200      	movs	r2, #0
 80092e0:	f000 f8f6 	bl	80094d0 <_lseek_r>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	4632      	mov	r2, r6
 80092f2:	463b      	mov	r3, r7
 80092f4:	4628      	mov	r0, r5
 80092f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092fa:	f000 b90d 	b.w	8009518 <_write_r>

080092fe <__sseek>:
 80092fe:	b510      	push	{r4, lr}
 8009300:	460c      	mov	r4, r1
 8009302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009306:	f000 f8e3 	bl	80094d0 <_lseek_r>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	bf15      	itete	ne
 8009310:	6560      	strne	r0, [r4, #84]	; 0x54
 8009312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800931a:	81a3      	strheq	r3, [r4, #12]
 800931c:	bf18      	it	ne
 800931e:	81a3      	strhne	r3, [r4, #12]
 8009320:	bd10      	pop	{r4, pc}

08009322 <__sclose>:
 8009322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009326:	f000 b8c3 	b.w	80094b0 <_close_r>

0800932a <__swbuf_r>:
 800932a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932c:	460e      	mov	r6, r1
 800932e:	4614      	mov	r4, r2
 8009330:	4605      	mov	r5, r0
 8009332:	b118      	cbz	r0, 800933c <__swbuf_r+0x12>
 8009334:	6a03      	ldr	r3, [r0, #32]
 8009336:	b90b      	cbnz	r3, 800933c <__swbuf_r+0x12>
 8009338:	f7ff fef0 	bl	800911c <__sinit>
 800933c:	69a3      	ldr	r3, [r4, #24]
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	071a      	lsls	r2, r3, #28
 8009344:	d525      	bpl.n	8009392 <__swbuf_r+0x68>
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	b31b      	cbz	r3, 8009392 <__swbuf_r+0x68>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	6922      	ldr	r2, [r4, #16]
 800934e:	1a98      	subs	r0, r3, r2
 8009350:	6963      	ldr	r3, [r4, #20]
 8009352:	b2f6      	uxtb	r6, r6
 8009354:	4283      	cmp	r3, r0
 8009356:	4637      	mov	r7, r6
 8009358:	dc04      	bgt.n	8009364 <__swbuf_r+0x3a>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 fec5 	bl	800a0ec <_fflush_r>
 8009362:	b9e0      	cbnz	r0, 800939e <__swbuf_r+0x74>
 8009364:	68a3      	ldr	r3, [r4, #8]
 8009366:	3b01      	subs	r3, #1
 8009368:	60a3      	str	r3, [r4, #8]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	701e      	strb	r6, [r3, #0]
 8009372:	6962      	ldr	r2, [r4, #20]
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	429a      	cmp	r2, r3
 8009378:	d004      	beq.n	8009384 <__swbuf_r+0x5a>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	07db      	lsls	r3, r3, #31
 800937e:	d506      	bpl.n	800938e <__swbuf_r+0x64>
 8009380:	2e0a      	cmp	r6, #10
 8009382:	d104      	bne.n	800938e <__swbuf_r+0x64>
 8009384:	4621      	mov	r1, r4
 8009386:	4628      	mov	r0, r5
 8009388:	f000 feb0 	bl	800a0ec <_fflush_r>
 800938c:	b938      	cbnz	r0, 800939e <__swbuf_r+0x74>
 800938e:	4638      	mov	r0, r7
 8009390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f805 	bl	80093a4 <__swsetup_r>
 800939a:	2800      	cmp	r0, #0
 800939c:	d0d5      	beq.n	800934a <__swbuf_r+0x20>
 800939e:	f04f 37ff 	mov.w	r7, #4294967295
 80093a2:	e7f4      	b.n	800938e <__swbuf_r+0x64>

080093a4 <__swsetup_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4b2a      	ldr	r3, [pc, #168]	; (8009450 <__swsetup_r+0xac>)
 80093a8:	4605      	mov	r5, r0
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	460c      	mov	r4, r1
 80093ae:	b118      	cbz	r0, 80093b8 <__swsetup_r+0x14>
 80093b0:	6a03      	ldr	r3, [r0, #32]
 80093b2:	b90b      	cbnz	r3, 80093b8 <__swsetup_r+0x14>
 80093b4:	f7ff feb2 	bl	800911c <__sinit>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093be:	0718      	lsls	r0, r3, #28
 80093c0:	d422      	bmi.n	8009408 <__swsetup_r+0x64>
 80093c2:	06d9      	lsls	r1, r3, #27
 80093c4:	d407      	bmi.n	80093d6 <__swsetup_r+0x32>
 80093c6:	2309      	movs	r3, #9
 80093c8:	602b      	str	r3, [r5, #0]
 80093ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e034      	b.n	8009440 <__swsetup_r+0x9c>
 80093d6:	0758      	lsls	r0, r3, #29
 80093d8:	d512      	bpl.n	8009400 <__swsetup_r+0x5c>
 80093da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093dc:	b141      	cbz	r1, 80093f0 <__swsetup_r+0x4c>
 80093de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e2:	4299      	cmp	r1, r3
 80093e4:	d002      	beq.n	80093ec <__swsetup_r+0x48>
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f8d6 	bl	8009598 <_free_r>
 80093ec:	2300      	movs	r3, #0
 80093ee:	6363      	str	r3, [r4, #52]	; 0x34
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	2300      	movs	r3, #0
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	f043 0308 	orr.w	r3, r3, #8
 8009406:	81a3      	strh	r3, [r4, #12]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b94b      	cbnz	r3, 8009420 <__swsetup_r+0x7c>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009416:	d003      	beq.n	8009420 <__swsetup_r+0x7c>
 8009418:	4621      	mov	r1, r4
 800941a:	4628      	mov	r0, r5
 800941c:	f000 feb4 	bl	800a188 <__smakebuf_r>
 8009420:	89a0      	ldrh	r0, [r4, #12]
 8009422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009426:	f010 0301 	ands.w	r3, r0, #1
 800942a:	d00a      	beq.n	8009442 <__swsetup_r+0x9e>
 800942c:	2300      	movs	r3, #0
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6963      	ldr	r3, [r4, #20]
 8009432:	425b      	negs	r3, r3
 8009434:	61a3      	str	r3, [r4, #24]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	b943      	cbnz	r3, 800944c <__swsetup_r+0xa8>
 800943a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800943e:	d1c4      	bne.n	80093ca <__swsetup_r+0x26>
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	0781      	lsls	r1, r0, #30
 8009444:	bf58      	it	pl
 8009446:	6963      	ldrpl	r3, [r4, #20]
 8009448:	60a3      	str	r3, [r4, #8]
 800944a:	e7f4      	b.n	8009436 <__swsetup_r+0x92>
 800944c:	2000      	movs	r0, #0
 800944e:	e7f7      	b.n	8009440 <__swsetup_r+0x9c>
 8009450:	20000070 	.word	0x20000070

08009454 <memset>:
 8009454:	4402      	add	r2, r0
 8009456:	4603      	mov	r3, r0
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	f803 1b01 	strb.w	r1, [r3], #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <strncmp>:
 8009464:	b510      	push	{r4, lr}
 8009466:	b16a      	cbz	r2, 8009484 <strncmp+0x20>
 8009468:	3901      	subs	r1, #1
 800946a:	1884      	adds	r4, r0, r2
 800946c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009470:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009474:	429a      	cmp	r2, r3
 8009476:	d103      	bne.n	8009480 <strncmp+0x1c>
 8009478:	42a0      	cmp	r0, r4
 800947a:	d001      	beq.n	8009480 <strncmp+0x1c>
 800947c:	2a00      	cmp	r2, #0
 800947e:	d1f5      	bne.n	800946c <strncmp+0x8>
 8009480:	1ad0      	subs	r0, r2, r3
 8009482:	bd10      	pop	{r4, pc}
 8009484:	4610      	mov	r0, r2
 8009486:	e7fc      	b.n	8009482 <strncmp+0x1e>

08009488 <strncpy>:
 8009488:	b510      	push	{r4, lr}
 800948a:	3901      	subs	r1, #1
 800948c:	4603      	mov	r3, r0
 800948e:	b132      	cbz	r2, 800949e <strncpy+0x16>
 8009490:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009494:	f803 4b01 	strb.w	r4, [r3], #1
 8009498:	3a01      	subs	r2, #1
 800949a:	2c00      	cmp	r4, #0
 800949c:	d1f7      	bne.n	800948e <strncpy+0x6>
 800949e:	441a      	add	r2, r3
 80094a0:	2100      	movs	r1, #0
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d100      	bne.n	80094a8 <strncpy+0x20>
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	f803 1b01 	strb.w	r1, [r3], #1
 80094ac:	e7f9      	b.n	80094a2 <strncpy+0x1a>
	...

080094b0 <_close_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	; (80094cc <_close_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f9 fb3f 	bl	8002b3e <_close>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_close_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_close_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000c48 	.word	0x20000c48

080094d0 <_lseek_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d07      	ldr	r5, [pc, #28]	; (80094f0 <_lseek_r+0x20>)
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7f9 fb54 	bl	8002b8c <_lseek>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_lseek_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_lseek_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000c48 	.word	0x20000c48

080094f4 <_read_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d07      	ldr	r5, [pc, #28]	; (8009514 <_read_r+0x20>)
 80094f8:	4604      	mov	r4, r0
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f7f9 fae2 	bl	8002acc <_read>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_read_r+0x1e>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_read_r+0x1e>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	20000c48 	.word	0x20000c48

08009518 <_write_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	; (8009538 <_write_r+0x20>)
 800951c:	4604      	mov	r4, r0
 800951e:	4608      	mov	r0, r1
 8009520:	4611      	mov	r1, r2
 8009522:	2200      	movs	r2, #0
 8009524:	602a      	str	r2, [r5, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	f7f9 faed 	bl	8002b06 <_write>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_write_r+0x1e>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_write_r+0x1e>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	20000c48 	.word	0x20000c48

0800953c <__errno>:
 800953c:	4b01      	ldr	r3, [pc, #4]	; (8009544 <__errno+0x8>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000070 	.word	0x20000070

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4d0d      	ldr	r5, [pc, #52]	; (8009580 <__libc_init_array+0x38>)
 800954c:	4c0d      	ldr	r4, [pc, #52]	; (8009584 <__libc_init_array+0x3c>)
 800954e:	1b64      	subs	r4, r4, r5
 8009550:	10a4      	asrs	r4, r4, #2
 8009552:	2600      	movs	r6, #0
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	4d0b      	ldr	r5, [pc, #44]	; (8009588 <__libc_init_array+0x40>)
 800955a:	4c0c      	ldr	r4, [pc, #48]	; (800958c <__libc_init_array+0x44>)
 800955c:	f000 fee2 	bl	800a324 <_init>
 8009560:	1b64      	subs	r4, r4, r5
 8009562:	10a4      	asrs	r4, r4, #2
 8009564:	2600      	movs	r6, #0
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	0800a66c 	.word	0x0800a66c
 8009584:	0800a66c 	.word	0x0800a66c
 8009588:	0800a66c 	.word	0x0800a66c
 800958c:	0800a670 	.word	0x0800a670

08009590 <__retarget_lock_init_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_acquire_recursive>:
 8009592:	4770      	bx	lr

08009594 <__retarget_lock_release_recursive>:
 8009594:	4770      	bx	lr
	...

08009598 <_free_r>:
 8009598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800959a:	2900      	cmp	r1, #0
 800959c:	d044      	beq.n	8009628 <_free_r+0x90>
 800959e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a2:	9001      	str	r0, [sp, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f1a1 0404 	sub.w	r4, r1, #4
 80095aa:	bfb8      	it	lt
 80095ac:	18e4      	addlt	r4, r4, r3
 80095ae:	f000 f8df 	bl	8009770 <__malloc_lock>
 80095b2:	4a1e      	ldr	r2, [pc, #120]	; (800962c <_free_r+0x94>)
 80095b4:	9801      	ldr	r0, [sp, #4]
 80095b6:	6813      	ldr	r3, [r2, #0]
 80095b8:	b933      	cbnz	r3, 80095c8 <_free_r+0x30>
 80095ba:	6063      	str	r3, [r4, #4]
 80095bc:	6014      	str	r4, [r2, #0]
 80095be:	b003      	add	sp, #12
 80095c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c4:	f000 b8da 	b.w	800977c <__malloc_unlock>
 80095c8:	42a3      	cmp	r3, r4
 80095ca:	d908      	bls.n	80095de <_free_r+0x46>
 80095cc:	6825      	ldr	r5, [r4, #0]
 80095ce:	1961      	adds	r1, r4, r5
 80095d0:	428b      	cmp	r3, r1
 80095d2:	bf01      	itttt	eq
 80095d4:	6819      	ldreq	r1, [r3, #0]
 80095d6:	685b      	ldreq	r3, [r3, #4]
 80095d8:	1949      	addeq	r1, r1, r5
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	e7ed      	b.n	80095ba <_free_r+0x22>
 80095de:	461a      	mov	r2, r3
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	b10b      	cbz	r3, 80095e8 <_free_r+0x50>
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	d9fa      	bls.n	80095de <_free_r+0x46>
 80095e8:	6811      	ldr	r1, [r2, #0]
 80095ea:	1855      	adds	r5, r2, r1
 80095ec:	42a5      	cmp	r5, r4
 80095ee:	d10b      	bne.n	8009608 <_free_r+0x70>
 80095f0:	6824      	ldr	r4, [r4, #0]
 80095f2:	4421      	add	r1, r4
 80095f4:	1854      	adds	r4, r2, r1
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	6011      	str	r1, [r2, #0]
 80095fa:	d1e0      	bne.n	80095be <_free_r+0x26>
 80095fc:	681c      	ldr	r4, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	6053      	str	r3, [r2, #4]
 8009602:	440c      	add	r4, r1
 8009604:	6014      	str	r4, [r2, #0]
 8009606:	e7da      	b.n	80095be <_free_r+0x26>
 8009608:	d902      	bls.n	8009610 <_free_r+0x78>
 800960a:	230c      	movs	r3, #12
 800960c:	6003      	str	r3, [r0, #0]
 800960e:	e7d6      	b.n	80095be <_free_r+0x26>
 8009610:	6825      	ldr	r5, [r4, #0]
 8009612:	1961      	adds	r1, r4, r5
 8009614:	428b      	cmp	r3, r1
 8009616:	bf04      	itt	eq
 8009618:	6819      	ldreq	r1, [r3, #0]
 800961a:	685b      	ldreq	r3, [r3, #4]
 800961c:	6063      	str	r3, [r4, #4]
 800961e:	bf04      	itt	eq
 8009620:	1949      	addeq	r1, r1, r5
 8009622:	6021      	streq	r1, [r4, #0]
 8009624:	6054      	str	r4, [r2, #4]
 8009626:	e7ca      	b.n	80095be <_free_r+0x26>
 8009628:	b003      	add	sp, #12
 800962a:	bd30      	pop	{r4, r5, pc}
 800962c:	20000c50 	.word	0x20000c50

08009630 <sbrk_aligned>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	4e0e      	ldr	r6, [pc, #56]	; (800966c <sbrk_aligned+0x3c>)
 8009634:	460c      	mov	r4, r1
 8009636:	6831      	ldr	r1, [r6, #0]
 8009638:	4605      	mov	r5, r0
 800963a:	b911      	cbnz	r1, 8009642 <sbrk_aligned+0x12>
 800963c:	f000 fe1c 	bl	800a278 <_sbrk_r>
 8009640:	6030      	str	r0, [r6, #0]
 8009642:	4621      	mov	r1, r4
 8009644:	4628      	mov	r0, r5
 8009646:	f000 fe17 	bl	800a278 <_sbrk_r>
 800964a:	1c43      	adds	r3, r0, #1
 800964c:	d00a      	beq.n	8009664 <sbrk_aligned+0x34>
 800964e:	1cc4      	adds	r4, r0, #3
 8009650:	f024 0403 	bic.w	r4, r4, #3
 8009654:	42a0      	cmp	r0, r4
 8009656:	d007      	beq.n	8009668 <sbrk_aligned+0x38>
 8009658:	1a21      	subs	r1, r4, r0
 800965a:	4628      	mov	r0, r5
 800965c:	f000 fe0c 	bl	800a278 <_sbrk_r>
 8009660:	3001      	adds	r0, #1
 8009662:	d101      	bne.n	8009668 <sbrk_aligned+0x38>
 8009664:	f04f 34ff 	mov.w	r4, #4294967295
 8009668:	4620      	mov	r0, r4
 800966a:	bd70      	pop	{r4, r5, r6, pc}
 800966c:	20000c54 	.word	0x20000c54

08009670 <_malloc_r>:
 8009670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009674:	1ccd      	adds	r5, r1, #3
 8009676:	f025 0503 	bic.w	r5, r5, #3
 800967a:	3508      	adds	r5, #8
 800967c:	2d0c      	cmp	r5, #12
 800967e:	bf38      	it	cc
 8009680:	250c      	movcc	r5, #12
 8009682:	2d00      	cmp	r5, #0
 8009684:	4607      	mov	r7, r0
 8009686:	db01      	blt.n	800968c <_malloc_r+0x1c>
 8009688:	42a9      	cmp	r1, r5
 800968a:	d905      	bls.n	8009698 <_malloc_r+0x28>
 800968c:	230c      	movs	r3, #12
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	2600      	movs	r6, #0
 8009692:	4630      	mov	r0, r6
 8009694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800976c <_malloc_r+0xfc>
 800969c:	f000 f868 	bl	8009770 <__malloc_lock>
 80096a0:	f8d8 3000 	ldr.w	r3, [r8]
 80096a4:	461c      	mov	r4, r3
 80096a6:	bb5c      	cbnz	r4, 8009700 <_malloc_r+0x90>
 80096a8:	4629      	mov	r1, r5
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7ff ffc0 	bl	8009630 <sbrk_aligned>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	4604      	mov	r4, r0
 80096b4:	d155      	bne.n	8009762 <_malloc_r+0xf2>
 80096b6:	f8d8 4000 	ldr.w	r4, [r8]
 80096ba:	4626      	mov	r6, r4
 80096bc:	2e00      	cmp	r6, #0
 80096be:	d145      	bne.n	800974c <_malloc_r+0xdc>
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	d048      	beq.n	8009756 <_malloc_r+0xe6>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	4631      	mov	r1, r6
 80096c8:	4638      	mov	r0, r7
 80096ca:	eb04 0903 	add.w	r9, r4, r3
 80096ce:	f000 fdd3 	bl	800a278 <_sbrk_r>
 80096d2:	4581      	cmp	r9, r0
 80096d4:	d13f      	bne.n	8009756 <_malloc_r+0xe6>
 80096d6:	6821      	ldr	r1, [r4, #0]
 80096d8:	1a6d      	subs	r5, r5, r1
 80096da:	4629      	mov	r1, r5
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff ffa7 	bl	8009630 <sbrk_aligned>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d037      	beq.n	8009756 <_malloc_r+0xe6>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	442b      	add	r3, r5
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	f8d8 3000 	ldr.w	r3, [r8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d038      	beq.n	8009766 <_malloc_r+0xf6>
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	42a2      	cmp	r2, r4
 80096f8:	d12b      	bne.n	8009752 <_malloc_r+0xe2>
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
 80096fe:	e00f      	b.n	8009720 <_malloc_r+0xb0>
 8009700:	6822      	ldr	r2, [r4, #0]
 8009702:	1b52      	subs	r2, r2, r5
 8009704:	d41f      	bmi.n	8009746 <_malloc_r+0xd6>
 8009706:	2a0b      	cmp	r2, #11
 8009708:	d917      	bls.n	800973a <_malloc_r+0xca>
 800970a:	1961      	adds	r1, r4, r5
 800970c:	42a3      	cmp	r3, r4
 800970e:	6025      	str	r5, [r4, #0]
 8009710:	bf18      	it	ne
 8009712:	6059      	strne	r1, [r3, #4]
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	bf08      	it	eq
 8009718:	f8c8 1000 	streq.w	r1, [r8]
 800971c:	5162      	str	r2, [r4, r5]
 800971e:	604b      	str	r3, [r1, #4]
 8009720:	4638      	mov	r0, r7
 8009722:	f104 060b 	add.w	r6, r4, #11
 8009726:	f000 f829 	bl	800977c <__malloc_unlock>
 800972a:	f026 0607 	bic.w	r6, r6, #7
 800972e:	1d23      	adds	r3, r4, #4
 8009730:	1af2      	subs	r2, r6, r3
 8009732:	d0ae      	beq.n	8009692 <_malloc_r+0x22>
 8009734:	1b9b      	subs	r3, r3, r6
 8009736:	50a3      	str	r3, [r4, r2]
 8009738:	e7ab      	b.n	8009692 <_malloc_r+0x22>
 800973a:	42a3      	cmp	r3, r4
 800973c:	6862      	ldr	r2, [r4, #4]
 800973e:	d1dd      	bne.n	80096fc <_malloc_r+0x8c>
 8009740:	f8c8 2000 	str.w	r2, [r8]
 8009744:	e7ec      	b.n	8009720 <_malloc_r+0xb0>
 8009746:	4623      	mov	r3, r4
 8009748:	6864      	ldr	r4, [r4, #4]
 800974a:	e7ac      	b.n	80096a6 <_malloc_r+0x36>
 800974c:	4634      	mov	r4, r6
 800974e:	6876      	ldr	r6, [r6, #4]
 8009750:	e7b4      	b.n	80096bc <_malloc_r+0x4c>
 8009752:	4613      	mov	r3, r2
 8009754:	e7cc      	b.n	80096f0 <_malloc_r+0x80>
 8009756:	230c      	movs	r3, #12
 8009758:	603b      	str	r3, [r7, #0]
 800975a:	4638      	mov	r0, r7
 800975c:	f000 f80e 	bl	800977c <__malloc_unlock>
 8009760:	e797      	b.n	8009692 <_malloc_r+0x22>
 8009762:	6025      	str	r5, [r4, #0]
 8009764:	e7dc      	b.n	8009720 <_malloc_r+0xb0>
 8009766:	605b      	str	r3, [r3, #4]
 8009768:	deff      	udf	#255	; 0xff
 800976a:	bf00      	nop
 800976c:	20000c50 	.word	0x20000c50

08009770 <__malloc_lock>:
 8009770:	4801      	ldr	r0, [pc, #4]	; (8009778 <__malloc_lock+0x8>)
 8009772:	f7ff bf0e 	b.w	8009592 <__retarget_lock_acquire_recursive>
 8009776:	bf00      	nop
 8009778:	20000c4c 	.word	0x20000c4c

0800977c <__malloc_unlock>:
 800977c:	4801      	ldr	r0, [pc, #4]	; (8009784 <__malloc_unlock+0x8>)
 800977e:	f7ff bf09 	b.w	8009594 <__retarget_lock_release_recursive>
 8009782:	bf00      	nop
 8009784:	20000c4c 	.word	0x20000c4c

08009788 <__ssputs_r>:
 8009788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	688e      	ldr	r6, [r1, #8]
 800978e:	461f      	mov	r7, r3
 8009790:	42be      	cmp	r6, r7
 8009792:	680b      	ldr	r3, [r1, #0]
 8009794:	4682      	mov	sl, r0
 8009796:	460c      	mov	r4, r1
 8009798:	4690      	mov	r8, r2
 800979a:	d82c      	bhi.n	80097f6 <__ssputs_r+0x6e>
 800979c:	898a      	ldrh	r2, [r1, #12]
 800979e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097a2:	d026      	beq.n	80097f2 <__ssputs_r+0x6a>
 80097a4:	6965      	ldr	r5, [r4, #20]
 80097a6:	6909      	ldr	r1, [r1, #16]
 80097a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097ac:	eba3 0901 	sub.w	r9, r3, r1
 80097b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097b4:	1c7b      	adds	r3, r7, #1
 80097b6:	444b      	add	r3, r9
 80097b8:	106d      	asrs	r5, r5, #1
 80097ba:	429d      	cmp	r5, r3
 80097bc:	bf38      	it	cc
 80097be:	461d      	movcc	r5, r3
 80097c0:	0553      	lsls	r3, r2, #21
 80097c2:	d527      	bpl.n	8009814 <__ssputs_r+0x8c>
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7ff ff53 	bl	8009670 <_malloc_r>
 80097ca:	4606      	mov	r6, r0
 80097cc:	b360      	cbz	r0, 8009828 <__ssputs_r+0xa0>
 80097ce:	6921      	ldr	r1, [r4, #16]
 80097d0:	464a      	mov	r2, r9
 80097d2:	f000 fd61 	bl	800a298 <memcpy>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	6126      	str	r6, [r4, #16]
 80097e4:	6165      	str	r5, [r4, #20]
 80097e6:	444e      	add	r6, r9
 80097e8:	eba5 0509 	sub.w	r5, r5, r9
 80097ec:	6026      	str	r6, [r4, #0]
 80097ee:	60a5      	str	r5, [r4, #8]
 80097f0:	463e      	mov	r6, r7
 80097f2:	42be      	cmp	r6, r7
 80097f4:	d900      	bls.n	80097f8 <__ssputs_r+0x70>
 80097f6:	463e      	mov	r6, r7
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	4632      	mov	r2, r6
 80097fc:	4641      	mov	r1, r8
 80097fe:	f000 fcff 	bl	800a200 <memmove>
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	1b9b      	subs	r3, r3, r6
 8009806:	60a3      	str	r3, [r4, #8]
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	4433      	add	r3, r6
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	2000      	movs	r0, #0
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	462a      	mov	r2, r5
 8009816:	f000 fd4d 	bl	800a2b4 <_realloc_r>
 800981a:	4606      	mov	r6, r0
 800981c:	2800      	cmp	r0, #0
 800981e:	d1e0      	bne.n	80097e2 <__ssputs_r+0x5a>
 8009820:	6921      	ldr	r1, [r4, #16]
 8009822:	4650      	mov	r0, sl
 8009824:	f7ff feb8 	bl	8009598 <_free_r>
 8009828:	230c      	movs	r3, #12
 800982a:	f8ca 3000 	str.w	r3, [sl]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	f04f 30ff 	mov.w	r0, #4294967295
 800983a:	e7e9      	b.n	8009810 <__ssputs_r+0x88>

0800983c <_svfiprintf_r>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4698      	mov	r8, r3
 8009842:	898b      	ldrh	r3, [r1, #12]
 8009844:	061b      	lsls	r3, r3, #24
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	4607      	mov	r7, r0
 800984a:	460d      	mov	r5, r1
 800984c:	4614      	mov	r4, r2
 800984e:	d50e      	bpl.n	800986e <_svfiprintf_r+0x32>
 8009850:	690b      	ldr	r3, [r1, #16]
 8009852:	b963      	cbnz	r3, 800986e <_svfiprintf_r+0x32>
 8009854:	2140      	movs	r1, #64	; 0x40
 8009856:	f7ff ff0b 	bl	8009670 <_malloc_r>
 800985a:	6028      	str	r0, [r5, #0]
 800985c:	6128      	str	r0, [r5, #16]
 800985e:	b920      	cbnz	r0, 800986a <_svfiprintf_r+0x2e>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	e0d0      	b.n	8009a0c <_svfiprintf_r+0x1d0>
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	616b      	str	r3, [r5, #20]
 800986e:	2300      	movs	r3, #0
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	2320      	movs	r3, #32
 8009874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009878:	f8cd 800c 	str.w	r8, [sp, #12]
 800987c:	2330      	movs	r3, #48	; 0x30
 800987e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a24 <_svfiprintf_r+0x1e8>
 8009882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009886:	f04f 0901 	mov.w	r9, #1
 800988a:	4623      	mov	r3, r4
 800988c:	469a      	mov	sl, r3
 800988e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009892:	b10a      	cbz	r2, 8009898 <_svfiprintf_r+0x5c>
 8009894:	2a25      	cmp	r2, #37	; 0x25
 8009896:	d1f9      	bne.n	800988c <_svfiprintf_r+0x50>
 8009898:	ebba 0b04 	subs.w	fp, sl, r4
 800989c:	d00b      	beq.n	80098b6 <_svfiprintf_r+0x7a>
 800989e:	465b      	mov	r3, fp
 80098a0:	4622      	mov	r2, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ff6f 	bl	8009788 <__ssputs_r>
 80098aa:	3001      	adds	r0, #1
 80098ac:	f000 80a9 	beq.w	8009a02 <_svfiprintf_r+0x1c6>
 80098b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b2:	445a      	add	r2, fp
 80098b4:	9209      	str	r2, [sp, #36]	; 0x24
 80098b6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80a1 	beq.w	8009a02 <_svfiprintf_r+0x1c6>
 80098c0:	2300      	movs	r3, #0
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295
 80098c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ca:	f10a 0a01 	add.w	sl, sl, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d6:	931a      	str	r3, [sp, #104]	; 0x68
 80098d8:	4654      	mov	r4, sl
 80098da:	2205      	movs	r2, #5
 80098dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e0:	4850      	ldr	r0, [pc, #320]	; (8009a24 <_svfiprintf_r+0x1e8>)
 80098e2:	f7f6 fc85 	bl	80001f0 <memchr>
 80098e6:	9a04      	ldr	r2, [sp, #16]
 80098e8:	b9d8      	cbnz	r0, 8009922 <_svfiprintf_r+0xe6>
 80098ea:	06d0      	lsls	r0, r2, #27
 80098ec:	bf44      	itt	mi
 80098ee:	2320      	movmi	r3, #32
 80098f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f4:	0711      	lsls	r1, r2, #28
 80098f6:	bf44      	itt	mi
 80098f8:	232b      	movmi	r3, #43	; 0x2b
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009902:	2b2a      	cmp	r3, #42	; 0x2a
 8009904:	d015      	beq.n	8009932 <_svfiprintf_r+0xf6>
 8009906:	9a07      	ldr	r2, [sp, #28]
 8009908:	4654      	mov	r4, sl
 800990a:	2000      	movs	r0, #0
 800990c:	f04f 0c0a 	mov.w	ip, #10
 8009910:	4621      	mov	r1, r4
 8009912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009916:	3b30      	subs	r3, #48	; 0x30
 8009918:	2b09      	cmp	r3, #9
 800991a:	d94d      	bls.n	80099b8 <_svfiprintf_r+0x17c>
 800991c:	b1b0      	cbz	r0, 800994c <_svfiprintf_r+0x110>
 800991e:	9207      	str	r2, [sp, #28]
 8009920:	e014      	b.n	800994c <_svfiprintf_r+0x110>
 8009922:	eba0 0308 	sub.w	r3, r0, r8
 8009926:	fa09 f303 	lsl.w	r3, r9, r3
 800992a:	4313      	orrs	r3, r2
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	46a2      	mov	sl, r4
 8009930:	e7d2      	b.n	80098d8 <_svfiprintf_r+0x9c>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	1d19      	adds	r1, r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	9103      	str	r1, [sp, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfbb      	ittet	lt
 800993e:	425b      	neglt	r3, r3
 8009940:	f042 0202 	orrlt.w	r2, r2, #2
 8009944:	9307      	strge	r3, [sp, #28]
 8009946:	9307      	strlt	r3, [sp, #28]
 8009948:	bfb8      	it	lt
 800994a:	9204      	strlt	r2, [sp, #16]
 800994c:	7823      	ldrb	r3, [r4, #0]
 800994e:	2b2e      	cmp	r3, #46	; 0x2e
 8009950:	d10c      	bne.n	800996c <_svfiprintf_r+0x130>
 8009952:	7863      	ldrb	r3, [r4, #1]
 8009954:	2b2a      	cmp	r3, #42	; 0x2a
 8009956:	d134      	bne.n	80099c2 <_svfiprintf_r+0x186>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	9203      	str	r2, [sp, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfb8      	it	lt
 8009964:	f04f 33ff 	movlt.w	r3, #4294967295
 8009968:	3402      	adds	r4, #2
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a34 <_svfiprintf_r+0x1f8>
 8009970:	7821      	ldrb	r1, [r4, #0]
 8009972:	2203      	movs	r2, #3
 8009974:	4650      	mov	r0, sl
 8009976:	f7f6 fc3b 	bl	80001f0 <memchr>
 800997a:	b138      	cbz	r0, 800998c <_svfiprintf_r+0x150>
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	eba0 000a 	sub.w	r0, r0, sl
 8009982:	2240      	movs	r2, #64	; 0x40
 8009984:	4082      	lsls	r2, r0
 8009986:	4313      	orrs	r3, r2
 8009988:	3401      	adds	r4, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009990:	4825      	ldr	r0, [pc, #148]	; (8009a28 <_svfiprintf_r+0x1ec>)
 8009992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009996:	2206      	movs	r2, #6
 8009998:	f7f6 fc2a 	bl	80001f0 <memchr>
 800999c:	2800      	cmp	r0, #0
 800999e:	d038      	beq.n	8009a12 <_svfiprintf_r+0x1d6>
 80099a0:	4b22      	ldr	r3, [pc, #136]	; (8009a2c <_svfiprintf_r+0x1f0>)
 80099a2:	bb1b      	cbnz	r3, 80099ec <_svfiprintf_r+0x1b0>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	3307      	adds	r3, #7
 80099a8:	f023 0307 	bic.w	r3, r3, #7
 80099ac:	3308      	adds	r3, #8
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	4433      	add	r3, r6
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	e768      	b.n	800988a <_svfiprintf_r+0x4e>
 80099b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099bc:	460c      	mov	r4, r1
 80099be:	2001      	movs	r0, #1
 80099c0:	e7a6      	b.n	8009910 <_svfiprintf_r+0xd4>
 80099c2:	2300      	movs	r3, #0
 80099c4:	3401      	adds	r4, #1
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f04f 0c0a 	mov.w	ip, #10
 80099ce:	4620      	mov	r0, r4
 80099d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d4:	3a30      	subs	r2, #48	; 0x30
 80099d6:	2a09      	cmp	r2, #9
 80099d8:	d903      	bls.n	80099e2 <_svfiprintf_r+0x1a6>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0c6      	beq.n	800996c <_svfiprintf_r+0x130>
 80099de:	9105      	str	r1, [sp, #20]
 80099e0:	e7c4      	b.n	800996c <_svfiprintf_r+0x130>
 80099e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e6:	4604      	mov	r4, r0
 80099e8:	2301      	movs	r3, #1
 80099ea:	e7f0      	b.n	80099ce <_svfiprintf_r+0x192>
 80099ec:	ab03      	add	r3, sp, #12
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	462a      	mov	r2, r5
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <_svfiprintf_r+0x1f4>)
 80099f4:	a904      	add	r1, sp, #16
 80099f6:	4638      	mov	r0, r7
 80099f8:	f3af 8000 	nop.w
 80099fc:	1c42      	adds	r2, r0, #1
 80099fe:	4606      	mov	r6, r0
 8009a00:	d1d6      	bne.n	80099b0 <_svfiprintf_r+0x174>
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	065b      	lsls	r3, r3, #25
 8009a06:	f53f af2d 	bmi.w	8009864 <_svfiprintf_r+0x28>
 8009a0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a0c:	b01d      	add	sp, #116	; 0x74
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	ab03      	add	r3, sp, #12
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	462a      	mov	r2, r5
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <_svfiprintf_r+0x1f4>)
 8009a1a:	a904      	add	r1, sp, #16
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f000 f9bd 	bl	8009d9c <_printf_i>
 8009a22:	e7eb      	b.n	80099fc <_svfiprintf_r+0x1c0>
 8009a24:	0800a631 	.word	0x0800a631
 8009a28:	0800a63b 	.word	0x0800a63b
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	08009789 	.word	0x08009789
 8009a34:	0800a637 	.word	0x0800a637

08009a38 <__sfputc_r>:
 8009a38:	6893      	ldr	r3, [r2, #8]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	b410      	push	{r4}
 8009a40:	6093      	str	r3, [r2, #8]
 8009a42:	da08      	bge.n	8009a56 <__sfputc_r+0x1e>
 8009a44:	6994      	ldr	r4, [r2, #24]
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	db01      	blt.n	8009a4e <__sfputc_r+0x16>
 8009a4a:	290a      	cmp	r1, #10
 8009a4c:	d103      	bne.n	8009a56 <__sfputc_r+0x1e>
 8009a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a52:	f7ff bc6a 	b.w	800932a <__swbuf_r>
 8009a56:	6813      	ldr	r3, [r2, #0]
 8009a58:	1c58      	adds	r0, r3, #1
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	7019      	strb	r1, [r3, #0]
 8009a5e:	4608      	mov	r0, r1
 8009a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <__sfputs_r>:
 8009a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	18d5      	adds	r5, r2, r3
 8009a70:	42ac      	cmp	r4, r5
 8009a72:	d101      	bne.n	8009a78 <__sfputs_r+0x12>
 8009a74:	2000      	movs	r0, #0
 8009a76:	e007      	b.n	8009a88 <__sfputs_r+0x22>
 8009a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7c:	463a      	mov	r2, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7ff ffda 	bl	8009a38 <__sfputc_r>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d1f3      	bne.n	8009a70 <__sfputs_r+0xa>
 8009a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a8c <_vfiprintf_r>:
 8009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a90:	460d      	mov	r5, r1
 8009a92:	b09d      	sub	sp, #116	; 0x74
 8009a94:	4614      	mov	r4, r2
 8009a96:	4698      	mov	r8, r3
 8009a98:	4606      	mov	r6, r0
 8009a9a:	b118      	cbz	r0, 8009aa4 <_vfiprintf_r+0x18>
 8009a9c:	6a03      	ldr	r3, [r0, #32]
 8009a9e:	b90b      	cbnz	r3, 8009aa4 <_vfiprintf_r+0x18>
 8009aa0:	f7ff fb3c 	bl	800911c <__sinit>
 8009aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa6:	07d9      	lsls	r1, r3, #31
 8009aa8:	d405      	bmi.n	8009ab6 <_vfiprintf_r+0x2a>
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	059a      	lsls	r2, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_vfiprintf_r+0x2a>
 8009ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab2:	f7ff fd6e 	bl	8009592 <__retarget_lock_acquire_recursive>
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	071b      	lsls	r3, r3, #28
 8009aba:	d501      	bpl.n	8009ac0 <_vfiprintf_r+0x34>
 8009abc:	692b      	ldr	r3, [r5, #16]
 8009abe:	b99b      	cbnz	r3, 8009ae8 <_vfiprintf_r+0x5c>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff fc6e 	bl	80093a4 <__swsetup_r>
 8009ac8:	b170      	cbz	r0, 8009ae8 <_vfiprintf_r+0x5c>
 8009aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009acc:	07dc      	lsls	r4, r3, #31
 8009ace:	d504      	bpl.n	8009ada <_vfiprintf_r+0x4e>
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	b01d      	add	sp, #116	; 0x74
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	0598      	lsls	r0, r3, #22
 8009ade:	d4f7      	bmi.n	8009ad0 <_vfiprintf_r+0x44>
 8009ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ae2:	f7ff fd57 	bl	8009594 <__retarget_lock_release_recursive>
 8009ae6:	e7f3      	b.n	8009ad0 <_vfiprintf_r+0x44>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9309      	str	r3, [sp, #36]	; 0x24
 8009aec:	2320      	movs	r3, #32
 8009aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009af6:	2330      	movs	r3, #48	; 0x30
 8009af8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009cac <_vfiprintf_r+0x220>
 8009afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b00:	f04f 0901 	mov.w	r9, #1
 8009b04:	4623      	mov	r3, r4
 8009b06:	469a      	mov	sl, r3
 8009b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b0c:	b10a      	cbz	r2, 8009b12 <_vfiprintf_r+0x86>
 8009b0e:	2a25      	cmp	r2, #37	; 0x25
 8009b10:	d1f9      	bne.n	8009b06 <_vfiprintf_r+0x7a>
 8009b12:	ebba 0b04 	subs.w	fp, sl, r4
 8009b16:	d00b      	beq.n	8009b30 <_vfiprintf_r+0xa4>
 8009b18:	465b      	mov	r3, fp
 8009b1a:	4622      	mov	r2, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f7ff ffa1 	bl	8009a66 <__sfputs_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	f000 80a9 	beq.w	8009c7c <_vfiprintf_r+0x1f0>
 8009b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b2c:	445a      	add	r2, fp
 8009b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b30:	f89a 3000 	ldrb.w	r3, [sl]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80a1 	beq.w	8009c7c <_vfiprintf_r+0x1f0>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b44:	f10a 0a01 	add.w	sl, sl, #1
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	9307      	str	r3, [sp, #28]
 8009b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b50:	931a      	str	r3, [sp, #104]	; 0x68
 8009b52:	4654      	mov	r4, sl
 8009b54:	2205      	movs	r2, #5
 8009b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5a:	4854      	ldr	r0, [pc, #336]	; (8009cac <_vfiprintf_r+0x220>)
 8009b5c:	f7f6 fb48 	bl	80001f0 <memchr>
 8009b60:	9a04      	ldr	r2, [sp, #16]
 8009b62:	b9d8      	cbnz	r0, 8009b9c <_vfiprintf_r+0x110>
 8009b64:	06d1      	lsls	r1, r2, #27
 8009b66:	bf44      	itt	mi
 8009b68:	2320      	movmi	r3, #32
 8009b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b6e:	0713      	lsls	r3, r2, #28
 8009b70:	bf44      	itt	mi
 8009b72:	232b      	movmi	r3, #43	; 0x2b
 8009b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b78:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b7e:	d015      	beq.n	8009bac <_vfiprintf_r+0x120>
 8009b80:	9a07      	ldr	r2, [sp, #28]
 8009b82:	4654      	mov	r4, sl
 8009b84:	2000      	movs	r0, #0
 8009b86:	f04f 0c0a 	mov.w	ip, #10
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b90:	3b30      	subs	r3, #48	; 0x30
 8009b92:	2b09      	cmp	r3, #9
 8009b94:	d94d      	bls.n	8009c32 <_vfiprintf_r+0x1a6>
 8009b96:	b1b0      	cbz	r0, 8009bc6 <_vfiprintf_r+0x13a>
 8009b98:	9207      	str	r2, [sp, #28]
 8009b9a:	e014      	b.n	8009bc6 <_vfiprintf_r+0x13a>
 8009b9c:	eba0 0308 	sub.w	r3, r0, r8
 8009ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	46a2      	mov	sl, r4
 8009baa:	e7d2      	b.n	8009b52 <_vfiprintf_r+0xc6>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	1d19      	adds	r1, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	9103      	str	r1, [sp, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfbb      	ittet	lt
 8009bb8:	425b      	neglt	r3, r3
 8009bba:	f042 0202 	orrlt.w	r2, r2, #2
 8009bbe:	9307      	strge	r3, [sp, #28]
 8009bc0:	9307      	strlt	r3, [sp, #28]
 8009bc2:	bfb8      	it	lt
 8009bc4:	9204      	strlt	r2, [sp, #16]
 8009bc6:	7823      	ldrb	r3, [r4, #0]
 8009bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009bca:	d10c      	bne.n	8009be6 <_vfiprintf_r+0x15a>
 8009bcc:	7863      	ldrb	r3, [r4, #1]
 8009bce:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd0:	d134      	bne.n	8009c3c <_vfiprintf_r+0x1b0>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	1d1a      	adds	r2, r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	9203      	str	r2, [sp, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	bfb8      	it	lt
 8009bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8009be2:	3402      	adds	r4, #2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009cbc <_vfiprintf_r+0x230>
 8009bea:	7821      	ldrb	r1, [r4, #0]
 8009bec:	2203      	movs	r2, #3
 8009bee:	4650      	mov	r0, sl
 8009bf0:	f7f6 fafe 	bl	80001f0 <memchr>
 8009bf4:	b138      	cbz	r0, 8009c06 <_vfiprintf_r+0x17a>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	eba0 000a 	sub.w	r0, r0, sl
 8009bfc:	2240      	movs	r2, #64	; 0x40
 8009bfe:	4082      	lsls	r2, r0
 8009c00:	4313      	orrs	r3, r2
 8009c02:	3401      	adds	r4, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4829      	ldr	r0, [pc, #164]	; (8009cb0 <_vfiprintf_r+0x224>)
 8009c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c10:	2206      	movs	r2, #6
 8009c12:	f7f6 faed 	bl	80001f0 <memchr>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d03f      	beq.n	8009c9a <_vfiprintf_r+0x20e>
 8009c1a:	4b26      	ldr	r3, [pc, #152]	; (8009cb4 <_vfiprintf_r+0x228>)
 8009c1c:	bb1b      	cbnz	r3, 8009c66 <_vfiprintf_r+0x1da>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3307      	adds	r3, #7
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	3308      	adds	r3, #8
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2c:	443b      	add	r3, r7
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c30:	e768      	b.n	8009b04 <_vfiprintf_r+0x78>
 8009c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c36:	460c      	mov	r4, r1
 8009c38:	2001      	movs	r0, #1
 8009c3a:	e7a6      	b.n	8009b8a <_vfiprintf_r+0xfe>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4619      	mov	r1, r3
 8009c44:	f04f 0c0a 	mov.w	ip, #10
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4e:	3a30      	subs	r2, #48	; 0x30
 8009c50:	2a09      	cmp	r2, #9
 8009c52:	d903      	bls.n	8009c5c <_vfiprintf_r+0x1d0>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0c6      	beq.n	8009be6 <_vfiprintf_r+0x15a>
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	e7c4      	b.n	8009be6 <_vfiprintf_r+0x15a>
 8009c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c60:	4604      	mov	r4, r0
 8009c62:	2301      	movs	r3, #1
 8009c64:	e7f0      	b.n	8009c48 <_vfiprintf_r+0x1bc>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <_vfiprintf_r+0x22c>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f3af 8000 	nop.w
 8009c76:	4607      	mov	r7, r0
 8009c78:	1c78      	adds	r0, r7, #1
 8009c7a:	d1d6      	bne.n	8009c2a <_vfiprintf_r+0x19e>
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x202>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x202>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f7ff fc83 	bl	8009594 <__retarget_lock_release_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	065b      	lsls	r3, r3, #25
 8009c92:	f53f af1d 	bmi.w	8009ad0 <_vfiprintf_r+0x44>
 8009c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c98:	e71c      	b.n	8009ad4 <_vfiprintf_r+0x48>
 8009c9a:	ab03      	add	r3, sp, #12
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	462a      	mov	r2, r5
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <_vfiprintf_r+0x22c>)
 8009ca2:	a904      	add	r1, sp, #16
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f000 f879 	bl	8009d9c <_printf_i>
 8009caa:	e7e4      	b.n	8009c76 <_vfiprintf_r+0x1ea>
 8009cac:	0800a631 	.word	0x0800a631
 8009cb0:	0800a63b 	.word	0x0800a63b
 8009cb4:	00000000 	.word	0x00000000
 8009cb8:	08009a67 	.word	0x08009a67
 8009cbc:	0800a637 	.word	0x0800a637

08009cc0 <_printf_common>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	4699      	mov	r9, r3
 8009cc8:	688a      	ldr	r2, [r1, #8]
 8009cca:	690b      	ldr	r3, [r1, #16]
 8009ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bfb8      	it	lt
 8009cd4:	4613      	movlt	r3, r2
 8009cd6:	6033      	str	r3, [r6, #0]
 8009cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cdc:	4607      	mov	r7, r0
 8009cde:	460c      	mov	r4, r1
 8009ce0:	b10a      	cbz	r2, 8009ce6 <_printf_common+0x26>
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	0699      	lsls	r1, r3, #26
 8009cea:	bf42      	ittt	mi
 8009cec:	6833      	ldrmi	r3, [r6, #0]
 8009cee:	3302      	addmi	r3, #2
 8009cf0:	6033      	strmi	r3, [r6, #0]
 8009cf2:	6825      	ldr	r5, [r4, #0]
 8009cf4:	f015 0506 	ands.w	r5, r5, #6
 8009cf8:	d106      	bne.n	8009d08 <_printf_common+0x48>
 8009cfa:	f104 0a19 	add.w	sl, r4, #25
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	6832      	ldr	r2, [r6, #0]
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dc26      	bgt.n	8009d56 <_printf_common+0x96>
 8009d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d0c:	1e13      	subs	r3, r2, #0
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	bf18      	it	ne
 8009d12:	2301      	movne	r3, #1
 8009d14:	0692      	lsls	r2, r2, #26
 8009d16:	d42b      	bmi.n	8009d70 <_printf_common+0xb0>
 8009d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	4638      	mov	r0, r7
 8009d20:	47c0      	blx	r8
 8009d22:	3001      	adds	r0, #1
 8009d24:	d01e      	beq.n	8009d64 <_printf_common+0xa4>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	f003 0306 	and.w	r3, r3, #6
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	bf02      	ittt	eq
 8009d32:	68e5      	ldreq	r5, [r4, #12]
 8009d34:	6833      	ldreq	r3, [r6, #0]
 8009d36:	1aed      	subeq	r5, r5, r3
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	bf0c      	ite	eq
 8009d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d40:	2500      	movne	r5, #0
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bfc4      	itt	gt
 8009d46:	1a9b      	subgt	r3, r3, r2
 8009d48:	18ed      	addgt	r5, r5, r3
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	341a      	adds	r4, #26
 8009d4e:	42b5      	cmp	r5, r6
 8009d50:	d11a      	bne.n	8009d88 <_printf_common+0xc8>
 8009d52:	2000      	movs	r0, #0
 8009d54:	e008      	b.n	8009d68 <_printf_common+0xa8>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4652      	mov	r2, sl
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	47c0      	blx	r8
 8009d60:	3001      	adds	r0, #1
 8009d62:	d103      	bne.n	8009d6c <_printf_common+0xac>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	e7c6      	b.n	8009cfe <_printf_common+0x3e>
 8009d70:	18e1      	adds	r1, r4, r3
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	2030      	movs	r0, #48	; 0x30
 8009d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d7a:	4422      	add	r2, r4
 8009d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d84:	3302      	adds	r3, #2
 8009d86:	e7c7      	b.n	8009d18 <_printf_common+0x58>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	4638      	mov	r0, r7
 8009d90:	47c0      	blx	r8
 8009d92:	3001      	adds	r0, #1
 8009d94:	d0e6      	beq.n	8009d64 <_printf_common+0xa4>
 8009d96:	3601      	adds	r6, #1
 8009d98:	e7d9      	b.n	8009d4e <_printf_common+0x8e>
	...

08009d9c <_printf_i>:
 8009d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	7e0f      	ldrb	r7, [r1, #24]
 8009da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009da4:	2f78      	cmp	r7, #120	; 0x78
 8009da6:	4691      	mov	r9, r2
 8009da8:	4680      	mov	r8, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	469a      	mov	sl, r3
 8009dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009db2:	d807      	bhi.n	8009dc4 <_printf_i+0x28>
 8009db4:	2f62      	cmp	r7, #98	; 0x62
 8009db6:	d80a      	bhi.n	8009dce <_printf_i+0x32>
 8009db8:	2f00      	cmp	r7, #0
 8009dba:	f000 80d4 	beq.w	8009f66 <_printf_i+0x1ca>
 8009dbe:	2f58      	cmp	r7, #88	; 0x58
 8009dc0:	f000 80c0 	beq.w	8009f44 <_printf_i+0x1a8>
 8009dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dcc:	e03a      	b.n	8009e44 <_printf_i+0xa8>
 8009dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dd2:	2b15      	cmp	r3, #21
 8009dd4:	d8f6      	bhi.n	8009dc4 <_printf_i+0x28>
 8009dd6:	a101      	add	r1, pc, #4	; (adr r1, 8009ddc <_printf_i+0x40>)
 8009dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ddc:	08009e35 	.word	0x08009e35
 8009de0:	08009e49 	.word	0x08009e49
 8009de4:	08009dc5 	.word	0x08009dc5
 8009de8:	08009dc5 	.word	0x08009dc5
 8009dec:	08009dc5 	.word	0x08009dc5
 8009df0:	08009dc5 	.word	0x08009dc5
 8009df4:	08009e49 	.word	0x08009e49
 8009df8:	08009dc5 	.word	0x08009dc5
 8009dfc:	08009dc5 	.word	0x08009dc5
 8009e00:	08009dc5 	.word	0x08009dc5
 8009e04:	08009dc5 	.word	0x08009dc5
 8009e08:	08009f4d 	.word	0x08009f4d
 8009e0c:	08009e75 	.word	0x08009e75
 8009e10:	08009f07 	.word	0x08009f07
 8009e14:	08009dc5 	.word	0x08009dc5
 8009e18:	08009dc5 	.word	0x08009dc5
 8009e1c:	08009f6f 	.word	0x08009f6f
 8009e20:	08009dc5 	.word	0x08009dc5
 8009e24:	08009e75 	.word	0x08009e75
 8009e28:	08009dc5 	.word	0x08009dc5
 8009e2c:	08009dc5 	.word	0x08009dc5
 8009e30:	08009f0f 	.word	0x08009f0f
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	602a      	str	r2, [r5, #0]
 8009e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e44:	2301      	movs	r3, #1
 8009e46:	e09f      	b.n	8009f88 <_printf_i+0x1ec>
 8009e48:	6820      	ldr	r0, [r4, #0]
 8009e4a:	682b      	ldr	r3, [r5, #0]
 8009e4c:	0607      	lsls	r7, r0, #24
 8009e4e:	f103 0104 	add.w	r1, r3, #4
 8009e52:	6029      	str	r1, [r5, #0]
 8009e54:	d501      	bpl.n	8009e5a <_printf_i+0xbe>
 8009e56:	681e      	ldr	r6, [r3, #0]
 8009e58:	e003      	b.n	8009e62 <_printf_i+0xc6>
 8009e5a:	0646      	lsls	r6, r0, #25
 8009e5c:	d5fb      	bpl.n	8009e56 <_printf_i+0xba>
 8009e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	da03      	bge.n	8009e6e <_printf_i+0xd2>
 8009e66:	232d      	movs	r3, #45	; 0x2d
 8009e68:	4276      	negs	r6, r6
 8009e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6e:	485a      	ldr	r0, [pc, #360]	; (8009fd8 <_printf_i+0x23c>)
 8009e70:	230a      	movs	r3, #10
 8009e72:	e012      	b.n	8009e9a <_printf_i+0xfe>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	1d19      	adds	r1, r3, #4
 8009e7a:	6029      	str	r1, [r5, #0]
 8009e7c:	0605      	lsls	r5, r0, #24
 8009e7e:	d501      	bpl.n	8009e84 <_printf_i+0xe8>
 8009e80:	681e      	ldr	r6, [r3, #0]
 8009e82:	e002      	b.n	8009e8a <_printf_i+0xee>
 8009e84:	0641      	lsls	r1, r0, #25
 8009e86:	d5fb      	bpl.n	8009e80 <_printf_i+0xe4>
 8009e88:	881e      	ldrh	r6, [r3, #0]
 8009e8a:	4853      	ldr	r0, [pc, #332]	; (8009fd8 <_printf_i+0x23c>)
 8009e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e8e:	bf0c      	ite	eq
 8009e90:	2308      	moveq	r3, #8
 8009e92:	230a      	movne	r3, #10
 8009e94:	2100      	movs	r1, #0
 8009e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e9a:	6865      	ldr	r5, [r4, #4]
 8009e9c:	60a5      	str	r5, [r4, #8]
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	bfa2      	ittt	ge
 8009ea2:	6821      	ldrge	r1, [r4, #0]
 8009ea4:	f021 0104 	bicge.w	r1, r1, #4
 8009ea8:	6021      	strge	r1, [r4, #0]
 8009eaa:	b90e      	cbnz	r6, 8009eb0 <_printf_i+0x114>
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	d04b      	beq.n	8009f48 <_printf_i+0x1ac>
 8009eb0:	4615      	mov	r5, r2
 8009eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8009eba:	5dc7      	ldrb	r7, [r0, r7]
 8009ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ec0:	4637      	mov	r7, r6
 8009ec2:	42bb      	cmp	r3, r7
 8009ec4:	460e      	mov	r6, r1
 8009ec6:	d9f4      	bls.n	8009eb2 <_printf_i+0x116>
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d10b      	bne.n	8009ee4 <_printf_i+0x148>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	07de      	lsls	r6, r3, #31
 8009ed0:	d508      	bpl.n	8009ee4 <_printf_i+0x148>
 8009ed2:	6923      	ldr	r3, [r4, #16]
 8009ed4:	6861      	ldr	r1, [r4, #4]
 8009ed6:	4299      	cmp	r1, r3
 8009ed8:	bfde      	ittt	le
 8009eda:	2330      	movle	r3, #48	; 0x30
 8009edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ee4:	1b52      	subs	r2, r2, r5
 8009ee6:	6122      	str	r2, [r4, #16]
 8009ee8:	f8cd a000 	str.w	sl, [sp]
 8009eec:	464b      	mov	r3, r9
 8009eee:	aa03      	add	r2, sp, #12
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f7ff fee4 	bl	8009cc0 <_printf_common>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d14a      	bne.n	8009f92 <_printf_i+0x1f6>
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	b004      	add	sp, #16
 8009f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	f043 0320 	orr.w	r3, r3, #32
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	4833      	ldr	r0, [pc, #204]	; (8009fdc <_printf_i+0x240>)
 8009f10:	2778      	movs	r7, #120	; 0x78
 8009f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	6829      	ldr	r1, [r5, #0]
 8009f1a:	061f      	lsls	r7, r3, #24
 8009f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f20:	d402      	bmi.n	8009f28 <_printf_i+0x18c>
 8009f22:	065f      	lsls	r7, r3, #25
 8009f24:	bf48      	it	mi
 8009f26:	b2b6      	uxthmi	r6, r6
 8009f28:	07df      	lsls	r7, r3, #31
 8009f2a:	bf48      	it	mi
 8009f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009f30:	6029      	str	r1, [r5, #0]
 8009f32:	bf48      	it	mi
 8009f34:	6023      	strmi	r3, [r4, #0]
 8009f36:	b91e      	cbnz	r6, 8009f40 <_printf_i+0x1a4>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	f023 0320 	bic.w	r3, r3, #32
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	2310      	movs	r3, #16
 8009f42:	e7a7      	b.n	8009e94 <_printf_i+0xf8>
 8009f44:	4824      	ldr	r0, [pc, #144]	; (8009fd8 <_printf_i+0x23c>)
 8009f46:	e7e4      	b.n	8009f12 <_printf_i+0x176>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	e7bd      	b.n	8009ec8 <_printf_i+0x12c>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	6826      	ldr	r6, [r4, #0]
 8009f50:	6961      	ldr	r1, [r4, #20]
 8009f52:	1d18      	adds	r0, r3, #4
 8009f54:	6028      	str	r0, [r5, #0]
 8009f56:	0635      	lsls	r5, r6, #24
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0x1c4>
 8009f5c:	6019      	str	r1, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0x1ca>
 8009f60:	0670      	lsls	r0, r6, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0x1c0>
 8009f64:	8019      	strh	r1, [r3, #0]
 8009f66:	2300      	movs	r3, #0
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	4615      	mov	r5, r2
 8009f6c:	e7bc      	b.n	8009ee8 <_printf_i+0x14c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	1d1a      	adds	r2, r3, #4
 8009f72:	602a      	str	r2, [r5, #0]
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7f6 f938 	bl	80001f0 <memchr>
 8009f80:	b108      	cbz	r0, 8009f86 <_printf_i+0x1ea>
 8009f82:	1b40      	subs	r0, r0, r5
 8009f84:	6060      	str	r0, [r4, #4]
 8009f86:	6863      	ldr	r3, [r4, #4]
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f90:	e7aa      	b.n	8009ee8 <_printf_i+0x14c>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4649      	mov	r1, r9
 8009f98:	4640      	mov	r0, r8
 8009f9a:	47d0      	blx	sl
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d0ad      	beq.n	8009efc <_printf_i+0x160>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	079b      	lsls	r3, r3, #30
 8009fa4:	d413      	bmi.n	8009fce <_printf_i+0x232>
 8009fa6:	68e0      	ldr	r0, [r4, #12]
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	4298      	cmp	r0, r3
 8009fac:	bfb8      	it	lt
 8009fae:	4618      	movlt	r0, r3
 8009fb0:	e7a6      	b.n	8009f00 <_printf_i+0x164>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	4640      	mov	r0, r8
 8009fba:	47d0      	blx	sl
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d09d      	beq.n	8009efc <_printf_i+0x160>
 8009fc0:	3501      	adds	r5, #1
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	9903      	ldr	r1, [sp, #12]
 8009fc6:	1a5b      	subs	r3, r3, r1
 8009fc8:	42ab      	cmp	r3, r5
 8009fca:	dcf2      	bgt.n	8009fb2 <_printf_i+0x216>
 8009fcc:	e7eb      	b.n	8009fa6 <_printf_i+0x20a>
 8009fce:	2500      	movs	r5, #0
 8009fd0:	f104 0619 	add.w	r6, r4, #25
 8009fd4:	e7f5      	b.n	8009fc2 <_printf_i+0x226>
 8009fd6:	bf00      	nop
 8009fd8:	0800a642 	.word	0x0800a642
 8009fdc:	0800a653 	.word	0x0800a653

08009fe0 <__sflush_r>:
 8009fe0:	898a      	ldrh	r2, [r1, #12]
 8009fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	0710      	lsls	r0, r2, #28
 8009fea:	460c      	mov	r4, r1
 8009fec:	d458      	bmi.n	800a0a0 <__sflush_r+0xc0>
 8009fee:	684b      	ldr	r3, [r1, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dc05      	bgt.n	800a000 <__sflush_r+0x20>
 8009ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dc02      	bgt.n	800a000 <__sflush_r+0x20>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a002:	2e00      	cmp	r6, #0
 800a004:	d0f9      	beq.n	8009ffa <__sflush_r+0x1a>
 800a006:	2300      	movs	r3, #0
 800a008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a00c:	682f      	ldr	r7, [r5, #0]
 800a00e:	6a21      	ldr	r1, [r4, #32]
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	d032      	beq.n	800a07a <__sflush_r+0x9a>
 800a014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	075a      	lsls	r2, r3, #29
 800a01a:	d505      	bpl.n	800a028 <__sflush_r+0x48>
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	1ac0      	subs	r0, r0, r3
 800a020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a022:	b10b      	cbz	r3, 800a028 <__sflush_r+0x48>
 800a024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a026:	1ac0      	subs	r0, r0, r3
 800a028:	2300      	movs	r3, #0
 800a02a:	4602      	mov	r2, r0
 800a02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a02e:	6a21      	ldr	r1, [r4, #32]
 800a030:	4628      	mov	r0, r5
 800a032:	47b0      	blx	r6
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	d106      	bne.n	800a048 <__sflush_r+0x68>
 800a03a:	6829      	ldr	r1, [r5, #0]
 800a03c:	291d      	cmp	r1, #29
 800a03e:	d82b      	bhi.n	800a098 <__sflush_r+0xb8>
 800a040:	4a29      	ldr	r2, [pc, #164]	; (800a0e8 <__sflush_r+0x108>)
 800a042:	410a      	asrs	r2, r1
 800a044:	07d6      	lsls	r6, r2, #31
 800a046:	d427      	bmi.n	800a098 <__sflush_r+0xb8>
 800a048:	2200      	movs	r2, #0
 800a04a:	6062      	str	r2, [r4, #4]
 800a04c:	04d9      	lsls	r1, r3, #19
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	6022      	str	r2, [r4, #0]
 800a052:	d504      	bpl.n	800a05e <__sflush_r+0x7e>
 800a054:	1c42      	adds	r2, r0, #1
 800a056:	d101      	bne.n	800a05c <__sflush_r+0x7c>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b903      	cbnz	r3, 800a05e <__sflush_r+0x7e>
 800a05c:	6560      	str	r0, [r4, #84]	; 0x54
 800a05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a060:	602f      	str	r7, [r5, #0]
 800a062:	2900      	cmp	r1, #0
 800a064:	d0c9      	beq.n	8009ffa <__sflush_r+0x1a>
 800a066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a06a:	4299      	cmp	r1, r3
 800a06c:	d002      	beq.n	800a074 <__sflush_r+0x94>
 800a06e:	4628      	mov	r0, r5
 800a070:	f7ff fa92 	bl	8009598 <_free_r>
 800a074:	2000      	movs	r0, #0
 800a076:	6360      	str	r0, [r4, #52]	; 0x34
 800a078:	e7c0      	b.n	8009ffc <__sflush_r+0x1c>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b0      	blx	r6
 800a080:	1c41      	adds	r1, r0, #1
 800a082:	d1c8      	bne.n	800a016 <__sflush_r+0x36>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0c5      	beq.n	800a016 <__sflush_r+0x36>
 800a08a:	2b1d      	cmp	r3, #29
 800a08c:	d001      	beq.n	800a092 <__sflush_r+0xb2>
 800a08e:	2b16      	cmp	r3, #22
 800a090:	d101      	bne.n	800a096 <__sflush_r+0xb6>
 800a092:	602f      	str	r7, [r5, #0]
 800a094:	e7b1      	b.n	8009ffa <__sflush_r+0x1a>
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	e7ad      	b.n	8009ffc <__sflush_r+0x1c>
 800a0a0:	690f      	ldr	r7, [r1, #16]
 800a0a2:	2f00      	cmp	r7, #0
 800a0a4:	d0a9      	beq.n	8009ffa <__sflush_r+0x1a>
 800a0a6:	0793      	lsls	r3, r2, #30
 800a0a8:	680e      	ldr	r6, [r1, #0]
 800a0aa:	bf08      	it	eq
 800a0ac:	694b      	ldreq	r3, [r1, #20]
 800a0ae:	600f      	str	r7, [r1, #0]
 800a0b0:	bf18      	it	ne
 800a0b2:	2300      	movne	r3, #0
 800a0b4:	eba6 0807 	sub.w	r8, r6, r7
 800a0b8:	608b      	str	r3, [r1, #8]
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	dd9c      	ble.n	8009ffa <__sflush_r+0x1a>
 800a0c0:	6a21      	ldr	r1, [r4, #32]
 800a0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0c4:	4643      	mov	r3, r8
 800a0c6:	463a      	mov	r2, r7
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b0      	blx	r6
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dc06      	bgt.n	800a0de <__sflush_r+0xfe>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	e78e      	b.n	8009ffc <__sflush_r+0x1c>
 800a0de:	4407      	add	r7, r0
 800a0e0:	eba8 0800 	sub.w	r8, r8, r0
 800a0e4:	e7e9      	b.n	800a0ba <__sflush_r+0xda>
 800a0e6:	bf00      	nop
 800a0e8:	dfbffffe 	.word	0xdfbffffe

0800a0ec <_fflush_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	b913      	cbnz	r3, 800a0fc <_fflush_r+0x10>
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	b118      	cbz	r0, 800a106 <_fflush_r+0x1a>
 800a0fe:	6a03      	ldr	r3, [r0, #32]
 800a100:	b90b      	cbnz	r3, 800a106 <_fflush_r+0x1a>
 800a102:	f7ff f80b 	bl	800911c <__sinit>
 800a106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0f3      	beq.n	800a0f6 <_fflush_r+0xa>
 800a10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a110:	07d0      	lsls	r0, r2, #31
 800a112:	d404      	bmi.n	800a11e <_fflush_r+0x32>
 800a114:	0599      	lsls	r1, r3, #22
 800a116:	d402      	bmi.n	800a11e <_fflush_r+0x32>
 800a118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a11a:	f7ff fa3a 	bl	8009592 <__retarget_lock_acquire_recursive>
 800a11e:	4628      	mov	r0, r5
 800a120:	4621      	mov	r1, r4
 800a122:	f7ff ff5d 	bl	8009fe0 <__sflush_r>
 800a126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a128:	07da      	lsls	r2, r3, #31
 800a12a:	4605      	mov	r5, r0
 800a12c:	d4e4      	bmi.n	800a0f8 <_fflush_r+0xc>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	059b      	lsls	r3, r3, #22
 800a132:	d4e1      	bmi.n	800a0f8 <_fflush_r+0xc>
 800a134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a136:	f7ff fa2d 	bl	8009594 <__retarget_lock_release_recursive>
 800a13a:	e7dd      	b.n	800a0f8 <_fflush_r+0xc>

0800a13c <__swhatbuf_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	460c      	mov	r4, r1
 800a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a144:	2900      	cmp	r1, #0
 800a146:	b096      	sub	sp, #88	; 0x58
 800a148:	4615      	mov	r5, r2
 800a14a:	461e      	mov	r6, r3
 800a14c:	da0d      	bge.n	800a16a <__swhatbuf_r+0x2e>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a154:	f04f 0100 	mov.w	r1, #0
 800a158:	bf0c      	ite	eq
 800a15a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a15e:	2340      	movne	r3, #64	; 0x40
 800a160:	2000      	movs	r0, #0
 800a162:	6031      	str	r1, [r6, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	b016      	add	sp, #88	; 0x58
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	466a      	mov	r2, sp
 800a16c:	f000 f862 	bl	800a234 <_fstat_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	dbec      	blt.n	800a14e <__swhatbuf_r+0x12>
 800a174:	9901      	ldr	r1, [sp, #4]
 800a176:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a17a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a17e:	4259      	negs	r1, r3
 800a180:	4159      	adcs	r1, r3
 800a182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a186:	e7eb      	b.n	800a160 <__swhatbuf_r+0x24>

0800a188 <__smakebuf_r>:
 800a188:	898b      	ldrh	r3, [r1, #12]
 800a18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a18c:	079d      	lsls	r5, r3, #30
 800a18e:	4606      	mov	r6, r0
 800a190:	460c      	mov	r4, r1
 800a192:	d507      	bpl.n	800a1a4 <__smakebuf_r+0x1c>
 800a194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2301      	movs	r3, #1
 800a19e:	6163      	str	r3, [r4, #20]
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	ab01      	add	r3, sp, #4
 800a1a6:	466a      	mov	r2, sp
 800a1a8:	f7ff ffc8 	bl	800a13c <__swhatbuf_r>
 800a1ac:	9900      	ldr	r1, [sp, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7ff fa5d 	bl	8009670 <_malloc_r>
 800a1b6:	b948      	cbnz	r0, 800a1cc <__smakebuf_r+0x44>
 800a1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1bc:	059a      	lsls	r2, r3, #22
 800a1be:	d4ef      	bmi.n	800a1a0 <__smakebuf_r+0x18>
 800a1c0:	f023 0303 	bic.w	r3, r3, #3
 800a1c4:	f043 0302 	orr.w	r3, r3, #2
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	e7e3      	b.n	800a194 <__smakebuf_r+0xc>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	6020      	str	r0, [r4, #0]
 800a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	6163      	str	r3, [r4, #20]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	6120      	str	r0, [r4, #16]
 800a1de:	b15b      	cbz	r3, 800a1f8 <__smakebuf_r+0x70>
 800a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 f837 	bl	800a258 <_isatty_r>
 800a1ea:	b128      	cbz	r0, 800a1f8 <__smakebuf_r+0x70>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	431d      	orrs	r5, r3
 800a1fc:	81a5      	strh	r5, [r4, #12]
 800a1fe:	e7cf      	b.n	800a1a0 <__smakebuf_r+0x18>

0800a200 <memmove>:
 800a200:	4288      	cmp	r0, r1
 800a202:	b510      	push	{r4, lr}
 800a204:	eb01 0402 	add.w	r4, r1, r2
 800a208:	d902      	bls.n	800a210 <memmove+0x10>
 800a20a:	4284      	cmp	r4, r0
 800a20c:	4623      	mov	r3, r4
 800a20e:	d807      	bhi.n	800a220 <memmove+0x20>
 800a210:	1e43      	subs	r3, r0, #1
 800a212:	42a1      	cmp	r1, r4
 800a214:	d008      	beq.n	800a228 <memmove+0x28>
 800a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a21e:	e7f8      	b.n	800a212 <memmove+0x12>
 800a220:	4402      	add	r2, r0
 800a222:	4601      	mov	r1, r0
 800a224:	428a      	cmp	r2, r1
 800a226:	d100      	bne.n	800a22a <memmove+0x2a>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a232:	e7f7      	b.n	800a224 <memmove+0x24>

0800a234 <_fstat_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_fstat_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f7f8 fc88 	bl	8002b56 <_fstat>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_fstat_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_fstat_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	20000c48 	.word	0x20000c48

0800a258 <_isatty_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_isatty_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f8 fc87 	bl	8002b76 <_isatty>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_isatty_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_isatty_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000c48 	.word	0x20000c48

0800a278 <_sbrk_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d06      	ldr	r5, [pc, #24]	; (800a294 <_sbrk_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7f8 fc90 	bl	8002ba8 <_sbrk>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_sbrk_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_sbrk_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000c48 	.word	0x20000c48

0800a298 <memcpy>:
 800a298:	440a      	add	r2, r1
 800a29a:	4291      	cmp	r1, r2
 800a29c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2a0:	d100      	bne.n	800a2a4 <memcpy+0xc>
 800a2a2:	4770      	bx	lr
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ae:	4291      	cmp	r1, r2
 800a2b0:	d1f9      	bne.n	800a2a6 <memcpy+0xe>
 800a2b2:	bd10      	pop	{r4, pc}

0800a2b4 <_realloc_r>:
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	460e      	mov	r6, r1
 800a2be:	b921      	cbnz	r1, 800a2ca <_realloc_r+0x16>
 800a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f7ff b9d3 	b.w	8009670 <_malloc_r>
 800a2ca:	b92a      	cbnz	r2, 800a2d8 <_realloc_r+0x24>
 800a2cc:	f7ff f964 	bl	8009598 <_free_r>
 800a2d0:	4625      	mov	r5, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	f000 f81b 	bl	800a312 <_malloc_usable_size_r>
 800a2dc:	4284      	cmp	r4, r0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	d802      	bhi.n	800a2e8 <_realloc_r+0x34>
 800a2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e6:	d812      	bhi.n	800a30e <_realloc_r+0x5a>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	f7ff f9c0 	bl	8009670 <_malloc_r>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0ed      	beq.n	800a2d2 <_realloc_r+0x1e>
 800a2f6:	42bc      	cmp	r4, r7
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	bf28      	it	cs
 800a2fe:	463a      	movcs	r2, r7
 800a300:	f7ff ffca 	bl	800a298 <memcpy>
 800a304:	4631      	mov	r1, r6
 800a306:	4640      	mov	r0, r8
 800a308:	f7ff f946 	bl	8009598 <_free_r>
 800a30c:	e7e1      	b.n	800a2d2 <_realloc_r+0x1e>
 800a30e:	4635      	mov	r5, r6
 800a310:	e7df      	b.n	800a2d2 <_realloc_r+0x1e>

0800a312 <_malloc_usable_size_r>:
 800a312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a316:	1f18      	subs	r0, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbc      	itt	lt
 800a31c:	580b      	ldrlt	r3, [r1, r0]
 800a31e:	18c0      	addlt	r0, r0, r3
 800a320:	4770      	bx	lr
	...

0800a324 <_init>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	bf00      	nop
 800a328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32a:	bc08      	pop	{r3}
 800a32c:	469e      	mov	lr, r3
 800a32e:	4770      	bx	lr

0800a330 <_fini>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	bf00      	nop
 800a334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a336:	bc08      	pop	{r3}
 800a338:	469e      	mov	lr, r3
 800a33a:	4770      	bx	lr
