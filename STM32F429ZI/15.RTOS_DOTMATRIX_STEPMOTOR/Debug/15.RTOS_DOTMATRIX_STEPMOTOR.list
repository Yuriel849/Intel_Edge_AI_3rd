
15.RTOS_DOTMATRIX_STEPMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800b124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020198  2**0
                  CONTENTS
 10 .bss          000057b8  20000198  20000198  00020198  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005950  20005950  00020198  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026b28  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f1a  00000000  00000000  00046d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fd0  00000000  00000000  0004bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018d2  00000000  00000000  0004dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000607e  00000000  00000000  0004f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025f80  00000000  00000000  00055570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8403  00000000  00000000  0007b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008dac  00000000  00000000  001738f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0017c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000198 	.word	0x20000198
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af4c 	.word	0x0800af4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	0800af4c 	.word	0x0800af4c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	e00f      	b.n	8000518 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <init_dotmatrix+0xb4>)
 8000504:	4413      	add	r3, r2
 8000506:	b2d9      	uxtb	r1, r3
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <init_dotmatrix+0xb8>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b07      	cmp	r3, #7
 800051c:	ddec      	ble.n	80004f8 <init_dotmatrix+0xc>
	}
	for (int i=1; i < number_of_character+1; i++)
 800051e:	2301      	movs	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	e01e      	b.n	8000562 <init_dotmatrix+0x76>
	{
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e015      	b.n	8000556 <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	1e5a      	subs	r2, r3, #1
 800052e:	491c      	ldr	r1, [pc, #112]	; (80005a0 <init_dotmatrix+0xb4>)
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	18ca      	adds	r2, r1, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	7819      	ldrb	r1, [r3, #0]
 8000540:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <init_dotmatrix+0xbc>)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	441a      	add	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b07      	cmp	r3, #7
 800055a:	dde6      	ble.n	800052a <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	3301      	adds	r3, #1
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <init_dotmatrix+0xc0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	429a      	cmp	r2, r3
 800056a:	dddb      	ble.n	8000524 <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i < 8; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e00e      	b.n	8000590 <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // led all off
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <init_dotmatrix+0xc4>)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <init_dotmatrix+0xc8>)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	f002 fcf7 	bl	8002f78 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b07      	cmp	r3, #7
 8000594:	dded      	ble.n	8000572 <init_dotmatrix+0x86>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000060 	.word	0x20000060
 80005a4:	200001b4 	.word	0x200001b4
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	20000128 	.word	0x20000128
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000050 	.word	0x20000050

080005b8 <write_column_data>:
void write_column_data(int col)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 8; i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e01f      	b.n	8000606 <write_column_data+0x4e>
		if (i == col)
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
#else
//---------- common 캐소우드 방식
		if (i == col)
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d10c      	bne.n	80005e8 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // on
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <write_column_data+0x60>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <write_column_data+0x64>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	f002 fcc9 	bl	8002f78 <HAL_GPIO_WritePin>
 80005e6:	e00b      	b.n	8000600 <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // off
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <write_column_data+0x60>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <write_column_data+0x64>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f002 fcbc 	bl	8002f78 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b07      	cmp	r3, #7
 800060a:	dddc      	ble.n	80005c6 <write_column_data+0xe>
#endif
	}
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	20000050 	.word	0x20000050

08000620 <write_row_data>:
// 0b00111110
void write_row_data(unsigned char data)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d = data;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	72fb      	strb	r3, [r7, #11]

	for(int i=0; i < 8; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e023      	b.n	800067c <write_row_data+0x5c>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
#else
//-common 캐소우드
		if ( d & (1 << i))   // 1인경우
 8000634:	7afa      	ldrb	r2, [r7, #11]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	fa42 f303 	asr.w	r3, r2, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00c      	beq.n	800065e <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000644:	4a11      	ldr	r2, [pc, #68]	; (800068c <write_row_data+0x6c>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <write_row_data+0x70>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f002 fc8e 	bl	8002f78 <HAL_GPIO_WritePin>
 800065c:	e00b      	b.n	8000676 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <write_row_data+0x6c>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <write_row_data+0x70>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	2201      	movs	r2, #1
 8000670:	4619      	mov	r1, r3
 8000672:	f002 fc81 	bl	8002f78 <HAL_GPIO_WritePin>
	for(int i=0; i < 8; i++)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b07      	cmp	r3, #7
 8000680:	ddd8      	ble.n	8000634 <write_row_data+0x14>
#endif
	}
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000020 	.word	0x20000020
 8000690:	20000040 	.word	0x20000040

08000694 <dotmatrix_main>:
#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
	static int index=0;  // scroll_buffer의 2차원 index값
	static uint32_t past_time=0;  // 이전 tick값 저장

//	init_dotmatrix();

	uint32_t now = HAL_GetTick();  // 1ms
 800069a:	f001 fdf5 	bl	8002288 <HAL_GetTick>
 800069e:	6078      	str	r0, [r7, #4]
	// 1.처음시작시 past_time=0; now: 500 --> past_time=500
	if (now - past_time >= 500) // 500ms scroll
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <dotmatrix_main+0xec>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ac:	d34d      	bcc.n	800074a <dotmatrix_main+0xb6>
	{
		past_time = now;
 80006ae:	4a34      	ldr	r2, [pc, #208]	; (8000780 <dotmatrix_main+0xec>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
		for (int i=0; i < 8; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e029      	b.n	800070e <dotmatrix_main+0x7a>
		{
			display_data[i] = (scroll_buffer[index][i] >> count) |
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <dotmatrix_main+0xf0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a32      	ldr	r2, [pc, #200]	; (8000788 <dotmatrix_main+0xf4>)
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	441a      	add	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <dotmatrix_main+0xf8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	fa42 f303 	asr.w	r3, r2, r3
 80006d4:	b25a      	sxtb	r2, r3
					(scroll_buffer[index+1][i] << 8 - count);
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <dotmatrix_main+0xf0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	492a      	ldr	r1, [pc, #168]	; (8000788 <dotmatrix_main+0xf4>)
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4419      	add	r1, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	440b      	add	r3, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <dotmatrix_main+0xf8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1c3 0308 	rsb	r3, r3, #8
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
			display_data[i] = (scroll_buffer[index][i] >> count) |
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <dotmatrix_main+0xfc>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		for (int i=0; i < 8; i++)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b07      	cmp	r3, #7
 8000712:	ddd2      	ble.n	80006ba <dotmatrix_main+0x26>
		}
		if (++count == 8) // 8칼람을 다 처리 했으면 다음 scroll_buffer로 이동
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <dotmatrix_main+0xf8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <dotmatrix_main+0xf8>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <dotmatrix_main+0xf8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d111      	bne.n	800074a <dotmatrix_main+0xb6>
		{
			count =0;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <dotmatrix_main+0xf8>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
			index++;  // 다음 scroll_buffer로 이동
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <dotmatrix_main+0xf0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <dotmatrix_main+0xf0>)
 8000734:	6013      	str	r3, [r2, #0]
			if (index == number_of_character+1) index=0;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <dotmatrix_main+0x100>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <dotmatrix_main+0xf0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d102      	bne.n	800074a <dotmatrix_main+0xb6>
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <dotmatrix_main+0xf0>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
			// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
		}
	}
	for (int i=0; i < 8; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	e00f      	b.n	8000770 <dotmatrix_main+0xdc>
	{
		// 공통 양극 방식
		// column에는 0을 ROW에는 1을 출력해야 해당 LED가 on된다.
		write_column_data(i);
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f7ff ff31 	bl	80005b8 <write_column_data>
		write_row_data(display_data[i]);
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <dotmatrix_main+0xfc>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff5e 	bl	8000620 <write_row_data>
		HAL_Delay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f001 fd9b 	bl	80022a0 <HAL_Delay>
	for (int i=0; i < 8; i++)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddec      	ble.n	8000750 <dotmatrix_main+0xbc>
	}
	return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000034c 	.word	0x2000034c
 8000784:	20000350 	.word	0x20000350
 8000788:	200001bc 	.word	0x200001bc
 800078c:	20000354 	.word	0x20000354
 8000790:	200001b4 	.word	0x200001b4
 8000794:	20000128 	.word	0x20000128

08000798 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <__io_putchar+0x20>)
 80007aa:	f005 fcca 	bl	8006142 <HAL_UART_Transmit>

  return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200007a4 	.word	0x200007a4

080007bc <delay_us>:
//----------  printf end ----------

void delay_us(unsigned long us)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <delay_us+0x2c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 80007cc:	bf00      	nop
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <delay_us+0x2c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d8f9      	bhi.n	80007ce <delay_us+0x12>
		;
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	2000075c 	.word	0x2000075c

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f001 fd14 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f89c 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 fc2a 	bl	8001050 <MX_GPIO_Init>
  MX_ETH_Init();
 80007fc:	f000 f904 	bl	8000a08 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000800:	f000 fba4 	bl	8000f4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000804:	f000 fbf6 	bl	8000ff4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000808:	f000 fbca 	bl	8000fa0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800080c:	f000 fb56 	bl	8000ebc <MX_TIM10_Init>
  MX_TIM11_Init();
 8000810:	f000 fb78 	bl	8000f04 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000814:	f000 fa3a 	bl	8000c8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000818:	f000 fa8c 	bl	8000d34 <MX_TIM4_Init>
  MX_TIM2_Init();
 800081c:	f000 f9dc 	bl	8000bd8 <MX_TIM2_Init>
  MX_RTC_Init();
 8000820:	f000 f980 	bl	8000b24 <MX_RTC_Init>
  MX_TIM5_Init();
 8000824:	f000 fad4 	bl	8000dd0 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000828:	f000 f93c 	bl	8000aa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 800082c:	2201      	movs	r2, #1
 800082e:	4927      	ldr	r1, [pc, #156]	; (80008cc <main+0xe0>)
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <main+0xe4>)
 8000832:	f005 fd18 	bl	8006266 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000836:	2201      	movs	r2, #1
 8000838:	4926      	ldr	r1, [pc, #152]	; (80008d4 <main+0xe8>)
 800083a:	4827      	ldr	r0, [pc, #156]	; (80008d8 <main+0xec>)
 800083c:	f005 fd13 	bl	8006266 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000840:	4826      	ldr	r0, [pc, #152]	; (80008dc <main+0xf0>)
 8000842:	f003 ffc1 	bl	80047c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000846:	4826      	ldr	r0, [pc, #152]	; (80008e0 <main+0xf4>)
 8000848:	f003 ffbe 	bl	80047c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 800084c:	2100      	movs	r1, #0
 800084e:	4825      	ldr	r0, [pc, #148]	; (80008e4 <main+0xf8>)
 8000850:	f004 faa8 	bl	8004da4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000854:	2100      	movs	r1, #0
 8000856:	4824      	ldr	r0, [pc, #144]	; (80008e8 <main+0xfc>)
 8000858:	f004 f93e 	bl	8004ad8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 800085c:	2100      	movs	r1, #0
 800085e:	4823      	ldr	r0, [pc, #140]	; (80008ec <main+0x100>)
 8000860:	f004 f872 	bl	8004948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000864:	210c      	movs	r1, #12
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <main+0x104>)
 8000868:	f004 f86e 	bl	8004948 <HAL_TIM_PWM_Start>

//  DHT11_Init();
//  i2c_lcd_init();
  init_dotmatrix();
 800086c:	f7ff fe3e 	bl	80004ec <init_dotmatrix>

  TIM10_10ms_counter=0;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <main+0x108>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000876:	f006 ffd5 	bl	8007824 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <main+0x10c>)
 800087c:	f007 f8c9 	bl	8007a12 <osMutexNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <main+0x110>)
 8000884:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <main+0x114>)
 8000888:	2100      	movs	r1, #0
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <main+0x118>)
 800088c:	f007 f814 	bl	80078b8 <osThreadNew>
 8000890:	4603      	mov	r3, r0
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <main+0x11c>)
 8000894:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000896:	4a1d      	ldr	r2, [pc, #116]	; (800090c <main+0x120>)
 8000898:	2100      	movs	r1, #0
 800089a:	481d      	ldr	r0, [pc, #116]	; (8000910 <main+0x124>)
 800089c:	f007 f80c 	bl	80078b8 <osThreadNew>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <main+0x128>)
 80008a4:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <main+0x12c>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	481c      	ldr	r0, [pc, #112]	; (800091c <main+0x130>)
 80008ac:	f007 f804 	bl	80078b8 <osThreadNew>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <main+0x134>)
 80008b4:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <main+0x138>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <main+0x13c>)
 80008bc:	f006 fffc 	bl	80078b8 <osThreadNew>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a1a      	ldr	r2, [pc, #104]	; (800092c <main+0x140>)
 80008c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c6:	f006 ffd1 	bl	800786c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0xde>
 80008cc:	20000d4c 	.word	0x20000d4c
 80008d0:	200007a4 	.word	0x200007a4
 80008d4:	20000d4d 	.word	0x20000d4d
 80008d8:	200007e8 	.word	0x200007e8
 80008dc:	20000714 	.word	0x20000714
 80008e0:	2000075c 	.word	0x2000075c
 80008e4:	2000063c 	.word	0x2000063c
 80008e8:	20000684 	.word	0x20000684
 80008ec:	200005f4 	.word	0x200005f4
 80008f0:	200006cc 	.word	0x200006cc
 80008f4:	20000d50 	.word	0x20000d50
 80008f8:	0800b0ec 	.word	0x0800b0ec
 80008fc:	20000d48 	.word	0x20000d48
 8000900:	0800b05c 	.word	0x0800b05c
 8000904:	080012c1 	.word	0x080012c1
 8000908:	20000d38 	.word	0x20000d38
 800090c:	0800b080 	.word	0x0800b080
 8000910:	080012d1 	.word	0x080012d1
 8000914:	20000d3c 	.word	0x20000d3c
 8000918:	0800b0a4 	.word	0x0800b0a4
 800091c:	080012e5 	.word	0x080012e5
 8000920:	20000d40 	.word	0x20000d40
 8000924:	0800b0c8 	.word	0x0800b0c8
 8000928:	080012f9 	.word	0x080012f9
 800092c:	20000d44 	.word	0x20000d44

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f009 ffea 	bl	800a918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <SystemClock_Config+0xd0>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <SystemClock_Config+0xd0>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <SystemClock_Config+0xd0>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <SystemClock_Config+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <SystemClock_Config+0xd4>)
 800097a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <SystemClock_Config+0xd4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800098c:	2309      	movs	r3, #9
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a8:	23a8      	movs	r3, #168	; 0xa8
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fdf7 	bl	80035ac <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c4:	f000 fcc6 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2105      	movs	r1, #5
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 f858 	bl	8003a9c <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009f2:	f000 fcaf 	bl	8001354 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	; 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <MX_ETH_Init+0x88>)
 8000a10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a20:	22e1      	movs	r2, #225	; 0xe1
 8000a22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <MX_ETH_Init+0x8c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a42:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <MX_ETH_Init+0x90>)
 8000a48:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_ETH_Init+0x94>)
 8000a4e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a56:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_ETH_Init+0x84>)
 8000a5a:	f001 fdb9 	bl	80025d0 <HAL_ETH_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a64:	f000 fc76 	bl	8001354 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a68:	2238      	movs	r2, #56	; 0x38
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_ETH_Init+0x98>)
 8000a6e:	f009 ff53 	bl	800a918 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_ETH_Init+0x98>)
 8000a74:	2221      	movs	r2, #33	; 0x21
 8000a76:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_ETH_Init+0x98>)
 8000a7a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a7e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_ETH_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200004d0 	.word	0x200004d0
 8000a90:	40028000 	.word	0x40028000
 8000a94:	20000d58 	.word	0x20000d58
 8000a98:	20000430 	.word	0x20000430
 8000a9c:	20000390 	.word	0x20000390
 8000aa0:	20000358 	.word	0x20000358

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ae2:	f002 fa87 	bl	8002ff4 <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fc32 	bl	8001354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000af4:	f002 fbc2 	bl	800327c <HAL_I2CEx_ConfigAnalogFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000afe:	f000 fc29 	bl	8001354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000b06:	f002 fbf5 	bl	80032f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fc20 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000580 	.word	0x20000580
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b3e:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <MX_RTC_Init+0xb0>)
 8000b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b4a:	227f      	movs	r2, #127	; 0x7f
 8000b4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b66:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b68:	f003 fbaa 	bl	80042c0 <HAL_RTC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 fbef 	bl	8001354 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000b76:	2309      	movs	r3, #9
 8000b78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000b7a:	2338      	movs	r3, #56	; 0x38
 8000b7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000b92:	f003 fc0b 	bl	80043ac <HAL_RTC_SetTime>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 fbda 	bl	8001354 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000ba8:	2316      	movs	r3, #22
 8000baa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000bac:	2323      	movs	r3, #35	; 0x23
 8000bae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_RTC_Init+0xac>)
 8000bb8:	f003 fc92 	bl	80044e0 <HAL_RTC_SetDate>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000bc2:	f000 fbc7 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200005d4 	.word	0x200005d4
 8000bd4:	40002800 	.word	0x40002800

08000bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c04:	f240 628f 	movw	r2, #1679	; 0x68f
 8000c08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c26:	f003 fe3f 	bl	80048a8 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c30:	f000 fb90 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4619      	mov	r1, r3
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c44:	f005 f9a0 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c4e:	f000 fb81 	bl	8001354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000c56:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c6c:	f004 fb66 	bl	800533c <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c76:	f000 fb6d 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM2_Init+0xb0>)
 8000c7c:	f000 fefc 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200005f4 	.word	0x200005f4

08000c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <MX_TIM3_Init+0xa4>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cb0:	2253      	movs	r2, #83	; 0x53
 8000cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cd0:	f004 f818 	bl	8004d04 <HAL_TIM_IC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 fb3b 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000cee:	f005 f94b 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f000 fb2c 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_TIM3_Init+0xa0>)
 8000d14:	f004 fa76 	bl	8005204 <HAL_TIM_IC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d1e:	f000 fb19 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000063c 	.word	0x2000063c
 8000d30:	40000400 	.word	0x40000400

08000d34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <MX_TIM4_Init+0x98>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d58:	f240 3247 	movw	r2, #839	; 0x347
 8000d5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d66:	2263      	movs	r2, #99	; 0x63
 8000d68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d78:	f003 fcd7 	bl	800472a <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 fae7 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000d94:	f004 fb94 	bl	80054c0 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fad9 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM4_Init+0x94>)
 8000db0:	f005 f8ea 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000dba:	f000 facb 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000684 	.word	0x20000684
 8000dcc:	40000800 	.word	0x40000800

08000dd0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e00:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <MX_TIM5_Init+0xe8>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e08:	2233      	movs	r2, #51	; 0x33
 8000e0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e14:	f240 128f 	movw	r2, #399	; 0x18f
 8000e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e28:	f003 fc7f 	bl	800472a <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000e32:	f000 fa8f 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e44:	f004 fb3c 	bl	80054c0 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e4e:	f000 fa81 	bl	8001354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e54:	f003 fd28 	bl	80048a8 <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e5e:	f000 fa79 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e72:	f005 f889 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e7c:	f000 fa6a 	bl	8001354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000e84:	23c7      	movs	r3, #199	; 0xc7
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	220c      	movs	r2, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000e98:	f004 fa50 	bl	800533c <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000ea2:	f000 fa57 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM5_Init+0xe4>)
 8000ea8:	f000 fde6 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 8000eac:	bf00      	nop
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200006cc 	.word	0x200006cc
 8000eb8:	40000c00 	.word	0x40000c00

08000ebc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_TIM10_Init+0x44>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ec8:	22a7      	movs	r2, #167	; 0xa7
 8000eca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ed4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ed8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_TIM10_Init+0x40>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM10_Init+0x40>)
 8000ee8:	f003 fc1f 	bl	800472a <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000ef2:	f000 fa2f 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000714 	.word	0x20000714
 8000f00:	40014400 	.word	0x40014400

08000f04 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_TIM11_Init+0x44>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f10:	22a7      	movs	r2, #167	; 0xa7
 8000f12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM11_Init+0x40>)
 8000f30:	f003 fbfb 	bl	800472a <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f3a:	f000 fa0b 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000075c 	.word	0x2000075c
 8000f48:	40014800 	.word	0x40014800

08000f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART3_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f84:	f005 f890 	bl	80060a8 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 f9e1 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200007a4 	.word	0x200007a4
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART6_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fd8:	f005 f866 	bl	80060a8 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f9b7 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200007e8 	.word	0x200007e8
 8000ff0:	40011400 	.word	0x40011400

08000ff4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2204      	movs	r2, #4
 8001004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2202      	movs	r2, #2
 800100a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2202      	movs	r2, #2
 8001016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	2201      	movs	r2, #1
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001038:	f002 f99b 	bl	8003372 <HAL_PCD_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001042:	f000 f987 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000082c 	.word	0x2000082c

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	4b8d      	ldr	r3, [pc, #564]	; (80012a0 <MX_GPIO_Init+0x250>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a8c      	ldr	r2, [pc, #560]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b8a      	ldr	r3, [pc, #552]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	4b86      	ldr	r3, [pc, #536]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a85      	ldr	r2, [pc, #532]	; (80012a0 <MX_GPIO_Init+0x250>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b7f      	ldr	r3, [pc, #508]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a7e      	ldr	r2, [pc, #504]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b7c      	ldr	r3, [pc, #496]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a70      	ldr	r2, [pc, #448]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b6e      	ldr	r3, [pc, #440]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <MX_GPIO_Init+0x250>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a62      	ldr	r2, [pc, #392]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <MX_GPIO_Init+0x250>)
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x250>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800114c:	4855      	ldr	r0, [pc, #340]	; (80012a4 <MX_GPIO_Init+0x254>)
 800114e:	f001 ff13 	bl	8002f78 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	4854      	ldr	r0, [pc, #336]	; (80012a8 <MX_GPIO_Init+0x258>)
 8001158:	f001 ff0e 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001162:	4852      	ldr	r0, [pc, #328]	; (80012ac <MX_GPIO_Init+0x25c>)
 8001164:	f001 ff08 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116e:	4850      	ldr	r0, [pc, #320]	; (80012b0 <MX_GPIO_Init+0x260>)
 8001170:	f001 ff02 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f647 01ff 	movw	r1, #30975	; 0x78ff
 800117a:	484e      	ldr	r0, [pc, #312]	; (80012b4 <MX_GPIO_Init+0x264>)
 800117c:	f001 fefc 	bl	8002f78 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	484c      	ldr	r0, [pc, #304]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001186:	f001 fef7 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800118a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4840      	ldr	r0, [pc, #256]	; (80012a4 <MX_GPIO_Init+0x254>)
 80011a4:	f001 fd3c 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	483f      	ldr	r0, [pc, #252]	; (80012bc <MX_GPIO_Init+0x26c>)
 80011c0:	f001 fd2e 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4833      	ldr	r0, [pc, #204]	; (80012a8 <MX_GPIO_Init+0x258>)
 80011dc:	f001 fd20 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <MX_GPIO_Init+0x25c>)
 80011fa:	f001 fd11 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4826      	ldr	r0, [pc, #152]	; (80012b0 <MX_GPIO_Init+0x260>)
 8001218:	f001 fd02 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 800121c:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <MX_GPIO_Init+0x254>)
 8001232:	f001 fcf5 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001236:	f647 03ff 	movw	r3, #30975	; 0x78ff
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0x264>)
 8001250:	f001 fce6 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_GPIO_Init+0x268>)
 800126c:	f001 fcd8 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_GPIO_Init+0x268>)
 8001284:	f001 fccc 	bl	8002c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	2028      	movs	r0, #40	; 0x28
 800128e:	f001 f8e3 	bl	8002458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f001 f8fc 	bl	8002490 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40021400 	.word	0x40021400
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40020800 	.word	0x40020800

080012c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fb87 	bl	80079dc <osDelay>
 80012ce:	e7fb      	b.n	80012c8 <StartDefaultTask+0x8>

080012d0 <Task1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)
  {
	dotmatrix_main();
 80012d8:	f7ff f9dc 	bl	8000694 <dotmatrix_main>
    osDelay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f006 fb7d 	bl	80079dc <osDelay>
	dotmatrix_main();
 80012e2:	e7f9      	b.n	80012d8 <Task1_func+0x8>

080012e4 <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main_test();
 80012ec:	f000 f847 	bl	800137e <stepmotor_main_test>
    osDelay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f006 fb73 	bl	80079dc <osDelay>
	stepmotor_main_test();
 80012f6:	e7f9      	b.n	80012ec <Task2_func+0x8>

080012f8 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f006 fb6b 	bl	80079dc <osDelay>
 8001306:	e7fb      	b.n	8001300 <Task3_func+0x8>

08001308 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d109      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001322:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800132c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001338:	f000 ff92 	bl	8002260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40014400 	.word	0x40014400
 8001348:	20000d50 	.word	0x20000d50
 800134c:	20000d54 	.word	0x20000d54
 8001350:	40001000 	.word	0x40001000

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>

0800135e <set_rpm>:
//                           = 4612ms
//                           = 4.6초
// 60초 / 4.6(1회전시 소요시간 초) ==> 13회전
// 시계방향으로 1회전 <---> 반시계방향으로 1회전
void set_rpm(int rpm) // rpm 1~ 13
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001366:	f643 1238 	movw	r2, #14648	; 0x3938
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fa23 	bl	80007bc <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <stepmotor_main_test>:
void stepmotor_main_test(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
	while(1)
	{
		for(int i=0; i < 512; i++)  //시계방향 1회전
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e011      	b.n	80013ae <stepmotor_main_test+0x30>
		{
			for (int j=0; j < 8; j++)
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	e008      	b.n	80013a2 <stepmotor_main_test+0x24>
			{
				stepmotor_drive(j);
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f000 f82b 	bl	80013ec <stepmotor_drive>
				set_rpm(13);
 8001396:	200d      	movs	r0, #13
 8001398:	f7ff ffe1 	bl	800135e <set_rpm>
			for (int j=0; j < 8; j++)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	ddf3      	ble.n	8001390 <stepmotor_main_test+0x12>
		for(int i=0; i < 512; i++)  //시계방향 1회전
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b4:	dbe9      	blt.n	800138a <stepmotor_main_test+0xc>
			}
		}

		for(int i=0; i < 512; i++)  //반시계방향 1회전
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e011      	b.n	80013e0 <stepmotor_main_test+0x62>
		{
			for (int j=7; j >= 0; j--)
 80013bc:	2307      	movs	r3, #7
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	e008      	b.n	80013d4 <stepmotor_main_test+0x56>
			{
				stepmotor_drive(j);
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f000 f812 	bl	80013ec <stepmotor_drive>
				set_rpm(13);  // rpm값만큼 wait
 80013c8:	200d      	movs	r0, #13
 80013ca:	f7ff ffc8 	bl	800135e <set_rpm>
			for (int j=7; j >= 0; j--)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	daf3      	bge.n	80013c2 <stepmotor_main_test+0x44>
		for(int i=0; i < 512; i++)  //반시계방향 1회전
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e6:	dbe9      	blt.n	80013bc <stepmotor_main_test+0x3e>
		for(int i=0; i < 512; i++)  //시계방향 1회전
 80013e8:	e7cc      	b.n	8001384 <stepmotor_main_test+0x6>
	...

080013ec <stepmotor_drive>:
			}
		}
	}
}
void stepmotor_drive(int step)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	switch(step){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	f200 80dc 	bhi.w	80015b4 <stepmotor_drive+0x1c8>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <stepmotor_drive+0x18>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001425 	.word	0x08001425
 8001408:	08001457 	.word	0x08001457
 800140c:	08001489 	.word	0x08001489
 8001410:	080014bb 	.word	0x080014bb
 8001414:	080014ed 	.word	0x080014ed
 8001418:	0800151f 	.word	0x0800151f
 800141c:	08001551 	.word	0x08001551
 8001420:	08001583 	.word	0x08001583
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4864      	ldr	r0, [pc, #400]	; (80015bc <stepmotor_drive+0x1d0>)
 800142c:	f001 fda4 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4861      	ldr	r0, [pc, #388]	; (80015bc <stepmotor_drive+0x1d0>)
 8001438:	f001 fd9e 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	485e      	ldr	r0, [pc, #376]	; (80015bc <stepmotor_drive+0x1d0>)
 8001444:	f001 fd98 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	485b      	ldr	r0, [pc, #364]	; (80015bc <stepmotor_drive+0x1d0>)
 8001450:	f001 fd92 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 8001454:	e0ae      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <stepmotor_drive+0x1d0>)
 800145e:	f001 fd8b 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4854      	ldr	r0, [pc, #336]	; (80015bc <stepmotor_drive+0x1d0>)
 800146a:	f001 fd85 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001474:	4851      	ldr	r0, [pc, #324]	; (80015bc <stepmotor_drive+0x1d0>)
 8001476:	f001 fd7f 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001480:	484e      	ldr	r0, [pc, #312]	; (80015bc <stepmotor_drive+0x1d0>)
 8001482:	f001 fd79 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 8001486:	e095      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148e:	484b      	ldr	r0, [pc, #300]	; (80015bc <stepmotor_drive+0x1d0>)
 8001490:	f001 fd72 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	4848      	ldr	r0, [pc, #288]	; (80015bc <stepmotor_drive+0x1d0>)
 800149c:	f001 fd6c 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	4845      	ldr	r0, [pc, #276]	; (80015bc <stepmotor_drive+0x1d0>)
 80014a8:	f001 fd66 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4842      	ldr	r0, [pc, #264]	; (80015bc <stepmotor_drive+0x1d0>)
 80014b4:	f001 fd60 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 80014b8:	e07c      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	483e      	ldr	r0, [pc, #248]	; (80015bc <stepmotor_drive+0x1d0>)
 80014c2:	f001 fd59 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014cc:	483b      	ldr	r0, [pc, #236]	; (80015bc <stepmotor_drive+0x1d0>)
 80014ce:	f001 fd53 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	4838      	ldr	r0, [pc, #224]	; (80015bc <stepmotor_drive+0x1d0>)
 80014da:	f001 fd4d 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e4:	4835      	ldr	r0, [pc, #212]	; (80015bc <stepmotor_drive+0x1d0>)
 80014e6:	f001 fd47 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 80014ea:	e063      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f2:	4832      	ldr	r0, [pc, #200]	; (80015bc <stepmotor_drive+0x1d0>)
 80014f4:	f001 fd40 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fe:	482f      	ldr	r0, [pc, #188]	; (80015bc <stepmotor_drive+0x1d0>)
 8001500:	f001 fd3a 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <stepmotor_drive+0x1d0>)
 800150c:	f001 fd34 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001516:	4829      	ldr	r0, [pc, #164]	; (80015bc <stepmotor_drive+0x1d0>)
 8001518:	f001 fd2e 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 800151c:	e04a      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001524:	4825      	ldr	r0, [pc, #148]	; (80015bc <stepmotor_drive+0x1d0>)
 8001526:	f001 fd27 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <stepmotor_drive+0x1d0>)
 8001532:	f001 fd21 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	481f      	ldr	r0, [pc, #124]	; (80015bc <stepmotor_drive+0x1d0>)
 800153e:	f001 fd1b 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	481c      	ldr	r0, [pc, #112]	; (80015bc <stepmotor_drive+0x1d0>)
 800154a:	f001 fd15 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 800154e:	e031      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001556:	4819      	ldr	r0, [pc, #100]	; (80015bc <stepmotor_drive+0x1d0>)
 8001558:	f001 fd0e 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <stepmotor_drive+0x1d0>)
 8001564:	f001 fd08 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <stepmotor_drive+0x1d0>)
 8001570:	f001 fd02 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <stepmotor_drive+0x1d0>)
 800157c:	f001 fcfc 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 8001580:	e018      	b.n	80015b4 <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <stepmotor_drive+0x1d0>)
 800158a:	f001 fcf5 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <stepmotor_drive+0x1d0>)
 8001596:	f001 fcef 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <stepmotor_drive+0x1d0>)
 80015a2:	f001 fce9 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <stepmotor_drive+0x1d0>)
 80015ae:	f001 fce3 	bl	8002f78 <HAL_GPIO_WritePin>
		break;
 80015b2:	bf00      	nop
	}
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_MspInit+0x54>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_MspInit+0x54>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x54>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_MspInit+0x54>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_MspInit+0x54>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_MspInit+0x54>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	210f      	movs	r1, #15
 8001602:	f06f 0001 	mvn.w	r0, #1
 8001606:	f000 ff27 	bl	8002458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_ETH_MspInit+0x174>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 80a4 	bne.w	8001784 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a44      	ldr	r2, [pc, #272]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800167e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a36      	ldr	r2, [pc, #216]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001700:	2332      	movs	r3, #50	; 0x32
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001710:	230b      	movs	r3, #11
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	481e      	ldr	r0, [pc, #120]	; (8001794 <HAL_ETH_MspInit+0x17c>)
 800171c:	f001 fa80 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001720:	2386      	movs	r3, #134	; 0x86
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001730:	230b      	movs	r3, #11
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <HAL_ETH_MspInit+0x180>)
 800173c:	f001 fa70 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001752:	230b      	movs	r3, #11
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <HAL_ETH_MspInit+0x184>)
 800175e:	f001 fa5f 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001762:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001774:	230b      	movs	r3, #11
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <HAL_ETH_MspInit+0x188>)
 8001780:	f001 fa4e 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40028000 	.word	0x40028000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40021800 	.word	0x40021800

080017a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f4:	2304      	movs	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <HAL_I2C_MspInit+0x8c>)
 8001800:	f001 fa0e 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_I2C_MspInit+0x88>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_I2C_MspInit+0x88>)
 800180e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_I2C_MspInit+0x88>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40005400 	.word	0x40005400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	2230      	movs	r2, #48	; 0x30
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f009 f867 	bl	800a918 <memset>
  if(hrtc->Instance==RTC)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_RTC_MspInit+0x4c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001854:	2320      	movs	r3, #32
 8001856:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fb6c 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800186e:	f7ff fd71 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RTC_MspInit+0x50>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40002800 	.word	0x40002800
 8001884:	42470e3c 	.word	0x42470e3c

08001888 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001898:	d115      	bne.n	80018c6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_TIM_PWM_MspInit+0x48>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_TIM_PWM_MspInit+0x48>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_TIM_PWM_MspInit+0x48>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 fdcc 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c0:	201c      	movs	r0, #28
 80018c2:	f000 fde5 	bl	8002490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_TIM_IC_MspInit+0x94>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d133      	bne.n	800195e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_TIM_IC_MspInit+0x98>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193e:	2302      	movs	r3, #2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_TIM_IC_MspInit+0x9c>)
 800194a:	f001 f969 	bl	8002c20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2105      	movs	r1, #5
 8001952:	201d      	movs	r0, #29
 8001954:	f000 fd80 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001958:	201d      	movs	r0, #29
 800195a:	f000 fd99 	bl	8002490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40000400 	.word	0x40000400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_TIM_Base_MspInit+0xf0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d116      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a36      	ldr	r2, [pc, #216]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2105      	movs	r1, #5
 80019a6:	201e      	movs	r0, #30
 80019a8:	f000 fd56 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ac:	201e      	movs	r0, #30
 80019ae:	f000 fd6f 	bl	8002490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019b2:	e052      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <HAL_TIM_Base_MspInit+0xf8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d116      	bne.n	80019ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	2032      	movs	r0, #50	; 0x32
 80019e0:	f000 fd3a 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019e4:	2032      	movs	r0, #50	; 0x32
 80019e6:	f000 fd53 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 80019ea:	e036      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_TIM_Base_MspInit+0xfc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d116      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	2019      	movs	r0, #25
 8001a18:	f000 fd1e 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a1c:	2019      	movs	r0, #25
 8001a1e:	f000 fd37 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 8001a22:	e01a      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_TIM_Base_MspInit+0x100>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0xf4>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	201a      	movs	r0, #26
 8001a50:	f000 fd02 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a54:	201a      	movs	r0, #26
 8001a56:	f000 fd1b 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40014400 	.word	0x40014400
 8001a74:	40014800 	.word	0x40014800

08001a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d11e      	bne.n	8001ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4816      	ldr	r0, [pc, #88]	; (8001b2c <HAL_TIM_MspPostInit+0xb4>)
 8001ad2:	f001 f8a5 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ad6:	e022      	b.n	8001b1e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_TIM_MspPostInit+0xb8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d11d      	bne.n	8001b1e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001afe:	2308      	movs	r3, #8
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <HAL_TIM_MspPostInit+0xb4>)
 8001b1a:	f001 f881 	bl	8002c20 <HAL_GPIO_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_UART_MspInit+0x108>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d135      	bne.n	8001bc2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a38      	ldr	r2, [pc, #224]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4826      	ldr	r0, [pc, #152]	; (8001c44 <HAL_UART_MspInit+0x110>)
 8001bac:	f001 f838 	bl	8002c20 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	2027      	movs	r0, #39	; 0x27
 8001bb6:	f000 fc4f 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bba:	2027      	movs	r0, #39	; 0x27
 8001bbc:	f000 fc68 	bl	8002490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bc0:	e038      	b.n	8001c34 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_UART_MspInit+0x114>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d133      	bne.n	8001c34 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	6453      	str	r3, [r2, #68]	; 0x44
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_MspInit+0x10c>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c04:	23c0      	movs	r3, #192	; 0xc0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c14:	2308      	movs	r3, #8
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480b      	ldr	r0, [pc, #44]	; (8001c4c <HAL_UART_MspInit+0x118>)
 8001c20:	f000 fffe 	bl	8002c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2105      	movs	r1, #5
 8001c28:	2047      	movs	r0, #71	; 0x47
 8001c2a:	f000 fc15 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c2e:	2047      	movs	r0, #71	; 0x47
 8001c30:	f000 fc2e 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40020800 	.word	0x40020800

08001c50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c70:	d13f      	bne.n	8001cf2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4815      	ldr	r0, [pc, #84]	; (8001d00 <HAL_PCD_MspInit+0xb0>)
 8001cac:	f000 ffb8 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <HAL_PCD_MspInit+0xb0>)
 8001cc6:	f000 ffab 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	6353      	str	r3, [r2, #52]	; 0x34
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_PCD_MspInit+0xac>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000

08001d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_InitTick+0xe4>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <HAL_InitTick+0xe4>)
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_InitTick+0xe4>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d30:	f107 0210 	add.w	r2, r7, #16
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f8ce 	bl	8003edc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d4a:	f002 f89f 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8001d4e:	6378      	str	r0, [r7, #52]	; 0x34
 8001d50:	e004      	b.n	8001d5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d52:	f002 f89b 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8001d56:	4603      	mov	r3, r0
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	4a23      	ldr	r2, [pc, #140]	; (8001dec <HAL_InitTick+0xe8>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	0c9b      	lsrs	r3, r3, #18
 8001d66:	3b01      	subs	r3, #1
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_InitTick+0xec>)
 8001d6c:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_InitTick+0xf0>)
 8001d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_InitTick+0xec>)
 8001d72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_InitTick+0xec>)
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_InitTick+0xec>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_InitTick+0xec>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_InitTick+0xec>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d90:	4817      	ldr	r0, [pc, #92]	; (8001df0 <HAL_InitTick+0xec>)
 8001d92:	f002 fcca 	bl	800472a <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11b      	bne.n	8001ddc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001da4:	4812      	ldr	r0, [pc, #72]	; (8001df0 <HAL_InitTick+0xec>)
 8001da6:	f002 fd0f 	bl	80047c8 <HAL_TIM_Base_Start_IT>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d111      	bne.n	8001ddc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db8:	2036      	movs	r0, #54	; 0x36
 8001dba:	f000 fb69 	bl	8002490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d808      	bhi.n	8001dd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	2036      	movs	r0, #54	; 0x36
 8001dca:	f000 fb45 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_InitTick+0xf4>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e002      	b.n	8001ddc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3738      	adds	r7, #56	; 0x38
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	431bde83 	.word	0x431bde83
 8001df0:	20000d60 	.word	0x20000d60
 8001df4:	40001000 	.word	0x40001000
 8001df8:	20000130 	.word	0x20000130

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e2e:	f003 f8e1 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000714 	.word	0x20000714

08001e3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e42:	f003 f8d7 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000075c 	.word	0x2000075c

08001e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM2_IRQHandler+0x10>)
 8001e56:	f003 f8cd 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200005f4 	.word	0x200005f4

08001e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM3_IRQHandler+0x10>)
 8001e6a:	f003 f8c3 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000063c 	.word	0x2000063c

08001e78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM4_IRQHandler+0x10>)
 8001e7e:	f003 f8b9 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000684 	.word	0x20000684

08001e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART3_IRQHandler+0x10>)
 8001e92:	f004 fa19 	bl	80062c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200007a4 	.word	0x200007a4

08001ea0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ea4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea8:	f001 f880 	bl	8002fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM5_IRQHandler+0x10>)
 8001eb6:	f003 f89d 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200006cc 	.word	0x200006cc

08001ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM6_DAC_IRQHandler+0x10>)
 8001eca:	f003 f893 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000d60 	.word	0x20000d60

08001ed8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <USART6_IRQHandler+0x10>)
 8001ede:	f004 f9f3 	bl	80062c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200007e8 	.word	0x200007e8

08001eec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e00a      	b.n	8001f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001efe:	f3af 8000 	nop.w
 8001f02:	4601      	mov	r1, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	60ba      	str	r2, [r7, #8]
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf0      	blt.n	8001efe <_read+0x12>
  }

  return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e009      	b.n	8001f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fc29 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf1      	blt.n	8001f38 <_write+0x12>
  }
  return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_close>:

int _close(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	605a      	str	r2, [r3, #4]
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f008 fd32 	bl	800aa60 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20030000 	.word	0x20030000
 8002028:	00000400 	.word	0x00000400
 800202c:	20000da8 	.word	0x20000da8
 8002030:	20005950 	.word	0x20005950

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_UART_RxCpltCallback+0xd4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b27      	cmp	r3, #39	; 0x27
 800206e:	dc1d      	bgt.n	80020ac <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_UART_RxCpltCallback+0xdc>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d003      	beq.n	8002080 <HAL_UART_RxCpltCallback+0x28>
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_UART_RxCpltCallback+0xdc>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b0d      	cmp	r3, #13
 800207e:	d10b      	bne.n	8002098 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <HAL_UART_RxCpltCallback+0xe0>)
 8002086:	2100      	movs	r1, #0
 8002088:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_UART_RxCpltCallback+0xe4>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e00f      	b.n	80020b8 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4924      	ldr	r1, [pc, #144]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 80020a0:	600a      	str	r2, [r1, #0]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_UART_RxCpltCallback+0xdc>)
 80020a4:	7811      	ldrb	r1, [r2, #0]
 80020a6:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_UART_RxCpltCallback+0xe0>)
 80020a8:	54d1      	strb	r1, [r2, r3]
 80020aa:	e005      	b.n	80020b8 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <HAL_UART_RxCpltCallback+0xe8>)
 80020b4:	f008 fb50 	bl	800a758 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80020b8:	2201      	movs	r2, #1
 80020ba:	491e      	ldr	r1, [pc, #120]	; (8002134 <HAL_UART_RxCpltCallback+0xdc>)
 80020bc:	481b      	ldr	r0, [pc, #108]	; (800212c <HAL_UART_RxCpltCallback+0xd4>)
 80020be:	f004 f8d2 	bl	8006266 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_UART_RxCpltCallback+0xec>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_UART_RxCpltCallback+0xf0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b27      	cmp	r3, #39	; 0x27
 80020d0:	dc1d      	bgt.n	800210e <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_UART_RxCpltCallback+0xf4>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d003      	beq.n	80020e2 <HAL_UART_RxCpltCallback+0x8a>
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_UART_RxCpltCallback+0xf4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b0d      	cmp	r3, #13
 80020e0:	d10b      	bne.n	80020fa <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_UART_RxCpltCallback+0xd8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <HAL_UART_RxCpltCallback+0xf8>)
 80020e8:	2100      	movs	r1, #0
 80020ea:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_UART_RxCpltCallback+0xfc>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_RxCpltCallback+0xf0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e00f      	b.n	800211a <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_UART_RxCpltCallback+0xf0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4911      	ldr	r1, [pc, #68]	; (8002148 <HAL_UART_RxCpltCallback+0xf0>)
 8002102:	600a      	str	r2, [r1, #0]
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_UART_RxCpltCallback+0xf4>)
 8002106:	7811      	ldrb	r1, [r2, #0]
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_UART_RxCpltCallback+0xf8>)
 800210a:	54d1      	strb	r1, [r2, r3]
 800210c:	e005      	b.n	800211a <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_UART_RxCpltCallback+0xf0>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <HAL_UART_RxCpltCallback+0x100>)
 8002116:	f008 fb1f 	bl	800a758 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 800211a:	2201      	movs	r2, #1
 800211c:	490b      	ldr	r1, [pc, #44]	; (800214c <HAL_UART_RxCpltCallback+0xf4>)
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_UART_RxCpltCallback+0xec>)
 8002120:	f004 f8a1 	bl	8006266 <HAL_UART_Receive_IT>
	}
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200007a4 	.word	0x200007a4
 8002130:	20000dd4 	.word	0x20000dd4
 8002134:	20000d4c 	.word	0x20000d4c
 8002138:	20000dac 	.word	0x20000dac
 800213c:	20000dd8 	.word	0x20000dd8
 8002140:	0800af94 	.word	0x0800af94
 8002144:	200007e8 	.word	0x200007e8
 8002148:	20000e04 	.word	0x20000e04
 800214c:	20000d4d 	.word	0x20000d4d
 8002150:	20000ddc 	.word	0x20000ddc
 8002154:	20000e08 	.word	0x20000e08
 8002158:	0800afac 	.word	0x0800afac

0800215c <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d11f      	bne.n	80021ae <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002186:	e012      	b.n	80021ae <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x60>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10d      	bne.n	80021ae <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002198:	2100      	movs	r1, #0
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f003 fa58 	bl	8005650 <HAL_TIM_ReadCapturedValue>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80021a6:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40000400 	.word	0x40000400
 80021bc:	20000e14 	.word	0x20000e14
 80021c0:	20000e0c 	.word	0x20000e0c
 80021c4:	20000e10 	.word	0x20000e10

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e4:	4c0b      	ldr	r4, [pc, #44]	; (8002214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f2:	f7ff ff1f 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f008 fc39 	bl	800aa6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7fe faf7 	bl	80007ec <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002200:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800220c:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 8002210:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002214:	20005950 	.word	0x20005950

08002218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f8fc 	bl	8002442 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	200f      	movs	r0, #15
 800224c:	f7ff fd5a 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff f9b6 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000134 	.word	0x20000134
 8002284:	20000e18 	.word	0x20000e18

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000e18 	.word	0x20000e18

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000134 	.word	0x20000134

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4c 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246a:	f7ff ff61 	bl	8002330 <__NVIC_GetPriorityGrouping>
 800246e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	f7ff ffb1 	bl	80023dc <NVIC_EncodePriority>
 800247a:	4602      	mov	r2, r0
 800247c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff80 	bl	8002388 <__NVIC_SetPriority>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff54 	bl	800234c <__NVIC_EnableIRQ>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ba:	f7ff fee5 	bl	8002288 <HAL_GetTick>
 80024be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e052      	b.n	8002584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0216 	bic.w	r2, r2, #22
 80024ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_DMA_Abort+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252e:	e013      	b.n	8002558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002530:	f7ff feaa 	bl	8002288 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d90c      	bls.n	8002558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2203      	movs	r2, #3
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e015      	b.n	8002584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e4      	bne.n	8002530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	223f      	movs	r2, #63	; 0x3f
 800256c:	409a      	lsls	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00c      	b.n	80025c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2205      	movs	r2, #5
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e06c      	b.n	80026bc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2223      	movs	r2, #35	; 0x23
 80025f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff f80f 	bl	8001618 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_ETH_Init+0xf4>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_ETH_Init+0xf4>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_ETH_Init+0xf4>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_ETH_Init+0xf8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_ETH_Init+0xf8>)
 800261c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002620:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_ETH_Init+0xf8>)
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4927      	ldr	r1, [pc, #156]	; (80026c8 <HAL_ETH_Init+0xf8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_ETH_Init+0xf8>)
 8002632:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800264c:	f7ff fe1c 	bl	8002288 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002652:	e011      	b.n	8002678 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002654:	f7ff fe18 	bl	8002288 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002662:	d909      	bls.n	8002678 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2204      	movs	r2, #4
 8002668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	22e0      	movs	r2, #224	; 0xe0
 8002670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e021      	b.n	80026bc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e4      	bne.n	8002654 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f958 	bl	8002940 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f9ff 	bl	8002a94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa55 	bl	8002b46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	2100      	movs	r1, #0
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f9bd 	bl	8002a24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2210      	movs	r2, #16
 80026b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800

080026cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4b51      	ldr	r3, [pc, #324]	; (8002828 <ETH_SetMACConfig+0x15c>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7c1b      	ldrb	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_SetMACConfig+0x28>
 80026ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026f2:	e000      	b.n	80026f6 <ETH_SetMACConfig+0x2a>
 80026f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7c5b      	ldrb	r3, [r3, #17]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <ETH_SetMACConfig+0x38>
 80026fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002702:	e000      	b.n	8002706 <ETH_SetMACConfig+0x3a>
 8002704:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002706:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800270c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7fdb      	ldrb	r3, [r3, #31]
 8002712:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002714:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800271a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	7f92      	ldrb	r2, [r2, #30]
 8002720:	2a00      	cmp	r2, #0
 8002722:	d102      	bne.n	800272a <ETH_SetMACConfig+0x5e>
 8002724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002728:	e000      	b.n	800272c <ETH_SetMACConfig+0x60>
 800272a:	2200      	movs	r2, #0
                        macconf->Speed |
 800272c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002734:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800273a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002742:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 2020 	ldrb.w	r2, [r2, #32]
 800274a:	2a00      	cmp	r2, #0
 800274c:	d102      	bne.n	8002754 <ETH_SetMACConfig+0x88>
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	e000      	b.n	8002756 <ETH_SetMACConfig+0x8a>
 8002754:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002756:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7bdb      	ldrb	r3, [r3, #15]
 800275c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800275e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002764:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800276e:	4313      	orrs	r3, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002786:	2001      	movs	r0, #1
 8002788:	f7ff fd8a 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	d101      	bne.n	80027ba <ETH_SetMACConfig+0xee>
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	e000      	b.n	80027bc <ETH_SetMACConfig+0xf0>
 80027ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027ca:	2a01      	cmp	r2, #1
 80027cc:	d101      	bne.n	80027d2 <ETH_SetMACConfig+0x106>
 80027ce:	2208      	movs	r2, #8
 80027d0:	e000      	b.n	80027d4 <ETH_SetMACConfig+0x108>
 80027d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80027dc:	2a01      	cmp	r2, #1
 80027de:	d101      	bne.n	80027e4 <ETH_SetMACConfig+0x118>
 80027e0:	2204      	movs	r2, #4
 80027e2:	e000      	b.n	80027e6 <ETH_SetMACConfig+0x11a>
 80027e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d101      	bne.n	80027f6 <ETH_SetMACConfig+0x12a>
 80027f2:	2202      	movs	r2, #2
 80027f4:	e000      	b.n	80027f8 <ETH_SetMACConfig+0x12c>
 80027f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002810:	2001      	movs	r0, #1
 8002812:	f7ff fd45 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	ff20810f 	.word	0xff20810f

0800282c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <ETH_SetDMAConfig+0x110>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <ETH_SetDMAConfig+0x2c>
 8002852:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002856:	e000      	b.n	800285a <ETH_SetDMAConfig+0x2e>
 8002858:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	7b5b      	ldrb	r3, [r3, #13]
 800285e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002860:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	7f52      	ldrb	r2, [r2, #29]
 8002866:	2a00      	cmp	r2, #0
 8002868:	d102      	bne.n	8002870 <ETH_SetDMAConfig+0x44>
 800286a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800286e:	e000      	b.n	8002872 <ETH_SetDMAConfig+0x46>
 8002870:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002872:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7b9b      	ldrb	r3, [r3, #14]
 8002878:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800287a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002880:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	7f1b      	ldrb	r3, [r3, #28]
 8002886:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002888:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7f9b      	ldrb	r3, [r3, #30]
 800288e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002890:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002896:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800289e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	461a      	mov	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7ff fcec 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	461a      	mov	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002904:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002912:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002920:	2001      	movs	r0, #1
 8002922:	f7ff fcbd 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	f8de3f23 	.word	0xf8de3f23

08002940 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a6      	sub	sp, #152	; 0x98
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800297c:	2300      	movs	r3, #0
 800297e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002986:	2300      	movs	r3, #0
 8002988:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fe86 	bl	80026cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff08 	bl	800282c <ETH_SetDMAConfig>
}
 8002a1c:	bf00      	nop
 8002a1e:	3798      	adds	r7, #152	; 0x98
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3305      	adds	r3, #5
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	3204      	adds	r2, #4
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <ETH_MACAddressConfig+0x68>)
 8002a46:	4413      	add	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3303      	adds	r3, #3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	061a      	lsls	r2, r3, #24
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3301      	adds	r3, #1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <ETH_MACAddressConfig+0x6c>)
 8002a76:	4413      	add	r3, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40028040 	.word	0x40028040
 8002a90:	40028044 	.word	0x40028044

08002a94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e03e      	b.n	8002b20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	3206      	adds	r2, #6
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d80c      	bhi.n	8002b04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e004      	b.n	8002b0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d9bd      	bls.n	8002aa2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b38:	611a      	str	r2, [r3, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e046      	b.n	8002be2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	3212      	adds	r2, #18
 8002bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d80c      	bhi.n	8002bd2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	e004      	b.n	8002bdc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d9b5      	bls.n	8002b54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c12:	60da      	str	r2, [r3, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e177      	b.n	8002f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8166 	bne.w	8002f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d005      	beq.n	8002c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80c0 	beq.w	8002f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a61      	ldr	r2, [pc, #388]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_GPIO_Init+0x32c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d037      	beq.n	8002e5e <HAL_GPIO_Init+0x23e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d031      	beq.n	8002e5a <HAL_GPIO_Init+0x23a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02b      	beq.n	8002e56 <HAL_GPIO_Init+0x236>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a55      	ldr	r2, [pc, #340]	; (8002f58 <HAL_GPIO_Init+0x338>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d025      	beq.n	8002e52 <HAL_GPIO_Init+0x232>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_GPIO_Init+0x33c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01f      	beq.n	8002e4e <HAL_GPIO_Init+0x22e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a53      	ldr	r2, [pc, #332]	; (8002f60 <HAL_GPIO_Init+0x340>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x22a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_GPIO_Init+0x344>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a51      	ldr	r2, [pc, #324]	; (8002f68 <HAL_GPIO_Init+0x348>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x222>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a50      	ldr	r2, [pc, #320]	; (8002f6c <HAL_GPIO_Init+0x34c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x21e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x21a>
 8002e36:	2309      	movs	r3, #9
 8002e38:	e012      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	e010      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	e00e      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00c      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00a      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	e008      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e004      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f002 0203 	and.w	r2, r2, #3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e70:	4935      	ldr	r1, [pc, #212]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea2:	4a34      	ldr	r2, [pc, #208]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ecc:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_GPIO_Init+0x354>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	f67f ae84 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40013800 	.word	0x40013800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020c00 	.word	0x40020c00
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40021400 	.word	0x40021400
 8002f64:	40021800 	.word	0x40021800
 8002f68:	40021c00 	.word	0x40021c00
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40022400 	.word	0x40022400
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f806 	bl	8002fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e12b      	b.n	800325e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe fbc2 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003058:	f000 ff18 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a81      	ldr	r2, [pc, #516]	; (8003268 <HAL_I2C_Init+0x274>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d807      	bhi.n	8003078 <HAL_I2C_Init+0x84>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a80      	ldr	r2, [pc, #512]	; (800326c <HAL_I2C_Init+0x278>)
 800306c:	4293      	cmp	r3, r2
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e006      	b.n	8003086 <HAL_I2C_Init+0x92>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a7d      	ldr	r2, [pc, #500]	; (8003270 <HAL_I2C_Init+0x27c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0e7      	b.n	800325e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a78      	ldr	r2, [pc, #480]	; (8003274 <HAL_I2C_Init+0x280>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0c9b      	lsrs	r3, r3, #18
 8003098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_I2C_Init+0x274>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d802      	bhi.n	80030c8 <HAL_I2C_Init+0xd4>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	e009      	b.n	80030dc <HAL_I2C_Init+0xe8>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	4a69      	ldr	r2, [pc, #420]	; (8003278 <HAL_I2C_Init+0x284>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	3301      	adds	r3, #1
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	495c      	ldr	r1, [pc, #368]	; (8003268 <HAL_I2C_Init+0x274>)
 80030f8:	428b      	cmp	r3, r1
 80030fa:	d819      	bhi.n	8003130 <HAL_I2C_Init+0x13c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e59      	subs	r1, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fbb1 f3f3 	udiv	r3, r1, r3
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003110:	400b      	ands	r3, r1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_I2C_Init+0x138>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e59      	subs	r1, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fbb1 f3f3 	udiv	r3, r1, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312a:	e051      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 800312c:	2304      	movs	r3, #4
 800312e:	e04f      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <HAL_I2C_Init+0x168>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e012      	b.n	8003182 <HAL_I2C_Init+0x18e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e58      	subs	r0, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	0099      	lsls	r1, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Init+0x196>
 8003186:	2301      	movs	r3, #1
 8003188:	e022      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <HAL_I2C_Init+0x1bc>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1e58      	subs	r0, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	440b      	add	r3, r1
 80031a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	e00f      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e58      	subs	r0, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	0099      	lsls	r1, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	6809      	ldr	r1, [r1, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6911      	ldr	r1, [r2, #16]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68d2      	ldr	r2, [r2, #12]
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	430b      	orrs	r3, r1
 8003212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	000186a0 	.word	0x000186a0
 800326c:	001e847f 	.word	0x001e847f
 8003270:	003d08ff 	.word	0x003d08ff
 8003274:	431bde83 	.word	0x431bde83
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d129      	bne.n	80032e6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2224      	movs	r2, #36	; 0x24
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0210 	bic.w	r2, r2, #16
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	d12a      	bne.n	8003364 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	; 0x24
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800332e:	89fb      	ldrh	r3, [r7, #14]
 8003330:	f023 030f 	bic.w	r3, r3, #15
 8003334:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b29a      	uxth	r2, r3
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	4313      	orrs	r3, r2
 800333e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	89fa      	ldrh	r2, [r7, #14]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003374:	b08f      	sub	sp, #60	; 0x3c
 8003376:	af0a      	add	r7, sp, #40	; 0x28
 8003378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e10f      	b.n	80035a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fc56 	bl	8001c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2203      	movs	r2, #3
 80033a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 ff49 	bl	800725a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	687e      	ldr	r6, [r7, #4]
 80033d0:	466d      	mov	r5, sp
 80033d2:	f106 0410 	add.w	r4, r6, #16
 80033d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033e6:	1d33      	adds	r3, r6, #4
 80033e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f003 fed4 	bl	8007198 <USB_CoreInit>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0d0      	b.n	80035a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f003 ff37 	bl	800727c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e04a      	b.n	80034aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	333d      	adds	r3, #61	; 0x3d
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	b298      	uxth	r0, r3
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3344      	adds	r3, #68	; 0x44
 8003450:	4602      	mov	r2, r0
 8003452:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3340      	adds	r3, #64	; 0x40
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	; 0x4c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3354      	adds	r3, #84	; 0x54
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	3301      	adds	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3af      	bcc.n	8003414 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e044      	b.n	8003544 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3301      	adds	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3b5      	bcc.n	80034ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	687e      	ldr	r6, [r7, #4]
 8003556:	466d      	mov	r5, sp
 8003558:	f106 0410 	add.w	r4, r6, #16
 800355c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800355e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003564:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003568:	e885 0003 	stmia.w	r5, {r0, r1}
 800356c:	1d33      	adds	r3, r6, #4
 800356e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	f003 fecf 	bl	8007314 <USB_DevInit>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e00d      	b.n	80035a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 f89a 	bl	80076d6 <USB_DevDisconnect>

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e267      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d075      	beq.n	80036b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ca:	4b88      	ldr	r3, [pc, #544]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d00c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b85      	ldr	r3, [pc, #532]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d112      	bne.n	8003608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e2:	4b82      	ldr	r3, [pc, #520]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ee:	d10b      	bne.n	8003608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	4b7e      	ldr	r3, [pc, #504]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05b      	beq.n	80036b4 <HAL_RCC_OscConfig+0x108>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d157      	bne.n	80036b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e242      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0x74>
 8003612:	4b76      	ldr	r3, [pc, #472]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a75      	ldr	r2, [pc, #468]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e01d      	b.n	800365c <HAL_RCC_OscConfig+0xb0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x98>
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6f      	ldr	r2, [pc, #444]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6c      	ldr	r2, [pc, #432]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0xb0>
 8003644:	4b69      	ldr	r3, [pc, #420]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a68      	ldr	r2, [pc, #416]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b66      	ldr	r3, [pc, #408]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fe10 	bl	8002288 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fe0c 	bl	8002288 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e207      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0xc0>
 800368a:	e014      	b.n	80036b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fdfc 	bl	8002288 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe fdf8 	bl	8002288 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1f3      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0xe8>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d063      	beq.n	800378a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c2:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11c      	bne.n	8003714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036da:	4b44      	ldr	r3, [pc, #272]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x152>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1c7      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4937      	ldr	r1, [pc, #220]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	e03a      	b.n	800378a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <HAL_RCC_OscConfig+0x244>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe fdb1 	bl	8002288 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372a:	f7fe fdad 	bl	8002288 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1a8      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4925      	ldr	r1, [pc, #148]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_OscConfig+0x244>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fd90 	bl	8002288 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe fd8c 	bl	8002288 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e187      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d036      	beq.n	8003804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_RCC_OscConfig+0x248>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fd70 	bl	8002288 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe fd6c 	bl	8002288 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e167      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_OscConfig+0x240>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x200>
 80037ca:	e01b      	b.n	8003804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_OscConfig+0x248>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d2:	f7fe fd59 	bl	8002288 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	e00e      	b.n	80037f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe fd55 	bl	8002288 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d907      	bls.n	80037f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e150      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470000 	.word	0x42470000
 80037f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ea      	bne.n	80037da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8097 	beq.w	8003940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4b81      	ldr	r3, [pc, #516]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b7d      	ldr	r3, [pc, #500]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a7c      	ldr	r2, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b7a      	ldr	r3, [pc, #488]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b77      	ldr	r3, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x474>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d118      	bne.n	8003880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384e:	4b74      	ldr	r3, [pc, #464]	; (8003a20 <HAL_RCC_OscConfig+0x474>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a73      	ldr	r2, [pc, #460]	; (8003a20 <HAL_RCC_OscConfig+0x474>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385a:	f7fe fd15 	bl	8002288 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003862:	f7fe fd11 	bl	8002288 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e10c      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_OscConfig+0x474>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x2ea>
 8003888:	4b64      	ldr	r3, [pc, #400]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a63      	ldr	r2, [pc, #396]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	e01c      	b.n	80038d0 <HAL_RCC_OscConfig+0x324>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x30c>
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a5e      	ldr	r2, [pc, #376]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	4b5c      	ldr	r3, [pc, #368]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a5b      	ldr	r2, [pc, #364]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0x324>
 80038b8:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a54      	ldr	r2, [pc, #336]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d015      	beq.n	8003904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe fcd6 	bl	8002288 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fe fcd2 	bl	8002288 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0cb      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ee      	beq.n	80038e0 <HAL_RCC_OscConfig+0x334>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003904:	f7fe fcc0 	bl	8002288 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fe fcbc 	bl	8002288 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0b5      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003922:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ee      	bne.n	800390c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a1 	beq.w	8003a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b08      	cmp	r3, #8
 8003954:	d05c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d141      	bne.n	80039e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_OscConfig+0x478>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fc90 	bl	8002288 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe fc8c 	bl	8002288 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e087      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	491b      	ldr	r1, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x478>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fe fc65 	bl	8002288 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fe fc61 	bl	8002288 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e05c      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x416>
 80039e0:	e054      	b.n	8003a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_OscConfig+0x478>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fc4e 	bl	8002288 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe fc4a 	bl	8002288 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e045      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_OscConfig+0x470>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x444>
 8003a0e:	e03d      	b.n	8003a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e038      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x4ec>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d028      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d121      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d11a      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	3b01      	subs	r3, #1
 8003a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0cc      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b68      	ldr	r3, [pc, #416]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d90c      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b8      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af0:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a58      	ldr	r2, [pc, #352]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	494d      	ldr	r1, [pc, #308]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d044      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d119      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e07f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d003      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e067      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 0203 	bic.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4934      	ldr	r1, [pc, #208]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fb7c 	bl	8002288 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b94:	f7fe fb78 	bl	8002288 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e04f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 020c 	and.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1eb      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d20c      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e032      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4916      	ldr	r1, [pc, #88]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	490e      	ldr	r1, [pc, #56]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c22:	f000 f821 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	490a      	ldr	r1, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	5ccb      	ldrb	r3, [r1, r3]
 8003c36:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe f85e 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023c00 	.word	0x40023c00
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	0800b0fc 	.word	0x0800b0fc
 8003c60:	2000012c 	.word	0x2000012c
 8003c64:	20000130 	.word	0x20000130

08003c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c6c:	b094      	sub	sp, #80	; 0x50
 8003c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	647b      	str	r3, [r7, #68]	; 0x44
 8003c74:	2300      	movs	r3, #0
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c78:	2300      	movs	r3, #0
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c80:	4b79      	ldr	r3, [pc, #484]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	f200 80e1 	bhi.w	8003e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x34>
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c9a:	e0db      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b73      	ldr	r3, [pc, #460]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ca0:	e0db      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca2:	4b73      	ldr	r3, [pc, #460]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ca6:	e0d8      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d063      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cda:	4622      	mov	r2, r4
 8003cdc:	462b      	mov	r3, r5
 8003cde:	f04f 0000 	mov.w	r0, #0
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	0159      	lsls	r1, r3, #5
 8003ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cec:	0150      	lsls	r0, r2, #5
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	1a51      	subs	r1, r2, r1
 8003cf6:	6139      	str	r1, [r7, #16]
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	018b      	lsls	r3, r1, #6
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d16:	4651      	mov	r1, sl
 8003d18:	018a      	lsls	r2, r1, #6
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d20:	4659      	mov	r1, fp
 8003d22:	eb63 0901 	sbc.w	r9, r3, r1
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d3a:	4690      	mov	r8, r2
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	eb18 0303 	adds.w	r3, r8, r3
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	462b      	mov	r3, r5
 8003d48:	eb49 0303 	adc.w	r3, r9, r3
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	024b      	lsls	r3, r1, #9
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d64:	4621      	mov	r1, r4
 8003d66:	024a      	lsls	r2, r1, #9
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d78:	f7fc fa3a 	bl	80001f0 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	e058      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d86:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	4611      	mov	r1, r2
 8003d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	0159      	lsls	r1, r3, #5
 8003dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db2:	0150      	lsls	r0, r2, #5
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4641      	mov	r1, r8
 8003dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	00eb      	lsls	r3, r5, #3
 8003dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dee:	00e2      	lsls	r2, r4, #3
 8003df0:	4614      	mov	r4, r2
 8003df2:	461d      	mov	r5, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	18e3      	adds	r3, r4, r3
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	eb45 0303 	adc.w	r3, r5, r3
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e0e:	4629      	mov	r1, r5
 8003e10:	028b      	lsls	r3, r1, #10
 8003e12:	4621      	mov	r1, r4
 8003e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e18:	4621      	mov	r1, r4
 8003e1a:	028a      	lsls	r2, r1, #10
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	2200      	movs	r2, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	61fa      	str	r2, [r7, #28]
 8003e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2c:	f7fc f9e0 	bl	80001f0 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3750      	adds	r7, #80	; 0x50
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	007a1200 	.word	0x007a1200

08003e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000012c 	.word	0x2000012c

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff0 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0a9b      	lsrs	r3, r3, #10
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800b10c 	.word	0x0800b10c

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb8:	f7ff ffdc 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0b5b      	lsrs	r3, r3, #13
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0800b10c 	.word	0x0800b10c

08003edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	220f      	movs	r2, #15
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_RCC_GetClockConfig+0x60>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40023c00 	.word	0x40023c00

08003f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d075      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f74:	4b91      	ldr	r3, [pc, #580]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7a:	f7fe f985 	bl	8002288 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f82:	f7fe f981 	bl	8002288 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e189      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f94:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	019a      	lsls	r2, r3, #6
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4981      	ldr	r1, [pc, #516]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fcc:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	071b      	lsls	r3, r3, #28
 8003fec:	4974      	ldr	r1, [pc, #464]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ff4:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffa:	f023 021f 	bic.w	r2, r3, #31
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	3b01      	subs	r3, #1
 8004004:	496e      	ldr	r1, [pc, #440]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	019a      	lsls	r2, r3, #6
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	071b      	lsls	r3, r3, #28
 800402c:	4964      	ldr	r1, [pc, #400]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7fe f925 	bl	8002288 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004042:	f7fe f921 	bl	8002288 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e129      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004074:	2b00      	cmp	r3, #0
 8004076:	d079      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800407e:	f7fe f903 	bl	8002288 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004086:	f7fe f8ff 	bl	8002288 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e107      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004098:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d0ef      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	0f1b      	lsrs	r3, r3, #28
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	019a      	lsls	r2, r3, #6
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	493b      	ldr	r1, [pc, #236]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040da:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	4934      	ldr	r1, [pc, #208]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	071b      	lsls	r3, r3, #28
 8004120:	4927      	ldr	r1, [pc, #156]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800412a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	4922      	ldr	r1, [pc, #136]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004144:	f7fe f8a0 	bl	8002288 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800414c:	f7fe f89c 	bl	8002288 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0a4      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800416a:	d1ef      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 808b 	beq.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041a2:	f7fe f871 	bl	8002288 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041a8:	e010      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fe f86d 	bl	8002288 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d909      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e075      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80041bc:	42470068 	.word	0x42470068
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470070 	.word	0x42470070
 80041c8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0e8      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02f      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d028      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800420c:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d114      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800421e:	f7fe f833 	bl	8002288 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe f82f 	bl	8002288 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e035      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004254:	d10d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
 8004270:	e005      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004278:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800427c:	6093      	str	r3, [r2, #8]
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428a:	490a      	ldr	r1, [pc, #40]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800428c:	4313      	orrs	r3, r2
 800428e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80042a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40007000 	.word	0x40007000
 80042b4:	40023800 	.word	0x40023800
 80042b8:	42470e40 	.word	0x42470e40
 80042bc:	424711e0 	.word	0x424711e0

080042c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e066      	b.n	80043a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7f5b      	ldrb	r3, [r3, #29]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd faa4 	bl	8001834 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	22ca      	movs	r2, #202	; 0xca
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2253      	movs	r2, #83	; 0x53
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f998 	bl	8004638 <RTC_EnterInitMode>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d12c      	bne.n	800436c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004324:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6919      	ldr	r1, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	041a      	lsls	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f99f 	bl	80046a6 <RTC_ExitInitMode>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d113      	bne.n	800439a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	7f1b      	ldrb	r3, [r3, #28]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_RTC_SetTime+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e087      	b.n	80044d8 <HAL_RTC_SetTime+0x12c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2202      	movs	r2, #2
 80043d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d126      	bne.n	8004428 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d102      	bne.n	80043ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f97c 	bl	80046f0 <RTC_ByteToBcd2>
 80043f8:	4603      	mov	r3, r0
 80043fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f975 	bl	80046f0 <RTC_ByteToBcd2>
 8004406:	4603      	mov	r3, r0
 8004408:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800440a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f96d 	bl	80046f0 <RTC_ByteToBcd2>
 8004416:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004418:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	78db      	ldrb	r3, [r3, #3]
 8004420:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e018      	b.n	800445a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2200      	movs	r2, #0
 800443a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004448:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800444e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	78db      	ldrb	r3, [r3, #3]
 8004454:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	22ca      	movs	r2, #202	; 0xca
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2253      	movs	r2, #83	; 0x53
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8e4 	bl	8004638 <RTC_EnterInitMode>
 8004470:	4603      	mov	r3, r0
 8004472:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d120      	bne.n	80044bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004484:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004488:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004498:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f8f7 	bl	80046a6 <RTC_ExitInitMode>
 80044b8:	4603      	mov	r3, r0
 80044ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]

  return status;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd90      	pop	{r4, r7, pc}

080044e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	7f1b      	ldrb	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RTC_SetDate+0x1c>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e071      	b.n	80045e0 <HAL_RTC_SetDate+0x100>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2202      	movs	r2, #2
 8004506:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10e      	bne.n	800452c <HAL_RTC_SetDate+0x4c>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	b2db      	uxtb	r3, r3
 8004524:	330a      	adds	r3, #10
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11c      	bne.n	800456c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	78db      	ldrb	r3, [r3, #3]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f8da 	bl	80046f0 <RTC_ByteToBcd2>
 800453c:	4603      	mov	r3, r0
 800453e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f8d3 	bl	80046f0 <RTC_ByteToBcd2>
 800454a:	4603      	mov	r3, r0
 800454c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800454e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	789b      	ldrb	r3, [r3, #2]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f8cb 	bl	80046f0 <RTC_ByteToBcd2>
 800455a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800455c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e00e      	b.n	800458a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	78db      	ldrb	r3, [r3, #3]
 8004570:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004578:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800457e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	22ca      	movs	r2, #202	; 0xca
 8004590:	625a      	str	r2, [r3, #36]	; 0x24
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2253      	movs	r2, #83	; 0x53
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f84c 	bl	8004638 <RTC_EnterInitMode>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10c      	bne.n	80045c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f873 	bl	80046a6 <RTC_ExitInitMode>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	771a      	strb	r2, [r3, #28]

  return status;
 80045de:	7cfb      	ldrb	r3, [r7, #19]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd90      	pop	{r4, r7, pc}

080045e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004602:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004604:	f7fd fe40 	bl	8002288 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800460a:	e009      	b.n	8004620 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800460c:	f7fd fe3c 	bl	8002288 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461a:	d901      	bls.n	8004620 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e007      	b.n	8004630 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0ee      	beq.n	800460c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d122      	bne.n	800469c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004664:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004666:	f7fd fe0f 	bl	8002288 <HAL_GetTick>
 800466a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800466c:	e00c      	b.n	8004688 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800466e:	f7fd fe0b 	bl	8002288 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800467c:	d904      	bls.n	8004688 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <RTC_EnterInitMode+0x64>
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d1e8      	bne.n	800466e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff89 	bl	80045e8 <HAL_RTC_WaitForSynchro>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2204      	movs	r2, #4
 80046e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80046fe:	e005      	b.n	800470c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	3301      	adds	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	3b0a      	subs	r3, #10
 800470a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b09      	cmp	r3, #9
 8004710:	d8f6      	bhi.n	8004700 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	b2da      	uxtb	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	4313      	orrs	r3, r2
 800471c:	b2db      	uxtb	r3, r3
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e041      	b.n	80047c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fd f90f 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 ffd3 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04e      	b.n	800487e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a23      	ldr	r2, [pc, #140]	; (800488c <HAL_TIM_Base_Start_IT+0xc4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d01d      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_TIM_Base_Start_IT+0xc8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <HAL_TIM_Base_Start_IT+0xcc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_TIM_Base_Start_IT+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <HAL_TIM_Base_Start_IT+0xd4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d010      	beq.n	800487c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	e007      	b.n	800487c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40001800 	.word	0x40001800

080048a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e041      	b.n	800493e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc ffda 	bl	8001888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 ff14 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_TIM_PWM_Start+0x24>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e022      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d109      	bne.n	8004986 <HAL_TIM_PWM_Start+0x3e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e015      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x58>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e008      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07c      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Start+0x82>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c8:	e013      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Start+0x92>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d8:	e00b      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d104      	bne.n	80049ea <HAL_TIM_PWM_Start+0xa2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2201      	movs	r2, #1
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fa9e 	bl	8005f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2d      	ldr	r2, [pc, #180]	; (8004abc <HAL_TIM_PWM_Start+0x174>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_PWM_Start+0xcc>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <HAL_TIM_PWM_Start+0x178>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_PWM_Start+0xd0>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_TIM_PWM_Start+0xd2>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_TIM_PWM_Start+0x174>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d022      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d01d      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_TIM_PWM_Start+0x17c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_TIM_PWM_Start+0x180>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_TIM_PWM_Start+0x184>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <HAL_TIM_PWM_Start+0x178>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_TIM_PWM_Start+0x188>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x136>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <HAL_TIM_PWM_Start+0x18c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d010      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	e007      	b.n	8004ab2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40001800 	.word	0x40001800

08004ad8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start_IT+0x28>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e022      	b.n	8004b46 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d109      	bne.n	8004b1a <HAL_TIM_PWM_Start_IT+0x42>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e015      	b.n	8004b46 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start_IT+0x5c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e008      	b.n	8004b46 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0c7      	b.n	8004cde <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start_IT+0x86>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	e013      	b.n	8004b86 <HAL_TIM_PWM_Start_IT+0xae>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start_IT+0x96>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	e00b      	b.n	8004b86 <HAL_TIM_PWM_Start_IT+0xae>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start_IT+0xa6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	e003      	b.n	8004b86 <HAL_TIM_PWM_Start_IT+0xae>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d841      	bhi.n	8004c10 <HAL_TIM_PWM_Start_IT+0x138>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004c11 	.word	0x08004c11
 8004b9c:	08004c11 	.word	0x08004c11
 8004ba0:	08004c11 	.word	0x08004c11
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004c11 	.word	0x08004c11
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004bed 	.word	0x08004bed
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c11 	.word	0x08004c11
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004bff 	.word	0x08004bff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0202 	orr.w	r2, r2, #2
 8004bd6:	60da      	str	r2, [r3, #12]
      break;
 8004bd8:	e01d      	b.n	8004c16 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0204 	orr.w	r2, r2, #4
 8004be8:	60da      	str	r2, [r3, #12]
      break;
 8004bea:	e014      	b.n	8004c16 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	60da      	str	r2, [r3, #12]
      break;
 8004bfc:	e00b      	b.n	8004c16 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0210 	orr.w	r2, r2, #16
 8004c0c:	60da      	str	r2, [r3, #12]
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d15f      	bne.n	8004cdc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 f989 	bl	8005f3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ce8 <HAL_TIM_PWM_Start_IT+0x210>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PWM_Start_IT+0x166>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <HAL_TIM_PWM_Start_IT+0x214>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <HAL_TIM_PWM_Start_IT+0x16a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_PWM_Start_IT+0x16c>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a22      	ldr	r2, [pc, #136]	; (8004ce8 <HAL_TIM_PWM_Start_IT+0x210>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_TIM_PWM_Start_IT+0x218>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_PWM_Start_IT+0x220>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_TIM_PWM_Start_IT+0x214>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_TIM_PWM_Start_IT+0x224>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <HAL_TIM_PWM_Start_IT+0x228>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40001800 	.word	0x40001800

08004d04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e041      	b.n	8004d9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fdd2 	bl	80018d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f000 fce6 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_IC_Start_IT+0x1e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e013      	b.n	8004dea <HAL_TIM_IC_Start_IT+0x46>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_IC_Start_IT+0x2e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e00b      	b.n	8004dea <HAL_TIM_IC_Start_IT+0x46>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_IC_Start_IT+0x3e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e003      	b.n	8004dea <HAL_TIM_IC_Start_IT+0x46>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_TIM_IC_Start_IT+0x58>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e013      	b.n	8004e24 <HAL_TIM_IC_Start_IT+0x80>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d104      	bne.n	8004e0c <HAL_TIM_IC_Start_IT+0x68>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e00b      	b.n	8004e24 <HAL_TIM_IC_Start_IT+0x80>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d104      	bne.n	8004e1c <HAL_TIM_IC_Start_IT+0x78>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e003      	b.n	8004e24 <HAL_TIM_IC_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e26:	7bbb      	ldrb	r3, [r7, #14]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e2c:	7b7b      	ldrb	r3, [r7, #13]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0cc      	b.n	8004fd0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_IC_Start_IT+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e44:	e013      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0xca>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_IC_Start_IT+0xb2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	e00b      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0xca>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_IC_Start_IT+0xc2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e64:	e003      	b.n	8004e6e <HAL_TIM_IC_Start_IT+0xca>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_IC_Start_IT+0xda>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	e013      	b.n	8004ea6 <HAL_TIM_IC_Start_IT+0x102>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_IC_Start_IT+0xea>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e8c:	e00b      	b.n	8004ea6 <HAL_TIM_IC_Start_IT+0x102>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_IC_Start_IT+0xfa>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9c:	e003      	b.n	8004ea6 <HAL_TIM_IC_Start_IT+0x102>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d841      	bhi.n	8004f30 <HAL_TIM_IC_Start_IT+0x18c>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_TIM_IC_Start_IT+0x110>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004f31 	.word	0x08004f31
 8004ebc:	08004f31 	.word	0x08004f31
 8004ec0:	08004f31 	.word	0x08004f31
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f1f 	.word	0x08004f1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0202 	orr.w	r2, r2, #2
 8004ef6:	60da      	str	r2, [r3, #12]
      break;
 8004ef8:	e01d      	b.n	8004f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0204 	orr.w	r2, r2, #4
 8004f08:	60da      	str	r2, [r3, #12]
      break;
 8004f0a:	e014      	b.n	8004f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	60da      	str	r2, [r3, #12]
      break;
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0210 	orr.w	r2, r2, #16
 8004f2c:	60da      	str	r2, [r3, #12]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d148      	bne.n	8004fce <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2201      	movs	r2, #1
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fff9 	bl	8005f3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_TIM_IC_Start_IT+0x234>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d022      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d01d      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_TIM_IC_Start_IT+0x238>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_TIM_IC_Start_IT+0x23c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_TIM_IC_Start_IT+0x240>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_TIM_IC_Start_IT+0x244>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a18      	ldr	r2, [pc, #96]	; (8004fec <HAL_TIM_IC_Start_IT+0x248>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_TIM_IC_Start_IT+0x24c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d111      	bne.n	8004fbe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d010      	beq.n	8004fce <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	e007      	b.n	8004fce <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40001800 	.word	0x40001800

08004ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b02      	cmp	r3, #2
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0202 	mvn.w	r2, #2
 8005020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd f890 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb4a 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fb51 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0204 	mvn.w	r2, #4
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fd f866 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb20 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb27 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0208 	mvn.w	r2, #8
 80050c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd f83c 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 faf6 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fafd 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b10      	cmp	r3, #16
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0210 	mvn.w	r2, #16
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2208      	movs	r2, #8
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd f812 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 facc 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fad3 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0201 	mvn.w	r2, #1
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc f8c8 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b80      	cmp	r3, #128	; 0x80
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 ff78 	bl	8006094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b40      	cmp	r3, #64	; 0x40
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa98 	bl	8005700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0220 	mvn.w	r2, #32
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 ff42 	bl	8006080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_TIM_IC_ConfigChannel+0x1e>
 800521e:	2302      	movs	r3, #2
 8005220:	e088      	b.n	8005334 <HAL_TIM_IC_ConfigChannel+0x130>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f000 fcb8 	bl	8005bb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 020c 	bic.w	r2, r2, #12
 8005252:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
 8005266:	e060      	b.n	800532a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b04      	cmp	r3, #4
 800526c:	d11c      	bne.n	80052a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f000 fd3c 	bl	8005cfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005290:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6999      	ldr	r1, [r3, #24]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	021a      	lsls	r2, r3, #8
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	619a      	str	r2, [r3, #24]
 80052a6:	e040      	b.n	800532a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f000 fd89 	bl	8005dd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 020c 	bic.w	r2, r2, #12
 80052d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]
 80052e4:	e021      	b.n	800532a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	d11c      	bne.n	8005326 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f000 fda6 	bl	8005e4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800530e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69d9      	ldr	r1, [r3, #28]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	61da      	str	r2, [r3, #28]
 8005324:	e001      	b.n	800532a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005356:	2302      	movs	r3, #2
 8005358:	e0ae      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	f200 809f 	bhi.w	80054a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080054a9 	.word	0x080054a9
 8005378:	080054a9 	.word	0x080054a9
 800537c:	080054a9 	.word	0x080054a9
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080054a9 	.word	0x080054a9
 8005388:	080054a9 	.word	0x080054a9
 800538c:	080054a9 	.word	0x080054a9
 8005390:	08005427 	.word	0x08005427
 8005394:	080054a9 	.word	0x080054a9
 8005398:	080054a9 	.word	0x080054a9
 800539c:	080054a9 	.word	0x080054a9
 80053a0:	08005467 	.word	0x08005467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa52 	bl	8005854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	619a      	str	r2, [r3, #24]
      break;
 80053e2:	e064      	b.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 faa2 	bl	8005934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6999      	ldr	r1, [r3, #24]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	619a      	str	r2, [r3, #24]
      break;
 8005424:	e043      	b.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 faf7 	bl	8005a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0208 	orr.w	r2, r2, #8
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0204 	bic.w	r2, r2, #4
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
      break;
 8005464:	e023      	b.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb4b 	bl	8005b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69d9      	ldr	r1, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	61da      	str	r2, [r3, #28]
      break;
 80054a6:	e002      	b.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      break;
 80054ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_ConfigClockSource+0x1c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0b4      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x186>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005514:	d03e      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0xd4>
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	f200 8087 	bhi.w	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	f000 8086 	beq.w	8005632 <HAL_TIM_ConfigClockSource+0x172>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d87f      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d01a      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0xa6>
 8005530:	2b70      	cmp	r3, #112	; 0x70
 8005532:	d87b      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d050      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x11a>
 8005538:	2b60      	cmp	r3, #96	; 0x60
 800553a:	d877      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b50      	cmp	r3, #80	; 0x50
 800553e:	d03c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xfa>
 8005540:	2b50      	cmp	r3, #80	; 0x50
 8005542:	d873      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d058      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x13a>
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d86f      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800554c:	2b30      	cmp	r3, #48	; 0x30
 800554e:	d064      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d86b      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005554:	2b20      	cmp	r3, #32
 8005556:	d060      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d867      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05c      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005560:	2b10      	cmp	r3, #16
 8005562:	d05a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	e062      	b.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f000 fcc1 	bl	8005efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	609a      	str	r2, [r3, #8]
      break;
 8005592:	e04f      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6899      	ldr	r1, [r3, #8]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f000 fcaa 	bl	8005efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e03c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 fb68 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2150      	movs	r1, #80	; 0x50
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fc77 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e02c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f000 fbc4 	bl	8005d74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2160      	movs	r1, #96	; 0x60
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fc67 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e01c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6859      	ldr	r1, [r3, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	461a      	mov	r2, r3
 8005608:	f000 fb48 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fc57 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005618:	e00c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f000 fc4e 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 800562a:	e003      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	e000      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d831      	bhi.n	80056c8 <HAL_TIM_ReadCapturedValue+0x78>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056c9 	.word	0x080056c9
 8005678:	080056c9 	.word	0x080056c9
 800567c:	080056ab 	.word	0x080056ab
 8005680:	080056c9 	.word	0x080056c9
 8005684:	080056c9 	.word	0x080056c9
 8005688:	080056c9 	.word	0x080056c9
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056c9 	.word	0x080056c9
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080056c9 	.word	0x080056c9
 800569c:	080056bf 	.word	0x080056bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	60fb      	str	r3, [r7, #12]

      break;
 80056a8:	e00f      	b.n	80056ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	60fb      	str	r3, [r7, #12]

      break;
 80056b2:	e00a      	b.n	80056ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	60fb      	str	r3, [r7, #12]

      break;
 80056bc:	e005      	b.n	80056ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	60fb      	str	r3, [r7, #12]

      break;
 80056c6:	e000      	b.n	80056ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80056c8:	bf00      	nop
  }

  return tmpreg;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a40      	ldr	r2, [pc, #256]	; (8005828 <TIM_Base_SetConfig+0x114>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d00f      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a3d      	ldr	r2, [pc, #244]	; (800582c <TIM_Base_SetConfig+0x118>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3c      	ldr	r2, [pc, #240]	; (8005830 <TIM_Base_SetConfig+0x11c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3b      	ldr	r2, [pc, #236]	; (8005834 <TIM_Base_SetConfig+0x120>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3a      	ldr	r2, [pc, #232]	; (8005838 <TIM_Base_SetConfig+0x124>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <TIM_Base_SetConfig+0x114>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d02b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d027      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2c      	ldr	r2, [pc, #176]	; (800582c <TIM_Base_SetConfig+0x118>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d023      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <TIM_Base_SetConfig+0x11c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01f      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <TIM_Base_SetConfig+0x120>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a29      	ldr	r2, [pc, #164]	; (8005838 <TIM_Base_SetConfig+0x124>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d017      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <TIM_Base_SetConfig+0x128>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a27      	ldr	r2, [pc, #156]	; (8005840 <TIM_Base_SetConfig+0x12c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <TIM_Base_SetConfig+0x130>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <TIM_Base_SetConfig+0x134>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a24      	ldr	r2, [pc, #144]	; (800584c <TIM_Base_SetConfig+0x138>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a23      	ldr	r2, [pc, #140]	; (8005850 <TIM_Base_SetConfig+0x13c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d108      	bne.n	80057d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <TIM_Base_SetConfig+0x114>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <TIM_Base_SetConfig+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d103      	bne.n	8005814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	615a      	str	r2, [r3, #20]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40010400 	.word	0x40010400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800
 8005848:	40001800 	.word	0x40001800
 800584c:	40001c00 	.word	0x40001c00
 8005850:	40002000 	.word	0x40002000

08005854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0302 	bic.w	r3, r3, #2
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a20      	ldr	r2, [pc, #128]	; (800592c <TIM_OC1_SetConfig+0xd8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC1_SetConfig+0x64>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <TIM_OC1_SetConfig+0xdc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d10c      	bne.n	80058d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0308 	bic.w	r3, r3, #8
 80058be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 0304 	bic.w	r3, r3, #4
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a15      	ldr	r2, [pc, #84]	; (800592c <TIM_OC1_SetConfig+0xd8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC1_SetConfig+0x8e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a14      	ldr	r2, [pc, #80]	; (8005930 <TIM_OC1_SetConfig+0xdc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d111      	bne.n	8005906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f023 0210 	bic.w	r2, r3, #16
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0320 	bic.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <TIM_OC2_SetConfig+0xe4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC2_SetConfig+0x68>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a21      	ldr	r2, [pc, #132]	; (8005a1c <TIM_OC2_SetConfig+0xe8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10d      	bne.n	80059b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC2_SetConfig+0xe4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC2_SetConfig+0x94>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC2_SetConfig+0xe8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d113      	bne.n	80059f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <TIM_OC3_SetConfig+0xe0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_OC3_SetConfig+0x66>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <TIM_OC3_SetConfig+0xe4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10d      	bne.n	8005aa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <TIM_OC3_SetConfig+0xe0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC3_SetConfig+0x92>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <TIM_OC3_SetConfig+0xe4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d113      	bne.n	8005ada <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400

08005b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <TIM_OC4_SetConfig+0xa4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_OC4_SetConfig+0x68>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <TIM_OC4_SetConfig+0xa8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d109      	bne.n	8005b84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a28      	ldr	r2, [pc, #160]	; (8005c80 <TIM_TI1_SetConfig+0xcc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01b      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	d017      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <TIM_TI1_SetConfig+0xd0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d013      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a24      	ldr	r2, [pc, #144]	; (8005c88 <TIM_TI1_SetConfig+0xd4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00f      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <TIM_TI1_SetConfig+0xd8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <TIM_TI1_SetConfig+0xdc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a21      	ldr	r2, [pc, #132]	; (8005c94 <TIM_TI1_SetConfig+0xe0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a20      	ldr	r2, [pc, #128]	; (8005c98 <TIM_TI1_SetConfig+0xe4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <TIM_TI1_SetConfig+0x6a>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <TIM_TI1_SetConfig+0x6c>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e003      	b.n	8005c3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f023 030a 	bic.w	r3, r3, #10
 8005c58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f003 030a 	and.w	r3, r3, #10
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40001800 	.word	0x40001800

08005c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f023 0210 	bic.w	r2, r3, #16
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	031b      	lsls	r3, r3, #12
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f023 0210 	bic.w	r2, r3, #16
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	031b      	lsls	r3, r3, #12
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0303 	bic.w	r3, r3, #3
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	031b      	lsls	r3, r3, #12
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	031b      	lsls	r3, r3, #12
 8005ea4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f043 0307 	orr.w	r3, r3, #7
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	2201      	movs	r2, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	401a      	ands	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e05a      	b.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fec:	d01d      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a15      	ldr	r2, [pc, #84]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10c      	bne.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	4313      	orrs	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40010400 	.word	0x40010400
 8006078:	40014000 	.word	0x40014000
 800607c:	40001800 	.word	0x40001800

08006080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e03f      	b.n	800613a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fb fd30 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2224      	movs	r2, #36	; 0x24
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fddf 	bl	8006cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b08a      	sub	sp, #40	; 0x28
 8006146:	af02      	add	r7, sp, #8
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	d17c      	bne.n	800625c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Transmit+0x2c>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e075      	b.n	800625e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Transmit+0x3e>
 800617c:	2302      	movs	r3, #2
 800617e:	e06e      	b.n	800625e <HAL_UART_Transmit+0x11c>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2221      	movs	r2, #33	; 0x21
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006196:	f7fc f877 	bl	8002288 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d108      	bne.n	80061c4 <HAL_UART_Transmit+0x82>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061d4:	e02a      	b.n	800622c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fb1f 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e036      	b.n	800625e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3302      	adds	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e007      	b.n	800621e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	3301      	adds	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1cf      	bne.n	80061d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 faef 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e006      	b.n	800625e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b20      	cmp	r3, #32
 800627e:	d11d      	bne.n	80062bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Receive_IT+0x26>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e016      	b.n	80062be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_UART_Receive_IT+0x38>
 800629a:	2302      	movs	r3, #2
 800629c:	e00f      	b.n	80062be <HAL_UART_Receive_IT+0x58>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb24 	bl	8006900 <UART_Start_Receive_IT>
 80062b8:	4603      	mov	r3, r0
 80062ba:	e000      	b.n	80062be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b0ba      	sub	sp, #232	; 0xe8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_UART_IRQHandler+0x66>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fc07 	bl	8006b3a <UART_Receive_IT>
      return;
 800632c:	e256      	b.n	80067dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800632e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80de 	beq.w	80064f4 <HAL_UART_IRQHandler+0x22c>
 8006338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006348:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80d1 	beq.w	80064f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_UART_IRQHandler+0xae>
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_UART_IRQHandler+0xd2>
 8006382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f043 0202 	orr.w	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_UART_IRQHandler+0xf6>
 80063a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <HAL_UART_IRQHandler+0x126>
 80063ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0208 	orr.w	r2, r3, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 81ed 	beq.w	80067d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_UART_IRQHandler+0x14e>
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb92 	bl	8006b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <HAL_UART_IRQHandler+0x17a>
 800643a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d04f      	beq.n	80064e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa9a 	bl	800697c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d141      	bne.n	80064da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800646c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800648e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800649a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1d9      	bne.n	8006456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d013      	beq.n	80064d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	4a7d      	ldr	r2, [pc, #500]	; (80066a4 <HAL_UART_IRQHandler+0x3dc>)
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc f868 	bl	800258c <HAL_DMA_Abort_IT>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064cc:	4610      	mov	r0, r2
 80064ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	e00e      	b.n	80064f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f990 	bl	80067f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	e00a      	b.n	80064f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f98c 	bl	80067f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e0:	e006      	b.n	80064f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f988 	bl	80067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064ee:	e170      	b.n	80067d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	bf00      	nop
    return;
 80064f2:	e16e      	b.n	80067d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 814a 	bne.w	8006792 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8143 	beq.w	8006792 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 813c 	beq.w	8006792 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	f040 80b4 	bne.w	80066a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800654c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8140 	beq.w	80067d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800655a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800655e:	429a      	cmp	r2, r3
 8006560:	f080 8139 	bcs.w	80067d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800656a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	f000 8088 	beq.w	800668a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1d9      	bne.n	800657a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e1      	bne.n	80065c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3314      	adds	r3, #20
 8006622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800662c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e3      	bne.n	8006602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800666c:	65ba      	str	r2, [r7, #88]	; 0x58
 800666e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e3      	bne.n	8006648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	4618      	mov	r0, r3
 8006686:	f7fb ff11 	bl	80024ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006692:	b29b      	uxth	r3, r3
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	b29b      	uxth	r3, r3
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f8b6 	bl	800680c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066a0:	e099      	b.n	80067d6 <HAL_UART_IRQHandler+0x50e>
 80066a2:	bf00      	nop
 80066a4:	08006a43 	.word	0x08006a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 808b 	beq.w	80067da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8086 	beq.w	80067da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066f2:	647a      	str	r2, [r7, #68]	; 0x44
 80066f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e3      	bne.n	80066ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	623b      	str	r3, [r7, #32]
   return(result);
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800672a:	633a      	str	r2, [r7, #48]	; 0x30
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60fb      	str	r3, [r7, #12]
   return(result);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006770:	61fa      	str	r2, [r7, #28]
 8006772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	617b      	str	r3, [r7, #20]
   return(result);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e3      	bne.n	800674c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f83e 	bl	800680c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006790:	e023      	b.n	80067da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_UART_IRQHandler+0x4ea>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f95d 	bl	8006a6a <UART_Transmit_IT>
    return;
 80067b0:	e014      	b.n	80067dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00e      	beq.n	80067dc <HAL_UART_IRQHandler+0x514>
 80067be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f99d 	bl	8006b0a <UART_EndTransmit_IT>
    return;
 80067d0:	e004      	b.n	80067dc <HAL_UART_IRQHandler+0x514>
    return;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_UART_IRQHandler+0x514>
      return;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_UART_IRQHandler+0x514>
      return;
 80067da:	bf00      	nop
  }
}
 80067dc:	37e8      	adds	r7, #232	; 0xe8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b090      	sub	sp, #64	; 0x40
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006834:	e050      	b.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d04c      	beq.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <UART_WaitOnFlagUntilTimeout+0x30>
 8006844:	f7fb fd20 	bl	8002288 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006850:	429a      	cmp	r2, r3
 8006852:	d241      	bcs.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006874:	637a      	str	r2, [r7, #52]	; 0x34
 8006876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a8:	623a      	str	r2, [r7, #32]
 80068aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e00f      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d09f      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3740      	adds	r7, #64	; 0x40
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2222      	movs	r2, #34	; 0x22
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800694c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695a      	ldr	r2, [r3, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0201 	orr.w	r2, r2, #1
 800695c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0220 	orr.w	r2, r2, #32
 800696c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b095      	sub	sp, #84	; 0x54
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069a4:	643a      	str	r2, [r7, #64]	; 0x40
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3314      	adds	r3, #20
 80069d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d119      	bne.n	8006a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0310 	bic.w	r3, r3, #16
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a14:	61ba      	str	r2, [r7, #24]
 8006a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a36:	bf00      	nop
 8006a38:	3754      	adds	r7, #84	; 0x54
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fecb 	bl	80067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b21      	cmp	r3, #33	; 0x21
 8006a7c:	d13e      	bne.n	8006afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d114      	bne.n	8006ab2 <UART_Transmit_IT+0x48>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d110      	bne.n	8006ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]
 8006ab0:	e008      	b.n	8006ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	1c59      	adds	r1, r3, #1
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6211      	str	r1, [r2, #32]
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10f      	bne.n	8006af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fe5a 	bl	80067e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b08c      	sub	sp, #48	; 0x30
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b22      	cmp	r3, #34	; 0x22
 8006b4c:	f040 80ab 	bne.w	8006ca6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d117      	bne.n	8006b8a <UART_Receive_IT+0x50>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d113      	bne.n	8006b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	1c9a      	adds	r2, r3, #2
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28
 8006b88:	e026      	b.n	8006bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9c:	d007      	beq.n	8006bae <UART_Receive_IT+0x74>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <UART_Receive_IT+0x82>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e008      	b.n	8006bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d15a      	bne.n	8006ca2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0220 	bic.w	r2, r2, #32
 8006bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d135      	bne.n	8006c98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	613b      	str	r3, [r7, #16]
   return(result);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f023 0310 	bic.w	r3, r3, #16
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c52:	623a      	str	r2, [r7, #32]
 8006c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	69f9      	ldr	r1, [r7, #28]
 8006c58:	6a3a      	ldr	r2, [r7, #32]
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d10a      	bne.n	8006c8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fdbb 	bl	800680c <HAL_UARTEx_RxEventCallback>
 8006c96:	e002      	b.n	8006c9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7fb f9dd 	bl	8002058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e002      	b.n	8006ca8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3730      	adds	r7, #48	; 0x30
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb4:	b0c0      	sub	sp, #256	; 0x100
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	68d9      	ldr	r1, [r3, #12]
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	ea40 0301 	orr.w	r3, r0, r1
 8006cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d08:	f021 010c 	bic.w	r1, r1, #12
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d16:	430b      	orrs	r3, r1
 8006d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2a:	6999      	ldr	r1, [r3, #24]
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	ea40 0301 	orr.w	r3, r0, r1
 8006d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b8f      	ldr	r3, [pc, #572]	; (8006f7c <UART_SetConfig+0x2cc>)
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d005      	beq.n	8006d50 <UART_SetConfig+0xa0>
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <UART_SetConfig+0x2d0>)
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d104      	bne.n	8006d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d50:	f7fd f8b0 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8006d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d58:	e003      	b.n	8006d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d5a:	f7fd f897 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8006d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6c:	f040 810c 	bne.w	8006f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	1891      	adds	r1, r2, r2
 8006d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d8a:	415b      	adcs	r3, r3
 8006d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d92:	4621      	mov	r1, r4
 8006d94:	eb12 0801 	adds.w	r8, r2, r1
 8006d98:	4629      	mov	r1, r5
 8006d9a:	eb43 0901 	adc.w	r9, r3, r1
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006db2:	4690      	mov	r8, r2
 8006db4:	4699      	mov	r9, r3
 8006db6:	4623      	mov	r3, r4
 8006db8:	eb18 0303 	adds.w	r3, r8, r3
 8006dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dc0:	462b      	mov	r3, r5
 8006dc2:	eb49 0303 	adc.w	r3, r9, r3
 8006dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dde:	460b      	mov	r3, r1
 8006de0:	18db      	adds	r3, r3, r3
 8006de2:	653b      	str	r3, [r7, #80]	; 0x50
 8006de4:	4613      	mov	r3, r2
 8006de6:	eb42 0303 	adc.w	r3, r2, r3
 8006dea:	657b      	str	r3, [r7, #84]	; 0x54
 8006dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006df4:	f7f9 f9fc 	bl	80001f0 <__aeabi_uldivmod>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4b61      	ldr	r3, [pc, #388]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	011c      	lsls	r4, r3, #4
 8006e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e20:	415b      	adcs	r3, r3
 8006e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e28:	4641      	mov	r1, r8
 8006e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006e2e:	4649      	mov	r1, r9
 8006e30:	eb43 0b01 	adc.w	fp, r3, r1
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e48:	4692      	mov	sl, r2
 8006e4a:	469b      	mov	fp, r3
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e56:	464b      	mov	r3, r9
 8006e58:	eb4b 0303 	adc.w	r3, fp, r3
 8006e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e74:	460b      	mov	r3, r1
 8006e76:	18db      	adds	r3, r3, r3
 8006e78:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	647b      	str	r3, [r7, #68]	; 0x44
 8006e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e8a:	f7f9 f9b1 	bl	80001f0 <__aeabi_uldivmod>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006e96:	fba3 2301 	umull	r2, r3, r3, r1
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	2264      	movs	r2, #100	; 0x64
 8006e9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ea2:	1acb      	subs	r3, r1, r3
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006eac:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eb8:	441c      	add	r4, r3
 8006eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	1891      	adds	r1, r2, r2
 8006ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ed4:	415b      	adcs	r3, r3
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006edc:	4641      	mov	r1, r8
 8006ede:	1851      	adds	r1, r2, r1
 8006ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	414b      	adcs	r3, r1
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	00cb      	lsls	r3, r1, #3
 8006ef8:	4651      	mov	r1, sl
 8006efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efe:	4651      	mov	r1, sl
 8006f00:	00ca      	lsls	r2, r1, #3
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	4642      	mov	r2, r8
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f10:	464b      	mov	r3, r9
 8006f12:	460a      	mov	r2, r1
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f30:	460b      	mov	r3, r1
 8006f32:	18db      	adds	r3, r3, r3
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f36:	4613      	mov	r3, r2
 8006f38:	eb42 0303 	adc.w	r3, r2, r3
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f46:	f7f9 f953 	bl	80001f0 <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006f50:	fba3 1302 	umull	r1, r3, r3, r2
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	2164      	movs	r1, #100	; 0x64
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	3332      	adds	r3, #50	; 0x32
 8006f62:	4a08      	ldr	r2, [pc, #32]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	f003 0207 	and.w	r2, r3, #7
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4422      	add	r2, r4
 8006f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f78:	e106      	b.n	8007188 <UART_SetConfig+0x4d8>
 8006f7a:	bf00      	nop
 8006f7c:	40011000 	.word	0x40011000
 8006f80:	40011400 	.word	0x40011400
 8006f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f9a:	4642      	mov	r2, r8
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	6239      	str	r1, [r7, #32]
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006faa:	4641      	mov	r1, r8
 8006fac:	1854      	adds	r4, r2, r1
 8006fae:	4649      	mov	r1, r9
 8006fb0:	eb43 0501 	adc.w	r5, r3, r1
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	00eb      	lsls	r3, r5, #3
 8006fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc2:	00e2      	lsls	r2, r4, #3
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	4643      	mov	r3, r8
 8006fca:	18e3      	adds	r3, r4, r3
 8006fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	eb45 0303 	adc.w	r3, r5, r3
 8006fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	008b      	lsls	r3, r1, #2
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007000:	4621      	mov	r1, r4
 8007002:	008a      	lsls	r2, r1, #2
 8007004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007008:	f7f9 f8f2 	bl	80001f0 <__aeabi_uldivmod>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4b60      	ldr	r3, [pc, #384]	; (8007194 <UART_SetConfig+0x4e4>)
 8007012:	fba3 2302 	umull	r2, r3, r3, r2
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	011c      	lsls	r4, r3, #4
 800701a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701e:	2200      	movs	r2, #0
 8007020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	1891      	adds	r1, r2, r2
 8007032:	61b9      	str	r1, [r7, #24]
 8007034:	415b      	adcs	r3, r3
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800703c:	4641      	mov	r1, r8
 800703e:	1851      	adds	r1, r2, r1
 8007040:	6139      	str	r1, [r7, #16]
 8007042:	4649      	mov	r1, r9
 8007044:	414b      	adcs	r3, r1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007054:	4659      	mov	r1, fp
 8007056:	00cb      	lsls	r3, r1, #3
 8007058:	4651      	mov	r1, sl
 800705a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800705e:	4651      	mov	r1, sl
 8007060:	00ca      	lsls	r2, r1, #3
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	4603      	mov	r3, r0
 8007068:	4642      	mov	r2, r8
 800706a:	189b      	adds	r3, r3, r2
 800706c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007070:	464b      	mov	r3, r9
 8007072:	460a      	mov	r2, r1
 8007074:	eb42 0303 	adc.w	r3, r2, r3
 8007078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800707c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	67bb      	str	r3, [r7, #120]	; 0x78
 8007086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007094:	4649      	mov	r1, r9
 8007096:	008b      	lsls	r3, r1, #2
 8007098:	4641      	mov	r1, r8
 800709a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800709e:	4641      	mov	r1, r8
 80070a0:	008a      	lsls	r2, r1, #2
 80070a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070a6:	f7f9 f8a3 	bl	80001f0 <__aeabi_uldivmod>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	4b38      	ldr	r3, [pc, #224]	; (8007194 <UART_SetConfig+0x4e4>)
 80070b2:	fba3 2301 	umull	r2, r3, r3, r1
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2264      	movs	r2, #100	; 0x64
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	1acb      	subs	r3, r1, r3
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	3332      	adds	r3, #50	; 0x32
 80070c4:	4a33      	ldr	r2, [pc, #204]	; (8007194 <UART_SetConfig+0x4e4>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070d0:	441c      	add	r4, r3
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	673b      	str	r3, [r7, #112]	; 0x70
 80070da:	677a      	str	r2, [r7, #116]	; 0x74
 80070dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	1891      	adds	r1, r2, r2
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	415b      	adcs	r3, r3
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070f0:	4641      	mov	r1, r8
 80070f2:	1851      	adds	r1, r2, r1
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	4649      	mov	r1, r9
 80070f8:	414b      	adcs	r3, r1
 80070fa:	607b      	str	r3, [r7, #4]
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007108:	4659      	mov	r1, fp
 800710a:	00cb      	lsls	r3, r1, #3
 800710c:	4651      	mov	r1, sl
 800710e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007112:	4651      	mov	r1, sl
 8007114:	00ca      	lsls	r2, r1, #3
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	4603      	mov	r3, r0
 800711c:	4642      	mov	r2, r8
 800711e:	189b      	adds	r3, r3, r2
 8007120:	66bb      	str	r3, [r7, #104]	; 0x68
 8007122:	464b      	mov	r3, r9
 8007124:	460a      	mov	r2, r1
 8007126:	eb42 0303 	adc.w	r3, r2, r3
 800712a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	663b      	str	r3, [r7, #96]	; 0x60
 8007136:	667a      	str	r2, [r7, #100]	; 0x64
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007144:	4649      	mov	r1, r9
 8007146:	008b      	lsls	r3, r1, #2
 8007148:	4641      	mov	r1, r8
 800714a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714e:	4641      	mov	r1, r8
 8007150:	008a      	lsls	r2, r1, #2
 8007152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007156:	f7f9 f84b 	bl	80001f0 <__aeabi_uldivmod>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <UART_SetConfig+0x4e4>)
 8007160:	fba3 1302 	umull	r1, r3, r3, r2
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	2164      	movs	r1, #100	; 0x64
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	3332      	adds	r3, #50	; 0x32
 8007172:	4a08      	ldr	r2, [pc, #32]	; (8007194 <UART_SetConfig+0x4e4>)
 8007174:	fba2 2303 	umull	r2, r3, r2, r3
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	f003 020f 	and.w	r2, r3, #15
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4422      	add	r2, r4
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800718e:	46bd      	mov	sp, r7
 8007190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007194:	51eb851f 	.word	0x51eb851f

08007198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007198:	b084      	sub	sp, #16
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	f107 001c 	add.w	r0, r7, #28
 80071a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d122      	bne.n	80071f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d105      	bne.n	80071ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 faa2 	bl	8007734 <USB_CoreReset>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e01a      	b.n	800722c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa96 	bl	8007734 <USB_CoreReset>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800720c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
 800721e:	e005      	b.n	800722c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10b      	bne.n	800724a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f043 0206 	orr.w	r2, r3, #6
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f043 0220 	orr.w	r2, r3, #32
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007256:	b004      	add	sp, #16
 8007258:	4770      	bx	lr

0800725a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d115      	bne.n	80072ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072aa:	2001      	movs	r0, #1
 80072ac:	f7fa fff8 	bl	80022a0 <HAL_Delay>
      ms++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa2e 	bl	8007718 <USB_GetMode>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d01e      	beq.n	8007300 <USB_SetCurrentMode+0x84>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b31      	cmp	r3, #49	; 0x31
 80072c6:	d9f0      	bls.n	80072aa <USB_SetCurrentMode+0x2e>
 80072c8:	e01a      	b.n	8007300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d115      	bne.n	80072fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072dc:	2001      	movs	r0, #1
 80072de:	f7fa ffdf 	bl	80022a0 <HAL_Delay>
      ms++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fa15 	bl	8007718 <USB_GetMode>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <USB_SetCurrentMode+0x84>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b31      	cmp	r3, #49	; 0x31
 80072f8:	d9f0      	bls.n	80072dc <USB_SetCurrentMode+0x60>
 80072fa:	e001      	b.n	8007300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e005      	b.n	800730c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b32      	cmp	r3, #50	; 0x32
 8007304:	d101      	bne.n	800730a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007314:	b084      	sub	sp, #16
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	e009      	b.n	8007348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3340      	adds	r3, #64	; 0x40
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3301      	adds	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b0e      	cmp	r3, #14
 800734c:	d9f2      	bls.n	8007334 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11c      	bne.n	800738e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
 800738c:	e00b      	b.n	80073a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ac:	461a      	mov	r2, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b8:	4619      	mov	r1, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c0:	461a      	mov	r2, r3
 80073c2:	680b      	ldr	r3, [r1, #0]
 80073c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10c      	bne.n	80073e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f965 	bl	80076a4 <USB_SetDevSpeed>
 80073da:	e008      	b.n	80073ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f960 	bl	80076a4 <USB_SetDevSpeed>
 80073e4:	e003      	b.n	80073ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073e6:	2103      	movs	r1, #3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f95b 	bl	80076a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ee:	2110      	movs	r1, #16
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8f3 	bl	80075dc <USB_FlushTxFifo>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f91f 	bl	8007644 <USB_FlushRxFifo>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	461a      	mov	r2, r3
 8007418:	2300      	movs	r3, #0
 800741a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	461a      	mov	r2, r3
 8007424:	2300      	movs	r3, #0
 8007426:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	e043      	b.n	80074c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800744c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007450:	d118      	bne.n	8007484 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	461a      	mov	r2, r3
 8007466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	e013      	b.n	8007496 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747a:	461a      	mov	r2, r3
 800747c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e008      	b.n	8007496 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	2300      	movs	r3, #0
 8007494:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	461a      	mov	r2, r3
 80074a4:	2300      	movs	r3, #0
 80074a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	461a      	mov	r2, r3
 80074b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3301      	adds	r3, #1
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3b7      	bcc.n	800743a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e043      	b.n	8007558 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074e6:	d118      	bne.n	800751a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	461a      	mov	r2, r3
 80074fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e013      	b.n	800752c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	461a      	mov	r2, r3
 8007512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	e008      	b.n	800752c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	2300      	movs	r3, #0
 800752a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	461a      	mov	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	461a      	mov	r2, r3
 800754c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3301      	adds	r3, #1
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d3b7      	bcc.n	80074d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800756e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007572:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007580:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	f043 0210 	orr.w	r2, r3, #16
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <USB_DevInit+0x2c4>)
 800759a:	4313      	orrs	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f043 0208 	orr.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d107      	bne.n	80075c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075d4:	b004      	add	sp, #16
 80075d6:	4770      	bx	lr
 80075d8:	803c3800 	.word	0x803c3800

080075dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <USB_FlushTxFifo+0x64>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01b      	b.n	8007634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	daf2      	bge.n	80075ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	019b      	lsls	r3, r3, #6
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4a08      	ldr	r2, [pc, #32]	; (8007640 <USB_FlushTxFifo+0x64>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e006      	b.n	8007634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d0f0      	beq.n	8007614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	00030d40 	.word	0x00030d40

08007644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a11      	ldr	r2, [pc, #68]	; (80076a0 <USB_FlushRxFifo+0x5c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e018      	b.n	8007694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	daf2      	bge.n	8007650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2210      	movs	r2, #16
 8007672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a08      	ldr	r2, [pc, #32]	; (80076a0 <USB_FlushRxFifo+0x5c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e006      	b.n	8007694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b10      	cmp	r3, #16
 8007690:	d0f0      	beq.n	8007674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	00030d40 	.word	0x00030d40

080076a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c4:	4313      	orrs	r3, r2
 80076c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	f003 0301 	and.w	r3, r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <USB_CoreReset+0x64>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d901      	bls.n	8007752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e01b      	b.n	800778a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	daf2      	bge.n	8007740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a09      	ldr	r2, [pc, #36]	; (8007798 <USB_CoreReset+0x64>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d901      	bls.n	800777c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e006      	b.n	800778a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d0f0      	beq.n	800776a <USB_CoreReset+0x36>

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	00030d40 	.word	0x00030d40

0800779c <__NVIC_SetPriority>:
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db0a      	blt.n	80077c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	490c      	ldr	r1, [pc, #48]	; (80077e8 <__NVIC_SetPriority+0x4c>)
 80077b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ba:	0112      	lsls	r2, r2, #4
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	440b      	add	r3, r1
 80077c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077c4:	e00a      	b.n	80077dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	4908      	ldr	r1, [pc, #32]	; (80077ec <__NVIC_SetPriority+0x50>)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	3b04      	subs	r3, #4
 80077d4:	0112      	lsls	r2, r2, #4
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	440b      	add	r3, r1
 80077da:	761a      	strb	r2, [r3, #24]
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	e000e100 	.word	0xe000e100
 80077ec:	e000ed00 	.word	0xe000ed00

080077f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <SysTick_Handler+0x1c>)
 80077f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80077f8:	f001 fe34 	bl	8009464 <xTaskGetSchedulerState>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d001      	beq.n	8007806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007802:	f002 fc19 	bl	800a038 <xPortSysTickHandler>
  }
}
 8007806:	bf00      	nop
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	e000e010 	.word	0xe000e010

08007810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007814:	2100      	movs	r1, #0
 8007816:	f06f 0004 	mvn.w	r0, #4
 800781a:	f7ff ffbf 	bl	800779c <__NVIC_SetPriority>
#endif
}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800782a:	f3ef 8305 	mrs	r3, IPSR
 800782e:	603b      	str	r3, [r7, #0]
  return(result);
 8007830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007836:	f06f 0305 	mvn.w	r3, #5
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	e00c      	b.n	8007858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <osKernelInitialize+0x44>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d105      	bne.n	8007852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007846:	4b08      	ldr	r3, [pc, #32]	; (8007868 <osKernelInitialize+0x44>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800784c:	2300      	movs	r3, #0
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	e002      	b.n	8007858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007852:	f04f 33ff 	mov.w	r3, #4294967295
 8007856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007858:	687b      	ldr	r3, [r7, #4]
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20000e1c 	.word	0x20000e1c

0800786c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007872:	f3ef 8305 	mrs	r3, IPSR
 8007876:	603b      	str	r3, [r7, #0]
  return(result);
 8007878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800787e:	f06f 0305 	mvn.w	r3, #5
 8007882:	607b      	str	r3, [r7, #4]
 8007884:	e010      	b.n	80078a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <osKernelStart+0x48>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d109      	bne.n	80078a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800788e:	f7ff ffbf 	bl	8007810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <osKernelStart+0x48>)
 8007894:	2202      	movs	r2, #2
 8007896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007898:	f001 f988 	bl	8008bac <vTaskStartScheduler>
      stat = osOK;
 800789c:	2300      	movs	r3, #0
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	e002      	b.n	80078a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078a8:	687b      	ldr	r3, [r7, #4]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000e1c 	.word	0x20000e1c

080078b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	; 0x38
 80078bc:	af04      	add	r7, sp, #16
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c8:	f3ef 8305 	mrs	r3, IPSR
 80078cc:	617b      	str	r3, [r7, #20]
  return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d17e      	bne.n	80079d2 <osThreadNew+0x11a>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d07b      	beq.n	80079d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078da:	2380      	movs	r3, #128	; 0x80
 80078dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80078de:	2318      	movs	r3, #24
 80078e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d045      	beq.n	800797e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <osThreadNew+0x48>
        name = attr->name;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <osThreadNew+0x6e>
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b38      	cmp	r3, #56	; 0x38
 8007918:	d805      	bhi.n	8007926 <osThreadNew+0x6e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <osThreadNew+0x72>
        return (NULL);
 8007926:	2300      	movs	r3, #0
 8007928:	e054      	b.n	80079d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <osThreadNew+0xa8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2ba7      	cmp	r3, #167	; 0xa7
 8007948:	d90a      	bls.n	8007960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <osThreadNew+0xa8>
        mem = 1;
 800795a:	2301      	movs	r3, #1
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e010      	b.n	8007982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <osThreadNew+0xca>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <osThreadNew+0xca>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <osThreadNew+0xca>
          mem = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e001      	b.n	8007982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d110      	bne.n	80079aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007990:	9202      	str	r2, [sp, #8]
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 ff18 	bl	80087d4 <xTaskCreateStatic>
 80079a4:	4603      	mov	r3, r0
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e013      	b.n	80079d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d110      	bne.n	80079d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f107 0310 	add.w	r3, r7, #16
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 ff63 	bl	800888e <xTaskCreate>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d001      	beq.n	80079d2 <osThreadNew+0x11a>
            hTask = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079d2:	693b      	ldr	r3, [r7, #16]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	; 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e4:	f3ef 8305 	mrs	r3, IPSR
 80079e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <osDelay+0x1c>
    stat = osErrorISR;
 80079f0:	f06f 0305 	mvn.w	r3, #5
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e007      	b.n	8007a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f89e 	bl	8008b44 <vTaskDelay>
    }
  }

  return (stat);
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b088      	sub	sp, #32
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a24:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d174      	bne.n	8007b14 <osMutexNew+0x102>
    if (attr != NULL) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e001      	b.n	8007a3c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <osMutexNew+0x3a>
      rmtx = 1U;
 8007a46:	2301      	movs	r3, #1
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	e001      	b.n	8007a50 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d15c      	bne.n	8007b14 <osMutexNew+0x102>
      mem = -1;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d015      	beq.n	8007a92 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <osMutexNew+0x6a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b4f      	cmp	r3, #79	; 0x4f
 8007a74:	d902      	bls.n	8007a7c <osMutexNew+0x6a>
          mem = 1;
 8007a76:	2301      	movs	r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	e00c      	b.n	8007a96 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d108      	bne.n	8007a96 <osMutexNew+0x84>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <osMutexNew+0x84>
            mem = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	e001      	b.n	8007a96 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d112      	bne.n	8007ac2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	2004      	movs	r0, #4
 8007aaa:	f000 fa90 	bl	8007fce <xQueueCreateMutexStatic>
 8007aae:	61f8      	str	r0, [r7, #28]
 8007ab0:	e016      	b.n	8007ae0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f000 fa88 	bl	8007fce <xQueueCreateMutexStatic>
 8007abe:	61f8      	str	r0, [r7, #28]
 8007ac0:	e00e      	b.n	8007ae0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007ace:	2004      	movs	r0, #4
 8007ad0:	f000 fa65 	bl	8007f9e <xQueueCreateMutex>
 8007ad4:	61f8      	str	r0, [r7, #28]
 8007ad6:	e003      	b.n	8007ae0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f000 fa60 	bl	8007f9e <xQueueCreateMutex>
 8007ade:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00c      	beq.n	8007b00 <osMutexNew+0xee>
        if (attr != NULL) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <osMutexNew+0xe2>
          name = attr->name;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e001      	b.n	8007af8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	69f8      	ldr	r0, [r7, #28]
 8007afc:	f000 fe0c 	bl	8008718 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <osMutexNew+0x102>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007b14:	69fb      	ldr	r3, [r7, #28]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4a06      	ldr	r2, [pc, #24]	; (8007b50 <vApplicationGetIdleTaskMemory+0x30>)
 8007b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000e20 	.word	0x20000e20
 8007b50:	20000ec8 	.word	0x20000ec8

08007b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a07      	ldr	r2, [pc, #28]	; (8007b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4a06      	ldr	r2, [pc, #24]	; (8007b84 <vApplicationGetTimerTaskMemory+0x30>)
 8007b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	200010c8 	.word	0x200010c8
 8007b84:	20001170 	.word	0x20001170

08007b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f103 0208 	add.w	r2, r3, #8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f103 0208 	add.w	r2, r3, #8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f103 0208 	add.w	r2, r3, #8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d103      	bne.n	8007c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e00c      	b.n	8007c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	e002      	b.n	8007c58 <vListInsert+0x2e>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d2f6      	bcs.n	8007c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6892      	ldr	r2, [r2, #8]
 8007cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6852      	ldr	r2, [r2, #4]
 8007cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d103      	bne.n	8007cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	1e5a      	subs	r2, r3, #1
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d1a:	f002 f8fb 	bl	8009f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	441a      	add	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	22ff      	movs	r2, #255	; 0xff
 8007d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	22ff      	movs	r2, #255	; 0xff
 8007d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d114      	bne.n	8007d9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01a      	beq.n	8007dae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3310      	adds	r3, #16
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f9af 	bl	80090e0 <xTaskRemoveFromEventList>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d012      	beq.n	8007dae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <xQueueGenericReset+0xcc>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	e009      	b.n	8007dae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3310      	adds	r3, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fef2 	bl	8007b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3324      	adds	r3, #36	; 0x24
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff feed 	bl	8007b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dae:	f002 f8e1 	bl	8009f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007db2:	2301      	movs	r3, #1
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08e      	sub	sp, #56	; 0x38
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <xQueueGenericCreateStatic+0x52>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <xQueueGenericCreateStatic+0x56>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <xQueueGenericCreateStatic+0x58>
 8007e16:	2300      	movs	r3, #0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <xQueueGenericCreateStatic+0x7e>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xQueueGenericCreateStatic+0x82>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueGenericCreateStatic+0x84>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	61fb      	str	r3, [r7, #28]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e5e:	2350      	movs	r3, #80	; 0x50
 8007e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b50      	cmp	r3, #80	; 0x50
 8007e66:	d00a      	beq.n	8007e7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	61bb      	str	r3, [r7, #24]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f83f 	bl	8007f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3730      	adds	r7, #48	; 0x30
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	613b      	str	r3, [r7, #16]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3350      	adds	r3, #80	; 0x50
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 f935 	bl	800a158 <pvPortMalloc>
 8007eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d011      	beq.n	8007f1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	3350      	adds	r3, #80	; 0x50
 8007efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f08:	79fa      	ldrb	r2, [r7, #7]
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f805 	bl	8007f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f52:	2101      	movs	r1, #1
 8007f54:	69b8      	ldr	r0, [r7, #24]
 8007f56:	f7ff fecb 	bl	8007cf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f837 	bl	8008004 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6939      	ldr	r1, [r7, #16]
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f7ff ff7a 	bl	8007eb0 <xQueueGenericCreate>
 8007fbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff ffd3 	bl	8007f6a <prvInitialiseMutex>

		return xNewQueue;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
	}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b088      	sub	sp, #32
 8007fd2:	af02      	add	r7, sp, #8
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	6039      	str	r1, [r7, #0]
 8007fd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	6939      	ldr	r1, [r7, #16]
 8007fec:	6978      	ldr	r0, [r7, #20]
 8007fee:	f7ff fee7 	bl	8007dc0 <xQueueGenericCreateStatic>
 8007ff2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff ffb8 	bl	8007f6a <prvInitialiseMutex>

		return xNewQueue;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
	}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	; 0x38
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008012:	2300      	movs	r3, #0
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xQueueGenericSend+0x32>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d103      	bne.n	8008044 <xQueueGenericSend+0x40>
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <xQueueGenericSend+0x44>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <xQueueGenericSend+0x46>
 8008048:	2300      	movs	r3, #0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <xQueueGenericSend+0x60>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d103      	bne.n	8008072 <xQueueGenericSend+0x6e>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <xQueueGenericSend+0x72>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericSend+0x74>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericSend+0x8e>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008092:	f001 f9e7 	bl	8009464 <xTaskGetSchedulerState>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <xQueueGenericSend+0x9e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <xQueueGenericSend+0xa2>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <xQueueGenericSend+0xa4>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	61fb      	str	r3, [r7, #28]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c2:	f001 ff27 	bl	8009f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <xQueueGenericSend+0xd4>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d129      	bne.n	800812c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080de:	f000 fa0b 	bl	80084f8 <prvCopyDataToQueue>
 80080e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d010      	beq.n	800810e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	3324      	adds	r3, #36	; 0x24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fff5 	bl	80090e0 <xTaskRemoveFromEventList>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d013      	beq.n	8008124 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080fc:	4b3f      	ldr	r3, [pc, #252]	; (80081fc <xQueueGenericSend+0x1f8>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	e00a      	b.n	8008124 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008114:	4b39      	ldr	r3, [pc, #228]	; (80081fc <xQueueGenericSend+0x1f8>)
 8008116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008124:	f001 ff26 	bl	8009f74 <vPortExitCritical>
				return pdPASS;
 8008128:	2301      	movs	r3, #1
 800812a:	e063      	b.n	80081f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008132:	f001 ff1f 	bl	8009f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008136:	2300      	movs	r3, #0
 8008138:	e05c      	b.n	80081f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800813a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	4618      	mov	r0, r3
 8008146:	f001 f82f 	bl	80091a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800814e:	f001 ff11 	bl	8009f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008152:	f000 fd9b 	bl	8008c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008156:	f001 fedd 	bl	8009f14 <vPortEnterCritical>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008160:	b25b      	sxtb	r3, r3
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d103      	bne.n	8008170 <xQueueGenericSend+0x16c>
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008176:	b25b      	sxtb	r3, r3
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d103      	bne.n	8008186 <xQueueGenericSend+0x182>
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008186:	f001 fef5 	bl	8009f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800818a:	1d3a      	adds	r2, r7, #4
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f81e 	bl	80091d4 <xTaskCheckForTimeOut>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d124      	bne.n	80081e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800819e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a0:	f000 faa2 	bl	80086e8 <prvIsQueueFull>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d018      	beq.n	80081dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	3310      	adds	r3, #16
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4611      	mov	r1, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 ff44 	bl	8009040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ba:	f000 fa2d 	bl	8008618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081be:	f000 fd73 	bl	8008ca8 <xTaskResumeAll>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f47f af7c 	bne.w	80080c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081ca:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <xQueueGenericSend+0x1f8>)
 80081cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	e772      	b.n	80080c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081de:	f000 fa1b 	bl	8008618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e2:	f000 fd61 	bl	8008ca8 <xTaskResumeAll>
 80081e6:	e76c      	b.n	80080c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ea:	f000 fa15 	bl	8008618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ee:	f000 fd5b 	bl	8008ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3738      	adds	r7, #56	; 0x38
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b090      	sub	sp, #64	; 0x40
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d103      	bne.n	800823c <xQueueGenericSendFromISR+0x3c>
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <xQueueGenericSendFromISR+0x40>
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <xQueueGenericSendFromISR+0x42>
 8008240:	2300      	movs	r3, #0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d103      	bne.n	800826a <xQueueGenericSendFromISR+0x6a>
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <xQueueGenericSendFromISR+0x6e>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericSendFromISR+0x70>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800828a:	f001 ff25 	bl	800a0d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800828e:	f3ef 8211 	mrs	r2, BASEPRI
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	61fa      	str	r2, [r7, #28]
 80082a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSendFromISR+0xbc>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d12f      	bne.n	800831c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082d2:	f000 f911 	bl	80084f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d112      	bne.n	8008306 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	3324      	adds	r3, #36	; 0x24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fef7 	bl	80090e0 <xTaskRemoveFromEventList>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00e      	beq.n	8008316 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e007      	b.n	8008316 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800830a:	3301      	adds	r3, #1
 800830c:	b2db      	uxtb	r3, r3
 800830e:	b25a      	sxtb	r2, r3
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008316:	2301      	movs	r3, #1
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800831a:	e001      	b.n	8008320 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800832a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800832e:	4618      	mov	r0, r3
 8008330:	3740      	adds	r7, #64	; 0x40
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	; 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <xQueueReceive+0x30>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	623b      	str	r3, [r7, #32]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <xQueueReceive+0x3e>
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <xQueueReceive+0x42>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <xQueueReceive+0x44>
 800837a:	2300      	movs	r3, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <xQueueReceive+0x5e>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	61fb      	str	r3, [r7, #28]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008396:	f001 f865 	bl	8009464 <xTaskGetSchedulerState>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <xQueueReceive+0x6e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <xQueueReceive+0x72>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <xQueueReceive+0x74>
 80083aa:	2300      	movs	r3, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueReceive+0x8e>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	61bb      	str	r3, [r7, #24]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083c6:	f001 fda5 	bl	8009f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01f      	beq.n	8008416 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083da:	f000 f8f7 	bl	80085cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1e5a      	subs	r2, r3, #1
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00f      	beq.n	800840e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	3310      	adds	r3, #16
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fe74 	bl	80090e0 <xTaskRemoveFromEventList>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083fe:	4b3d      	ldr	r3, [pc, #244]	; (80084f4 <xQueueReceive+0x1bc>)
 8008400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800840e:	f001 fdb1 	bl	8009f74 <vPortExitCritical>
				return pdPASS;
 8008412:	2301      	movs	r3, #1
 8008414:	e069      	b.n	80084ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800841c:	f001 fdaa 	bl	8009f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008420:	2300      	movs	r3, #0
 8008422:	e062      	b.n	80084ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800842a:	f107 0310 	add.w	r3, r7, #16
 800842e:	4618      	mov	r0, r3
 8008430:	f000 feba 	bl	80091a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008438:	f001 fd9c 	bl	8009f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800843c:	f000 fc26 	bl	8008c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008440:	f001 fd68 	bl	8009f14 <vPortEnterCritical>
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800844a:	b25b      	sxtb	r3, r3
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008450:	d103      	bne.n	800845a <xQueueReceive+0x122>
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008460:	b25b      	sxtb	r3, r3
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d103      	bne.n	8008470 <xQueueReceive+0x138>
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008470:	f001 fd80 	bl	8009f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008474:	1d3a      	adds	r2, r7, #4
 8008476:	f107 0310 	add.w	r3, r7, #16
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fea9 	bl	80091d4 <xTaskCheckForTimeOut>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d123      	bne.n	80084d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848a:	f000 f917 	bl	80086bc <prvIsQueueEmpty>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d017      	beq.n	80084c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	3324      	adds	r3, #36	; 0x24
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fdcf 	bl	8009040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a4:	f000 f8b8 	bl	8008618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084a8:	f000 fbfe 	bl	8008ca8 <xTaskResumeAll>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d189      	bne.n	80083c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <xQueueReceive+0x1bc>)
 80084b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	e780      	b.n	80083c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	f000 f8a7 	bl	8008618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ca:	f000 fbed 	bl	8008ca8 <xTaskResumeAll>
 80084ce:	e77a      	b.n	80083c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 f8a1 	bl	8008618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d6:	f000 fbe7 	bl	8008ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084dc:	f000 f8ee 	bl	80086bc <prvIsQueueEmpty>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f43f af6f 	beq.w	80083c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3730      	adds	r7, #48	; 0x30
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d14d      	bne.n	80085ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 ffbc 	bl	80094a0 <xTaskPriorityDisinherit>
 8008528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e043      	b.n	80085ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d119      	bne.n	800856c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6858      	ldr	r0, [r3, #4]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	461a      	mov	r2, r3
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	f002 fab9 	bl	800aaba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	441a      	add	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	d32b      	bcc.n	80085ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	e026      	b.n	80085ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68d8      	ldr	r0, [r3, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	461a      	mov	r2, r3
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	f002 fa9f 	bl	800aaba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	425b      	negs	r3, r3
 8008586:	441a      	add	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d207      	bcs.n	80085a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	425b      	negs	r3, r3
 80085a2:	441a      	add	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d105      	bne.n	80085ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085c2:	697b      	ldr	r3, [r7, #20]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d018      	beq.n	8008610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	441a      	add	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d303      	bcc.n	8008600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68d9      	ldr	r1, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	461a      	mov	r2, r3
 800860a:	6838      	ldr	r0, [r7, #0]
 800860c:	f002 fa55 	bl	800aaba <memcpy>
	}
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008620:	f001 fc78 	bl	8009f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800862a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862c:	e011      	b.n	8008652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d012      	beq.n	800865c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3324      	adds	r3, #36	; 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fd50 	bl	80090e0 <xTaskRemoveFromEventList>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008646:	f000 fe27 	bl	8009298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	3b01      	subs	r3, #1
 800864e:	b2db      	uxtb	r3, r3
 8008650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008656:	2b00      	cmp	r3, #0
 8008658:	dce9      	bgt.n	800862e <prvUnlockQueue+0x16>
 800865a:	e000      	b.n	800865e <prvUnlockQueue+0x46>
					break;
 800865c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008666:	f001 fc85 	bl	8009f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800866a:	f001 fc53 	bl	8009f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008676:	e011      	b.n	800869c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3310      	adds	r3, #16
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fd2b 	bl	80090e0 <xTaskRemoveFromEventList>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008690:	f000 fe02 	bl	8009298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	3b01      	subs	r3, #1
 8008698:	b2db      	uxtb	r3, r3
 800869a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800869c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dce9      	bgt.n	8008678 <prvUnlockQueue+0x60>
 80086a4:	e000      	b.n	80086a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	22ff      	movs	r2, #255	; 0xff
 80086ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 fc60 	bl	8009f74 <vPortExitCritical>
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c4:	f001 fc26 	bl	8009f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e001      	b.n	80086da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086da:	f001 fc4b 	bl	8009f74 <vPortExitCritical>

	return xReturn;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f0:	f001 fc10 	bl	8009f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d102      	bne.n	8008706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e001      	b.n	800870a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800870a:	f001 fc33 	bl	8009f74 <vPortExitCritical>

	return xReturn;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e014      	b.n	8008752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008728:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <vQueueAddToRegistry+0x50>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008734:	490c      	ldr	r1, [pc, #48]	; (8008768 <vQueueAddToRegistry+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <vQueueAddToRegistry+0x50>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4413      	add	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800874a:	e006      	b.n	800875a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b07      	cmp	r3, #7
 8008756:	d9e7      	bls.n	8008728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20001570 	.word	0x20001570

0800876c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800877c:	f001 fbca 	bl	8009f14 <vPortEnterCritical>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008786:	b25b      	sxtb	r3, r3
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d103      	bne.n	8008796 <vQueueWaitForMessageRestricted+0x2a>
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800879c:	b25b      	sxtb	r3, r3
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a2:	d103      	bne.n	80087ac <vQueueWaitForMessageRestricted+0x40>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087ac:	f001 fbe2 	bl	8009f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3324      	adds	r3, #36	; 0x24
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fc61 	bl	8009088 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087c6:	6978      	ldr	r0, [r7, #20]
 80087c8:	f7ff ff26 	bl	8008618 <prvUnlockQueue>
	}
 80087cc:	bf00      	nop
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af04      	add	r7, sp, #16
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	623b      	str	r3, [r7, #32]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xTaskCreateStatic+0x46>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61fb      	str	r3, [r7, #28]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800881a:	23a8      	movs	r3, #168	; 0xa8
 800881c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2ba8      	cmp	r3, #168	; 0xa8
 8008822:	d00a      	beq.n	800883a <xTaskCreateStatic+0x66>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	61bb      	str	r3, [r7, #24]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800883a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01e      	beq.n	8008880 <xTaskCreateStatic+0xac>
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01b      	beq.n	8008880 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2202      	movs	r2, #2
 8008856:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800885a:	2300      	movs	r3, #0
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	9302      	str	r3, [sp, #8]
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f850 	bl	8008918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800887a:	f000 f8f3 	bl	8008a64 <prvAddNewTaskToReadyList>
 800887e:	e001      	b.n	8008884 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008884:	697b      	ldr	r3, [r7, #20]
	}
 8008886:	4618      	mov	r0, r3
 8008888:	3728      	adds	r7, #40	; 0x28
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800888e:	b580      	push	{r7, lr}
 8008890:	b08c      	sub	sp, #48	; 0x30
 8008892:	af04      	add	r7, sp, #16
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fc58 	bl	800a158 <pvPortMalloc>
 80088a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00e      	beq.n	80088ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088b0:	20a8      	movs	r0, #168	; 0xa8
 80088b2:	f001 fc51 	bl	800a158 <pvPortMalloc>
 80088b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
 80088c4:	e005      	b.n	80088d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f001 fd12 	bl	800a2f0 <vPortFree>
 80088cc:	e001      	b.n	80088d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d017      	beq.n	8008908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088e0:	88fa      	ldrh	r2, [r7, #6]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9303      	str	r3, [sp, #12]
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	9302      	str	r3, [sp, #8]
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f80e 	bl	8008918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088fc:	69f8      	ldr	r0, [r7, #28]
 80088fe:	f000 f8b1 	bl	8008a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008902:	2301      	movs	r3, #1
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e002      	b.n	800890e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008908:	f04f 33ff 	mov.w	r3, #4294967295
 800890c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800890e:	69bb      	ldr	r3, [r7, #24]
	}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	461a      	mov	r2, r3
 8008930:	21a5      	movs	r1, #165	; 0xa5
 8008932:	f001 fff1 	bl	800a918 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008940:	3b01      	subs	r3, #1
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <prvInitialiseNewTask+0x58>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	617b      	str	r3, [r7, #20]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01f      	beq.n	80089b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	e012      	b.n	80089a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	4413      	add	r3, r2
 8008982:	7819      	ldrb	r1, [r3, #0]
 8008984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	3334      	adds	r3, #52	; 0x34
 800898c:	460a      	mov	r2, r1
 800898e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	3301      	adds	r3, #1
 80089a0:	61fb      	str	r3, [r7, #28]
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	d9e9      	bls.n	800897c <prvInitialiseNewTask+0x64>
 80089a8:	e000      	b.n	80089ac <prvInitialiseNewTask+0x94>
			{
				break;
 80089aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089b4:	e003      	b.n	80089be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2b37      	cmp	r3, #55	; 0x37
 80089c2:	d901      	bls.n	80089c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089c4:	2337      	movs	r3, #55	; 0x37
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	2200      	movs	r2, #0
 80089d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff f8f2 	bl	8007bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	3318      	adds	r3, #24
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff f8ed 	bl	8007bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	3354      	adds	r3, #84	; 0x54
 8008a18:	224c      	movs	r2, #76	; 0x4c
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f001 ff7b 	bl	800a918 <memset>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	4a0c      	ldr	r2, [pc, #48]	; (8008a58 <prvInitialiseNewTask+0x140>)
 8008a26:	659a      	str	r2, [r3, #88]	; 0x58
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <prvInitialiseNewTask+0x144>)
 8008a2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	4a0b      	ldr	r2, [pc, #44]	; (8008a60 <prvInitialiseNewTask+0x148>)
 8008a32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	69b8      	ldr	r0, [r7, #24]
 8008a3a:	f001 f941 	bl	8009cc0 <pxPortInitialiseStack>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a50:	bf00      	nop
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20005804 	.word	0x20005804
 8008a5c:	2000586c 	.word	0x2000586c
 8008a60:	200058d4 	.word	0x200058d4

08008a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a6c:	f001 fa52 	bl	8009f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a70:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <prvAddNewTaskToReadyList+0xc4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3301      	adds	r3, #1
 8008a76:	4a2c      	ldr	r2, [pc, #176]	; (8008b28 <prvAddNewTaskToReadyList+0xc4>)
 8008a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a7a:	4b2c      	ldr	r3, [pc, #176]	; (8008b2c <prvAddNewTaskToReadyList+0xc8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a82:	4a2a      	ldr	r2, [pc, #168]	; (8008b2c <prvAddNewTaskToReadyList+0xc8>)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a88:	4b27      	ldr	r3, [pc, #156]	; (8008b28 <prvAddNewTaskToReadyList+0xc4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d110      	bne.n	8008ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a90:	f000 fc26 	bl	80092e0 <prvInitialiseTaskLists>
 8008a94:	e00d      	b.n	8008ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a96:	4b26      	ldr	r3, [pc, #152]	; (8008b30 <prvAddNewTaskToReadyList+0xcc>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <prvAddNewTaskToReadyList+0xc8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d802      	bhi.n	8008ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008aac:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <prvAddNewTaskToReadyList+0xc8>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ab2:	4b20      	ldr	r3, [pc, #128]	; (8008b34 <prvAddNewTaskToReadyList+0xd0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	4a1e      	ldr	r2, [pc, #120]	; (8008b34 <prvAddNewTaskToReadyList+0xd0>)
 8008aba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008abc:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <prvAddNewTaskToReadyList+0xd0>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <prvAddNewTaskToReadyList+0xd4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d903      	bls.n	8008ad8 <prvAddNewTaskToReadyList+0x74>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <prvAddNewTaskToReadyList+0xd4>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <prvAddNewTaskToReadyList+0xd8>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7ff f877 	bl	8007be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008af4:	f001 fa3e 	bl	8009f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <prvAddNewTaskToReadyList+0xcc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <prvAddNewTaskToReadyList+0xc8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d207      	bcs.n	8008b1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <prvAddNewTaskToReadyList+0xdc>)
 8008b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20001a84 	.word	0x20001a84
 8008b2c:	200015b0 	.word	0x200015b0
 8008b30:	20001a90 	.word	0x20001a90
 8008b34:	20001aa0 	.word	0x20001aa0
 8008b38:	20001a8c 	.word	0x20001a8c
 8008b3c:	200015b4 	.word	0x200015b4
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d017      	beq.n	8008b86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <vTaskDelay+0x60>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <vTaskDelay+0x30>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60bb      	str	r3, [r7, #8]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b74:	f000 f88a 	bl	8008c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fcfe 	bl	800957c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b80:	f000 f892 	bl	8008ca8 <xTaskResumeAll>
 8008b84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d107      	bne.n	8008b9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <vTaskDelay+0x64>)
 8008b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20001aac 	.word	0x20001aac
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	; 0x28
 8008bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bba:	463a      	mov	r2, r7
 8008bbc:	1d39      	adds	r1, r7, #4
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe ffac 	bl	8007b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	9202      	str	r2, [sp, #8]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	460a      	mov	r2, r1
 8008bda:	4924      	ldr	r1, [pc, #144]	; (8008c6c <vTaskStartScheduler+0xc0>)
 8008bdc:	4824      	ldr	r0, [pc, #144]	; (8008c70 <vTaskStartScheduler+0xc4>)
 8008bde:	f7ff fdf9 	bl	80087d4 <xTaskCreateStatic>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4a23      	ldr	r2, [pc, #140]	; (8008c74 <vTaskStartScheduler+0xc8>)
 8008be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008be8:	4b22      	ldr	r3, [pc, #136]	; (8008c74 <vTaskStartScheduler+0xc8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e001      	b.n	8008bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d102      	bne.n	8008c06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c00:	f000 fd10 	bl	8009624 <xTimerCreateTimerTask>
 8008c04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d11b      	bne.n	8008c44 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	613b      	str	r3, [r7, #16]
}
 8008c1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c20:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <vTaskStartScheduler+0xcc>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3354      	adds	r3, #84	; 0x54
 8008c26:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <vTaskStartScheduler+0xd0>)
 8008c28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <vTaskStartScheduler+0xd4>)
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c32:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <vTaskStartScheduler+0xd8>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c38:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <vTaskStartScheduler+0xdc>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c3e:	f001 f8c7 	bl	8009dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c42:	e00e      	b.n	8008c62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d10a      	bne.n	8008c62 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vTaskStartScheduler+0xb4>
}
 8008c62:	bf00      	nop
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	0800b044 	.word	0x0800b044
 8008c70:	080092b1 	.word	0x080092b1
 8008c74:	20001aa8 	.word	0x20001aa8
 8008c78:	200015b0 	.word	0x200015b0
 8008c7c:	20000194 	.word	0x20000194
 8008c80:	20001aa4 	.word	0x20001aa4
 8008c84:	20001a90 	.word	0x20001a90
 8008c88:	20001a88 	.word	0x20001a88

08008c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <vTaskSuspendAll+0x18>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	4a03      	ldr	r2, [pc, #12]	; (8008ca4 <vTaskSuspendAll+0x18>)
 8008c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c9a:	bf00      	nop
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20001aac 	.word	0x20001aac

08008ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cb6:	4b42      	ldr	r3, [pc, #264]	; (8008dc0 <xTaskResumeAll+0x118>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	603b      	str	r3, [r7, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cd4:	f001 f91e 	bl	8009f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cd8:	4b39      	ldr	r3, [pc, #228]	; (8008dc0 <xTaskResumeAll+0x118>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	4a38      	ldr	r2, [pc, #224]	; (8008dc0 <xTaskResumeAll+0x118>)
 8008ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce2:	4b37      	ldr	r3, [pc, #220]	; (8008dc0 <xTaskResumeAll+0x118>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d162      	bne.n	8008db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cea:	4b36      	ldr	r3, [pc, #216]	; (8008dc4 <xTaskResumeAll+0x11c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d05e      	beq.n	8008db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cf2:	e02f      	b.n	8008d54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf4:	4b34      	ldr	r3, [pc, #208]	; (8008dc8 <xTaskResumeAll+0x120>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe ffcb 	bl	8007c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe ffc6 	bl	8007c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4b2d      	ldr	r3, [pc, #180]	; (8008dcc <xTaskResumeAll+0x124>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d903      	bls.n	8008d24 <xTaskResumeAll+0x7c>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a2a      	ldr	r2, [pc, #168]	; (8008dcc <xTaskResumeAll+0x124>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4a27      	ldr	r2, [pc, #156]	; (8008dd0 <xTaskResumeAll+0x128>)
 8008d32:	441a      	add	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe ff51 	bl	8007be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <xTaskResumeAll+0x12c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d4e:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <xTaskResumeAll+0x130>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d54:	4b1c      	ldr	r3, [pc, #112]	; (8008dc8 <xTaskResumeAll+0x120>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1cb      	bne.n	8008cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d62:	f000 fb5f 	bl	8009424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d66:	4b1d      	ldr	r3, [pc, #116]	; (8008ddc <xTaskResumeAll+0x134>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d72:	f000 f847 	bl	8008e04 <xTaskIncrementTick>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d7c:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <xTaskResumeAll+0x130>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f1      	bne.n	8008d72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d8e:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <xTaskResumeAll+0x134>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <xTaskResumeAll+0x130>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d009      	beq.n	8008db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008da0:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <xTaskResumeAll+0x138>)
 8008da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008db0:	f001 f8e0 	bl	8009f74 <vPortExitCritical>

	return xAlreadyYielded;
 8008db4:	68bb      	ldr	r3, [r7, #8]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20001aac 	.word	0x20001aac
 8008dc4:	20001a84 	.word	0x20001a84
 8008dc8:	20001a44 	.word	0x20001a44
 8008dcc:	20001a8c 	.word	0x20001a8c
 8008dd0:	200015b4 	.word	0x200015b4
 8008dd4:	200015b0 	.word	0x200015b0
 8008dd8:	20001a98 	.word	0x20001a98
 8008ddc:	20001a94 	.word	0x20001a94
 8008de0:	e000ed04 	.word	0xe000ed04

08008de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <xTaskGetTickCount+0x1c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008df0:	687b      	ldr	r3, [r7, #4]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20001a88 	.word	0x20001a88

08008e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e0e:	4b4f      	ldr	r3, [pc, #316]	; (8008f4c <xTaskIncrementTick+0x148>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 808f 	bne.w	8008f36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e18:	4b4d      	ldr	r3, [pc, #308]	; (8008f50 <xTaskIncrementTick+0x14c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e20:	4a4b      	ldr	r2, [pc, #300]	; (8008f50 <xTaskIncrementTick+0x14c>)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d120      	bne.n	8008e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e2c:	4b49      	ldr	r3, [pc, #292]	; (8008f54 <xTaskIncrementTick+0x150>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	603b      	str	r3, [r7, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	e7fe      	b.n	8008e4a <xTaskIncrementTick+0x46>
 8008e4c:	4b41      	ldr	r3, [pc, #260]	; (8008f54 <xTaskIncrementTick+0x150>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <xTaskIncrementTick+0x154>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a3f      	ldr	r2, [pc, #252]	; (8008f54 <xTaskIncrementTick+0x150>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <xTaskIncrementTick+0x154>)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	4b3e      	ldr	r3, [pc, #248]	; (8008f5c <xTaskIncrementTick+0x158>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a3d      	ldr	r2, [pc, #244]	; (8008f5c <xTaskIncrementTick+0x158>)
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	f000 fadb 	bl	8009424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e6e:	4b3c      	ldr	r3, [pc, #240]	; (8008f60 <xTaskIncrementTick+0x15c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d349      	bcc.n	8008f0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e78:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <xTaskIncrementTick+0x150>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e82:	4b37      	ldr	r3, [pc, #220]	; (8008f60 <xTaskIncrementTick+0x15c>)
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	601a      	str	r2, [r3, #0]
					break;
 8008e8a:	e03f      	b.n	8008f0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8c:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <xTaskIncrementTick+0x150>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d203      	bcs.n	8008eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ea4:	4a2e      	ldr	r2, [pc, #184]	; (8008f60 <xTaskIncrementTick+0x15c>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008eaa:	e02f      	b.n	8008f0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fef3 	bl	8007c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3318      	adds	r3, #24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe feea 	bl	8007c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <xTaskIncrementTick+0x160>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <xTaskIncrementTick+0xd8>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	4a22      	ldr	r2, [pc, #136]	; (8008f64 <xTaskIncrementTick+0x160>)
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a1f      	ldr	r2, [pc, #124]	; (8008f68 <xTaskIncrementTick+0x164>)
 8008eea:	441a      	add	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe fe75 	bl	8007be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <xTaskIncrementTick+0x168>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d3b8      	bcc.n	8008e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f06:	2301      	movs	r3, #1
 8008f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f0a:	e7b5      	b.n	8008e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f0c:	4b17      	ldr	r3, [pc, #92]	; (8008f6c <xTaskIncrementTick+0x168>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4915      	ldr	r1, [pc, #84]	; (8008f68 <xTaskIncrementTick+0x164>)
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d901      	bls.n	8008f28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f24:	2301      	movs	r3, #1
 8008f26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f28:	4b11      	ldr	r3, [pc, #68]	; (8008f70 <xTaskIncrementTick+0x16c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e004      	b.n	8008f40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <xTaskIncrementTick+0x170>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <xTaskIncrementTick+0x170>)
 8008f3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f40:	697b      	ldr	r3, [r7, #20]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20001aac 	.word	0x20001aac
 8008f50:	20001a88 	.word	0x20001a88
 8008f54:	20001a3c 	.word	0x20001a3c
 8008f58:	20001a40 	.word	0x20001a40
 8008f5c:	20001a9c 	.word	0x20001a9c
 8008f60:	20001aa4 	.word	0x20001aa4
 8008f64:	20001a8c 	.word	0x20001a8c
 8008f68:	200015b4 	.word	0x200015b4
 8008f6c:	200015b0 	.word	0x200015b0
 8008f70:	20001a98 	.word	0x20001a98
 8008f74:	20001a94 	.word	0x20001a94

08008f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f7e:	4b2a      	ldr	r3, [pc, #168]	; (8009028 <vTaskSwitchContext+0xb0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f86:	4b29      	ldr	r3, [pc, #164]	; (800902c <vTaskSwitchContext+0xb4>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f8c:	e046      	b.n	800901c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008f8e:	4b27      	ldr	r3, [pc, #156]	; (800902c <vTaskSwitchContext+0xb4>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f94:	4b26      	ldr	r3, [pc, #152]	; (8009030 <vTaskSwitchContext+0xb8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	e010      	b.n	8008fbe <vTaskSwitchContext+0x46>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	607b      	str	r3, [r7, #4]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <vTaskSwitchContext+0x3e>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	491d      	ldr	r1, [pc, #116]	; (8009034 <vTaskSwitchContext+0xbc>)
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0e4      	beq.n	8008f9c <vTaskSwitchContext+0x24>
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <vTaskSwitchContext+0xbc>)
 8008fde:	4413      	add	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	605a      	str	r2, [r3, #4]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d104      	bne.n	8009002 <vTaskSwitchContext+0x8a>
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	4a0b      	ldr	r2, [pc, #44]	; (8009038 <vTaskSwitchContext+0xc0>)
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4a08      	ldr	r2, [pc, #32]	; (8009030 <vTaskSwitchContext+0xb8>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <vTaskSwitchContext+0xc0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3354      	adds	r3, #84	; 0x54
 8009018:	4a08      	ldr	r2, [pc, #32]	; (800903c <vTaskSwitchContext+0xc4>)
 800901a:	6013      	str	r3, [r2, #0]
}
 800901c:	bf00      	nop
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	20001aac 	.word	0x20001aac
 800902c:	20001a98 	.word	0x20001a98
 8009030:	20001a8c 	.word	0x20001a8c
 8009034:	200015b4 	.word	0x200015b4
 8009038:	200015b0 	.word	0x200015b0
 800903c:	20000194 	.word	0x20000194

08009040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60fb      	str	r3, [r7, #12]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <vTaskPlaceOnEventList+0x44>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3318      	adds	r3, #24
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fe fddb 	bl	8007c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009074:	2101      	movs	r1, #1
 8009076:	6838      	ldr	r0, [r7, #0]
 8009078:	f000 fa80 	bl	800957c <prvAddCurrentTaskToDelayedList>
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200015b0 	.word	0x200015b0

08009088 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	617b      	str	r3, [r7, #20]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <vTaskPlaceOnEventListRestricted+0x54>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3318      	adds	r3, #24
 80090b6:	4619      	mov	r1, r3
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7fe fd92 	bl	8007be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295
 80090c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	68b8      	ldr	r0, [r7, #8]
 80090ce:	f000 fa55 	bl	800957c <prvAddCurrentTaskToDelayedList>
	}
 80090d2:	bf00      	nop
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200015b0 	.word	0x200015b0

080090e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3318      	adds	r3, #24
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fdc3 	bl	8007c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009116:	4b1e      	ldr	r3, [pc, #120]	; (8009190 <xTaskRemoveFromEventList+0xb0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d11d      	bne.n	800915a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3304      	adds	r3, #4
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fdba 	bl	8007c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912c:	4b19      	ldr	r3, [pc, #100]	; (8009194 <xTaskRemoveFromEventList+0xb4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d903      	bls.n	800913c <xTaskRemoveFromEventList+0x5c>
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	4a16      	ldr	r2, [pc, #88]	; (8009194 <xTaskRemoveFromEventList+0xb4>)
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4a13      	ldr	r2, [pc, #76]	; (8009198 <xTaskRemoveFromEventList+0xb8>)
 800914a:	441a      	add	r2, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3304      	adds	r3, #4
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f7fe fd45 	bl	8007be2 <vListInsertEnd>
 8009158:	e005      	b.n	8009166 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	3318      	adds	r3, #24
 800915e:	4619      	mov	r1, r3
 8009160:	480e      	ldr	r0, [pc, #56]	; (800919c <xTaskRemoveFromEventList+0xbc>)
 8009162:	f7fe fd3e 	bl	8007be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <xTaskRemoveFromEventList+0xc0>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	429a      	cmp	r2, r3
 8009172:	d905      	bls.n	8009180 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <xTaskRemoveFromEventList+0xc4>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e001      	b.n	8009184 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009184:	697b      	ldr	r3, [r7, #20]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20001aac 	.word	0x20001aac
 8009194:	20001a8c 	.word	0x20001a8c
 8009198:	200015b4 	.word	0x200015b4
 800919c:	20001a44 	.word	0x20001a44
 80091a0:	200015b0 	.word	0x200015b0
 80091a4:	20001a98 	.word	0x20001a98

080091a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <vTaskInternalSetTimeOutState+0x24>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <vTaskInternalSetTimeOutState+0x28>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	605a      	str	r2, [r3, #4]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	20001a9c 	.word	0x20001a9c
 80091d0:	20001a88 	.word	0x20001a88

080091d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	613b      	str	r3, [r7, #16]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009216:	f000 fe7d 	bl	8009f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800921a:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <xTaskCheckForTimeOut+0xbc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009232:	d102      	bne.n	800923a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009234:	2300      	movs	r3, #0
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	e023      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <xTaskCheckForTimeOut+0xc0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d007      	beq.n	8009256 <xTaskCheckForTimeOut+0x82>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	429a      	cmp	r2, r3
 800924e:	d302      	bcc.n	8009256 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	e015      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	d20b      	bcs.n	8009278 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff ff9b 	bl	80091a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e004      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800927e:	2301      	movs	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009282:	f000 fe77 	bl	8009f74 <vPortExitCritical>

	return xReturn;
 8009286:	69fb      	ldr	r3, [r7, #28]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20001a88 	.word	0x20001a88
 8009294:	20001a9c 	.word	0x20001a9c

08009298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800929c:	4b03      	ldr	r3, [pc, #12]	; (80092ac <vTaskMissedYield+0x14>)
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20001a98 	.word	0x20001a98

080092b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092b8:	f000 f852 	bl	8009360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <prvIdleTask+0x28>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d9f9      	bls.n	80092b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <prvIdleTask+0x2c>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d4:	e7f0      	b.n	80092b8 <prvIdleTask+0x8>
 80092d6:	bf00      	nop
 80092d8:	200015b4 	.word	0x200015b4
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	e00c      	b.n	8009306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4a12      	ldr	r2, [pc, #72]	; (8009340 <prvInitialiseTaskLists+0x60>)
 80092f8:	4413      	add	r3, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fc44 	bl	8007b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3301      	adds	r3, #1
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b37      	cmp	r3, #55	; 0x37
 800930a:	d9ef      	bls.n	80092ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800930c:	480d      	ldr	r0, [pc, #52]	; (8009344 <prvInitialiseTaskLists+0x64>)
 800930e:	f7fe fc3b 	bl	8007b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009312:	480d      	ldr	r0, [pc, #52]	; (8009348 <prvInitialiseTaskLists+0x68>)
 8009314:	f7fe fc38 	bl	8007b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009318:	480c      	ldr	r0, [pc, #48]	; (800934c <prvInitialiseTaskLists+0x6c>)
 800931a:	f7fe fc35 	bl	8007b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800931e:	480c      	ldr	r0, [pc, #48]	; (8009350 <prvInitialiseTaskLists+0x70>)
 8009320:	f7fe fc32 	bl	8007b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009324:	480b      	ldr	r0, [pc, #44]	; (8009354 <prvInitialiseTaskLists+0x74>)
 8009326:	f7fe fc2f 	bl	8007b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800932a:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <prvInitialiseTaskLists+0x78>)
 800932c:	4a05      	ldr	r2, [pc, #20]	; (8009344 <prvInitialiseTaskLists+0x64>)
 800932e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <prvInitialiseTaskLists+0x7c>)
 8009332:	4a05      	ldr	r2, [pc, #20]	; (8009348 <prvInitialiseTaskLists+0x68>)
 8009334:	601a      	str	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200015b4 	.word	0x200015b4
 8009344:	20001a14 	.word	0x20001a14
 8009348:	20001a28 	.word	0x20001a28
 800934c:	20001a44 	.word	0x20001a44
 8009350:	20001a58 	.word	0x20001a58
 8009354:	20001a70 	.word	0x20001a70
 8009358:	20001a3c 	.word	0x20001a3c
 800935c:	20001a40 	.word	0x20001a40

08009360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009366:	e019      	b.n	800939c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009368:	f000 fdd4 	bl	8009f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936c:	4b10      	ldr	r3, [pc, #64]	; (80093b0 <prvCheckTasksWaitingTermination+0x50>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fc8f 	bl	8007c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3b01      	subs	r3, #1
 8009384:	4a0b      	ldr	r2, [pc, #44]	; (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009388:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 8009390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009392:	f000 fdef 	bl	8009f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f810 	bl	80093bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e1      	bne.n	8009368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20001a58 	.word	0x20001a58
 80093b4:	20001a84 	.word	0x20001a84
 80093b8:	20001a6c 	.word	0x20001a6c

080093bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3354      	adds	r3, #84	; 0x54
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 fabd 	bl	800a948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d108      	bne.n	80093ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 ff87 	bl	800a2f0 <vPortFree>
				vPortFree( pxTCB );
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 ff84 	bl	800a2f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093e8:	e018      	b.n	800941c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d103      	bne.n	80093fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 ff7b 	bl	800a2f0 <vPortFree>
	}
 80093fa:	e00f      	b.n	800941c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009402:	2b02      	cmp	r3, #2
 8009404:	d00a      	beq.n	800941c <prvDeleteTCB+0x60>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	60fb      	str	r3, [r7, #12]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <prvDeleteTCB+0x5e>
	}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <prvResetNextTaskUnblockTime+0x38>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <prvResetNextTaskUnblockTime+0x3c>)
 8009436:	f04f 32ff 	mov.w	r2, #4294967295
 800943a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800943c:	e008      	b.n	8009450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943e:	4b07      	ldr	r3, [pc, #28]	; (800945c <prvResetNextTaskUnblockTime+0x38>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	4a04      	ldr	r2, [pc, #16]	; (8009460 <prvResetNextTaskUnblockTime+0x3c>)
 800944e:	6013      	str	r3, [r2, #0]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	20001a3c 	.word	0x20001a3c
 8009460:	20001aa4 	.word	0x20001aa4

08009464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800946a:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <xTaskGetSchedulerState+0x34>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009472:	2301      	movs	r3, #1
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	e008      	b.n	800948a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009478:	4b08      	ldr	r3, [pc, #32]	; (800949c <xTaskGetSchedulerState+0x38>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009480:	2302      	movs	r3, #2
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	e001      	b.n	800948a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009486:	2300      	movs	r3, #0
 8009488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800948a:	687b      	ldr	r3, [r7, #4]
	}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20001a90 	.word	0x20001a90
 800949c:	20001aac 	.word	0x20001aac

080094a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d056      	beq.n	8009564 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094b6:	4b2e      	ldr	r3, [pc, #184]	; (8009570 <xTaskPriorityDisinherit+0xd0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d00a      	beq.n	80094d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60fb      	str	r3, [r7, #12]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60bb      	str	r3, [r7, #8]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f8:	1e5a      	subs	r2, r3, #1
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009506:	429a      	cmp	r2, r3
 8009508:	d02c      	beq.n	8009564 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d128      	bne.n	8009564 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	3304      	adds	r3, #4
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe fbc0 	bl	8007c9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <xTaskPriorityDisinherit+0xd4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d903      	bls.n	8009544 <xTaskPriorityDisinherit+0xa4>
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <xTaskPriorityDisinherit+0xd4>)
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4a09      	ldr	r2, [pc, #36]	; (8009578 <xTaskPriorityDisinherit+0xd8>)
 8009552:	441a      	add	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7fe fb41 	bl	8007be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009564:	697b      	ldr	r3, [r7, #20]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200015b0 	.word	0x200015b0
 8009574:	20001a8c 	.word	0x20001a8c
 8009578:	200015b4 	.word	0x200015b4

0800957c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009586:	4b21      	ldr	r3, [pc, #132]	; (800960c <prvAddCurrentTaskToDelayedList+0x90>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800958c:	4b20      	ldr	r3, [pc, #128]	; (8009610 <prvAddCurrentTaskToDelayedList+0x94>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3304      	adds	r3, #4
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fb82 	bl	8007c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d10a      	bne.n	80095b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a6:	4b1a      	ldr	r3, [pc, #104]	; (8009610 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4819      	ldr	r0, [pc, #100]	; (8009614 <prvAddCurrentTaskToDelayedList+0x98>)
 80095b0:	f7fe fb17 	bl	8007be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095b4:	e026      	b.n	8009604 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4413      	add	r3, r2
 80095bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095be:	4b14      	ldr	r3, [pc, #80]	; (8009610 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d209      	bcs.n	80095e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <prvAddCurrentTaskToDelayedList+0x94>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fb25 	bl	8007c2a <vListInsert>
}
 80095e0:	e010      	b.n	8009604 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe fb1b 	bl	8007c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d202      	bcs.n	8009604 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095fe:	4a08      	ldr	r2, [pc, #32]	; (8009620 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6013      	str	r3, [r2, #0]
}
 8009604:	bf00      	nop
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20001a88 	.word	0x20001a88
 8009610:	200015b0 	.word	0x200015b0
 8009614:	20001a70 	.word	0x20001a70
 8009618:	20001a40 	.word	0x20001a40
 800961c:	20001a3c 	.word	0x20001a3c
 8009620:	20001aa4 	.word	0x20001aa4

08009624 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800962e:	f000 fb07 	bl	8009c40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009632:	4b1c      	ldr	r3, [pc, #112]	; (80096a4 <xTimerCreateTimerTask+0x80>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d021      	beq.n	800967e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009642:	1d3a      	adds	r2, r7, #4
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fa81 	bl	8007b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	9202      	str	r2, [sp, #8]
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	2302      	movs	r3, #2
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	460a      	mov	r2, r1
 8009664:	4910      	ldr	r1, [pc, #64]	; (80096a8 <xTimerCreateTimerTask+0x84>)
 8009666:	4811      	ldr	r0, [pc, #68]	; (80096ac <xTimerCreateTimerTask+0x88>)
 8009668:	f7ff f8b4 	bl	80087d4 <xTaskCreateStatic>
 800966c:	4603      	mov	r3, r0
 800966e:	4a10      	ldr	r2, [pc, #64]	; (80096b0 <xTimerCreateTimerTask+0x8c>)
 8009670:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009672:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <xTimerCreateTimerTask+0x8c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800967a:	2301      	movs	r3, #1
 800967c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	613b      	str	r3, [r7, #16]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800969a:	697b      	ldr	r3, [r7, #20]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20001ae0 	.word	0x20001ae0
 80096a8:	0800b04c 	.word	0x0800b04c
 80096ac:	080097e9 	.word	0x080097e9
 80096b0:	20001ae4 	.word	0x20001ae4

080096b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	623b      	str	r3, [r7, #32]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096e2:	4b1a      	ldr	r3, [pc, #104]	; (800974c <xTimerGenericCommand+0x98>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d02a      	beq.n	8009740 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	dc18      	bgt.n	800972e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096fc:	f7ff feb2 	bl	8009464 <xTaskGetSchedulerState>
 8009700:	4603      	mov	r3, r0
 8009702:	2b02      	cmp	r3, #2
 8009704:	d109      	bne.n	800971a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009706:	4b11      	ldr	r3, [pc, #68]	; (800974c <xTimerGenericCommand+0x98>)
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f107 0110 	add.w	r1, r7, #16
 800970e:	2300      	movs	r3, #0
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	f7fe fc77 	bl	8008004 <xQueueGenericSend>
 8009716:	6278      	str	r0, [r7, #36]	; 0x24
 8009718:	e012      	b.n	8009740 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800971a:	4b0c      	ldr	r3, [pc, #48]	; (800974c <xTimerGenericCommand+0x98>)
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	f107 0110 	add.w	r1, r7, #16
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	f7fe fc6d 	bl	8008004 <xQueueGenericSend>
 800972a:	6278      	str	r0, [r7, #36]	; 0x24
 800972c:	e008      	b.n	8009740 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <xTimerGenericCommand+0x98>)
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f107 0110 	add.w	r1, r7, #16
 8009736:	2300      	movs	r3, #0
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	f7fe fd61 	bl	8008200 <xQueueGenericSendFromISR>
 800973e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009742:	4618      	mov	r0, r3
 8009744:	3728      	adds	r7, #40	; 0x28
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20001ae0 	.word	0x20001ae0

08009750 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975a:	4b22      	ldr	r3, [pc, #136]	; (80097e4 <prvProcessExpiredTimer+0x94>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	3304      	adds	r3, #4
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fa97 	bl	8007c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d022      	beq.n	80097c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	699a      	ldr	r2, [r3, #24]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	18d1      	adds	r1, r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	6978      	ldr	r0, [r7, #20]
 800978a:	f000 f8d1 	bl	8009930 <prvInsertTimerInActiveList>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01f      	beq.n	80097d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009794:	2300      	movs	r3, #0
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	2100      	movs	r1, #0
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7ff ff88 	bl	80096b4 <xTimerGenericCommand>
 80097a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d113      	bne.n	80097d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	6978      	ldr	r0, [r7, #20]
 80097da:	4798      	blx	r3
}
 80097dc:	bf00      	nop
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20001ad8 	.word	0x20001ad8

080097e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f857 	bl	80098a8 <prvGetNextExpireTime>
 80097fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4619      	mov	r1, r3
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 f803 	bl	800980c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009806:	f000 f8d5 	bl	80099b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800980a:	e7f1      	b.n	80097f0 <prvTimerTask+0x8>

0800980c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009816:	f7ff fa39 	bl	8008c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f866 	bl	80098f0 <prvSampleTimeNow>
 8009824:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d130      	bne.n	800988e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <prvProcessTimerOrBlockTask+0x3c>
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	429a      	cmp	r2, r3
 8009838:	d806      	bhi.n	8009848 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800983a:	f7ff fa35 	bl	8008ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ff85 	bl	8009750 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009846:	e024      	b.n	8009892 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d008      	beq.n	8009860 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <prvProcessTimerOrBlockTask+0x90>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <prvProcessTimerOrBlockTask+0x50>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <prvProcessTimerOrBlockTask+0x52>
 800985c:	2300      	movs	r3, #0
 800985e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009860:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <prvProcessTimerOrBlockTask+0x94>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4619      	mov	r1, r3
 800986e:	f7fe ff7d 	bl	800876c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009872:	f7ff fa19 	bl	8008ca8 <xTaskResumeAll>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <prvProcessTimerOrBlockTask+0x98>)
 800987e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	f3bf 8f6f 	isb	sy
}
 800988c:	e001      	b.n	8009892 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800988e:	f7ff fa0b 	bl	8008ca8 <xTaskResumeAll>
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20001adc 	.word	0x20001adc
 80098a0:	20001ae0 	.word	0x20001ae0
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098b0:	4b0e      	ldr	r3, [pc, #56]	; (80098ec <prvGetNextExpireTime+0x44>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <prvGetNextExpireTime+0x16>
 80098ba:	2201      	movs	r2, #1
 80098bc:	e000      	b.n	80098c0 <prvGetNextExpireTime+0x18>
 80098be:	2200      	movs	r2, #0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d105      	bne.n	80098d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098cc:	4b07      	ldr	r3, [pc, #28]	; (80098ec <prvGetNextExpireTime+0x44>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e001      	b.n	80098dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20001ad8 	.word	0x20001ad8

080098f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098f8:	f7ff fa74 	bl	8008de4 <xTaskGetTickCount>
 80098fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098fe:	4b0b      	ldr	r3, [pc, #44]	; (800992c <prvSampleTimeNow+0x3c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	429a      	cmp	r2, r3
 8009906:	d205      	bcs.n	8009914 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009908:	f000 f936 	bl	8009b78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	e002      	b.n	800991a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800991a:	4a04      	ldr	r2, [pc, #16]	; (800992c <prvSampleTimeNow+0x3c>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009920:	68fb      	ldr	r3, [r7, #12]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20001ae8 	.word	0x20001ae8

08009930 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d812      	bhi.n	800997c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	429a      	cmp	r2, r3
 8009962:	d302      	bcc.n	800996a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009964:	2301      	movs	r3, #1
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e01b      	b.n	80099a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <prvInsertTimerInActiveList+0x7c>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3304      	adds	r3, #4
 8009972:	4619      	mov	r1, r3
 8009974:	4610      	mov	r0, r2
 8009976:	f7fe f958 	bl	8007c2a <vListInsert>
 800997a:	e012      	b.n	80099a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d206      	bcs.n	8009992 <prvInsertTimerInActiveList+0x62>
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d302      	bcc.n	8009992 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e007      	b.n	80099a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <prvInsertTimerInActiveList+0x80>)
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3304      	adds	r3, #4
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f7fe f944 	bl	8007c2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099a2:	697b      	ldr	r3, [r7, #20]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20001adc 	.word	0x20001adc
 80099b0:	20001ad8 	.word	0x20001ad8

080099b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08e      	sub	sp, #56	; 0x38
 80099b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ba:	e0ca      	b.n	8009b52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da18      	bge.n	80099f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099c2:	1d3b      	adds	r3, r7, #4
 80099c4:	3304      	adds	r3, #4
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	61fb      	str	r3, [r7, #28]
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ea:	6850      	ldr	r0, [r2, #4]
 80099ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ee:	6892      	ldr	r2, [r2, #8]
 80099f0:	4611      	mov	r1, r2
 80099f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f2c0 80ab 	blt.w	8009b52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f945 	bl	8007c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a12:	463b      	mov	r3, r7
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff ff6b 	bl	80098f0 <prvSampleTimeNow>
 8009a1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b09      	cmp	r3, #9
 8009a20:	f200 8096 	bhi.w	8009b50 <prvProcessReceivedCommands+0x19c>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <prvProcessReceivedCommands+0x78>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a55 	.word	0x08009a55
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009a55 	.word	0x08009a55
 8009a38:	08009ac9 	.word	0x08009ac9
 8009a3c:	08009add 	.word	0x08009add
 8009a40:	08009b27 	.word	0x08009b27
 8009a44:	08009a55 	.word	0x08009a55
 8009a48:	08009a55 	.word	0x08009a55
 8009a4c:	08009ac9 	.word	0x08009ac9
 8009a50:	08009add 	.word	0x08009add
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5a:	f043 0301 	orr.w	r3, r3, #1
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	18d1      	adds	r1, r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a74:	f7ff ff5c 	bl	8009930 <prvInsertTimerInActiveList>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d069      	beq.n	8009b52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d05e      	beq.n	8009b52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	441a      	add	r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa6:	f7ff fe05 	bl	80096b4 <xTimerGenericCommand>
 8009aaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d14f      	bne.n	8009b52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	61bb      	str	r3, [r7, #24]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ada:	e03a      	b.n	8009b52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	617b      	str	r3, [r7, #20]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	18d1      	adds	r1, r2, r3
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b20:	f7ff ff06 	bl	8009930 <prvInsertTimerInActiveList>
					break;
 8009b24:	e015      	b.n	8009b52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b36:	f000 fbdb 	bl	800a2f0 <vPortFree>
 8009b3a:	e00a      	b.n	8009b52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b4e:	e000      	b.n	8009b52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009b50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b52:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <prvProcessReceivedCommands+0x1c0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	1d39      	adds	r1, r7, #4
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fbec 	bl	8008338 <xQueueReceive>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f af2a 	bne.w	80099bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	3730      	adds	r7, #48	; 0x30
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20001ae0 	.word	0x20001ae0

08009b78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b7e:	e048      	b.n	8009c12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b80:	4b2d      	ldr	r3, [pc, #180]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8a:	4b2b      	ldr	r3, [pc, #172]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f87f 	bl	8007c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d02e      	beq.n	8009c12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	4413      	add	r3, r2
 8009bbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d90e      	bls.n	8009be4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bd2:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe f824 	bl	8007c2a <vListInsert>
 8009be2:	e016      	b.n	8009c12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009be4:	2300      	movs	r3, #0
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	2300      	movs	r3, #0
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fd60 	bl	80096b4 <xTimerGenericCommand>
 8009bf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	603b      	str	r3, [r7, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1b1      	bne.n	8009b80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c22:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <prvSwitchTimerLists+0xc4>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a04      	ldr	r2, [pc, #16]	; (8009c38 <prvSwitchTimerLists+0xc0>)
 8009c28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c2a:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <prvSwitchTimerLists+0xc4>)
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	6013      	str	r3, [r2, #0]
}
 8009c30:	bf00      	nop
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20001ad8 	.word	0x20001ad8
 8009c3c:	20001adc 	.word	0x20001adc

08009c40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c46:	f000 f965 	bl	8009f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c4a:	4b15      	ldr	r3, [pc, #84]	; (8009ca0 <prvCheckForValidListAndQueue+0x60>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d120      	bne.n	8009c94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c52:	4814      	ldr	r0, [pc, #80]	; (8009ca4 <prvCheckForValidListAndQueue+0x64>)
 8009c54:	f7fd ff98 	bl	8007b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c58:	4813      	ldr	r0, [pc, #76]	; (8009ca8 <prvCheckForValidListAndQueue+0x68>)
 8009c5a:	f7fd ff95 	bl	8007b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <prvCheckForValidListAndQueue+0x6c>)
 8009c60:	4a10      	ldr	r2, [pc, #64]	; (8009ca4 <prvCheckForValidListAndQueue+0x64>)
 8009c62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c64:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <prvCheckForValidListAndQueue+0x70>)
 8009c66:	4a10      	ldr	r2, [pc, #64]	; (8009ca8 <prvCheckForValidListAndQueue+0x68>)
 8009c68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <prvCheckForValidListAndQueue+0x74>)
 8009c70:	4a11      	ldr	r2, [pc, #68]	; (8009cb8 <prvCheckForValidListAndQueue+0x78>)
 8009c72:	2110      	movs	r1, #16
 8009c74:	200a      	movs	r0, #10
 8009c76:	f7fe f8a3 	bl	8007dc0 <xQueueGenericCreateStatic>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <prvCheckForValidListAndQueue+0x60>)
 8009c7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c80:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <prvCheckForValidListAndQueue+0x60>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <prvCheckForValidListAndQueue+0x60>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	490b      	ldr	r1, [pc, #44]	; (8009cbc <prvCheckForValidListAndQueue+0x7c>)
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fd42 	bl	8008718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c94:	f000 f96e 	bl	8009f74 <vPortExitCritical>
}
 8009c98:	bf00      	nop
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20001ae0 	.word	0x20001ae0
 8009ca4:	20001ab0 	.word	0x20001ab0
 8009ca8:	20001ac4 	.word	0x20001ac4
 8009cac:	20001ad8 	.word	0x20001ad8
 8009cb0:	20001adc 	.word	0x20001adc
 8009cb4:	20001b8c 	.word	0x20001b8c
 8009cb8:	20001aec 	.word	0x20001aec
 8009cbc:	0800b054 	.word	0x0800b054

08009cc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3b04      	subs	r3, #4
 8009cd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3b04      	subs	r3, #4
 8009cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f023 0201 	bic.w	r2, r3, #1
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3b04      	subs	r3, #4
 8009cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cf0:	4a0c      	ldr	r2, [pc, #48]	; (8009d24 <pxPortInitialiseStack+0x64>)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3b14      	subs	r3, #20
 8009cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3b04      	subs	r3, #4
 8009d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f06f 0202 	mvn.w	r2, #2
 8009d0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3b20      	subs	r3, #32
 8009d14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d16:	68fb      	ldr	r3, [r7, #12]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	08009d29 	.word	0x08009d29

08009d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d32:	4b12      	ldr	r3, [pc, #72]	; (8009d7c <prvTaskExitError+0x54>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3a:	d00a      	beq.n	8009d52 <prvTaskExitError+0x2a>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	60fb      	str	r3, [r7, #12]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <prvTaskExitError+0x28>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	60bb      	str	r3, [r7, #8]
}
 8009d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d66:	bf00      	nop
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0fc      	beq.n	8009d68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d6e:	bf00      	nop
 8009d70:	bf00      	nop
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20000138 	.word	0x20000138

08009d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <pxCurrentTCBConst2>)
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	6808      	ldr	r0, [r1, #0]
 8009d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	f380 8809 	msr	PSP, r0
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8811 	msr	BASEPRI, r0
 8009d9a:	4770      	bx	lr
 8009d9c:	f3af 8000 	nop.w

08009da0 <pxCurrentTCBConst2>:
 8009da0:	200015b0 	.word	0x200015b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009da8:	4808      	ldr	r0, [pc, #32]	; (8009dcc <prvPortStartFirstTask+0x24>)
 8009daa:	6800      	ldr	r0, [r0, #0]
 8009dac:	6800      	ldr	r0, [r0, #0]
 8009dae:	f380 8808 	msr	MSP, r0
 8009db2:	f04f 0000 	mov.w	r0, #0
 8009db6:	f380 8814 	msr	CONTROL, r0
 8009dba:	b662      	cpsie	i
 8009dbc:	b661      	cpsie	f
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	df00      	svc	0
 8009dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dca:	bf00      	nop
 8009dcc:	e000ed08 	.word	0xe000ed08

08009dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009dd6:	4b46      	ldr	r3, [pc, #280]	; (8009ef0 <xPortStartScheduler+0x120>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a46      	ldr	r2, [pc, #280]	; (8009ef4 <xPortStartScheduler+0x124>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10a      	bne.n	8009df6 <xPortStartScheduler+0x26>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	613b      	str	r3, [r7, #16]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009df6:	4b3e      	ldr	r3, [pc, #248]	; (8009ef0 <xPortStartScheduler+0x120>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a3f      	ldr	r2, [pc, #252]	; (8009ef8 <xPortStartScheduler+0x128>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d10a      	bne.n	8009e16 <xPortStartScheduler+0x46>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60fb      	str	r3, [r7, #12]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e16:	4b39      	ldr	r3, [pc, #228]	; (8009efc <xPortStartScheduler+0x12c>)
 8009e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	22ff      	movs	r2, #255	; 0xff
 8009e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	4b31      	ldr	r3, [pc, #196]	; (8009f00 <xPortStartScheduler+0x130>)
 8009e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e3e:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e40:	2207      	movs	r2, #7
 8009e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e44:	e009      	b.n	8009e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e46:	4b2f      	ldr	r3, [pc, #188]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	4a2d      	ldr	r2, [pc, #180]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d0ef      	beq.n	8009e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e66:	4b27      	ldr	r3, [pc, #156]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f1c3 0307 	rsb	r3, r3, #7
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d00a      	beq.n	8009e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	60bb      	str	r3, [r7, #8]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e88:	4b1e      	ldr	r3, [pc, #120]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	021b      	lsls	r3, r3, #8
 8009e8e:	4a1d      	ldr	r2, [pc, #116]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e92:	4b1c      	ldr	r3, [pc, #112]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e9a:	4a1a      	ldr	r2, [pc, #104]	; (8009f04 <xPortStartScheduler+0x134>)
 8009e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ea6:	4b18      	ldr	r3, [pc, #96]	; (8009f08 <xPortStartScheduler+0x138>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a17      	ldr	r2, [pc, #92]	; (8009f08 <xPortStartScheduler+0x138>)
 8009eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009eb2:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <xPortStartScheduler+0x138>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a14      	ldr	r2, [pc, #80]	; (8009f08 <xPortStartScheduler+0x138>)
 8009eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ebe:	f000 f8dd 	bl	800a07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <xPortStartScheduler+0x13c>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ec8:	f000 f8fc 	bl	800a0c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ecc:	4b10      	ldr	r3, [pc, #64]	; (8009f10 <xPortStartScheduler+0x140>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a0f      	ldr	r2, [pc, #60]	; (8009f10 <xPortStartScheduler+0x140>)
 8009ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ed8:	f7ff ff66 	bl	8009da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009edc:	f7ff f84c 	bl	8008f78 <vTaskSwitchContext>
	prvTaskExitError();
 8009ee0:	f7ff ff22 	bl	8009d28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	e000ed00 	.word	0xe000ed00
 8009ef4:	410fc271 	.word	0x410fc271
 8009ef8:	410fc270 	.word	0x410fc270
 8009efc:	e000e400 	.word	0xe000e400
 8009f00:	20001bdc 	.word	0x20001bdc
 8009f04:	20001be0 	.word	0x20001be0
 8009f08:	e000ed20 	.word	0xe000ed20
 8009f0c:	20000138 	.word	0x20000138
 8009f10:	e000ef34 	.word	0xe000ef34

08009f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	607b      	str	r3, [r7, #4]
}
 8009f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <vPortEnterCritical+0x58>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3301      	adds	r3, #1
 8009f34:	4a0d      	ldr	r2, [pc, #52]	; (8009f6c <vPortEnterCritical+0x58>)
 8009f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <vPortEnterCritical+0x58>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d10f      	bne.n	8009f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <vPortEnterCritical+0x5c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	603b      	str	r3, [r7, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <vPortEnterCritical+0x4a>
	}
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	20000138 	.word	0x20000138
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f7a:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <vPortExitCritical+0x50>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <vPortExitCritical+0x24>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	607b      	str	r3, [r7, #4]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <vPortExitCritical+0x50>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <vPortExitCritical+0x50>)
 8009fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fa2:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <vPortExitCritical+0x50>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <vPortExitCritical+0x42>
 8009faa:	2300      	movs	r3, #0
 8009fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	f383 8811 	msr	BASEPRI, r3
}
 8009fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000138 	.word	0x20000138
	...

08009fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fd0:	f3ef 8009 	mrs	r0, PSP
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	4b15      	ldr	r3, [pc, #84]	; (800a030 <pxCurrentTCBConst>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	f01e 0f10 	tst.w	lr, #16
 8009fe0:	bf08      	it	eq
 8009fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fea:	6010      	str	r0, [r2, #0]
 8009fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ff4:	f380 8811 	msr	BASEPRI, r0
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f7fe ffba 	bl	8008f78 <vTaskSwitchContext>
 800a004:	f04f 0000 	mov.w	r0, #0
 800a008:	f380 8811 	msr	BASEPRI, r0
 800a00c:	bc09      	pop	{r0, r3}
 800a00e:	6819      	ldr	r1, [r3, #0]
 800a010:	6808      	ldr	r0, [r1, #0]
 800a012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a016:	f01e 0f10 	tst.w	lr, #16
 800a01a:	bf08      	it	eq
 800a01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a020:	f380 8809 	msr	PSP, r0
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w

0800a030 <pxCurrentTCBConst>:
 800a030:	200015b0 	.word	0x200015b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop

0800a038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	607b      	str	r3, [r7, #4]
}
 800a050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a052:	f7fe fed7 	bl	8008e04 <xTaskIncrementTick>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <xPortSysTickHandler+0x40>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	f383 8811 	msr	BASEPRI, r3
}
 800a06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a080:	4b0b      	ldr	r3, [pc, #44]	; (800a0b0 <vPortSetupTimerInterrupt+0x34>)
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <vPortSetupTimerInterrupt+0x38>)
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a08c:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <vPortSetupTimerInterrupt+0x3c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a0a      	ldr	r2, [pc, #40]	; (800a0bc <vPortSetupTimerInterrupt+0x40>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	099b      	lsrs	r3, r3, #6
 800a098:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <vPortSetupTimerInterrupt+0x44>)
 800a09a:	3b01      	subs	r3, #1
 800a09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a09e:	4b04      	ldr	r3, [pc, #16]	; (800a0b0 <vPortSetupTimerInterrupt+0x34>)
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	e000e010 	.word	0xe000e010
 800a0b4:	e000e018 	.word	0xe000e018
 800a0b8:	2000012c 	.word	0x2000012c
 800a0bc:	10624dd3 	.word	0x10624dd3
 800a0c0:	e000e014 	.word	0xe000e014

0800a0c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0d4 <vPortEnableVFP+0x10>
 800a0c8:	6801      	ldr	r1, [r0, #0]
 800a0ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0ce:	6001      	str	r1, [r0, #0]
 800a0d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0d2:	bf00      	nop
 800a0d4:	e000ed88 	.word	0xe000ed88

0800a0d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0de:	f3ef 8305 	mrs	r3, IPSR
 800a0e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b0f      	cmp	r3, #15
 800a0e8:	d914      	bls.n	800a114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0ea:	4a17      	ldr	r2, [pc, #92]	; (800a148 <vPortValidateInterruptPriority+0x70>)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0f4:	4b15      	ldr	r3, [pc, #84]	; (800a14c <vPortValidateInterruptPriority+0x74>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	7afa      	ldrb	r2, [r7, #11]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d20a      	bcs.n	800a114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	607b      	str	r3, [r7, #4]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a114:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <vPortValidateInterruptPriority+0x78>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a11c:	4b0d      	ldr	r3, [pc, #52]	; (800a154 <vPortValidateInterruptPriority+0x7c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d90a      	bls.n	800a13a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	603b      	str	r3, [r7, #0]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <vPortValidateInterruptPriority+0x60>
	}
 800a13a:	bf00      	nop
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	e000e3f0 	.word	0xe000e3f0
 800a14c:	20001bdc 	.word	0x20001bdc
 800a150:	e000ed0c 	.word	0xe000ed0c
 800a154:	20001be0 	.word	0x20001be0

0800a158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	; 0x28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a160:	2300      	movs	r3, #0
 800a162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a164:	f7fe fd92 	bl	8008c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a168:	4b5b      	ldr	r3, [pc, #364]	; (800a2d8 <pvPortMalloc+0x180>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a170:	f000 f920 	bl	800a3b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a174:	4b59      	ldr	r3, [pc, #356]	; (800a2dc <pvPortMalloc+0x184>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 8093 	bne.w	800a2a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01d      	beq.n	800a1c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a188:	2208      	movs	r2, #8
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b00      	cmp	r3, #0
 800a198:	d014      	beq.n	800a1c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f023 0307 	bic.w	r3, r3, #7
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	617b      	str	r3, [r7, #20]
}
 800a1c0:	bf00      	nop
 800a1c2:	e7fe      	b.n	800a1c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d06e      	beq.n	800a2a8 <pvPortMalloc+0x150>
 800a1ca:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <pvPortMalloc+0x188>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d869      	bhi.n	800a2a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1d4:	4b43      	ldr	r3, [pc, #268]	; (800a2e4 <pvPortMalloc+0x18c>)
 800a1d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1d8:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <pvPortMalloc+0x18c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1de:	e004      	b.n	800a1ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d903      	bls.n	800a1fc <pvPortMalloc+0xa4>
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f1      	bne.n	800a1e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1fc:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <pvPortMalloc+0x180>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a202:	429a      	cmp	r2, r3
 800a204:	d050      	beq.n	800a2a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2208      	movs	r2, #8
 800a20c:	4413      	add	r3, r2
 800a20e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	2308      	movs	r3, #8
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	429a      	cmp	r2, r3
 800a226:	d91f      	bls.n	800a268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <pvPortMalloc+0xf8>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	613b      	str	r3, [r7, #16]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	1ad2      	subs	r2, r2, r3
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a262:	69b8      	ldr	r0, [r7, #24]
 800a264:	f000 f908 	bl	800a478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a268:	4b1d      	ldr	r3, [pc, #116]	; (800a2e0 <pvPortMalloc+0x188>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <pvPortMalloc+0x188>)
 800a274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <pvPortMalloc+0x188>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <pvPortMalloc+0x190>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d203      	bcs.n	800a28a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a282:	4b17      	ldr	r3, [pc, #92]	; (800a2e0 <pvPortMalloc+0x188>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a18      	ldr	r2, [pc, #96]	; (800a2e8 <pvPortMalloc+0x190>)
 800a288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <pvPortMalloc+0x184>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	431a      	orrs	r2, r3
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a29e:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <pvPortMalloc+0x194>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	4a11      	ldr	r2, [pc, #68]	; (800a2ec <pvPortMalloc+0x194>)
 800a2a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2a8:	f7fe fcfe 	bl	8008ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <pvPortMalloc+0x174>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60fb      	str	r3, [r7, #12]
}
 800a2c8:	bf00      	nop
 800a2ca:	e7fe      	b.n	800a2ca <pvPortMalloc+0x172>
	return pvReturn;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3728      	adds	r7, #40	; 0x28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200057ec 	.word	0x200057ec
 800a2dc:	20005800 	.word	0x20005800
 800a2e0:	200057f0 	.word	0x200057f0
 800a2e4:	200057e4 	.word	0x200057e4
 800a2e8:	200057f4 	.word	0x200057f4
 800a2ec:	200057f8 	.word	0x200057f8

0800a2f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d04d      	beq.n	800a39e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a302:	2308      	movs	r3, #8
 800a304:	425b      	negs	r3, r3
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	4413      	add	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <vPortFree+0xb8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4013      	ands	r3, r2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <vPortFree+0x44>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	60fb      	str	r3, [r7, #12]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00a      	beq.n	800a352 <vPortFree+0x62>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60bb      	str	r3, [r7, #8]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <vPortFree+0xb8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4013      	ands	r3, r2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01e      	beq.n	800a39e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11a      	bne.n	800a39e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <vPortFree+0xb8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	43db      	mvns	r3, r3
 800a372:	401a      	ands	r2, r3
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a378:	f7fe fc88 	bl	8008c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <vPortFree+0xbc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4413      	add	r3, r2
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <vPortFree+0xbc>)
 800a388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f000 f874 	bl	800a478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <vPortFree+0xc0>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	4a06      	ldr	r2, [pc, #24]	; (800a3b0 <vPortFree+0xc0>)
 800a398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a39a:	f7fe fc85 	bl	8008ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a39e:	bf00      	nop
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20005800 	.word	0x20005800
 800a3ac:	200057f0 	.word	0x200057f0
 800a3b0:	200057fc 	.word	0x200057fc

0800a3b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a3be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3c0:	4b27      	ldr	r3, [pc, #156]	; (800a460 <prvHeapInit+0xac>)
 800a3c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00c      	beq.n	800a3e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3307      	adds	r3, #7
 800a3d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0307 	bic.w	r3, r3, #7
 800a3da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	4a1f      	ldr	r2, [pc, #124]	; (800a460 <prvHeapInit+0xac>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ec:	4a1d      	ldr	r2, [pc, #116]	; (800a464 <prvHeapInit+0xb0>)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <prvHeapInit+0xb0>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a400:	2208      	movs	r2, #8
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0307 	bic.w	r3, r3, #7
 800a40e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4a15      	ldr	r2, [pc, #84]	; (800a468 <prvHeapInit+0xb4>)
 800a414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a416:	4b14      	ldr	r3, [pc, #80]	; (800a468 <prvHeapInit+0xb4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <prvHeapInit+0xb4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvHeapInit+0xb4>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <prvHeapInit+0xb8>)
 800a442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	4a09      	ldr	r2, [pc, #36]	; (800a470 <prvHeapInit+0xbc>)
 800a44a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <prvHeapInit+0xc0>)
 800a44e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	20001be4 	.word	0x20001be4
 800a464:	200057e4 	.word	0x200057e4
 800a468:	200057ec 	.word	0x200057ec
 800a46c:	200057f4 	.word	0x200057f4
 800a470:	200057f0 	.word	0x200057f0
 800a474:	20005800 	.word	0x20005800

0800a478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a480:	4b28      	ldr	r3, [pc, #160]	; (800a524 <prvInsertBlockIntoFreeList+0xac>)
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e002      	b.n	800a48c <prvInsertBlockIntoFreeList+0x14>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d8f7      	bhi.n	800a486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d108      	bne.n	800a4ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d118      	bne.n	800a500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d00d      	beq.n	800a4f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	441a      	add	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	e008      	b.n	800a508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e003      	b.n	800a508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d002      	beq.n	800a516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	200057e4 	.word	0x200057e4
 800a528:	200057ec 	.word	0x200057ec

0800a52c <std>:
 800a52c:	2300      	movs	r3, #0
 800a52e:	b510      	push	{r4, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	e9c0 3300 	strd	r3, r3, [r0]
 800a536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a53a:	6083      	str	r3, [r0, #8]
 800a53c:	8181      	strh	r1, [r0, #12]
 800a53e:	6643      	str	r3, [r0, #100]	; 0x64
 800a540:	81c2      	strh	r2, [r0, #14]
 800a542:	6183      	str	r3, [r0, #24]
 800a544:	4619      	mov	r1, r3
 800a546:	2208      	movs	r2, #8
 800a548:	305c      	adds	r0, #92	; 0x5c
 800a54a:	f000 f9e5 	bl	800a918 <memset>
 800a54e:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <std+0x58>)
 800a550:	6263      	str	r3, [r4, #36]	; 0x24
 800a552:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <std+0x5c>)
 800a554:	62a3      	str	r3, [r4, #40]	; 0x28
 800a556:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <std+0x60>)
 800a558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a55a:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <std+0x64>)
 800a55c:	6323      	str	r3, [r4, #48]	; 0x30
 800a55e:	4b0d      	ldr	r3, [pc, #52]	; (800a594 <std+0x68>)
 800a560:	6224      	str	r4, [r4, #32]
 800a562:	429c      	cmp	r4, r3
 800a564:	d006      	beq.n	800a574 <std+0x48>
 800a566:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a56a:	4294      	cmp	r4, r2
 800a56c:	d002      	beq.n	800a574 <std+0x48>
 800a56e:	33d0      	adds	r3, #208	; 0xd0
 800a570:	429c      	cmp	r4, r3
 800a572:	d105      	bne.n	800a580 <std+0x54>
 800a574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a57c:	f000 ba9a 	b.w	800aab4 <__retarget_lock_init_recursive>
 800a580:	bd10      	pop	{r4, pc}
 800a582:	bf00      	nop
 800a584:	0800a769 	.word	0x0800a769
 800a588:	0800a78b 	.word	0x0800a78b
 800a58c:	0800a7c3 	.word	0x0800a7c3
 800a590:	0800a7e7 	.word	0x0800a7e7
 800a594:	20005804 	.word	0x20005804

0800a598 <stdio_exit_handler>:
 800a598:	4a02      	ldr	r2, [pc, #8]	; (800a5a4 <stdio_exit_handler+0xc>)
 800a59a:	4903      	ldr	r1, [pc, #12]	; (800a5a8 <stdio_exit_handler+0x10>)
 800a59c:	4803      	ldr	r0, [pc, #12]	; (800a5ac <stdio_exit_handler+0x14>)
 800a59e:	f000 b869 	b.w	800a674 <_fwalk_sglue>
 800a5a2:	bf00      	nop
 800a5a4:	2000013c 	.word	0x2000013c
 800a5a8:	0800add5 	.word	0x0800add5
 800a5ac:	20000148 	.word	0x20000148

0800a5b0 <cleanup_stdio>:
 800a5b0:	6841      	ldr	r1, [r0, #4]
 800a5b2:	4b0c      	ldr	r3, [pc, #48]	; (800a5e4 <cleanup_stdio+0x34>)
 800a5b4:	4299      	cmp	r1, r3
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	d001      	beq.n	800a5c0 <cleanup_stdio+0x10>
 800a5bc:	f000 fc0a 	bl	800add4 <_fflush_r>
 800a5c0:	68a1      	ldr	r1, [r4, #8]
 800a5c2:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <cleanup_stdio+0x38>)
 800a5c4:	4299      	cmp	r1, r3
 800a5c6:	d002      	beq.n	800a5ce <cleanup_stdio+0x1e>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fc03 	bl	800add4 <_fflush_r>
 800a5ce:	68e1      	ldr	r1, [r4, #12]
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <cleanup_stdio+0x3c>)
 800a5d2:	4299      	cmp	r1, r3
 800a5d4:	d004      	beq.n	800a5e0 <cleanup_stdio+0x30>
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	f000 bbfa 	b.w	800add4 <_fflush_r>
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20005804 	.word	0x20005804
 800a5e8:	2000586c 	.word	0x2000586c
 800a5ec:	200058d4 	.word	0x200058d4

0800a5f0 <global_stdio_init.part.0>:
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <global_stdio_init.part.0+0x30>)
 800a5f4:	4c0b      	ldr	r4, [pc, #44]	; (800a624 <global_stdio_init.part.0+0x34>)
 800a5f6:	4a0c      	ldr	r2, [pc, #48]	; (800a628 <global_stdio_init.part.0+0x38>)
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2104      	movs	r1, #4
 800a600:	f7ff ff94 	bl	800a52c <std>
 800a604:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a608:	2201      	movs	r2, #1
 800a60a:	2109      	movs	r1, #9
 800a60c:	f7ff ff8e 	bl	800a52c <std>
 800a610:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a614:	2202      	movs	r2, #2
 800a616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a61a:	2112      	movs	r1, #18
 800a61c:	f7ff bf86 	b.w	800a52c <std>
 800a620:	2000593c 	.word	0x2000593c
 800a624:	20005804 	.word	0x20005804
 800a628:	0800a599 	.word	0x0800a599

0800a62c <__sfp_lock_acquire>:
 800a62c:	4801      	ldr	r0, [pc, #4]	; (800a634 <__sfp_lock_acquire+0x8>)
 800a62e:	f000 ba42 	b.w	800aab6 <__retarget_lock_acquire_recursive>
 800a632:	bf00      	nop
 800a634:	20005945 	.word	0x20005945

0800a638 <__sfp_lock_release>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_release+0x8>)
 800a63a:	f000 ba3d 	b.w	800aab8 <__retarget_lock_release_recursive>
 800a63e:	bf00      	nop
 800a640:	20005945 	.word	0x20005945

0800a644 <__sinit>:
 800a644:	b510      	push	{r4, lr}
 800a646:	4604      	mov	r4, r0
 800a648:	f7ff fff0 	bl	800a62c <__sfp_lock_acquire>
 800a64c:	6a23      	ldr	r3, [r4, #32]
 800a64e:	b11b      	cbz	r3, 800a658 <__sinit+0x14>
 800a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a654:	f7ff bff0 	b.w	800a638 <__sfp_lock_release>
 800a658:	4b04      	ldr	r3, [pc, #16]	; (800a66c <__sinit+0x28>)
 800a65a:	6223      	str	r3, [r4, #32]
 800a65c:	4b04      	ldr	r3, [pc, #16]	; (800a670 <__sinit+0x2c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1f5      	bne.n	800a650 <__sinit+0xc>
 800a664:	f7ff ffc4 	bl	800a5f0 <global_stdio_init.part.0>
 800a668:	e7f2      	b.n	800a650 <__sinit+0xc>
 800a66a:	bf00      	nop
 800a66c:	0800a5b1 	.word	0x0800a5b1
 800a670:	2000593c 	.word	0x2000593c

0800a674 <_fwalk_sglue>:
 800a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a678:	4607      	mov	r7, r0
 800a67a:	4688      	mov	r8, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	2600      	movs	r6, #0
 800a680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a684:	f1b9 0901 	subs.w	r9, r9, #1
 800a688:	d505      	bpl.n	800a696 <_fwalk_sglue+0x22>
 800a68a:	6824      	ldr	r4, [r4, #0]
 800a68c:	2c00      	cmp	r4, #0
 800a68e:	d1f7      	bne.n	800a680 <_fwalk_sglue+0xc>
 800a690:	4630      	mov	r0, r6
 800a692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d907      	bls.n	800a6ac <_fwalk_sglue+0x38>
 800a69c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	d003      	beq.n	800a6ac <_fwalk_sglue+0x38>
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	47c0      	blx	r8
 800a6aa:	4306      	orrs	r6, r0
 800a6ac:	3568      	adds	r5, #104	; 0x68
 800a6ae:	e7e9      	b.n	800a684 <_fwalk_sglue+0x10>

0800a6b0 <_puts_r>:
 800a6b0:	6a03      	ldr	r3, [r0, #32]
 800a6b2:	b570      	push	{r4, r5, r6, lr}
 800a6b4:	6884      	ldr	r4, [r0, #8]
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <_puts_r+0x10>
 800a6bc:	f7ff ffc2 	bl	800a644 <__sinit>
 800a6c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c2:	07db      	lsls	r3, r3, #31
 800a6c4:	d405      	bmi.n	800a6d2 <_puts_r+0x22>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	0598      	lsls	r0, r3, #22
 800a6ca:	d402      	bmi.n	800a6d2 <_puts_r+0x22>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ce:	f000 f9f2 	bl	800aab6 <__retarget_lock_acquire_recursive>
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	0719      	lsls	r1, r3, #28
 800a6d6:	d513      	bpl.n	800a700 <_puts_r+0x50>
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	b18b      	cbz	r3, 800a700 <_puts_r+0x50>
 800a6dc:	3e01      	subs	r6, #1
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	60a3      	str	r3, [r4, #8]
 800a6e8:	b9e9      	cbnz	r1, 800a726 <_puts_r+0x76>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da2e      	bge.n	800a74c <_puts_r+0x9c>
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	210a      	movs	r1, #10
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f87b 	bl	800a7ee <__swbuf_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d007      	beq.n	800a70c <_puts_r+0x5c>
 800a6fc:	250a      	movs	r5, #10
 800a6fe:	e007      	b.n	800a710 <_puts_r+0x60>
 800a700:	4621      	mov	r1, r4
 800a702:	4628      	mov	r0, r5
 800a704:	f000 f8b0 	bl	800a868 <__swsetup_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d0e7      	beq.n	800a6dc <_puts_r+0x2c>
 800a70c:	f04f 35ff 	mov.w	r5, #4294967295
 800a710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a712:	07da      	lsls	r2, r3, #31
 800a714:	d405      	bmi.n	800a722 <_puts_r+0x72>
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	059b      	lsls	r3, r3, #22
 800a71a:	d402      	bmi.n	800a722 <_puts_r+0x72>
 800a71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a71e:	f000 f9cb 	bl	800aab8 <__retarget_lock_release_recursive>
 800a722:	4628      	mov	r0, r5
 800a724:	bd70      	pop	{r4, r5, r6, pc}
 800a726:	2b00      	cmp	r3, #0
 800a728:	da04      	bge.n	800a734 <_puts_r+0x84>
 800a72a:	69a2      	ldr	r2, [r4, #24]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	dc06      	bgt.n	800a73e <_puts_r+0x8e>
 800a730:	290a      	cmp	r1, #10
 800a732:	d004      	beq.n	800a73e <_puts_r+0x8e>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	7019      	strb	r1, [r3, #0]
 800a73c:	e7cf      	b.n	800a6de <_puts_r+0x2e>
 800a73e:	4622      	mov	r2, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f000 f854 	bl	800a7ee <__swbuf_r>
 800a746:	3001      	adds	r0, #1
 800a748:	d1c9      	bne.n	800a6de <_puts_r+0x2e>
 800a74a:	e7df      	b.n	800a70c <_puts_r+0x5c>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	250a      	movs	r5, #10
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	6022      	str	r2, [r4, #0]
 800a754:	701d      	strb	r5, [r3, #0]
 800a756:	e7db      	b.n	800a710 <_puts_r+0x60>

0800a758 <puts>:
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <puts+0xc>)
 800a75a:	4601      	mov	r1, r0
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	f7ff bfa7 	b.w	800a6b0 <_puts_r>
 800a762:	bf00      	nop
 800a764:	20000194 	.word	0x20000194

0800a768 <__sread>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	460c      	mov	r4, r1
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	f000 f952 	bl	800aa18 <_read_r>
 800a774:	2800      	cmp	r0, #0
 800a776:	bfab      	itete	ge
 800a778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a77a:	89a3      	ldrhlt	r3, [r4, #12]
 800a77c:	181b      	addge	r3, r3, r0
 800a77e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a782:	bfac      	ite	ge
 800a784:	6563      	strge	r3, [r4, #84]	; 0x54
 800a786:	81a3      	strhlt	r3, [r4, #12]
 800a788:	bd10      	pop	{r4, pc}

0800a78a <__swrite>:
 800a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	461f      	mov	r7, r3
 800a790:	898b      	ldrh	r3, [r1, #12]
 800a792:	05db      	lsls	r3, r3, #23
 800a794:	4605      	mov	r5, r0
 800a796:	460c      	mov	r4, r1
 800a798:	4616      	mov	r6, r2
 800a79a:	d505      	bpl.n	800a7a8 <__swrite+0x1e>
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f000 f926 	bl	800a9f4 <_lseek_r>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	f000 b93d 	b.w	800aa3c <_write_r>

0800a7c2 <__sseek>:
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ca:	f000 f913 	bl	800a9f4 <_lseek_r>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	bf15      	itete	ne
 800a7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7de:	81a3      	strheq	r3, [r4, #12]
 800a7e0:	bf18      	it	ne
 800a7e2:	81a3      	strhne	r3, [r4, #12]
 800a7e4:	bd10      	pop	{r4, pc}

0800a7e6 <__sclose>:
 800a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ea:	f000 b89d 	b.w	800a928 <_close_r>

0800a7ee <__swbuf_r>:
 800a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f0:	460e      	mov	r6, r1
 800a7f2:	4614      	mov	r4, r2
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	b118      	cbz	r0, 800a800 <__swbuf_r+0x12>
 800a7f8:	6a03      	ldr	r3, [r0, #32]
 800a7fa:	b90b      	cbnz	r3, 800a800 <__swbuf_r+0x12>
 800a7fc:	f7ff ff22 	bl	800a644 <__sinit>
 800a800:	69a3      	ldr	r3, [r4, #24]
 800a802:	60a3      	str	r3, [r4, #8]
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	071a      	lsls	r2, r3, #28
 800a808:	d525      	bpl.n	800a856 <__swbuf_r+0x68>
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	b31b      	cbz	r3, 800a856 <__swbuf_r+0x68>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	1a98      	subs	r0, r3, r2
 800a814:	6963      	ldr	r3, [r4, #20]
 800a816:	b2f6      	uxtb	r6, r6
 800a818:	4283      	cmp	r3, r0
 800a81a:	4637      	mov	r7, r6
 800a81c:	dc04      	bgt.n	800a828 <__swbuf_r+0x3a>
 800a81e:	4621      	mov	r1, r4
 800a820:	4628      	mov	r0, r5
 800a822:	f000 fad7 	bl	800add4 <_fflush_r>
 800a826:	b9e0      	cbnz	r0, 800a862 <__swbuf_r+0x74>
 800a828:	68a3      	ldr	r3, [r4, #8]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	60a3      	str	r3, [r4, #8]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	6022      	str	r2, [r4, #0]
 800a834:	701e      	strb	r6, [r3, #0]
 800a836:	6962      	ldr	r2, [r4, #20]
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d004      	beq.n	800a848 <__swbuf_r+0x5a>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	07db      	lsls	r3, r3, #31
 800a842:	d506      	bpl.n	800a852 <__swbuf_r+0x64>
 800a844:	2e0a      	cmp	r6, #10
 800a846:	d104      	bne.n	800a852 <__swbuf_r+0x64>
 800a848:	4621      	mov	r1, r4
 800a84a:	4628      	mov	r0, r5
 800a84c:	f000 fac2 	bl	800add4 <_fflush_r>
 800a850:	b938      	cbnz	r0, 800a862 <__swbuf_r+0x74>
 800a852:	4638      	mov	r0, r7
 800a854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a856:	4621      	mov	r1, r4
 800a858:	4628      	mov	r0, r5
 800a85a:	f000 f805 	bl	800a868 <__swsetup_r>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d0d5      	beq.n	800a80e <__swbuf_r+0x20>
 800a862:	f04f 37ff 	mov.w	r7, #4294967295
 800a866:	e7f4      	b.n	800a852 <__swbuf_r+0x64>

0800a868 <__swsetup_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4b2a      	ldr	r3, [pc, #168]	; (800a914 <__swsetup_r+0xac>)
 800a86c:	4605      	mov	r5, r0
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	460c      	mov	r4, r1
 800a872:	b118      	cbz	r0, 800a87c <__swsetup_r+0x14>
 800a874:	6a03      	ldr	r3, [r0, #32]
 800a876:	b90b      	cbnz	r3, 800a87c <__swsetup_r+0x14>
 800a878:	f7ff fee4 	bl	800a644 <__sinit>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a882:	0718      	lsls	r0, r3, #28
 800a884:	d422      	bmi.n	800a8cc <__swsetup_r+0x64>
 800a886:	06d9      	lsls	r1, r3, #27
 800a888:	d407      	bmi.n	800a89a <__swsetup_r+0x32>
 800a88a:	2309      	movs	r3, #9
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	e034      	b.n	800a904 <__swsetup_r+0x9c>
 800a89a:	0758      	lsls	r0, r3, #29
 800a89c:	d512      	bpl.n	800a8c4 <__swsetup_r+0x5c>
 800a89e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a0:	b141      	cbz	r1, 800a8b4 <__swsetup_r+0x4c>
 800a8a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8a6:	4299      	cmp	r1, r3
 800a8a8:	d002      	beq.n	800a8b0 <__swsetup_r+0x48>
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 f914 	bl	800aad8 <_free_r>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	6363      	str	r3, [r4, #52]	; 0x34
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	6063      	str	r3, [r4, #4]
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	f043 0308 	orr.w	r3, r3, #8
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	b94b      	cbnz	r3, 800a8e4 <__swsetup_r+0x7c>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8da:	d003      	beq.n	800a8e4 <__swsetup_r+0x7c>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 fac6 	bl	800ae70 <__smakebuf_r>
 800a8e4:	89a0      	ldrh	r0, [r4, #12]
 800a8e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8ea:	f010 0301 	ands.w	r3, r0, #1
 800a8ee:	d00a      	beq.n	800a906 <__swsetup_r+0x9e>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60a3      	str	r3, [r4, #8]
 800a8f4:	6963      	ldr	r3, [r4, #20]
 800a8f6:	425b      	negs	r3, r3
 800a8f8:	61a3      	str	r3, [r4, #24]
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	b943      	cbnz	r3, 800a910 <__swsetup_r+0xa8>
 800a8fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a902:	d1c4      	bne.n	800a88e <__swsetup_r+0x26>
 800a904:	bd38      	pop	{r3, r4, r5, pc}
 800a906:	0781      	lsls	r1, r0, #30
 800a908:	bf58      	it	pl
 800a90a:	6963      	ldrpl	r3, [r4, #20]
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	e7f4      	b.n	800a8fa <__swsetup_r+0x92>
 800a910:	2000      	movs	r0, #0
 800a912:	e7f7      	b.n	800a904 <__swsetup_r+0x9c>
 800a914:	20000194 	.word	0x20000194

0800a918 <memset>:
 800a918:	4402      	add	r2, r0
 800a91a:	4603      	mov	r3, r0
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d100      	bne.n	800a922 <memset+0xa>
 800a920:	4770      	bx	lr
 800a922:	f803 1b01 	strb.w	r1, [r3], #1
 800a926:	e7f9      	b.n	800a91c <memset+0x4>

0800a928 <_close_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d06      	ldr	r5, [pc, #24]	; (800a944 <_close_r+0x1c>)
 800a92c:	2300      	movs	r3, #0
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f7f7 fb13 	bl	8001f5e <_close>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_close_r+0x1a>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_close_r+0x1a>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20005940 	.word	0x20005940

0800a948 <_reclaim_reent>:
 800a948:	4b29      	ldr	r3, [pc, #164]	; (800a9f0 <_reclaim_reent+0xa8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4283      	cmp	r3, r0
 800a94e:	b570      	push	{r4, r5, r6, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	d04b      	beq.n	800a9ec <_reclaim_reent+0xa4>
 800a954:	69c3      	ldr	r3, [r0, #28]
 800a956:	b143      	cbz	r3, 800a96a <_reclaim_reent+0x22>
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d144      	bne.n	800a9e8 <_reclaim_reent+0xa0>
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	b111      	cbz	r1, 800a96a <_reclaim_reent+0x22>
 800a964:	4620      	mov	r0, r4
 800a966:	f000 f8b7 	bl	800aad8 <_free_r>
 800a96a:	6961      	ldr	r1, [r4, #20]
 800a96c:	b111      	cbz	r1, 800a974 <_reclaim_reent+0x2c>
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f8b2 	bl	800aad8 <_free_r>
 800a974:	69e1      	ldr	r1, [r4, #28]
 800a976:	b111      	cbz	r1, 800a97e <_reclaim_reent+0x36>
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 f8ad 	bl	800aad8 <_free_r>
 800a97e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a980:	b111      	cbz	r1, 800a988 <_reclaim_reent+0x40>
 800a982:	4620      	mov	r0, r4
 800a984:	f000 f8a8 	bl	800aad8 <_free_r>
 800a988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a98a:	b111      	cbz	r1, 800a992 <_reclaim_reent+0x4a>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 f8a3 	bl	800aad8 <_free_r>
 800a992:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a994:	b111      	cbz	r1, 800a99c <_reclaim_reent+0x54>
 800a996:	4620      	mov	r0, r4
 800a998:	f000 f89e 	bl	800aad8 <_free_r>
 800a99c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a99e:	b111      	cbz	r1, 800a9a6 <_reclaim_reent+0x5e>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 f899 	bl	800aad8 <_free_r>
 800a9a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a9a8:	b111      	cbz	r1, 800a9b0 <_reclaim_reent+0x68>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f894 	bl	800aad8 <_free_r>
 800a9b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x72>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 f88f 	bl	800aad8 <_free_r>
 800a9ba:	6a23      	ldr	r3, [r4, #32]
 800a9bc:	b1b3      	cbz	r3, 800a9ec <_reclaim_reent+0xa4>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9c4:	4718      	bx	r3
 800a9c6:	5949      	ldr	r1, [r1, r5]
 800a9c8:	b941      	cbnz	r1, 800a9dc <_reclaim_reent+0x94>
 800a9ca:	3504      	adds	r5, #4
 800a9cc:	69e3      	ldr	r3, [r4, #28]
 800a9ce:	2d80      	cmp	r5, #128	; 0x80
 800a9d0:	68d9      	ldr	r1, [r3, #12]
 800a9d2:	d1f8      	bne.n	800a9c6 <_reclaim_reent+0x7e>
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 f87f 	bl	800aad8 <_free_r>
 800a9da:	e7c0      	b.n	800a95e <_reclaim_reent+0x16>
 800a9dc:	680e      	ldr	r6, [r1, #0]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 f87a 	bl	800aad8 <_free_r>
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	e7ef      	b.n	800a9c8 <_reclaim_reent+0x80>
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	e7ef      	b.n	800a9cc <_reclaim_reent+0x84>
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000194 	.word	0x20000194

0800a9f4 <_lseek_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_lseek_r+0x20>)
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4608      	mov	r0, r1
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	602a      	str	r2, [r5, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f7f7 fad2 	bl	8001fac <_lseek>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_lseek_r+0x1e>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_lseek_r+0x1e>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	20005940 	.word	0x20005940

0800aa18 <_read_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d07      	ldr	r5, [pc, #28]	; (800aa38 <_read_r+0x20>)
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4611      	mov	r1, r2
 800aa22:	2200      	movs	r2, #0
 800aa24:	602a      	str	r2, [r5, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f7f7 fa60 	bl	8001eec <_read>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_read_r+0x1e>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_read_r+0x1e>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	20005940 	.word	0x20005940

0800aa3c <_write_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_write_r+0x20>)
 800aa40:	4604      	mov	r4, r0
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	602a      	str	r2, [r5, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f7f7 fa6b 	bl	8001f26 <_write>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_write_r+0x1e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_write_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20005940 	.word	0x20005940

0800aa60 <__errno>:
 800aa60:	4b01      	ldr	r3, [pc, #4]	; (800aa68 <__errno+0x8>)
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20000194 	.word	0x20000194

0800aa6c <__libc_init_array>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4d0d      	ldr	r5, [pc, #52]	; (800aaa4 <__libc_init_array+0x38>)
 800aa70:	4c0d      	ldr	r4, [pc, #52]	; (800aaa8 <__libc_init_array+0x3c>)
 800aa72:	1b64      	subs	r4, r4, r5
 800aa74:	10a4      	asrs	r4, r4, #2
 800aa76:	2600      	movs	r6, #0
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	d109      	bne.n	800aa90 <__libc_init_array+0x24>
 800aa7c:	4d0b      	ldr	r5, [pc, #44]	; (800aaac <__libc_init_array+0x40>)
 800aa7e:	4c0c      	ldr	r4, [pc, #48]	; (800aab0 <__libc_init_array+0x44>)
 800aa80:	f000 fa64 	bl	800af4c <_init>
 800aa84:	1b64      	subs	r4, r4, r5
 800aa86:	10a4      	asrs	r4, r4, #2
 800aa88:	2600      	movs	r6, #0
 800aa8a:	42a6      	cmp	r6, r4
 800aa8c:	d105      	bne.n	800aa9a <__libc_init_array+0x2e>
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa94:	4798      	blx	r3
 800aa96:	3601      	adds	r6, #1
 800aa98:	e7ee      	b.n	800aa78 <__libc_init_array+0xc>
 800aa9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9e:	4798      	blx	r3
 800aaa0:	3601      	adds	r6, #1
 800aaa2:	e7f2      	b.n	800aa8a <__libc_init_array+0x1e>
 800aaa4:	0800b11c 	.word	0x0800b11c
 800aaa8:	0800b11c 	.word	0x0800b11c
 800aaac:	0800b11c 	.word	0x0800b11c
 800aab0:	0800b120 	.word	0x0800b120

0800aab4 <__retarget_lock_init_recursive>:
 800aab4:	4770      	bx	lr

0800aab6 <__retarget_lock_acquire_recursive>:
 800aab6:	4770      	bx	lr

0800aab8 <__retarget_lock_release_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <memcpy>:
 800aaba:	440a      	add	r2, r1
 800aabc:	4291      	cmp	r1, r2
 800aabe:	f100 33ff 	add.w	r3, r0, #4294967295
 800aac2:	d100      	bne.n	800aac6 <memcpy+0xc>
 800aac4:	4770      	bx	lr
 800aac6:	b510      	push	{r4, lr}
 800aac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad0:	4291      	cmp	r1, r2
 800aad2:	d1f9      	bne.n	800aac8 <memcpy+0xe>
 800aad4:	bd10      	pop	{r4, pc}
	...

0800aad8 <_free_r>:
 800aad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aada:	2900      	cmp	r1, #0
 800aadc:	d044      	beq.n	800ab68 <_free_r+0x90>
 800aade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae2:	9001      	str	r0, [sp, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f1a1 0404 	sub.w	r4, r1, #4
 800aaea:	bfb8      	it	lt
 800aaec:	18e4      	addlt	r4, r4, r3
 800aaee:	f000 f8df 	bl	800acb0 <__malloc_lock>
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <_free_r+0x94>)
 800aaf4:	9801      	ldr	r0, [sp, #4]
 800aaf6:	6813      	ldr	r3, [r2, #0]
 800aaf8:	b933      	cbnz	r3, 800ab08 <_free_r+0x30>
 800aafa:	6063      	str	r3, [r4, #4]
 800aafc:	6014      	str	r4, [r2, #0]
 800aafe:	b003      	add	sp, #12
 800ab00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab04:	f000 b8da 	b.w	800acbc <__malloc_unlock>
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d908      	bls.n	800ab1e <_free_r+0x46>
 800ab0c:	6825      	ldr	r5, [r4, #0]
 800ab0e:	1961      	adds	r1, r4, r5
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf01      	itttt	eq
 800ab14:	6819      	ldreq	r1, [r3, #0]
 800ab16:	685b      	ldreq	r3, [r3, #4]
 800ab18:	1949      	addeq	r1, r1, r5
 800ab1a:	6021      	streq	r1, [r4, #0]
 800ab1c:	e7ed      	b.n	800aafa <_free_r+0x22>
 800ab1e:	461a      	mov	r2, r3
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	b10b      	cbz	r3, 800ab28 <_free_r+0x50>
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	d9fa      	bls.n	800ab1e <_free_r+0x46>
 800ab28:	6811      	ldr	r1, [r2, #0]
 800ab2a:	1855      	adds	r5, r2, r1
 800ab2c:	42a5      	cmp	r5, r4
 800ab2e:	d10b      	bne.n	800ab48 <_free_r+0x70>
 800ab30:	6824      	ldr	r4, [r4, #0]
 800ab32:	4421      	add	r1, r4
 800ab34:	1854      	adds	r4, r2, r1
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	6011      	str	r1, [r2, #0]
 800ab3a:	d1e0      	bne.n	800aafe <_free_r+0x26>
 800ab3c:	681c      	ldr	r4, [r3, #0]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	6053      	str	r3, [r2, #4]
 800ab42:	440c      	add	r4, r1
 800ab44:	6014      	str	r4, [r2, #0]
 800ab46:	e7da      	b.n	800aafe <_free_r+0x26>
 800ab48:	d902      	bls.n	800ab50 <_free_r+0x78>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	6003      	str	r3, [r0, #0]
 800ab4e:	e7d6      	b.n	800aafe <_free_r+0x26>
 800ab50:	6825      	ldr	r5, [r4, #0]
 800ab52:	1961      	adds	r1, r4, r5
 800ab54:	428b      	cmp	r3, r1
 800ab56:	bf04      	itt	eq
 800ab58:	6819      	ldreq	r1, [r3, #0]
 800ab5a:	685b      	ldreq	r3, [r3, #4]
 800ab5c:	6063      	str	r3, [r4, #4]
 800ab5e:	bf04      	itt	eq
 800ab60:	1949      	addeq	r1, r1, r5
 800ab62:	6021      	streq	r1, [r4, #0]
 800ab64:	6054      	str	r4, [r2, #4]
 800ab66:	e7ca      	b.n	800aafe <_free_r+0x26>
 800ab68:	b003      	add	sp, #12
 800ab6a:	bd30      	pop	{r4, r5, pc}
 800ab6c:	20005948 	.word	0x20005948

0800ab70 <sbrk_aligned>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	4e0e      	ldr	r6, [pc, #56]	; (800abac <sbrk_aligned+0x3c>)
 800ab74:	460c      	mov	r4, r1
 800ab76:	6831      	ldr	r1, [r6, #0]
 800ab78:	4605      	mov	r5, r0
 800ab7a:	b911      	cbnz	r1, 800ab82 <sbrk_aligned+0x12>
 800ab7c:	f000 f9d6 	bl	800af2c <_sbrk_r>
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f9d1 	bl	800af2c <_sbrk_r>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d00a      	beq.n	800aba4 <sbrk_aligned+0x34>
 800ab8e:	1cc4      	adds	r4, r0, #3
 800ab90:	f024 0403 	bic.w	r4, r4, #3
 800ab94:	42a0      	cmp	r0, r4
 800ab96:	d007      	beq.n	800aba8 <sbrk_aligned+0x38>
 800ab98:	1a21      	subs	r1, r4, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 f9c6 	bl	800af2c <_sbrk_r>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d101      	bne.n	800aba8 <sbrk_aligned+0x38>
 800aba4:	f04f 34ff 	mov.w	r4, #4294967295
 800aba8:	4620      	mov	r0, r4
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	2000594c 	.word	0x2000594c

0800abb0 <_malloc_r>:
 800abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb4:	1ccd      	adds	r5, r1, #3
 800abb6:	f025 0503 	bic.w	r5, r5, #3
 800abba:	3508      	adds	r5, #8
 800abbc:	2d0c      	cmp	r5, #12
 800abbe:	bf38      	it	cc
 800abc0:	250c      	movcc	r5, #12
 800abc2:	2d00      	cmp	r5, #0
 800abc4:	4607      	mov	r7, r0
 800abc6:	db01      	blt.n	800abcc <_malloc_r+0x1c>
 800abc8:	42a9      	cmp	r1, r5
 800abca:	d905      	bls.n	800abd8 <_malloc_r+0x28>
 800abcc:	230c      	movs	r3, #12
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	2600      	movs	r6, #0
 800abd2:	4630      	mov	r0, r6
 800abd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800acac <_malloc_r+0xfc>
 800abdc:	f000 f868 	bl	800acb0 <__malloc_lock>
 800abe0:	f8d8 3000 	ldr.w	r3, [r8]
 800abe4:	461c      	mov	r4, r3
 800abe6:	bb5c      	cbnz	r4, 800ac40 <_malloc_r+0x90>
 800abe8:	4629      	mov	r1, r5
 800abea:	4638      	mov	r0, r7
 800abec:	f7ff ffc0 	bl	800ab70 <sbrk_aligned>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	4604      	mov	r4, r0
 800abf4:	d155      	bne.n	800aca2 <_malloc_r+0xf2>
 800abf6:	f8d8 4000 	ldr.w	r4, [r8]
 800abfa:	4626      	mov	r6, r4
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	d145      	bne.n	800ac8c <_malloc_r+0xdc>
 800ac00:	2c00      	cmp	r4, #0
 800ac02:	d048      	beq.n	800ac96 <_malloc_r+0xe6>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	4631      	mov	r1, r6
 800ac08:	4638      	mov	r0, r7
 800ac0a:	eb04 0903 	add.w	r9, r4, r3
 800ac0e:	f000 f98d 	bl	800af2c <_sbrk_r>
 800ac12:	4581      	cmp	r9, r0
 800ac14:	d13f      	bne.n	800ac96 <_malloc_r+0xe6>
 800ac16:	6821      	ldr	r1, [r4, #0]
 800ac18:	1a6d      	subs	r5, r5, r1
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff ffa7 	bl	800ab70 <sbrk_aligned>
 800ac22:	3001      	adds	r0, #1
 800ac24:	d037      	beq.n	800ac96 <_malloc_r+0xe6>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	442b      	add	r3, r5
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d038      	beq.n	800aca6 <_malloc_r+0xf6>
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	42a2      	cmp	r2, r4
 800ac38:	d12b      	bne.n	800ac92 <_malloc_r+0xe2>
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	e00f      	b.n	800ac60 <_malloc_r+0xb0>
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	1b52      	subs	r2, r2, r5
 800ac44:	d41f      	bmi.n	800ac86 <_malloc_r+0xd6>
 800ac46:	2a0b      	cmp	r2, #11
 800ac48:	d917      	bls.n	800ac7a <_malloc_r+0xca>
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	6025      	str	r5, [r4, #0]
 800ac50:	bf18      	it	ne
 800ac52:	6059      	strne	r1, [r3, #4]
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	bf08      	it	eq
 800ac58:	f8c8 1000 	streq.w	r1, [r8]
 800ac5c:	5162      	str	r2, [r4, r5]
 800ac5e:	604b      	str	r3, [r1, #4]
 800ac60:	4638      	mov	r0, r7
 800ac62:	f104 060b 	add.w	r6, r4, #11
 800ac66:	f000 f829 	bl	800acbc <__malloc_unlock>
 800ac6a:	f026 0607 	bic.w	r6, r6, #7
 800ac6e:	1d23      	adds	r3, r4, #4
 800ac70:	1af2      	subs	r2, r6, r3
 800ac72:	d0ae      	beq.n	800abd2 <_malloc_r+0x22>
 800ac74:	1b9b      	subs	r3, r3, r6
 800ac76:	50a3      	str	r3, [r4, r2]
 800ac78:	e7ab      	b.n	800abd2 <_malloc_r+0x22>
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6862      	ldr	r2, [r4, #4]
 800ac7e:	d1dd      	bne.n	800ac3c <_malloc_r+0x8c>
 800ac80:	f8c8 2000 	str.w	r2, [r8]
 800ac84:	e7ec      	b.n	800ac60 <_malloc_r+0xb0>
 800ac86:	4623      	mov	r3, r4
 800ac88:	6864      	ldr	r4, [r4, #4]
 800ac8a:	e7ac      	b.n	800abe6 <_malloc_r+0x36>
 800ac8c:	4634      	mov	r4, r6
 800ac8e:	6876      	ldr	r6, [r6, #4]
 800ac90:	e7b4      	b.n	800abfc <_malloc_r+0x4c>
 800ac92:	4613      	mov	r3, r2
 800ac94:	e7cc      	b.n	800ac30 <_malloc_r+0x80>
 800ac96:	230c      	movs	r3, #12
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f000 f80e 	bl	800acbc <__malloc_unlock>
 800aca0:	e797      	b.n	800abd2 <_malloc_r+0x22>
 800aca2:	6025      	str	r5, [r4, #0]
 800aca4:	e7dc      	b.n	800ac60 <_malloc_r+0xb0>
 800aca6:	605b      	str	r3, [r3, #4]
 800aca8:	deff      	udf	#255	; 0xff
 800acaa:	bf00      	nop
 800acac:	20005948 	.word	0x20005948

0800acb0 <__malloc_lock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_lock+0x8>)
 800acb2:	f7ff bf00 	b.w	800aab6 <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	20005944 	.word	0x20005944

0800acbc <__malloc_unlock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__malloc_unlock+0x8>)
 800acbe:	f7ff befb 	b.w	800aab8 <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	20005944 	.word	0x20005944

0800acc8 <__sflush_r>:
 800acc8:	898a      	ldrh	r2, [r1, #12]
 800acca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acce:	4605      	mov	r5, r0
 800acd0:	0710      	lsls	r0, r2, #28
 800acd2:	460c      	mov	r4, r1
 800acd4:	d458      	bmi.n	800ad88 <__sflush_r+0xc0>
 800acd6:	684b      	ldr	r3, [r1, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dc05      	bgt.n	800ace8 <__sflush_r+0x20>
 800acdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dc02      	bgt.n	800ace8 <__sflush_r+0x20>
 800ace2:	2000      	movs	r0, #0
 800ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acea:	2e00      	cmp	r6, #0
 800acec:	d0f9      	beq.n	800ace2 <__sflush_r+0x1a>
 800acee:	2300      	movs	r3, #0
 800acf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acf4:	682f      	ldr	r7, [r5, #0]
 800acf6:	6a21      	ldr	r1, [r4, #32]
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	d032      	beq.n	800ad62 <__sflush_r+0x9a>
 800acfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	075a      	lsls	r2, r3, #29
 800ad02:	d505      	bpl.n	800ad10 <__sflush_r+0x48>
 800ad04:	6863      	ldr	r3, [r4, #4]
 800ad06:	1ac0      	subs	r0, r0, r3
 800ad08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad0a:	b10b      	cbz	r3, 800ad10 <__sflush_r+0x48>
 800ad0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad0e:	1ac0      	subs	r0, r0, r3
 800ad10:	2300      	movs	r3, #0
 800ad12:	4602      	mov	r2, r0
 800ad14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad16:	6a21      	ldr	r1, [r4, #32]
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	d106      	bne.n	800ad30 <__sflush_r+0x68>
 800ad22:	6829      	ldr	r1, [r5, #0]
 800ad24:	291d      	cmp	r1, #29
 800ad26:	d82b      	bhi.n	800ad80 <__sflush_r+0xb8>
 800ad28:	4a29      	ldr	r2, [pc, #164]	; (800add0 <__sflush_r+0x108>)
 800ad2a:	410a      	asrs	r2, r1
 800ad2c:	07d6      	lsls	r6, r2, #31
 800ad2e:	d427      	bmi.n	800ad80 <__sflush_r+0xb8>
 800ad30:	2200      	movs	r2, #0
 800ad32:	6062      	str	r2, [r4, #4]
 800ad34:	04d9      	lsls	r1, r3, #19
 800ad36:	6922      	ldr	r2, [r4, #16]
 800ad38:	6022      	str	r2, [r4, #0]
 800ad3a:	d504      	bpl.n	800ad46 <__sflush_r+0x7e>
 800ad3c:	1c42      	adds	r2, r0, #1
 800ad3e:	d101      	bne.n	800ad44 <__sflush_r+0x7c>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b903      	cbnz	r3, 800ad46 <__sflush_r+0x7e>
 800ad44:	6560      	str	r0, [r4, #84]	; 0x54
 800ad46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad48:	602f      	str	r7, [r5, #0]
 800ad4a:	2900      	cmp	r1, #0
 800ad4c:	d0c9      	beq.n	800ace2 <__sflush_r+0x1a>
 800ad4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad52:	4299      	cmp	r1, r3
 800ad54:	d002      	beq.n	800ad5c <__sflush_r+0x94>
 800ad56:	4628      	mov	r0, r5
 800ad58:	f7ff febe 	bl	800aad8 <_free_r>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	6360      	str	r0, [r4, #52]	; 0x34
 800ad60:	e7c0      	b.n	800ace4 <__sflush_r+0x1c>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b0      	blx	r6
 800ad68:	1c41      	adds	r1, r0, #1
 800ad6a:	d1c8      	bne.n	800acfe <__sflush_r+0x36>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0c5      	beq.n	800acfe <__sflush_r+0x36>
 800ad72:	2b1d      	cmp	r3, #29
 800ad74:	d001      	beq.n	800ad7a <__sflush_r+0xb2>
 800ad76:	2b16      	cmp	r3, #22
 800ad78:	d101      	bne.n	800ad7e <__sflush_r+0xb6>
 800ad7a:	602f      	str	r7, [r5, #0]
 800ad7c:	e7b1      	b.n	800ace2 <__sflush_r+0x1a>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	e7ad      	b.n	800ace4 <__sflush_r+0x1c>
 800ad88:	690f      	ldr	r7, [r1, #16]
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	d0a9      	beq.n	800ace2 <__sflush_r+0x1a>
 800ad8e:	0793      	lsls	r3, r2, #30
 800ad90:	680e      	ldr	r6, [r1, #0]
 800ad92:	bf08      	it	eq
 800ad94:	694b      	ldreq	r3, [r1, #20]
 800ad96:	600f      	str	r7, [r1, #0]
 800ad98:	bf18      	it	ne
 800ad9a:	2300      	movne	r3, #0
 800ad9c:	eba6 0807 	sub.w	r8, r6, r7
 800ada0:	608b      	str	r3, [r1, #8]
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	dd9c      	ble.n	800ace2 <__sflush_r+0x1a>
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adac:	4643      	mov	r3, r8
 800adae:	463a      	mov	r2, r7
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b0      	blx	r6
 800adb4:	2800      	cmp	r0, #0
 800adb6:	dc06      	bgt.n	800adc6 <__sflush_r+0xfe>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	e78e      	b.n	800ace4 <__sflush_r+0x1c>
 800adc6:	4407      	add	r7, r0
 800adc8:	eba8 0800 	sub.w	r8, r8, r0
 800adcc:	e7e9      	b.n	800ada2 <__sflush_r+0xda>
 800adce:	bf00      	nop
 800add0:	dfbffffe 	.word	0xdfbffffe

0800add4 <_fflush_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	690b      	ldr	r3, [r1, #16]
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	b913      	cbnz	r3, 800ade4 <_fflush_r+0x10>
 800adde:	2500      	movs	r5, #0
 800ade0:	4628      	mov	r0, r5
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	b118      	cbz	r0, 800adee <_fflush_r+0x1a>
 800ade6:	6a03      	ldr	r3, [r0, #32]
 800ade8:	b90b      	cbnz	r3, 800adee <_fflush_r+0x1a>
 800adea:	f7ff fc2b 	bl	800a644 <__sinit>
 800adee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f3      	beq.n	800adde <_fflush_r+0xa>
 800adf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adf8:	07d0      	lsls	r0, r2, #31
 800adfa:	d404      	bmi.n	800ae06 <_fflush_r+0x32>
 800adfc:	0599      	lsls	r1, r3, #22
 800adfe:	d402      	bmi.n	800ae06 <_fflush_r+0x32>
 800ae00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae02:	f7ff fe58 	bl	800aab6 <__retarget_lock_acquire_recursive>
 800ae06:	4628      	mov	r0, r5
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f7ff ff5d 	bl	800acc8 <__sflush_r>
 800ae0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae10:	07da      	lsls	r2, r3, #31
 800ae12:	4605      	mov	r5, r0
 800ae14:	d4e4      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	059b      	lsls	r3, r3, #22
 800ae1a:	d4e1      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae1e:	f7ff fe4b 	bl	800aab8 <__retarget_lock_release_recursive>
 800ae22:	e7dd      	b.n	800ade0 <_fflush_r+0xc>

0800ae24 <__swhatbuf_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	b096      	sub	sp, #88	; 0x58
 800ae30:	4615      	mov	r5, r2
 800ae32:	461e      	mov	r6, r3
 800ae34:	da0d      	bge.n	800ae52 <__swhatbuf_r+0x2e>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae3c:	f04f 0100 	mov.w	r1, #0
 800ae40:	bf0c      	ite	eq
 800ae42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae46:	2340      	movne	r3, #64	; 0x40
 800ae48:	2000      	movs	r0, #0
 800ae4a:	6031      	str	r1, [r6, #0]
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	b016      	add	sp, #88	; 0x58
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	466a      	mov	r2, sp
 800ae54:	f000 f848 	bl	800aee8 <_fstat_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	dbec      	blt.n	800ae36 <__swhatbuf_r+0x12>
 800ae5c:	9901      	ldr	r1, [sp, #4]
 800ae5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae66:	4259      	negs	r1, r3
 800ae68:	4159      	adcs	r1, r3
 800ae6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6e:	e7eb      	b.n	800ae48 <__swhatbuf_r+0x24>

0800ae70 <__smakebuf_r>:
 800ae70:	898b      	ldrh	r3, [r1, #12]
 800ae72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae74:	079d      	lsls	r5, r3, #30
 800ae76:	4606      	mov	r6, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	d507      	bpl.n	800ae8c <__smakebuf_r+0x1c>
 800ae7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	2301      	movs	r3, #1
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	b002      	add	sp, #8
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	ab01      	add	r3, sp, #4
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f7ff ffc8 	bl	800ae24 <__swhatbuf_r>
 800ae94:	9900      	ldr	r1, [sp, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff fe89 	bl	800abb0 <_malloc_r>
 800ae9e:	b948      	cbnz	r0, 800aeb4 <__smakebuf_r+0x44>
 800aea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea4:	059a      	lsls	r2, r3, #22
 800aea6:	d4ef      	bmi.n	800ae88 <__smakebuf_r+0x18>
 800aea8:	f023 0303 	bic.w	r3, r3, #3
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	e7e3      	b.n	800ae7c <__smakebuf_r+0xc>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	9b00      	ldr	r3, [sp, #0]
 800aec0:	6163      	str	r3, [r4, #20]
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	6120      	str	r0, [r4, #16]
 800aec6:	b15b      	cbz	r3, 800aee0 <__smakebuf_r+0x70>
 800aec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 f81d 	bl	800af0c <_isatty_r>
 800aed2:	b128      	cbz	r0, 800aee0 <__smakebuf_r+0x70>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	431d      	orrs	r5, r3
 800aee4:	81a5      	strh	r5, [r4, #12]
 800aee6:	e7cf      	b.n	800ae88 <__smakebuf_r+0x18>

0800aee8 <_fstat_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	; (800af08 <_fstat_r+0x20>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	4611      	mov	r1, r2
 800aef4:	602b      	str	r3, [r5, #0]
 800aef6:	f7f7 f83e 	bl	8001f76 <_fstat>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d102      	bne.n	800af04 <_fstat_r+0x1c>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b103      	cbz	r3, 800af04 <_fstat_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	20005940 	.word	0x20005940

0800af0c <_isatty_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	; (800af28 <_isatty_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f7 f83d 	bl	8001f96 <_isatty>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_isatty_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_isatty_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20005940 	.word	0x20005940

0800af2c <_sbrk_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d06      	ldr	r5, [pc, #24]	; (800af48 <_sbrk_r+0x1c>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	602b      	str	r3, [r5, #0]
 800af38:	f7f7 f846 	bl	8001fc8 <_sbrk>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_sbrk_r+0x1a>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_sbrk_r+0x1a>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20005940 	.word	0x20005940

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
