
05_ALT.TIMER_DHT11_ULTRASONIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080083e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000af0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b5c  20000b5c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019399  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035c7  00000000  00000000  00039478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001678  00000000  00000000  0003ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001196  00000000  00000000  0003e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002754f  00000000  00000000  0003f24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b85a  00000000  00000000  0006679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e758c  00000000  00000000  00081ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a28  00000000  00000000  00169584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0016ffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008258 	.word	0x08008258

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08008258 	.word	0x08008258

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <DHT11_processing>:
	
}

int dht11time=150;
void DHT11_processing(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if(dht11_on)
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <DHT11_processing+0x94>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03d      	beq.n	8000e02 <DHT11_processing+0x8a>
	{
		if (TIM10_10ms_counter >= dht11time)  //1500ms
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <DHT11_processing+0x98>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <DHT11_processing+0x9c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db37      	blt.n	8000e02 <DHT11_processing+0x8a>
		{
			TIM10_10ms_counter=0;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <DHT11_processing+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			DHT11_trriger();
 8000d98:	f000 f856 	bl	8000e48 <DHT11_trriger>
			DHT11_DataLine_Input();
 8000d9c:	f000 f86a 	bl	8000e74 <DHT11_DataLine_Input>
			DHT11_dumi_read();
 8000da0:	f000 f8d8 	bl	8000f54 <DHT11_dumi_read>

			i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a0 	bl	8000ee8 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
			d_RH = DHT11_rx_Data();
 8000dac:	f000 f89c 	bl	8000ee8 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
			i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f898 	bl	8000ee8 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
			d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f894 	bl	8000ee8 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

			DHT11_DataLine_Output();
 8000dc4:	f000 f872 	bl	8000eac <DHT11_DataLine_Output>
			HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <DHT11_processing+0xa0>)
 8000dce:	f002 fbf9 	bl	80035c4 <HAL_GPIO_WritePin>
			printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4811      	ldr	r0, [pc, #68]	; (8000e1c <DHT11_processing+0xa4>)
 8000dd8:	f006 f984 	bl	80070e4 <iprintf>
			printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <DHT11_processing+0xa8>)
 8000de2:	f006 f97f 	bl	80070e4 <iprintf>

			sprintf(lcd_buff, "[Tmp]%d [Wet]%d", (int)i_Tmp, (int)i_RH);
 8000de6:	7d7a      	ldrb	r2, [r7, #21]
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4638      	mov	r0, r7
 8000dec:	490d      	ldr	r1, [pc, #52]	; (8000e24 <DHT11_processing+0xac>)
 8000dee:	f006 f9e7 	bl	80071c0 <siprintf>
			move_cursor(0,0);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f961 	bl	80010bc <move_cursor>
			lcd_string(lcd_buff);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f948 	bl	8001092 <lcd_string>
		}
	}
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000988 	.word	0x20000988
 8000e10:	20000980 	.word	0x20000980
 8000e14:	20000000 	.word	0x20000000
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	08008280 	.word	0x08008280
 8000e20:	0800828c 	.word	0x0800828c
 8000e24:	08008298 	.word	0x08008298

08000e28 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <DHT11_Init+0x1c>)
 8000e32:	f002 fbc7 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e3a:	f001 fd0f 	bl	800285c <HAL_Delay>
	return;
 8000e3e:	bf00      	nop
}
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020000 	.word	0x40020000

08000e48 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <DHT11_trriger+0x28>)
 8000e52:	f002 fbb7 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e56:	2014      	movs	r0, #20
 8000e58:	f001 fd00 	bl	800285c <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <DHT11_trriger+0x28>)
 8000e62:	f002 fbaf 	bl	80035c4 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f000 fa98 	bl	800139c <delay_us>
	return;
 8000e6c:	bf00      	nop
}
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000

08000e74 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <DHT11_DataLine_Input+0x34>)
 8000e9a:	f002 f9cf 	bl	800323c <HAL_GPIO_Init>
	
	return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020000 	.word	0x40020000

08000eac <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <DHT11_DataLine_Output+0x38>)
 8000ed6:	f002 f9b1 	bl	800323c <HAL_GPIO_Init>
	
	return;
 8000eda:	bf00      	nop
}
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	e023      	b.n	8000f40 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000ef8:	bf00      	nop
 8000efa:	2101      	movs	r1, #1
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000efe:	f002 fb49 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f8      	beq.n	8000efa <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000f08:	2028      	movs	r0, #40	; 0x28
 8000f0a:	f000 fa47 	bl	800139c <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f14:	2101      	movs	r1, #1
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000f18:	f002 fb3c 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f2a:	bf00      	nop
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <DHT11_rx_Data+0x68>)
 8000f30:	f002 fb30 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d0f8      	beq.n	8000f2c <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddd8      	ble.n	8000ef8 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000

08000f54 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f58:	bf00      	nop
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f5e:	f002 fb19 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0f8      	beq.n	8000f5a <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f68:	bf00      	nop
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f6e:	f002 fb11 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f8      	beq.n	8000f6a <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f78:	bf00      	nop
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <DHT11_dumi_read+0x38>)
 8000f7e:	f002 fb09 	bl	8003594 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d0f8      	beq.n	8000f7a <DHT11_dumi_read+0x26>
	return;
 8000f88:	bf00      	nop
}
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020000 	.word	0x40020000

08000f90 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 030c 	orr.w	r3, r3, #12
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f043 030c 	orr.w	r3, r3, #12
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000fd0:	bf00      	nop
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2304      	movs	r3, #4
 8000fdc:	214e      	movs	r1, #78	; 0x4e
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <lcd_command+0x64>)
 8000fe0:	f002 fc4e 	bl	8003880 <HAL_I2C_Master_Transmit>
 8000fe4:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f3      	bne.n	8000fd2 <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 8000fea:	bf00      	nop
}
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002bc 	.word	0x200002bc

08000ff8 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f023 030f 	bic.w	r3, r3, #15
 8001008:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f043 030d 	orr.w	r3, r3, #13
 8001016:	b2db      	uxtb	r3, r3
 8001018:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f043 0309 	orr.w	r3, r3, #9
 8001020:	b2db      	uxtb	r3, r3
 8001022:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	f043 030d 	orr.w	r3, r3, #13
 800102a:	b2db      	uxtb	r3, r3
 800102c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	f043 0309 	orr.w	r3, r3, #9
 8001034:	b2db      	uxtb	r3, r3
 8001036:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001038:	bf00      	nop
 800103a:	f107 0208 	add.w	r2, r7, #8
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2304      	movs	r3, #4
 8001044:	214e      	movs	r1, #78	; 0x4e
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <lcd_data+0x64>)
 8001048:	f002 fc1a 	bl	8003880 <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f3      	bne.n	800103a <lcd_data+0x42>
		//HAL_Delay(1);
	}
	return;
 8001052:	bf00      	nop
}
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002bc 	.word	0x200002bc

08001060 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8001064:	2033      	movs	r0, #51	; 0x33
 8001066:	f7ff ff93 	bl	8000f90 <lcd_command>
	lcd_command(0x32);
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f7ff ff90 	bl	8000f90 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8001070:	2028      	movs	r0, #40	; 0x28
 8001072:	f7ff ff8d 	bl	8000f90 <lcd_command>
	lcd_command(DISPLAY_ON);
 8001076:	200c      	movs	r0, #12
 8001078:	f7ff ff8a 	bl	8000f90 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff ff87 	bl	8000f90 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff84 	bl	8000f90 <lcd_command>
	HAL_Delay(2);
 8001088:	2002      	movs	r0, #2
 800108a:	f001 fbe7 	bl	800285c <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	while(*str)
 800109a:	e006      	b.n	80010aa <lcd_string+0x18>
	{
		lcd_data(*str++);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffa7 	bl	8000ff8 <lcd_data>
	while(*str)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f4      	bne.n	800109c <lcd_string+0xa>
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff56 	bl	8000f90 <lcd_command>
	return;
 80010e4:	bf00      	nop
}
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <flower_on>:
#endif
	}
}

void flower_on()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	21ff      	movs	r1, #255	; 0xff
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <flower_on+0x5c>)
 80010f8:	f002 fa64 	bl	80035c4 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	e01a      	b.n	8001138 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8001102:	2210      	movs	r2, #16
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <flower_on+0x5c>)
 8001112:	f002 fa57 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8001116:	2208      	movs	r2, #8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	fa42 f303 	asr.w	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <flower_on+0x5c>)
 8001126:	f002 fa4d 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800112a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800112e:	f001 fb95 	bl	800285c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3301      	adds	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b03      	cmp	r3, #3
 800113c:	dde1      	ble.n	8001102 <flower_on+0x16>
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020c00 	.word	0x40020c00

0800114c <flower_off>:


void flower_off()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	21ff      	movs	r1, #255	; 0xff
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <flower_off+0x5c>)
 8001158:	f002 fa34 	bl	80035c4 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	e01a      	b.n	8001198 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	fa42 f303 	asr.w	r3, r2, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <flower_off+0x5c>)
 8001172:	f002 fa27 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8001176:	2201      	movs	r2, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <flower_off+0x5c>)
 8001186:	f002 fa1d 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800118a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800118e:	f001 fb65 	bl	800285c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b03      	cmp	r3, #3
 800119c:	dde1      	ble.n	8001162 <flower_off+0x16>
	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020c00 	.word	0x40020c00

080011ac <led_keepon_up>:

void led_keepon_up()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e00f      	b.n	80011d8 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <led_keepon_up+0x3c>)
 80011c8:	f002 f9fc 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80011cc:	20c8      	movs	r0, #200	; 0xc8
 80011ce:	f001 fb45 	bl	800285c <HAL_Delay>
	for (int i=0; i < 8; i++)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b07      	cmp	r3, #7
 80011dc:	ddec      	ble.n	80011b8 <led_keepon_up+0xc>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020c00 	.word	0x40020c00

080011ec <led_keepon_down>:

void led_keepon_down()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e00f      	b.n	8001218 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	fa42 f303 	asr.w	r3, r2, r3
 8001200:	b29b      	uxth	r3, r3
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <led_keepon_down+0x3c>)
 8001208:	f002 f9dc 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f001 fb25 	bl	800285c <HAL_Delay>
	for (int i=0; i < 8; i++)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b07      	cmp	r3, #7
 800121c:	ddec      	ble.n	80011f8 <led_keepon_down+0xc>
	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020c00 	.word	0x40020c00

0800122c <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <led_on_up+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2bc7      	cmp	r3, #199	; 0xc7
 8001236:	dd1e      	ble.n	8001276 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <led_on_up+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		led_all_off();
 800123e:	f000 f861 	bl	8001304 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <led_on_up+0x54>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <led_on_up+0x58>)
 8001254:	f002 f9b6 	bl	80035c4 <HAL_GPIO_WritePin>
		i++;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <led_on_up+0x54>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <led_on_up+0x54>)
 8001260:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <led_on_up+0x54>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b07      	cmp	r3, #7
 8001268:	dd05      	ble.n	8001276 <led_on_up+0x4a>
		{
			i=0;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <led_on_up+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <led_on_up+0x5c>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000990 	.word	0x20000990
 8001280:	2000008c 	.word	0x2000008c
 8001284:	40020c00 	.word	0x40020c00
 8001288:	20000088 	.word	0x20000088

0800128c <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <led_on_down+0x50>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2bc7      	cmp	r3, #199	; 0xc7
 8001296:	dd1e      	ble.n	80012d6 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <led_on_down+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
		led_all_off();
 800129e:	f000 f831 	bl	8001304 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <led_on_down+0x54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	fa42 f303 	asr.w	r3, r2, r3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2201      	movs	r2, #1
 80012b0:	4619      	mov	r1, r3
 80012b2:	480c      	ldr	r0, [pc, #48]	; (80012e4 <led_on_down+0x58>)
 80012b4:	f002 f986 	bl	80035c4 <HAL_GPIO_WritePin>
		i++;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <led_on_down+0x54>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <led_on_down+0x54>)
 80012c0:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <led_on_down+0x54>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b07      	cmp	r3, #7
 80012c8:	dd05      	ble.n	80012d6 <led_on_down+0x4a>
		{
			i=0;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <led_on_down+0x54>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <led_on_down+0x5c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000990 	.word	0x20000990
 80012e0:	20000090 	.word	0x20000090
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	20000088 	.word	0x20000088

080012ec <led_all_on>:

void led_all_on(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	21ff      	movs	r1, #255	; 0xff
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <led_all_on+0x14>)
 80012f6:	f002 f965 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020c00 	.word	0x40020c00

08001304 <led_all_off>:

void led_all_off(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <led_all_off+0x14>)
 800130e:	f002 f959 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020c00 	.word	0x40020c00

0800131c <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_SYSTICK_Handler+0x18>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_SYSTICK_Handler+0x18>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000990 	.word	0x20000990

08001338 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001340:	1d39      	adds	r1, r7, #4
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <__io_putchar+0x20>)
 800134a:	f004 fadc 	bl	8005906 <HAL_UART_Transmit>

  return ch;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003e8 	.word	0x200003e8

0800135c <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d109      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001376:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001380:	6013      	str	r3, [r2, #0]
	}
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40014400 	.word	0x40014400
 8001394:	20000980 	.word	0x20000980
 8001398:	20000984 	.word	0x20000984

0800139c <delay_us>:

void delay_us(unsigned long us)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <delay_us+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 80013ac:	bf00      	nop
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <delay_us+0x2c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d8f9      	bhi.n	80013ae <delay_us+0x12>
		;
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	200003a0 	.word	0x200003a0

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f001 f9d2 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f846 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 fa5a 	bl	8001890 <MX_GPIO_Init>
  MX_ETH_Init();
 80013dc:	f000 f8ac 	bl	8001538 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013e0:	f000 f9d4 	bl	800178c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013e4:	f000 fa26 	bl	8001834 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80013e8:	f000 f9fa 	bl	80017e0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80013ec:	f000 f986 	bl	80016fc <MX_TIM10_Init>
  MX_TIM11_Init();
 80013f0:	f000 f9a8 	bl	8001744 <MX_TIM11_Init>
  MX_TIM3_Init();
 80013f4:	f000 f92e 	bl	8001654 <MX_TIM3_Init>
  MX_I2C1_Init();
 80013f8:	f000 f8ec 	bl	80015d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80013fc:	2201      	movs	r2, #1
 80013fe:	4911      	ldr	r1, [pc, #68]	; (8001444 <main+0x78>)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <main+0x7c>)
 8001402:	f004 fb12 	bl	8005a2a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8001406:	2201      	movs	r2, #1
 8001408:	4910      	ldr	r1, [pc, #64]	; (800144c <main+0x80>)
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <main+0x84>)
 800140c:	f004 fb0d 	bl	8005a2a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <main+0x88>)
 8001412:	f003 fbbd 	bl	8004b90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <main+0x8c>)
 8001418:	f003 fbba 	bl	8004b90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 800141c:	2100      	movs	r1, #0
 800141e:	480f      	ldr	r0, [pc, #60]	; (800145c <main+0x90>)
 8001420:	f003 fc76 	bl	8004d10 <HAL_TIM_IC_Start_IT>
  DHT11_Init();
 8001424:	f7ff fd00 	bl	8000e28 <DHT11_Init>
  i2c_lcd_init();
 8001428:	f7ff fe1a 	bl	8001060 <i2c_lcd_init>

  TIM10_10ms_counter=0;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <main+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT11_processing();
 8001432:	f7ff fca1 	bl	8000d78 <DHT11_processing>
 	pc_command_processing();
 8001436:	f000 ff95 	bl	8002364 <pc_command_processing>
 	bt_command_processing();
 800143a:	f001 f849 	bl	80024d0 <bt_command_processing>
 	ultrasonic_processing();
 800143e:	f001 f8f7 	bl	8002630 <ultrasonic_processing>
	DHT11_processing();
 8001442:	e7f6      	b.n	8001432 <main+0x66>
 8001444:	2000097c 	.word	0x2000097c
 8001448:	200003e8 	.word	0x200003e8
 800144c:	2000097d 	.word	0x2000097d
 8001450:	2000042c 	.word	0x2000042c
 8001454:	20000358 	.word	0x20000358
 8001458:	200003a0 	.word	0x200003a0
 800145c:	20000310 	.word	0x20000310
 8001460:	20000980 	.word	0x20000980

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f005 ff9c 	bl	80073b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <SystemClock_Config+0xcc>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <SystemClock_Config+0xcc>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <SystemClock_Config+0xcc>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <SystemClock_Config+0xd0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <SystemClock_Config+0xd0>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <SystemClock_Config+0xd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014d8:	23a8      	movs	r3, #168	; 0xa8
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fe69 	bl	80041c0 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 fae6 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2105      	movs	r1, #5
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f8ca 	bl	80046b0 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001522:	f000 facf 	bl	8001ac4 <Error_Handler>
  }
}
 8001526:	bf00      	nop
 8001528:	3750      	adds	r7, #80	; 0x50
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_ETH_Init+0x84>)
 800153e:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <MX_ETH_Init+0x88>)
 8001540:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <MX_ETH_Init+0x8c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_ETH_Init+0x8c>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_ETH_Init+0x8c>)
 8001550:	22e1      	movs	r2, #225	; 0xe1
 8001552:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_ETH_Init+0x8c>)
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_ETH_Init+0x8c>)
 800155c:	2200      	movs	r2, #0
 800155e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_ETH_Init+0x8c>)
 8001562:	2200      	movs	r2, #0
 8001564:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_ETH_Init+0x84>)
 8001568:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <MX_ETH_Init+0x8c>)
 800156a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_ETH_Init+0x84>)
 800156e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001572:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_ETH_Init+0x84>)
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <MX_ETH_Init+0x90>)
 8001578:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_ETH_Init+0x84>)
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_ETH_Init+0x94>)
 800157e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_ETH_Init+0x84>)
 8001582:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001586:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_ETH_Init+0x84>)
 800158a:	f001 fb2f 	bl	8002bec <HAL_ETH_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001594:	f000 fa96 	bl	8001ac4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001598:	2238      	movs	r2, #56	; 0x38
 800159a:	2100      	movs	r1, #0
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_ETH_Init+0x98>)
 800159e:	f005 ff07 	bl	80073b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_ETH_Init+0x98>)
 80015a4:	2221      	movs	r2, #33	; 0x21
 80015a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_ETH_Init+0x98>)
 80015aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80015ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_ETH_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000020c 	.word	0x2000020c
 80015c0:	40028000 	.word	0x40028000
 80015c4:	20000994 	.word	0x20000994
 80015c8:	2000016c 	.word	0x2000016c
 80015cc:	200000cc 	.word	0x200000cc
 80015d0:	20000094 	.word	0x20000094

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_I2C1_Init+0x74>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MX_I2C1_Init+0x78>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_I2C1_Init+0x7c>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_I2C1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_I2C1_Init+0x74>)
 8001612:	f001 fff1 	bl	80035f8 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 fa52 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001620:	2100      	movs	r1, #0
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_I2C1_Init+0x74>)
 8001624:	f002 fc33 	bl	8003e8e <HAL_I2CEx_ConfigAnalogFilter>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800162e:	f000 fa49 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001632:	2100      	movs	r1, #0
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_I2C1_Init+0x74>)
 8001636:	f002 fc66 	bl	8003f06 <HAL_I2CEx_ConfigDigitalFilter>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001640:	f000 fa40 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200002bc 	.word	0x200002bc
 800164c:	40005400 	.word	0x40005400
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MX_TIM3_Init+0xa0>)
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_TIM3_Init+0xa4>)
 8001674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM3_Init+0xa0>)
 8001678:	2253      	movs	r2, #83	; 0x53
 800167a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM3_Init+0xa0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM3_Init+0xa0>)
 8001684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001688:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM3_Init+0xa0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM3_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <MX_TIM3_Init+0xa0>)
 8001698:	f003 faea 	bl	8004c70 <HAL_TIM_IC_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 fa0f 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <MX_TIM3_Init+0xa0>)
 80016b6:	f004 f849 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016c0:	f000 fa00 	bl	8001ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016c4:	230a      	movs	r3, #10
 80016c6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016c8:	2301      	movs	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM3_Init+0xa0>)
 80016dc:	f003 fd48 	bl	8005170 <HAL_TIM_IC_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80016e6:	f000 f9ed 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000310 	.word	0x20000310
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_TIM10_Init+0x40>)
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <MX_TIM10_Init+0x44>)
 8001704:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_TIM10_Init+0x40>)
 8001708:	22a7      	movs	r2, #167	; 0xa7
 800170a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_TIM10_Init+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_TIM10_Init+0x40>)
 8001714:	f242 720f 	movw	r2, #9999	; 0x270f
 8001718:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_TIM10_Init+0x40>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_TIM10_Init+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM10_Init+0x40>)
 8001728:	f003 f9e2 	bl	8004af0 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001732:	f000 f9c7 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000358 	.word	0x20000358
 8001740:	40014400 	.word	0x40014400

08001744 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_TIM11_Init+0x40>)
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <MX_TIM11_Init+0x44>)
 800174c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_TIM11_Init+0x40>)
 8001750:	22a7      	movs	r2, #167	; 0xa7
 8001752:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_TIM11_Init+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_TIM11_Init+0x40>)
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_TIM11_Init+0x40>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_TIM11_Init+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM11_Init+0x40>)
 8001770:	f003 f9be 	bl	8004af0 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800177a:	f000 f9a3 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003a0 	.word	0x200003a0
 8001788:	40014800 	.word	0x40014800

0800178c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART3_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 8001798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800179c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017c4:	f004 f852 	bl	800586c <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f979 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003e8 	.word	0x200003e8
 80017dc:	40004800 	.word	0x40004800

080017e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART6_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART6_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001818:	f004 f828 	bl	800586c <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 f94f 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000042c 	.word	0x2000042c
 8001830:	40011400 	.word	0x40011400

08001834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800183e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001842:	2204      	movs	r2, #4
 8001844:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001848:	2202      	movs	r2, #2
 800184a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001854:	2202      	movs	r2, #2
 8001856:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185a:	2201      	movs	r2, #1
 800185c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186c:	2201      	movs	r2, #1
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001878:	f002 fb84 	bl	8003f84 <HAL_PCD_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001882:	f000 f91f 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000470 	.word	0x20000470

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a7d      	ldr	r2, [pc, #500]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a76      	ldr	r2, [pc, #472]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a6f      	ldr	r2, [pc, #444]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <MX_GPIO_Init+0x214>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a68      	ldr	r2, [pc, #416]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <MX_GPIO_Init+0x214>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <MX_GPIO_Init+0x214>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a61      	ldr	r2, [pc, #388]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a5a      	ldr	r2, [pc, #360]	; (8001aa4 <MX_GPIO_Init+0x214>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b54      	ldr	r3, [pc, #336]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a53      	ldr	r2, [pc, #332]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <MX_GPIO_Init+0x214>)
 8001974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <MX_GPIO_Init+0x214>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	4847      	ldr	r0, [pc, #284]	; (8001aa8 <MX_GPIO_Init+0x218>)
 800198c:	f001 fe1a 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f244 0181 	movw	r1, #16513	; 0x4081
 8001996:	4845      	ldr	r0, [pc, #276]	; (8001aac <MX_GPIO_Init+0x21c>)
 8001998:	f001 fe14 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4843      	ldr	r0, [pc, #268]	; (8001ab0 <MX_GPIO_Init+0x220>)
 80019a4:	f001 fe0e 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	4841      	ldr	r0, [pc, #260]	; (8001ab4 <MX_GPIO_Init+0x224>)
 80019ae:	f001 fe09 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019b2:	2200      	movs	r2, #0
 80019b4:	21ff      	movs	r1, #255	; 0xff
 80019b6:	4840      	ldr	r0, [pc, #256]	; (8001ab8 <MX_GPIO_Init+0x228>)
 80019b8:	f001 fe04 	bl	80035c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	483a      	ldr	r0, [pc, #232]	; (8001abc <MX_GPIO_Init+0x22c>)
 80019d4:	f001 fc32 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80019d8:	2301      	movs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	482e      	ldr	r0, [pc, #184]	; (8001aa8 <MX_GPIO_Init+0x218>)
 80019f0:	f001 fc24 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4827      	ldr	r0, [pc, #156]	; (8001aac <MX_GPIO_Init+0x21c>)
 8001a0e:	f001 fc15 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4821      	ldr	r0, [pc, #132]	; (8001ab0 <MX_GPIO_Init+0x220>)
 8001a2c:	f001 fc06 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001a30:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <MX_GPIO_Init+0x230>)
 8001a46:	f001 fbf9 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <MX_GPIO_Init+0x224>)
 8001a62:	f001 fbeb 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <MX_GPIO_Init+0x224>)
 8001a7a:	f001 fbdf 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a7e:	23ff      	movs	r3, #255	; 0xff
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <MX_GPIO_Init+0x228>)
 8001a96:	f001 fbd1 	bl	800323c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3738      	adds	r7, #56	; 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_ETH_MspInit+0x174>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	f040 80a4 	bne.w	8001c8c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a52      	ldr	r2, [pc, #328]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_ETH_MspInit+0x178>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c08:	2332      	movs	r3, #50	; 0x32
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c18:	230b      	movs	r3, #11
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	481e      	ldr	r0, [pc, #120]	; (8001c9c <HAL_ETH_MspInit+0x17c>)
 8001c24:	f001 fb0a 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c28:	2386      	movs	r3, #134	; 0x86
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c38:	230b      	movs	r3, #11
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <HAL_ETH_MspInit+0x180>)
 8001c44:	f001 fafa 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c5a:	230b      	movs	r3, #11
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_ETH_MspInit+0x184>)
 8001c66:	f001 fae9 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <HAL_ETH_MspInit+0x188>)
 8001c88:	f001 fad8 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3738      	adds	r7, #56	; 0x38
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40028000 	.word	0x40028000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40021800 	.word	0x40021800

08001cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_I2C_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12c      	bne.n	8001d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_I2C_MspInit+0x8c>)
 8001d08:	f001 fa98 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005400 	.word	0x40005400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020400 	.word	0x40020400

08001d3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_TIM_IC_MspInit+0x94>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d133      	bne.n	8001dc6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_TIM_IC_MspInit+0x98>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001d96:	2340      	movs	r3, #64	; 0x40
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <HAL_TIM_IC_MspInit+0x9c>)
 8001db2:	f001 fa43 	bl	800323c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	201d      	movs	r0, #29
 8001dbc:	f000 fe4d 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc0:	201d      	movs	r0, #29
 8001dc2:	f000 fe66 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_TIM_Base_MspInit+0x80>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d116      	bne.n	8001e1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2019      	movs	r0, #25
 8001e10:	f000 fe23 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e14:	2019      	movs	r0, #25
 8001e16:	f000 fe3c 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e1a:	e01a      	b.n	8001e52 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_TIM_Base_MspInit+0x88>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d115      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x84>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	201a      	movs	r0, #26
 8001e48:	f000 fe07 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e4c:	201a      	movs	r0, #26
 8001e4e:	f000 fe20 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40014400 	.word	0x40014400
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40014800 	.word	0x40014800

08001e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_UART_MspInit+0x108>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d135      	bne.n	8001ef6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4826      	ldr	r0, [pc, #152]	; (8001f78 <HAL_UART_MspInit+0x110>)
 8001ee0:	f001 f9ac 	bl	800323c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2027      	movs	r0, #39	; 0x27
 8001eea:	f000 fdb6 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eee:	2027      	movs	r0, #39	; 0x27
 8001ef0:	f000 fdcf 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ef4:	e038      	b.n	8001f68 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <HAL_UART_MspInit+0x114>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d133      	bne.n	8001f68 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f0a:	f043 0320 	orr.w	r3, r3, #32
 8001f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_UART_MspInit+0x10c>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f38:	23c0      	movs	r3, #192	; 0xc0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <HAL_UART_MspInit+0x118>)
 8001f54:	f001 f972 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2047      	movs	r0, #71	; 0x47
 8001f5e:	f000 fd7c 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f62:	2047      	movs	r0, #71	; 0x47
 8001f64:	f000 fd95 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3730      	adds	r7, #48	; 0x30
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40004800 	.word	0x40004800
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40020800 	.word	0x40020800

08001f84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa4:	d13f      	bne.n	8002026 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fc2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4815      	ldr	r0, [pc, #84]	; (8002034 <HAL_PCD_MspInit+0xb0>)
 8001fe0:	f001 f92c 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <HAL_PCD_MspInit+0xb0>)
 8001ffa:	f001 f91f 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8002004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002008:	6353      	str	r3, [r2, #52]	; 0x34
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_PCD_MspInit+0xac>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_PCD_MspInit+0xac>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002084:	f000 fbca 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8002088:	f7ff f948 	bl	800131c <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002096:	f002 ff63 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000358 	.word	0x20000358

080020a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020aa:	f002 ff59 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200003a0 	.word	0x200003a0

080020b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM3_IRQHandler+0x10>)
 80020be:	f002 ff4f 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000310 	.word	0x20000310

080020cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART3_IRQHandler+0x10>)
 80020d2:	f003 fcdb 	bl	8005a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200003e8 	.word	0x200003e8

080020e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <USART6_IRQHandler+0x10>)
 80020e6:	f003 fcd1 	bl	8005a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000042c 	.word	0x2000042c

080020f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
  }

  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f8f5 	bl	8001338 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
  }
  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f005 f936 	bl	8007470 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20030000 	.word	0x20030000
 8002230:	00000400 	.word	0x00000400
 8002234:	2000099c 	.word	0x2000099c
 8002238:	20000b60 	.word	0x20000b60

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a32      	ldr	r2, [pc, #200]	; (8002334 <HAL_UART_RxCpltCallback+0xd4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d12c      	bne.n	80022ca <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b27      	cmp	r3, #39	; 0x27
 8002276:	dc1d      	bgt.n	80022b4 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_UART_RxCpltCallback+0xdc>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b0a      	cmp	r3, #10
 800227e:	d003      	beq.n	8002288 <HAL_UART_RxCpltCallback+0x28>
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_UART_RxCpltCallback+0xdc>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b0d      	cmp	r3, #13
 8002286:	d10b      	bne.n	80022a0 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_UART_RxCpltCallback+0xe0>)
 800228e:	2100      	movs	r1, #0
 8002290:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_UART_RxCpltCallback+0xe4>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e00f      	b.n	80022c0 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	4924      	ldr	r1, [pc, #144]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 80022a8:	600a      	str	r2, [r1, #0]
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_UART_RxCpltCallback+0xdc>)
 80022ac:	7811      	ldrb	r1, [r2, #0]
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_UART_RxCpltCallback+0xe0>)
 80022b0:	54d1      	strb	r1, [r2, r3]
 80022b2:	e005      	b.n	80022c0 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 80022ba:	4823      	ldr	r0, [pc, #140]	; (8002348 <HAL_UART_RxCpltCallback+0xe8>)
 80022bc:	f004 ff78 	bl	80071b0 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80022c0:	2201      	movs	r2, #1
 80022c2:	491e      	ldr	r1, [pc, #120]	; (800233c <HAL_UART_RxCpltCallback+0xdc>)
 80022c4:	481b      	ldr	r0, [pc, #108]	; (8002334 <HAL_UART_RxCpltCallback+0xd4>)
 80022c6:	f003 fbb0 	bl	8005a2a <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_UART_RxCpltCallback+0xec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12c      	bne.n	800232c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_UART_RxCpltCallback+0xf0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b27      	cmp	r3, #39	; 0x27
 80022d8:	dc1d      	bgt.n	8002316 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_UART_RxCpltCallback+0xf4>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b0a      	cmp	r3, #10
 80022e0:	d003      	beq.n	80022ea <HAL_UART_RxCpltCallback+0x8a>
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_UART_RxCpltCallback+0xf4>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b0d      	cmp	r3, #13
 80022e8:	d10b      	bne.n	8002302 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_UART_RxCpltCallback+0xd8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_UART_RxCpltCallback+0xf8>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_UART_RxCpltCallback+0xfc>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_UART_RxCpltCallback+0xf0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e00f      	b.n	8002322 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_RxCpltCallback+0xf0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <HAL_UART_RxCpltCallback+0xf0>)
 800230a:	600a      	str	r2, [r1, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_UART_RxCpltCallback+0xf4>)
 800230e:	7811      	ldrb	r1, [r2, #0]
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_UART_RxCpltCallback+0xf8>)
 8002312:	54d1      	strb	r1, [r2, r3]
 8002314:	e005      	b.n	8002322 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_UART_RxCpltCallback+0xf0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 800231c:	4810      	ldr	r0, [pc, #64]	; (8002360 <HAL_UART_RxCpltCallback+0x100>)
 800231e:	f004 ff47 	bl	80071b0 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002322:	2201      	movs	r2, #1
 8002324:	490b      	ldr	r1, [pc, #44]	; (8002354 <HAL_UART_RxCpltCallback+0xf4>)
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_UART_RxCpltCallback+0xec>)
 8002328:	f003 fb7f 	bl	8005a2a <HAL_UART_Receive_IT>
	}
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200003e8 	.word	0x200003e8
 8002338:	200009c8 	.word	0x200009c8
 800233c:	2000097c 	.word	0x2000097c
 8002340:	200009a0 	.word	0x200009a0
 8002344:	200009cc 	.word	0x200009cc
 8002348:	080082a8 	.word	0x080082a8
 800234c:	2000042c 	.word	0x2000042c
 8002350:	200009f8 	.word	0x200009f8
 8002354:	2000097d 	.word	0x2000097d
 8002358:	200009d0 	.word	0x200009d0
 800235c:	200009fc 	.word	0x200009fc
 8002360:	080082c0 	.word	0x080082c0

08002364 <pc_command_processing>:

void pc_command_processing(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002368:	4b49      	ldr	r3, [pc, #292]	; (8002490 <pc_command_processing+0x12c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 808e 	beq.w	800248e <pc_command_processing+0x12a>
	{
		newline_detect_flag=0;
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <pc_command_processing+0x12c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 8002378:	4846      	ldr	r0, [pc, #280]	; (8002494 <pc_command_processing+0x130>)
 800237a:	f004 ff19 	bl	80071b0 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800237e:	220a      	movs	r2, #10
 8002380:	4945      	ldr	r1, [pc, #276]	; (8002498 <pc_command_processing+0x134>)
 8002382:	4844      	ldr	r0, [pc, #272]	; (8002494 <pc_command_processing+0x130>)
 8002384:	f005 f81c 	bl	80073c0 <strncmp>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <pc_command_processing+0x30>
		{
			led_all_on();
 800238e:	f7fe ffad 	bl	80012ec <led_all_on>
			return;
 8002392:	e07c      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002394:	220b      	movs	r2, #11
 8002396:	4941      	ldr	r1, [pc, #260]	; (800249c <pc_command_processing+0x138>)
 8002398:	483e      	ldr	r0, [pc, #248]	; (8002494 <pc_command_processing+0x130>)
 800239a:	f005 f811 	bl	80073c0 <strncmp>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <pc_command_processing+0x46>
		{
			led_all_off();
 80023a4:	f7fe ffae 	bl	8001304 <led_all_off>
			return;
 80023a8:	e071      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80023aa:	220b      	movs	r2, #11
 80023ac:	493c      	ldr	r1, [pc, #240]	; (80024a0 <pc_command_processing+0x13c>)
 80023ae:	4839      	ldr	r0, [pc, #228]	; (8002494 <pc_command_processing+0x130>)
 80023b0:	f005 f806 	bl	80073c0 <strncmp>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <pc_command_processing+0x5c>
		{
			led_on_down();
 80023ba:	f7fe ff67 	bl	800128c <led_on_down>
			return;
 80023be:	e066      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80023c0:	2209      	movs	r2, #9
 80023c2:	4938      	ldr	r1, [pc, #224]	; (80024a4 <pc_command_processing+0x140>)
 80023c4:	4833      	ldr	r0, [pc, #204]	; (8002494 <pc_command_processing+0x130>)
 80023c6:	f004 fffb 	bl	80073c0 <strncmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <pc_command_processing+0x72>
		{
			led_on_up();
 80023d0:	f7fe ff2c 	bl	800122c <led_on_up>
			return;
 80023d4:	e05b      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80023d6:	2209      	movs	r2, #9
 80023d8:	4933      	ldr	r1, [pc, #204]	; (80024a8 <pc_command_processing+0x144>)
 80023da:	482e      	ldr	r0, [pc, #184]	; (8002494 <pc_command_processing+0x130>)
 80023dc:	f004 fff0 	bl	80073c0 <strncmp>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <pc_command_processing+0x88>
		{
			flower_on();
 80023e6:	f7fe fe81 	bl	80010ec <flower_on>
			return;
 80023ea:	e050      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80023ec:	220a      	movs	r2, #10
 80023ee:	492f      	ldr	r1, [pc, #188]	; (80024ac <pc_command_processing+0x148>)
 80023f0:	4828      	ldr	r0, [pc, #160]	; (8002494 <pc_command_processing+0x130>)
 80023f2:	f004 ffe5 	bl	80073c0 <strncmp>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <pc_command_processing+0x9e>
		{
			flower_off();
 80023fc:	f7fe fea6 	bl	800114c <flower_off>
			return;
 8002400:	e045      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002402:	220d      	movs	r2, #13
 8002404:	492a      	ldr	r1, [pc, #168]	; (80024b0 <pc_command_processing+0x14c>)
 8002406:	4823      	ldr	r0, [pc, #140]	; (8002494 <pc_command_processing+0x130>)
 8002408:	f004 ffda 	bl	80073c0 <strncmp>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <pc_command_processing+0xb4>
		{
			led_keepon_up();
 8002412:	f7fe fecb 	bl	80011ac <led_keepon_up>
			return;
 8002416:	e03a      	b.n	800248e <pc_command_processing+0x12a>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002418:	220f      	movs	r2, #15
 800241a:	4926      	ldr	r1, [pc, #152]	; (80024b4 <pc_command_processing+0x150>)
 800241c:	481d      	ldr	r0, [pc, #116]	; (8002494 <pc_command_processing+0x130>)
 800241e:	f004 ffcf 	bl	80073c0 <strncmp>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <pc_command_processing+0xca>
		{
			led_keepon_down();
 8002428:	f7fe fee0 	bl	80011ec <led_keepon_down>
			return;
 800242c:	e02f      	b.n	800248e <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "dht11on", strlen("dht11on")))  //
 800242e:	2207      	movs	r2, #7
 8002430:	4921      	ldr	r1, [pc, #132]	; (80024b8 <pc_command_processing+0x154>)
 8002432:	4818      	ldr	r0, [pc, #96]	; (8002494 <pc_command_processing+0x130>)
 8002434:	f004 ffc4 	bl	80073c0 <strncmp>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <pc_command_processing+0xe2>
		{
			dht11_on = 1;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <pc_command_processing+0x158>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]
			return;
 8002444:	e023      	b.n	800248e <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "dht11off", strlen("dht11off")))  //
 8002446:	2208      	movs	r2, #8
 8002448:	491d      	ldr	r1, [pc, #116]	; (80024c0 <pc_command_processing+0x15c>)
 800244a:	4812      	ldr	r0, [pc, #72]	; (8002494 <pc_command_processing+0x130>)
 800244c:	f004 ffb8 	bl	80073c0 <strncmp>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <pc_command_processing+0xfa>
		{
			dht11_on = 0;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <pc_command_processing+0x158>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
			return;
 800245c:	e017      	b.n	800248e <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "ultra_on", strlen("ultra_on")))  //
 800245e:	2208      	movs	r2, #8
 8002460:	4918      	ldr	r1, [pc, #96]	; (80024c4 <pc_command_processing+0x160>)
 8002462:	480c      	ldr	r0, [pc, #48]	; (8002494 <pc_command_processing+0x130>)
 8002464:	f004 ffac 	bl	80073c0 <strncmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <pc_command_processing+0x112>
		{
			ultrasonic_on = 1;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <pc_command_processing+0x164>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
			return;
 8002474:	e00b      	b.n	800248e <pc_command_processing+0x12a>
		}
		if(!strncmp(rx_buff, "ultra_off", strlen("ultra_off")))  //
 8002476:	2209      	movs	r2, #9
 8002478:	4914      	ldr	r1, [pc, #80]	; (80024cc <pc_command_processing+0x168>)
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <pc_command_processing+0x130>)
 800247c:	f004 ffa0 	bl	80073c0 <strncmp>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <pc_command_processing+0x12a>
		{
			ultrasonic_on = 0;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <pc_command_processing+0x164>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
			return;
 800248c:	bf00      	nop
//			dht11time = atoi(rx_buff+9);
//			return;
//		}

	}
}
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200009cc 	.word	0x200009cc
 8002494:	200009a0 	.word	0x200009a0
 8002498:	080082dc 	.word	0x080082dc
 800249c:	080082e8 	.word	0x080082e8
 80024a0:	080082f4 	.word	0x080082f4
 80024a4:	08008300 	.word	0x08008300
 80024a8:	0800830c 	.word	0x0800830c
 80024ac:	08008318 	.word	0x08008318
 80024b0:	08008324 	.word	0x08008324
 80024b4:	08008334 	.word	0x08008334
 80024b8:	08008344 	.word	0x08008344
 80024bc:	20000988 	.word	0x20000988
 80024c0:	0800834c 	.word	0x0800834c
 80024c4:	08008358 	.word	0x08008358
 80024c8:	2000098c 	.word	0x2000098c
 80024cc:	08008364 	.word	0x08008364

080024d0 <bt_command_processing>:

void bt_command_processing(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <bt_command_processing+0xcc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d05d      	beq.n	8002598 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <bt_command_processing+0xcc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 80024e2:	482f      	ldr	r0, [pc, #188]	; (80025a0 <bt_command_processing+0xd0>)
 80024e4:	f004 fe64 	bl	80071b0 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80024e8:	220a      	movs	r2, #10
 80024ea:	492e      	ldr	r1, [pc, #184]	; (80025a4 <bt_command_processing+0xd4>)
 80024ec:	482c      	ldr	r0, [pc, #176]	; (80025a0 <bt_command_processing+0xd0>)
 80024ee:	f004 ff67 	bl	80073c0 <strncmp>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <bt_command_processing+0x2e>
		{
			led_all_on();
 80024f8:	f7fe fef8 	bl	80012ec <led_all_on>
			return;
 80024fc:	e04c      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80024fe:	220b      	movs	r2, #11
 8002500:	4929      	ldr	r1, [pc, #164]	; (80025a8 <bt_command_processing+0xd8>)
 8002502:	4827      	ldr	r0, [pc, #156]	; (80025a0 <bt_command_processing+0xd0>)
 8002504:	f004 ff5c 	bl	80073c0 <strncmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <bt_command_processing+0x44>
		{
			led_all_off();
 800250e:	f7fe fef9 	bl	8001304 <led_all_off>
			return;
 8002512:	e041      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002514:	220b      	movs	r2, #11
 8002516:	4925      	ldr	r1, [pc, #148]	; (80025ac <bt_command_processing+0xdc>)
 8002518:	4821      	ldr	r0, [pc, #132]	; (80025a0 <bt_command_processing+0xd0>)
 800251a:	f004 ff51 	bl	80073c0 <strncmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <bt_command_processing+0x5a>
		{
			led_on_down();
 8002524:	f7fe feb2 	bl	800128c <led_on_down>
			return;
 8002528:	e036      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800252a:	2209      	movs	r2, #9
 800252c:	4920      	ldr	r1, [pc, #128]	; (80025b0 <bt_command_processing+0xe0>)
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <bt_command_processing+0xd0>)
 8002530:	f004 ff46 	bl	80073c0 <strncmp>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <bt_command_processing+0x70>
		{
			led_on_up();
 800253a:	f7fe fe77 	bl	800122c <led_on_up>
			return;
 800253e:	e02b      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002540:	2209      	movs	r2, #9
 8002542:	491c      	ldr	r1, [pc, #112]	; (80025b4 <bt_command_processing+0xe4>)
 8002544:	4816      	ldr	r0, [pc, #88]	; (80025a0 <bt_command_processing+0xd0>)
 8002546:	f004 ff3b 	bl	80073c0 <strncmp>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <bt_command_processing+0x86>
		{
			flower_on();
 8002550:	f7fe fdcc 	bl	80010ec <flower_on>
			return;
 8002554:	e020      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002556:	220a      	movs	r2, #10
 8002558:	4917      	ldr	r1, [pc, #92]	; (80025b8 <bt_command_processing+0xe8>)
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <bt_command_processing+0xd0>)
 800255c:	f004 ff30 	bl	80073c0 <strncmp>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <bt_command_processing+0x9c>
		{
			flower_off();
 8002566:	f7fe fdf1 	bl	800114c <flower_off>
			return;
 800256a:	e015      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800256c:	220d      	movs	r2, #13
 800256e:	4913      	ldr	r1, [pc, #76]	; (80025bc <bt_command_processing+0xec>)
 8002570:	480b      	ldr	r0, [pc, #44]	; (80025a0 <bt_command_processing+0xd0>)
 8002572:	f004 ff25 	bl	80073c0 <strncmp>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <bt_command_processing+0xb2>
		{
			led_keepon_up();
 800257c:	f7fe fe16 	bl	80011ac <led_keepon_up>
			return;
 8002580:	e00a      	b.n	8002598 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002582:	220f      	movs	r2, #15
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <bt_command_processing+0xf0>)
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <bt_command_processing+0xd0>)
 8002588:	f004 ff1a 	bl	80073c0 <strncmp>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002592:	f7fe fe2b 	bl	80011ec <led_keepon_down>
			return;
 8002596:	bf00      	nop
		}
	}
}
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200009fc 	.word	0x200009fc
 80025a0:	200009d0 	.word	0x200009d0
 80025a4:	080082dc 	.word	0x080082dc
 80025a8:	080082e8 	.word	0x080082e8
 80025ac:	080082f4 	.word	0x080082f4
 80025b0:	08008300 	.word	0x08008300
 80025b4:	0800830c 	.word	0x0800830c
 80025b8:	08008318 	.word	0x08008318
 80025bc:	08008324 	.word	0x08008324
 80025c0:	08008334 	.word	0x08008334

080025c4 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d11f      	bne.n	8002616 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 80025ee:	e012      	b.n	8002616 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10d      	bne.n	8002616 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f002 fe50 	bl	80052a8 <HAL_TIM_ReadCapturedValue>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x64>)
 800260e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_TIM_IC_CaptureCallback+0x68>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40000400 	.word	0x40000400
 8002624:	20000a08 	.word	0x20000a08
 8002628:	20000a00 	.word	0x20000a00
 800262c:	20000a04 	.word	0x20000a04

08002630 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if(ultrasonic_on)
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <ultrasonic_processing+0xa0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03e      	beq.n	80026bc <ultrasonic_processing+0x8c>
	{
		if (TIM10_10ms_ultrasonic >= 100)   // 1초
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <ultrasonic_processing+0xa4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b63      	cmp	r3, #99	; 0x63
 8002644:	dd3a      	ble.n	80026bc <ultrasonic_processing+0x8c>
		{
			TIM10_10ms_ultrasonic=0;
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <ultrasonic_processing+0xa4>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
			make_trigger();
 800264c:	f000 f84c 	bl	80026e8 <make_trigger>
			if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <ultrasonic_processing+0xa8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d031      	beq.n	80026bc <ultrasonic_processing+0x8c>
			{
				ic_cpt_finish_flag=0;
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <ultrasonic_processing+0xa8>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
				dis = distance;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <ultrasonic_processing+0xac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]
				dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f7fd ff65 	bl	8000534 <__aeabi_i2d>
 800266a:	a317      	add	r3, pc, #92	; (adr r3, 80026c8 <ultrasonic_processing+0x98>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fd ffca 	bl	8000608 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002684:	f7fe f8ea 	bl	800085c <__aeabi_ddiv>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe f9cc 	bl	8000a2c <__aeabi_d2iz>
 8002694:	4603      	mov	r3, r0
 8002696:	617b      	str	r3, [r7, #20]
				// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
				printf("dis: %dcm\n", dis);
 8002698:	6979      	ldr	r1, [r7, #20]
 800269a:	4811      	ldr	r0, [pc, #68]	; (80026e0 <ultrasonic_processing+0xb0>)
 800269c:	f004 fd22 	bl	80070e4 <iprintf>

				sprintf(lcd_buff, "DISTANCE : %dcm", dis);
 80026a0:	463b      	mov	r3, r7
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	490f      	ldr	r1, [pc, #60]	; (80026e4 <ultrasonic_processing+0xb4>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fd8a 	bl	80071c0 <siprintf>
				move_cursor(1,0);
 80026ac:	2100      	movs	r1, #0
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe fd04 	bl	80010bc <move_cursor>
				lcd_string(lcd_buff);
 80026b4:	463b      	mov	r3, r7
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fceb 	bl	8001092 <lcd_string>
			}
		}
	}
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	b020c49c 	.word	0xb020c49c
 80026cc:	3fa16872 	.word	0x3fa16872
 80026d0:	2000098c 	.word	0x2000098c
 80026d4:	20000984 	.word	0x20000984
 80026d8:	20000a04 	.word	0x20000a04
 80026dc:	20000a00 	.word	0x20000a00
 80026e0:	08008370 	.word	0x08008370
 80026e4:	0800837c 	.word	0x0800837c

080026e8 <make_trigger>:

void make_trigger()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026f2:	480b      	ldr	r0, [pc, #44]	; (8002720 <make_trigger+0x38>)
 80026f4:	f000 ff66 	bl	80035c4 <HAL_GPIO_WritePin>
	delay_us(2);
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7fe fe4f 	bl	800139c <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002704:	4806      	ldr	r0, [pc, #24]	; (8002720 <make_trigger+0x38>)
 8002706:	f000 ff5d 	bl	80035c4 <HAL_GPIO_WritePin>
	delay_us(10);
 800270a:	200a      	movs	r0, #10
 800270c:	f7fe fe46 	bl	800139c <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002716:	4802      	ldr	r0, [pc, #8]	; (8002720 <make_trigger+0x38>)
 8002718:	f000 ff54 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021400 	.word	0x40021400

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272a:	490e      	ldr	r1, [pc, #56]	; (8002764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002740:	4c0b      	ldr	r4, [pc, #44]	; (8002770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274e:	f7ff fd75 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f004 fe93 	bl	800747c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe fe39 	bl	80013cc <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800275c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002768:	080083e8 	.word	0x080083e8
  ldr r2, =_sbss
 800276c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002770:	20000b5c 	.word	0x20000b5c

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f000 f94f 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f808 	bl	80027bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff f990 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x54>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x58>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f967 	bl	8002aae <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00e      	b.n	8002808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d80a      	bhi.n	8002806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f000 f92f 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fc:	4a06      	ldr	r2, [pc, #24]	; (8002818 <HAL_InitTick+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000004 	.word	0x20000004
 8002814:	2000000c 	.word	0x2000000c
 8002818:	20000008 	.word	0x20000008

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000000c 	.word	0x2000000c
 8002840:	20000a0c 	.word	0x20000a0c

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000a0c 	.word	0x20000a0c

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000000c 	.word	0x2000000c

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff feb6 	bl	8002844 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d008      	beq.n	8002af8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e052      	b.n	8002b9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0216 	bic.w	r2, r2, #22
 8002b06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <HAL_DMA_Abort+0x62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0208 	bic.w	r2, r2, #8
 8002b36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b48:	e013      	b.n	8002b72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4a:	f7ff fe7b 	bl	8002844 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d90c      	bls.n	8002b72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2203      	movs	r2, #3
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e015      	b.n	8002b9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e4      	bne.n	8002b4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	223f      	movs	r2, #63	; 0x3f
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e00c      	b.n	8002bde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2205      	movs	r2, #5
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06c      	b.n	8002cd8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2223      	movs	r2, #35	; 0x23
 8002c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fe ff85 	bl	8001b20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_ETH_Init+0xf4>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_ETH_Init+0xf4>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_ETH_Init+0xf4>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_ETH_Init+0xf8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_ETH_Init+0xf8>)
 8002c38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c3e:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_ETH_Init+0xf8>)
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4927      	ldr	r1, [pc, #156]	; (8002ce4 <HAL_ETH_Init+0xf8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_ETH_Init+0xf8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff fdec 	bl	8002844 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c6e:	e011      	b.n	8002c94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c70:	f7ff fde8 	bl	8002844 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c7e:	d909      	bls.n	8002c94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2204      	movs	r2, #4
 8002c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	22e0      	movs	r2, #224	; 0xe0
 8002c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e021      	b.n	8002cd8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e4      	bne.n	8002c70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f958 	bl	8002f5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9ff 	bl	80030b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa55 	bl	8003162 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f9bd 	bl	8003040 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40013800 	.word	0x40013800

08002ce8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <ETH_SetMACConfig+0x15c>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	7c1b      	ldrb	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <ETH_SetMACConfig+0x28>
 8002d0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d0e:	e000      	b.n	8002d12 <ETH_SetMACConfig+0x2a>
 8002d10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7c5b      	ldrb	r3, [r3, #17]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <ETH_SetMACConfig+0x38>
 8002d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d1e:	e000      	b.n	8002d22 <ETH_SetMACConfig+0x3a>
 8002d20:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d22:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7fdb      	ldrb	r3, [r3, #31]
 8002d2e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d30:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	7f92      	ldrb	r2, [r2, #30]
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d102      	bne.n	8002d46 <ETH_SetMACConfig+0x5e>
 8002d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d44:	e000      	b.n	8002d48 <ETH_SetMACConfig+0x60>
 8002d46:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	7f1b      	ldrb	r3, [r3, #28]
 8002d4e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d50:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d66:	2a00      	cmp	r2, #0
 8002d68:	d102      	bne.n	8002d70 <ETH_SetMACConfig+0x88>
 8002d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6e:	e000      	b.n	8002d72 <ETH_SetMACConfig+0x8a>
 8002d70:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	7bdb      	ldrb	r3, [r3, #15]
 8002d78:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d7a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d88:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7ff fd5a 	bl	800285c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	d101      	bne.n	8002dd6 <ETH_SetMACConfig+0xee>
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	e000      	b.n	8002dd8 <ETH_SetMACConfig+0xf0>
 8002dd6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dd8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002de6:	2a01      	cmp	r2, #1
 8002de8:	d101      	bne.n	8002dee <ETH_SetMACConfig+0x106>
 8002dea:	2208      	movs	r2, #8
 8002dec:	e000      	b.n	8002df0 <ETH_SetMACConfig+0x108>
 8002dee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002df0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002df8:	2a01      	cmp	r2, #1
 8002dfa:	d101      	bne.n	8002e00 <ETH_SetMACConfig+0x118>
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	e000      	b.n	8002e02 <ETH_SetMACConfig+0x11a>
 8002e00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e0a:	2a01      	cmp	r2, #1
 8002e0c:	d101      	bne.n	8002e12 <ETH_SetMACConfig+0x12a>
 8002e0e:	2202      	movs	r2, #2
 8002e10:	e000      	b.n	8002e14 <ETH_SetMACConfig+0x12c>
 8002e12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e14:	4313      	orrs	r3, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f7ff fd15 	bl	800285c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	ff20810f 	.word	0xff20810f

08002e48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <ETH_SetDMAConfig+0x110>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7b1b      	ldrb	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <ETH_SetDMAConfig+0x2c>
 8002e6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e72:	e000      	b.n	8002e76 <ETH_SetDMAConfig+0x2e>
 8002e74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	7b5b      	ldrb	r3, [r3, #13]
 8002e7a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	7f52      	ldrb	r2, [r2, #29]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetDMAConfig+0x44>
 8002e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetDMAConfig+0x46>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7b9b      	ldrb	r3, [r3, #14]
 8002e94:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e96:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7f1b      	ldrb	r3, [r3, #28]
 8002ea2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ea4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7f9b      	ldrb	r3, [r3, #30]
 8002eaa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002eac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002eb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff fcbc 	bl	800285c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	461a      	mov	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	791b      	ldrb	r3, [r3, #4]
 8002ef6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002efc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff fc8d 	bl	800285c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	f8de3f23 	.word	0xf8de3f23

08002f5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0a6      	sub	sp, #152	; 0x98
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe86 	bl	8002ce8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003008:	2301      	movs	r3, #1
 800300a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800300c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003010:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003016:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800301c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff08 	bl	8002e48 <ETH_SetDMAConfig>
}
 8003038:	bf00      	nop
 800303a:	3798      	adds	r7, #152	; 0x98
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3305      	adds	r3, #5
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	3204      	adds	r2, #4
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <ETH_MACAddressConfig+0x68>)
 8003062:	4413      	add	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3303      	adds	r3, #3
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	061a      	lsls	r2, r3, #24
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3302      	adds	r3, #2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3301      	adds	r3, #1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	4313      	orrs	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <ETH_MACAddressConfig+0x6c>)
 8003092:	4413      	add	r3, r2
 8003094:	461a      	mov	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40028040 	.word	0x40028040
 80030ac:	40028044 	.word	0x40028044

080030b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e03e      	b.n	800313c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	3206      	adds	r2, #6
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d80c      	bhi.n	8003120 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e004      	b.n	800312a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d9bd      	bls.n	80030be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e046      	b.n	80031fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80031b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	3212      	adds	r2, #18
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d80c      	bhi.n	80031ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e004      	b.n	80031f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d9b5      	bls.n	8003170 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	60da      	str	r2, [r3, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e177      	b.n	8003548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8166 	bne.w	8003542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	2b02      	cmp	r3, #2
 800328c:	d130      	bne.n	80032f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0201 	and.w	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d017      	beq.n	800332c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d123      	bne.n	8003380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80c0 	beq.w	8003542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033de:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HAL_GPIO_Init+0x328>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_GPIO_Init+0x32c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d037      	beq.n	800347a <HAL_GPIO_Init+0x23e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_GPIO_Init+0x330>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_GPIO_Init+0x23a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_GPIO_Init+0x334>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <HAL_GPIO_Init+0x236>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a55      	ldr	r2, [pc, #340]	; (8003574 <HAL_GPIO_Init+0x338>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x232>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a54      	ldr	r2, [pc, #336]	; (8003578 <HAL_GPIO_Init+0x33c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x22e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a53      	ldr	r2, [pc, #332]	; (800357c <HAL_GPIO_Init+0x340>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x22a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_GPIO_Init+0x344>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x226>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a51      	ldr	r2, [pc, #324]	; (8003584 <HAL_GPIO_Init+0x348>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x222>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a50      	ldr	r2, [pc, #320]	; (8003588 <HAL_GPIO_Init+0x34c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x21e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4f      	ldr	r2, [pc, #316]	; (800358c <HAL_GPIO_Init+0x350>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x21a>
 8003452:	2309      	movs	r3, #9
 8003454:	e012      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003456:	230a      	movs	r3, #10
 8003458:	e010      	b.n	800347c <HAL_GPIO_Init+0x240>
 800345a:	2308      	movs	r3, #8
 800345c:	e00e      	b.n	800347c <HAL_GPIO_Init+0x240>
 800345e:	2307      	movs	r3, #7
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003462:	2306      	movs	r3, #6
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x240>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x240>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x240>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_GPIO_Init+0x328>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_GPIO_Init+0x354>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_GPIO_Init+0x354>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_GPIO_Init+0x354>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_GPIO_Init+0x354>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f ae84 	bls.w	8003258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40021400 	.word	0x40021400
 8003580:	40021800 	.word	0x40021800
 8003584:	40021c00 	.word	0x40021c00
 8003588:	40022000 	.word	0x40022000
 800358c:	40022400 	.word	0x40022400
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e12b      	b.n	8003862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fb44 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800365c:	f001 fa20 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8003660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a81      	ldr	r2, [pc, #516]	; (800386c <HAL_I2C_Init+0x274>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d807      	bhi.n	800367c <HAL_I2C_Init+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_I2C_Init+0x278>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e006      	b.n	800368a <HAL_I2C_Init+0x92>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <HAL_I2C_Init+0x27c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0e7      	b.n	8003862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a78      	ldr	r2, [pc, #480]	; (8003878 <HAL_I2C_Init+0x280>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0c9b      	lsrs	r3, r3, #18
 800369c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_I2C_Init+0x274>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d802      	bhi.n	80036cc <HAL_I2C_Init+0xd4>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e009      	b.n	80036e0 <HAL_I2C_Init+0xe8>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a69      	ldr	r2, [pc, #420]	; (800387c <HAL_I2C_Init+0x284>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	495c      	ldr	r1, [pc, #368]	; (800386c <HAL_I2C_Init+0x274>)
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d819      	bhi.n	8003734 <HAL_I2C_Init+0x13c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e59      	subs	r1, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fbb1 f3f3 	udiv	r3, r1, r3
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003714:	400b      	ands	r3, r1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_I2C_Init+0x138>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1e59      	subs	r1, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fbb1 f3f3 	udiv	r3, r1, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372e:	e051      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003730:	2304      	movs	r3, #4
 8003732:	e04f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_I2C_Init+0x168>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e58      	subs	r0, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	440b      	add	r3, r1
 800374a:	fbb0 f3f3 	udiv	r3, r0, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e012      	b.n	8003786 <HAL_I2C_Init+0x18e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x196>
 800378a:	2301      	movs	r3, #1
 800378c:	e022      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10e      	bne.n	80037b4 <HAL_I2C_Init+0x1bc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e58      	subs	r0, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	440b      	add	r3, r1
 80037a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a8:	3301      	adds	r3, #1
 80037aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b2:	e00f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	0099      	lsls	r1, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	6809      	ldr	r1, [r1, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6911      	ldr	r1, [r2, #16]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	000186a0 	.word	0x000186a0
 8003870:	001e847f 	.word	0x001e847f
 8003874:	003d08ff 	.word	0x003d08ff
 8003878:	431bde83 	.word	0x431bde83
 800387c:	10624dd3 	.word	0x10624dd3

08003880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
 8003890:	4613      	mov	r3, r2
 8003892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003894:	f7fe ffd6 	bl	8002844 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	f040 80e0 	bne.w	8003a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	4970      	ldr	r1, [pc, #448]	; (8003a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f964 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	e0d3      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_I2C_Master_Transmit+0x50>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e0cc      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d007      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2210      	movs	r2, #16
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f89c 	bl	8003a7c <I2C_MasterRequestWrite>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e08d      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003964:	e066      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9de 	bl	8003d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_I2C_Master_Transmit+0x188>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	6a39      	ldr	r1, [r7, #32]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9ce 	bl	8003dae <I2C_WaitOnBTFFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00d      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d107      	bne.n	8003a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e01a      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d194      	bne.n	8003966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	00100002 	.word	0x00100002
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d006      	beq.n	8003aa6 <I2C_MasterRequestWrite+0x2a>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d003      	beq.n	8003aa6 <I2C_MasterRequestWrite+0x2a>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa4:	d108      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e00b      	b.n	8003ad0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b12      	cmp	r3, #18
 8003abe:	d107      	bne.n	8003ad0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ace:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f84f 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d103      	bne.n	8003b00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e035      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0c:	d108      	bne.n	8003b20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b1c:	611a      	str	r2, [r3, #16]
 8003b1e:	e01b      	b.n	8003b58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	11db      	asrs	r3, r3, #7
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f063 030f 	orn	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <I2C_MasterRequestWrite+0xfc>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f875 	bl	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e010      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <I2C_MasterRequestWrite+0x100>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f865 	bl	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	00010008 	.word	0x00010008
 8003b7c:	00010002 	.word	0x00010002

08003b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	e025      	b.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d021      	beq.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe fe53 	bl	8002844 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d116      	bne.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e023      	b.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10d      	bne.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	e00c      	b.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d0b6      	beq.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c3c:	e051      	b.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d123      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e046      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d021      	beq.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe fdd1 	bl	8002844 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d116      	bne.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e020      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10c      	bne.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e00b      	b.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d18d      	bne.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d38:	e02d      	b.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f878 	bl	8003e30 <I2C_IsAcknowledgeFailed>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e02d      	b.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d021      	beq.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fe fd77 	bl	8002844 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d116      	bne.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e007      	b.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d1ca      	bne.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dba:	e02d      	b.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f837 	bl	8003e30 <I2C_IsAcknowledgeFailed>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e02d      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d021      	beq.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7fe fd36 	bl	8002844 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d1ca      	bne.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d11b      	bne.n	8003e80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d129      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d12a      	bne.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	f023 030f 	bic.w	r3, r3, #15
 8003f46:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	89fb      	ldrh	r3, [r7, #14]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	89fa      	ldrh	r2, [r7, #14]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b08f      	sub	sp, #60	; 0x3c
 8003f88:	af0a      	add	r7, sp, #40	; 0x28
 8003f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e10f      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd ffe7 	bl	8001f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f002 fd22 	bl	8006a1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	687e      	ldr	r6, [r7, #4]
 8003fe2:	466d      	mov	r5, sp
 8003fe4:	f106 0410 	add.w	r4, r6, #16
 8003fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ff4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ff8:	1d33      	adds	r3, r6, #4
 8003ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ffc:	6838      	ldr	r0, [r7, #0]
 8003ffe:	f002 fcad 	bl	800695c <USB_CoreInit>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0d0      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f002 fd10 	bl	8006a40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e04a      	b.n	80040bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	333d      	adds	r3, #61	; 0x3d
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	333c      	adds	r3, #60	; 0x3c
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	b298      	uxth	r0, r3
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3344      	adds	r3, #68	; 0x44
 8004062:	4602      	mov	r2, r0
 8004064:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3340      	adds	r3, #64	; 0x40
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3348      	adds	r3, #72	; 0x48
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334c      	adds	r3, #76	; 0x4c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3354      	adds	r3, #84	; 0x54
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	3301      	adds	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3af      	bcc.n	8004026 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e044      	b.n	8004156 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	3301      	adds	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d3b5      	bcc.n	80040cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	687e      	ldr	r6, [r7, #4]
 8004168:	466d      	mov	r5, sp
 800416a:	f106 0410 	add.w	r4, r6, #16
 800416e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800417a:	e885 0003 	stmia.w	r5, {r0, r1}
 800417e:	1d33      	adds	r3, r6, #4
 8004180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f002 fca8 	bl	8006ad8 <USB_DevInit>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e00d      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 fe73 	bl	8006e9a <USB_DevDisconnect>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e267      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041de:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d00c      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d112      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b82      	ldr	r3, [pc, #520]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e242      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b70      	ldr	r3, [pc, #448]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6f      	ldr	r2, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6c      	ldr	r2, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a65      	ldr	r2, [pc, #404]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe fae4 	bl	8002844 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe fae0 	bl	8002844 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e207      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fad0 	bl	8002844 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe facc 	bl	8002844 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1f3      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c7      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe fa85 	bl	8002844 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe fa81 	bl	8002844 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a8      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4925      	ldr	r1, [pc, #148]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe fa64 	bl	8002844 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe fa60 	bl	8002844 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e187      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe fa44 	bl	8002844 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fe fa40 	bl	8002844 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e167      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
 80043de:	e01b      	b.n	8004418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fa2d 	bl	8002844 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e00e      	b.n	800440c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fe fa29 	bl	8002844 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d907      	bls.n	800440c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e150      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004400:	40023800 	.word	0x40023800
 8004404:	42470000 	.word	0x42470000
 8004408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ea      	bne.n	80043ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8097 	beq.w	8004554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b7d      	ldr	r3, [pc, #500]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a7c      	ldr	r2, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b7a      	ldr	r3, [pc, #488]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b74      	ldr	r3, [pc, #464]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fe f9e9 	bl	8002844 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fe f9e5 	bl	8002844 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e10c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x2ea>
 800449c:	4b64      	ldr	r3, [pc, #400]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a63      	ldr	r2, [pc, #396]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	e01c      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x30c>
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044cc:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a57      	ldr	r2, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	4b55      	ldr	r3, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a54      	ldr	r2, [pc, #336]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0304 	bic.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f9aa 	bl	8002844 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fe f9a6 	bl	8002844 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0cb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b49      	ldr	r3, [pc, #292]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCC_OscConfig+0x334>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fe f994 	bl	8002844 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fe f990 	bl	8002844 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0b5      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ee      	bne.n	8004520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a1 	beq.w	80046a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d05c      	beq.n	8004624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d141      	bne.n	80045f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe f964 	bl	8002844 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fe f960 	bl	8002844 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e087      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	491b      	ldr	r1, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe f939 	bl	8002844 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe f935 	bl	8002844 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e05c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x416>
 80045f4:	e054      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fe f922 	bl	8002844 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fe f91e 	bl	8002844 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e045      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x444>
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e038      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x4ec>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d028      	beq.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d121      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d11a      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	4293      	cmp	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0cc      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b65      	ldr	r3, [pc, #404]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0b8      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	494d      	ldr	r1, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d003      	beq.n	800476e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e067      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4934      	ldr	r1, [pc, #208]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fe f850 	bl	8002844 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fe f84c 	bl	8002844 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e04f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20c      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e032      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004836:	f000 f821 	bl	800487c <HAL_RCC_GetSysClockFreq>
 800483a:	4602      	mov	r2, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	490a      	ldr	r1, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	5ccb      	ldrb	r3, [r1, r3]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd ffb0 	bl	80027bc <HAL_InitTick>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	0800838c 	.word	0x0800838c
 8004874:	20000004 	.word	0x20000004
 8004878:	20000008 	.word	0x20000008

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b094      	sub	sp, #80	; 0x50
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
 8004888:	2300      	movs	r3, #0
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	2300      	movs	r3, #0
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004894:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d00d      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x40>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	f200 80e1 	bhi.w	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x34>
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ae:	e0db      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048b4:	e0db      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b6:	4b73      	ldr	r3, [pc, #460]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ba:	e0d8      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	2200      	movs	r2, #0
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
 80048dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004900:	0150      	lsls	r0, r2, #5
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4621      	mov	r1, r4
 8004908:	1a51      	subs	r1, r2, r1
 800490a:	6139      	str	r1, [r7, #16]
 800490c:	4629      	mov	r1, r5
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004920:	4659      	mov	r1, fp
 8004922:	018b      	lsls	r3, r1, #6
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492a:	4651      	mov	r1, sl
 800492c:	018a      	lsls	r2, r1, #6
 800492e:	4651      	mov	r1, sl
 8004930:	ebb2 0801 	subs.w	r8, r2, r1
 8004934:	4659      	mov	r1, fp
 8004936:	eb63 0901 	sbc.w	r9, r3, r1
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494e:	4690      	mov	r8, r2
 8004950:	4699      	mov	r9, r3
 8004952:	4623      	mov	r3, r4
 8004954:	eb18 0303 	adds.w	r3, r8, r3
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	462b      	mov	r3, r5
 800495c:	eb49 0303 	adc.w	r3, r9, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800496e:	4629      	mov	r1, r5
 8004970:	024b      	lsls	r3, r1, #9
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004978:	4621      	mov	r1, r4
 800497a:	024a      	lsls	r2, r1, #9
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	2200      	movs	r2, #0
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
 8004986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800498c:	f7fc f876 	bl	8000a7c <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004998:	e058      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	4611      	mov	r1, r2
 80049a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c6:	0150      	lsls	r0, r2, #5
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4641      	mov	r1, r8
 80049ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049ec:	ebb2 040a 	subs.w	r4, r2, sl
 80049f0:	eb63 050b 	sbc.w	r5, r3, fp
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	00eb      	lsls	r3, r5, #3
 80049fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a02:	00e2      	lsls	r2, r4, #3
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	464b      	mov	r3, r9
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a22:	4629      	mov	r1, r5
 8004a24:	028b      	lsls	r3, r1, #10
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	028a      	lsls	r2, r1, #10
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	61fa      	str	r2, [r7, #28]
 8004a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a40:	f7fc f81c 	bl	8000a7c <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	3301      	adds	r3, #1
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a66:	e002      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3750      	adds	r7, #80	; 0x50
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800839c 	.word	0x0800839c

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffdc 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800839c 	.word	0x0800839c

08004af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e041      	b.n	8004b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd f960 	bl	8001ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 fc1c 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e04e      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d010      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e007      	b.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40001800 	.word	0x40001800

08004c70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e041      	b.n	8004d06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd f850 	bl	8001d3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fb5c 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_IC_Start_IT+0x1e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e013      	b.n	8004d56 <HAL_TIM_IC_Start_IT+0x46>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_IC_Start_IT+0x2e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e00b      	b.n	8004d56 <HAL_TIM_IC_Start_IT+0x46>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_IC_Start_IT+0x3e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e003      	b.n	8004d56 <HAL_TIM_IC_Start_IT+0x46>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_TIM_IC_Start_IT+0x58>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e013      	b.n	8004d90 <HAL_TIM_IC_Start_IT+0x80>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d104      	bne.n	8004d78 <HAL_TIM_IC_Start_IT+0x68>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e00b      	b.n	8004d90 <HAL_TIM_IC_Start_IT+0x80>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d104      	bne.n	8004d88 <HAL_TIM_IC_Start_IT+0x78>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_IC_Start_IT+0x80>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d102      	bne.n	8004d9e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d98:	7b7b      	ldrb	r3, [r7, #13]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0cc      	b.n	8004f3c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_IC_Start_IT+0xa2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	e013      	b.n	8004dda <HAL_TIM_IC_Start_IT+0xca>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_IC_Start_IT+0xb2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	e00b      	b.n	8004dda <HAL_TIM_IC_Start_IT+0xca>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_IC_Start_IT+0xc2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	e003      	b.n	8004dda <HAL_TIM_IC_Start_IT+0xca>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_IC_Start_IT+0xda>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	e013      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x102>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_IC_Start_IT+0xea>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df8:	e00b      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x102>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_IC_Start_IT+0xfa>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	e003      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x102>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d841      	bhi.n	8004e9c <HAL_TIM_IC_Start_IT+0x18c>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_IC_Start_IT+0x110>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e9d 	.word	0x08004e9d
 8004e28:	08004e9d 	.word	0x08004e9d
 8004e2c:	08004e9d 	.word	0x08004e9d
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e9d 	.word	0x08004e9d
 8004e38:	08004e9d 	.word	0x08004e9d
 8004e3c:	08004e9d 	.word	0x08004e9d
 8004e40:	08004e79 	.word	0x08004e79
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08004e9d 	.word	0x08004e9d
 8004e50:	08004e8b 	.word	0x08004e8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0202 	orr.w	r2, r2, #2
 8004e62:	60da      	str	r2, [r3, #12]
      break;
 8004e64:	e01d      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0204 	orr.w	r2, r2, #4
 8004e74:	60da      	str	r2, [r3, #12]
      break;
 8004e76:	e014      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0208 	orr.w	r2, r2, #8
 8004e86:	60da      	str	r2, [r3, #12]
      break;
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0210 	orr.w	r2, r2, #16
 8004e98:	60da      	str	r2, [r3, #12]
      break;
 8004e9a:	e002      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d148      	bne.n	8004f3a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2201      	movs	r2, #1
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fc25 	bl	8005700 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <HAL_TIM_IC_Start_IT+0x234>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_TIM_IC_Start_IT+0x238>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_TIM_IC_Start_IT+0x23c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_TIM_IC_Start_IT+0x240>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_TIM_IC_Start_IT+0x244>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_TIM_IC_Start_IT+0x248>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIM_IC_Start_IT+0x24c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b06      	cmp	r3, #6
 8004f16:	d010      	beq.n	8004f3a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	e007      	b.n	8004f3a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40010400 	.word	0x40010400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40001800 	.word	0x40001800

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd fb0e 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9c0 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9c7 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd fae4 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f996 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f99d 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d122      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d11b      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0208 	mvn.w	r2, #8
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd faba 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f96c 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f973 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b10      	cmp	r3, #16
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd fa90 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f942 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f949 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0201 	mvn.w	r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc f93c 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d10e      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d107      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fba4 	bl	8005858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d10e      	bne.n	800513c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d107      	bne.n	800513c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f90e 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b20      	cmp	r3, #32
 8005148:	d10e      	bne.n	8005168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d107      	bne.n	8005168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0220 	mvn.w	r2, #32
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fb6e 	bl	8005844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_TIM_IC_ConfigChannel+0x1e>
 800518a:	2302      	movs	r3, #2
 800518c:	e088      	b.n	80052a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 f97e 	bl	80054ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 020c 	bic.w	r2, r2, #12
 80051be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6999      	ldr	r1, [r3, #24]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	619a      	str	r2, [r3, #24]
 80051d2:	e060      	b.n	8005296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d11c      	bne.n	8005214 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f000 f9d3 	bl	8005594 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6999      	ldr	r1, [r3, #24]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	619a      	str	r2, [r3, #24]
 8005212:	e040      	b.n	8005296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b08      	cmp	r3, #8
 8005218:	d11b      	bne.n	8005252 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6819      	ldr	r1, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f000 f9f0 	bl	800560e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 020c 	bic.w	r2, r2, #12
 800523c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	61da      	str	r2, [r3, #28]
 8005250:	e021      	b.n	8005296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d11c      	bne.n	8005292 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f000 fa0d 	bl	8005686 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800527a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69d9      	ldr	r1, [r3, #28]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
 8005290:	e001      	b.n	8005296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d831      	bhi.n	8005320 <HAL_TIM_ReadCapturedValue+0x78>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005321 	.word	0x08005321
 80052cc:	08005321 	.word	0x08005321
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005303 	.word	0x08005303
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005321 	.word	0x08005321
 80052e0:	08005321 	.word	0x08005321
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005321 	.word	0x08005321
 80052f4:	08005317 	.word	0x08005317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	60fb      	str	r3, [r7, #12]

      break;
 8005300:	e00f      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	60fb      	str	r3, [r7, #12]

      break;
 800530a:	e00a      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	60fb      	str	r3, [r7, #12]

      break;
 8005314:	e005      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	60fb      	str	r3, [r7, #12]

      break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005320:	bf00      	nop
  }

  return tmpreg;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a40      	ldr	r2, [pc, #256]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3d      	ldr	r2, [pc, #244]	; (8005484 <TIM_Base_SetConfig+0x118>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3b      	ldr	r2, [pc, #236]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3a      	ldr	r2, [pc, #232]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <TIM_Base_SetConfig+0x114>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d027      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <TIM_Base_SetConfig+0x118>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d023      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <TIM_Base_SetConfig+0x128>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a27      	ldr	r2, [pc, #156]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a26      	ldr	r2, [pc, #152]	; (800549c <TIM_Base_SetConfig+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <TIM_Base_SetConfig+0x134>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <TIM_Base_SetConfig+0x138>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a23      	ldr	r2, [pc, #140]	; (80054a8 <TIM_Base_SetConfig+0x13c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <TIM_Base_SetConfig+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800
 80054a0:	40001800 	.word	0x40001800
 80054a4:	40001c00 	.word	0x40001c00
 80054a8:	40002000 	.word	0x40002000

080054ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f023 0201 	bic.w	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a28      	ldr	r2, [pc, #160]	; (8005578 <TIM_TI1_SetConfig+0xcc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01b      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e0:	d017      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a25      	ldr	r2, [pc, #148]	; (800557c <TIM_TI1_SetConfig+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a24      	ldr	r2, [pc, #144]	; (8005580 <TIM_TI1_SetConfig+0xd4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00f      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a23      	ldr	r2, [pc, #140]	; (8005584 <TIM_TI1_SetConfig+0xd8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00b      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <TIM_TI1_SetConfig+0xdc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d007      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a21      	ldr	r2, [pc, #132]	; (800558c <TIM_TI1_SetConfig+0xe0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_TI1_SetConfig+0x66>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a20      	ldr	r2, [pc, #128]	; (8005590 <TIM_TI1_SetConfig+0xe4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <TIM_TI1_SetConfig+0x6a>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <TIM_TI1_SetConfig+0x6c>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e003      	b.n	8005536 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	b2db      	uxtb	r3, r3
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 030a 	and.w	r3, r3, #10
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40010000 	.word	0x40010000
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800
 8005584:	40000c00 	.word	0x40000c00
 8005588:	40010400 	.word	0x40010400
 800558c:	40014000 	.word	0x40014000
 8005590:	40001800 	.word	0x40001800

08005594 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0210 	bic.w	r2, r3, #16
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	031b      	lsls	r3, r3, #12
 80055d8:	b29b      	uxth	r3, r3
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	b2db      	uxtb	r3, r3
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800565e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	031b      	lsls	r3, r3, #12
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	031b      	lsls	r3, r3, #12
 80056de:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2201      	movs	r2, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e05a      	b.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d01d      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40010400 	.word	0x40010400
 800583c:	40014000 	.word	0x40014000
 8005840:	40001800 	.word	0x40001800

08005844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e03f      	b.n	80058fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fae8 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2224      	movs	r2, #36	; 0x24
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fddf 	bl	8006474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b08a      	sub	sp, #40	; 0x28
 800590a:	af02      	add	r7, sp, #8
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d17c      	bne.n	8005a20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_UART_Transmit+0x2c>
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e075      	b.n	8005a22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_UART_Transmit+0x3e>
 8005940:	2302      	movs	r3, #2
 8005942:	e06e      	b.n	8005a22 <HAL_UART_Transmit+0x11c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2221      	movs	r2, #33	; 0x21
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800595a:	f7fc ff73 	bl	8002844 <HAL_GetTick>
 800595e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d108      	bne.n	8005988 <HAL_UART_Transmit+0x82>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e003      	b.n	8005990 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005998:	e02a      	b.n	80059f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2180      	movs	r1, #128	; 0x80
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fb1f 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e036      	b.n	8005a22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	3302      	adds	r3, #2
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e007      	b.n	80059e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3301      	adds	r3, #1
 80059e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1cf      	bne.n	800599a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	2140      	movs	r1, #64	; 0x40
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 faef 	bl	8005fe8 <UART_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d11d      	bne.n	8005a80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Receive_IT+0x26>
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e016      	b.n	8005a82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Receive_IT+0x38>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e00f      	b.n	8005a82 <HAL_UART_Receive_IT+0x58>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fb24 	bl	80060c4 <UART_Start_Receive_IT>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	e000      	b.n	8005a82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b0ba      	sub	sp, #232	; 0xe8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_UART_IRQHandler+0x66>
 8005ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fc07 	bl	80062fe <UART_Receive_IT>
      return;
 8005af0:	e256      	b.n	8005fa0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 80de 	beq.w	8005cb8 <HAL_UART_IRQHandler+0x22c>
 8005afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80d1 	beq.w	8005cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <HAL_UART_IRQHandler+0xae>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f043 0201 	orr.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_UART_IRQHandler+0xd2>
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0202 	orr.w	r2, r3, #2
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_UART_IRQHandler+0xf6>
 8005b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x126>
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f043 0208 	orr.w	r2, r3, #8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 81ed 	beq.w	8005f96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x14e>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb92 	bl	80062fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <HAL_UART_IRQHandler+0x17a>
 8005bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d04f      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa9a 	bl	8006140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d141      	bne.n	8005c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d013      	beq.n	8005c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	4a7d      	ldr	r2, [pc, #500]	; (8005e68 <HAL_UART_IRQHandler+0x3dc>)
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fc ff93 	bl	8002ba6 <HAL_DMA_Abort_IT>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d016      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	e00e      	b.n	8005cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f990 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	e00a      	b.n	8005cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f98c 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	e006      	b.n	8005cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f988 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cb2:	e170      	b.n	8005f96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	bf00      	nop
    return;
 8005cb6:	e16e      	b.n	8005f96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	f040 814a 	bne.w	8005f56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8143 	beq.w	8005f56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 813c 	beq.w	8005f56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	f040 80b4 	bne.w	8005e6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8140 	beq.w	8005f9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f080 8139 	bcs.w	8005f9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	f000 8088 	beq.w	8005e4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1d9      	bne.n	8005d3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3314      	adds	r3, #20
 8005daa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005db2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005db6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e1      	bne.n	8005d8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005df0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e3      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e3      	bne.n	8005e0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fc fe3c 	bl	8002ac6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8b6 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e64:	e099      	b.n	8005f9a <HAL_UART_IRQHandler+0x50e>
 8005e66:	bf00      	nop
 8005e68:	08006207 	.word	0x08006207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808b 	beq.w	8005f9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8086 	beq.w	8005f9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eb6:	647a      	str	r2, [r7, #68]	; 0x44
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eee:	633a      	str	r2, [r7, #48]	; 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	617b      	str	r3, [r7, #20]
   return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f83e 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f54:	e023      	b.n	8005f9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_UART_IRQHandler+0x4ea>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f95d 	bl	800622e <UART_Transmit_IT>
    return;
 8005f74:	e014      	b.n	8005fa0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x514>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f99d 	bl	80062ce <UART_EndTransmit_IT>
    return;
 8005f94:	e004      	b.n	8005fa0 <HAL_UART_IRQHandler+0x514>
    return;
 8005f96:	bf00      	nop
 8005f98:	e002      	b.n	8005fa0 <HAL_UART_IRQHandler+0x514>
      return;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <HAL_UART_IRQHandler+0x514>
      return;
 8005f9e:	bf00      	nop
  }
}
 8005fa0:	37e8      	adds	r7, #232	; 0xe8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b090      	sub	sp, #64	; 0x40
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff8:	e050      	b.n	800609c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d04c      	beq.n	800609c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <UART_WaitOnFlagUntilTimeout+0x30>
 8006008:	f7fc fc1c 	bl	8002844 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006014:	429a      	cmp	r2, r3
 8006016:	d241      	bcs.n	800609c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006038:	637a      	str	r2, [r7, #52]	; 0x34
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800603e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	613b      	str	r3, [r7, #16]
   return(result);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800606c:	623a      	str	r2, [r7, #32]
 800606e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	61bb      	str	r3, [r7, #24]
   return(result);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e5      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e00f      	b.n	80060bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4013      	ands	r3, r2
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d09f      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3740      	adds	r7, #64	; 0x40
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2222      	movs	r2, #34	; 0x22
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006110:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0220 	orr.w	r2, r2, #32
 8006130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b095      	sub	sp, #84	; 0x54
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006168:	643a      	str	r2, [r7, #64]	; 0x40
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800616e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	61fb      	str	r3, [r7, #28]
   return(result);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d119      	bne.n	80061ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f023 0310 	bic.w	r3, r3, #16
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d8:	61ba      	str	r2, [r7, #24]
 80061da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6979      	ldr	r1, [r7, #20]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	613b      	str	r3, [r7, #16]
   return(result);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061fa:	bf00      	nop
 80061fc:	3754      	adds	r7, #84	; 0x54
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fecb 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b21      	cmp	r3, #33	; 0x21
 8006240:	d13e      	bne.n	80062c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	d114      	bne.n	8006276 <UART_Transmit_IT+0x48>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d110      	bne.n	8006276 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	621a      	str	r2, [r3, #32]
 8006274:	e008      	b.n	8006288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6211      	str	r1, [r2, #32]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4619      	mov	r1, r3
 8006296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff fe5a 	bl	8005fa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b08c      	sub	sp, #48	; 0x30
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b22      	cmp	r3, #34	; 0x22
 8006310:	f040 80ab 	bne.w	800646a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d117      	bne.n	800634e <UART_Receive_IT+0x50>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633c:	b29a      	uxth	r2, r3
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
 800634c:	e026      	b.n	800639c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006360:	d007      	beq.n	8006372 <UART_Receive_IT+0x74>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <UART_Receive_IT+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e008      	b.n	8006392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d15a      	bne.n	8006466 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0220 	bic.w	r2, r2, #32
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d135      	bne.n	800645c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	613b      	str	r3, [r7, #16]
   return(result);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	623a      	str	r2, [r7, #32]
 8006418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	69f9      	ldr	r1, [r7, #28]
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	61bb      	str	r3, [r7, #24]
   return(result);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d10a      	bne.n	800644e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fdbb 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
 800645a:	e002      	b.n	8006462 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fb feff 	bl	8002260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e002      	b.n	800646c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3730      	adds	r7, #48	; 0x30
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006478:	b0c0      	sub	sp, #256	; 0x100
 800647a:	af00      	add	r7, sp, #0
 800647c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	ea40 0301 	orr.w	r3, r0, r1
 800649c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064cc:	f021 010c 	bic.w	r1, r1, #12
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064da:	430b      	orrs	r3, r1
 80064dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	6999      	ldr	r1, [r3, #24]
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	ea40 0301 	orr.w	r3, r0, r1
 80064fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b8f      	ldr	r3, [pc, #572]	; (8006740 <UART_SetConfig+0x2cc>)
 8006504:	429a      	cmp	r2, r3
 8006506:	d005      	beq.n	8006514 <UART_SetConfig+0xa0>
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b8d      	ldr	r3, [pc, #564]	; (8006744 <UART_SetConfig+0x2d0>)
 8006510:	429a      	cmp	r2, r3
 8006512:	d104      	bne.n	800651e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006514:	f7fe fad8 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8006518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800651c:	e003      	b.n	8006526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fe fabf 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	f040 810c 	bne.w	800674c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800653e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	1891      	adds	r1, r2, r2
 800654c:	65b9      	str	r1, [r7, #88]	; 0x58
 800654e:	415b      	adcs	r3, r3
 8006550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006556:	4621      	mov	r1, r4
 8006558:	eb12 0801 	adds.w	r8, r2, r1
 800655c:	4629      	mov	r1, r5
 800655e:	eb43 0901 	adc.w	r9, r3, r1
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006576:	4690      	mov	r8, r2
 8006578:	4699      	mov	r9, r3
 800657a:	4623      	mov	r3, r4
 800657c:	eb18 0303 	adds.w	r3, r8, r3
 8006580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006584:	462b      	mov	r3, r5
 8006586:	eb49 0303 	adc.w	r3, r9, r3
 800658a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800659a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800659e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065a2:	460b      	mov	r3, r1
 80065a4:	18db      	adds	r3, r3, r3
 80065a6:	653b      	str	r3, [r7, #80]	; 0x50
 80065a8:	4613      	mov	r3, r2
 80065aa:	eb42 0303 	adc.w	r3, r2, r3
 80065ae:	657b      	str	r3, [r7, #84]	; 0x54
 80065b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065b8:	f7fa fa60 	bl	8000a7c <__aeabi_uldivmod>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4b61      	ldr	r3, [pc, #388]	; (8006748 <UART_SetConfig+0x2d4>)
 80065c2:	fba3 2302 	umull	r2, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	011c      	lsls	r4, r3, #4
 80065ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	1891      	adds	r1, r2, r2
 80065e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80065e4:	415b      	adcs	r3, r3
 80065e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065ec:	4641      	mov	r1, r8
 80065ee:	eb12 0a01 	adds.w	sl, r2, r1
 80065f2:	4649      	mov	r1, r9
 80065f4:	eb43 0b01 	adc.w	fp, r3, r1
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800660c:	4692      	mov	sl, r2
 800660e:	469b      	mov	fp, r3
 8006610:	4643      	mov	r3, r8
 8006612:	eb1a 0303 	adds.w	r3, sl, r3
 8006616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800661a:	464b      	mov	r3, r9
 800661c:	eb4b 0303 	adc.w	r3, fp, r3
 8006620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006638:	460b      	mov	r3, r1
 800663a:	18db      	adds	r3, r3, r3
 800663c:	643b      	str	r3, [r7, #64]	; 0x40
 800663e:	4613      	mov	r3, r2
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
 8006646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800664a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800664e:	f7fa fa15 	bl	8000a7c <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4611      	mov	r1, r2
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <UART_SetConfig+0x2d4>)
 800665a:	fba3 2301 	umull	r2, r3, r3, r1
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2264      	movs	r2, #100	; 0x64
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	1acb      	subs	r3, r1, r3
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <UART_SetConfig+0x2d4>)
 8006670:	fba3 2302 	umull	r2, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800667c:	441c      	add	r4, r3
 800667e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800668c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	63b9      	str	r1, [r7, #56]	; 0x38
 8006698:	415b      	adcs	r3, r3
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066a0:	4641      	mov	r1, r8
 80066a2:	1851      	adds	r1, r2, r1
 80066a4:	6339      	str	r1, [r7, #48]	; 0x30
 80066a6:	4649      	mov	r1, r9
 80066a8:	414b      	adcs	r3, r1
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066b8:	4659      	mov	r1, fp
 80066ba:	00cb      	lsls	r3, r1, #3
 80066bc:	4651      	mov	r1, sl
 80066be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c2:	4651      	mov	r1, sl
 80066c4:	00ca      	lsls	r2, r1, #3
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	4642      	mov	r2, r8
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d4:	464b      	mov	r3, r9
 80066d6:	460a      	mov	r2, r1
 80066d8:	eb42 0303 	adc.w	r3, r2, r3
 80066dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066f4:	460b      	mov	r3, r1
 80066f6:	18db      	adds	r3, r3, r3
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	4613      	mov	r3, r2
 80066fc:	eb42 0303 	adc.w	r3, r2, r3
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800670a:	f7fa f9b7 	bl	8000a7c <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <UART_SetConfig+0x2d4>)
 8006714:	fba3 1302 	umull	r1, r3, r3, r2
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	2164      	movs	r1, #100	; 0x64
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	3332      	adds	r3, #50	; 0x32
 8006726:	4a08      	ldr	r2, [pc, #32]	; (8006748 <UART_SetConfig+0x2d4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 0207 	and.w	r2, r3, #7
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4422      	add	r2, r4
 800673a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800673c:	e106      	b.n	800694c <UART_SetConfig+0x4d8>
 800673e:	bf00      	nop
 8006740:	40011000 	.word	0x40011000
 8006744:	40011400 	.word	0x40011400
 8006748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006750:	2200      	movs	r2, #0
 8006752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800675a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	1891      	adds	r1, r2, r2
 8006764:	6239      	str	r1, [r7, #32]
 8006766:	415b      	adcs	r3, r3
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
 800676a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800676e:	4641      	mov	r1, r8
 8006770:	1854      	adds	r4, r2, r1
 8006772:	4649      	mov	r1, r9
 8006774:	eb43 0501 	adc.w	r5, r3, r1
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	00eb      	lsls	r3, r5, #3
 8006782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006786:	00e2      	lsls	r2, r4, #3
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	4643      	mov	r3, r8
 800678e:	18e3      	adds	r3, r4, r3
 8006790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006794:	464b      	mov	r3, r9
 8006796:	eb45 0303 	adc.w	r3, r5, r3
 800679a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067ba:	4629      	mov	r1, r5
 80067bc:	008b      	lsls	r3, r1, #2
 80067be:	4621      	mov	r1, r4
 80067c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c4:	4621      	mov	r1, r4
 80067c6:	008a      	lsls	r2, r1, #2
 80067c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067cc:	f7fa f956 	bl	8000a7c <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4b60      	ldr	r3, [pc, #384]	; (8006958 <UART_SetConfig+0x4e4>)
 80067d6:	fba3 2302 	umull	r2, r3, r3, r2
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	011c      	lsls	r4, r3, #4
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	61b9      	str	r1, [r7, #24]
 80067f8:	415b      	adcs	r3, r3
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6139      	str	r1, [r7, #16]
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006834:	464b      	mov	r3, r9
 8006836:	460a      	mov	r2, r1
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	67bb      	str	r3, [r7, #120]	; 0x78
 800684a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006858:	4649      	mov	r1, r9
 800685a:	008b      	lsls	r3, r1, #2
 800685c:	4641      	mov	r1, r8
 800685e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006862:	4641      	mov	r1, r8
 8006864:	008a      	lsls	r2, r1, #2
 8006866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800686a:	f7fa f907 	bl	8000a7c <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4611      	mov	r1, r2
 8006874:	4b38      	ldr	r3, [pc, #224]	; (8006958 <UART_SetConfig+0x4e4>)
 8006876:	fba3 2301 	umull	r2, r3, r3, r1
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	2264      	movs	r2, #100	; 0x64
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	1acb      	subs	r3, r1, r3
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	3332      	adds	r3, #50	; 0x32
 8006888:	4a33      	ldr	r2, [pc, #204]	; (8006958 <UART_SetConfig+0x4e4>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006894:	441c      	add	r4, r3
 8006896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689a:	2200      	movs	r2, #0
 800689c:	673b      	str	r3, [r7, #112]	; 0x70
 800689e:	677a      	str	r2, [r7, #116]	; 0x74
 80068a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	1891      	adds	r1, r2, r2
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	415b      	adcs	r3, r3
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068b4:	4641      	mov	r1, r8
 80068b6:	1851      	adds	r1, r2, r1
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	4649      	mov	r1, r9
 80068bc:	414b      	adcs	r3, r1
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068cc:	4659      	mov	r1, fp
 80068ce:	00cb      	lsls	r3, r1, #3
 80068d0:	4651      	mov	r1, sl
 80068d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d6:	4651      	mov	r1, sl
 80068d8:	00ca      	lsls	r2, r1, #3
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	4642      	mov	r2, r8
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e6:	464b      	mov	r3, r9
 80068e8:	460a      	mov	r2, r1
 80068ea:	eb42 0303 	adc.w	r3, r2, r3
 80068ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	663b      	str	r3, [r7, #96]	; 0x60
 80068fa:	667a      	str	r2, [r7, #100]	; 0x64
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006908:	4649      	mov	r1, r9
 800690a:	008b      	lsls	r3, r1, #2
 800690c:	4641      	mov	r1, r8
 800690e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006912:	4641      	mov	r1, r8
 8006914:	008a      	lsls	r2, r1, #2
 8006916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800691a:	f7fa f8af 	bl	8000a7c <__aeabi_uldivmod>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <UART_SetConfig+0x4e4>)
 8006924:	fba3 1302 	umull	r1, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	2164      	movs	r1, #100	; 0x64
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	3332      	adds	r3, #50	; 0x32
 8006936:	4a08      	ldr	r2, [pc, #32]	; (8006958 <UART_SetConfig+0x4e4>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	f003 020f 	and.w	r2, r3, #15
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4422      	add	r2, r4
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006958:	51eb851f 	.word	0x51eb851f

0800695c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800695c:	b084      	sub	sp, #16
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	f107 001c 	add.w	r0, r7, #28
 800696a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d122      	bne.n	80069ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d105      	bne.n	80069ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 faa2 	bl	8006ef8 <USB_CoreReset>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	e01a      	b.n	80069f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa96 	bl	8006ef8 <USB_CoreReset>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
 80069e2:	e005      	b.n	80069f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10b      	bne.n	8006a0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f043 0206 	orr.w	r2, r3, #6
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f043 0220 	orr.w	r2, r3, #32
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a1a:	b004      	add	sp, #16
 8006a1c:	4770      	bx	lr

08006a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d115      	bne.n	8006a8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f7fb fef4 	bl	800285c <HAL_Delay>
      ms++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa2e 	bl	8006edc <USB_GetMode>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d01e      	beq.n	8006ac4 <USB_SetCurrentMode+0x84>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b31      	cmp	r3, #49	; 0x31
 8006a8a:	d9f0      	bls.n	8006a6e <USB_SetCurrentMode+0x2e>
 8006a8c:	e01a      	b.n	8006ac4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d115      	bne.n	8006ac0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	f7fb fedb 	bl	800285c <HAL_Delay>
      ms++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa15 	bl	8006edc <USB_GetMode>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <USB_SetCurrentMode+0x84>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b31      	cmp	r3, #49	; 0x31
 8006abc:	d9f0      	bls.n	8006aa0 <USB_SetCurrentMode+0x60>
 8006abe:	e001      	b.n	8006ac4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e005      	b.n	8006ad0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b32      	cmp	r3, #50	; 0x32
 8006ac8:	d101      	bne.n	8006ace <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad8:	b084      	sub	sp, #16
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	e009      	b.n	8006b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3340      	adds	r3, #64	; 0x40
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b0e      	cmp	r3, #14
 8006b10:	d9f2      	bls.n	8006af8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11c      	bne.n	8006b52 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b26:	f043 0302 	orr.w	r3, r3, #2
 8006b2a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b50:	e00b      	b.n	8006b6a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	461a      	mov	r2, r3
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10c      	bne.n	8006baa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b96:	2100      	movs	r1, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f965 	bl	8006e68 <USB_SetDevSpeed>
 8006b9e:	e008      	b.n	8006bb2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f960 	bl	8006e68 <USB_SetDevSpeed>
 8006ba8:	e003      	b.n	8006bb2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006baa:	2103      	movs	r1, #3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f95b 	bl	8006e68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb2:	2110      	movs	r1, #16
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8f3 	bl	8006da0 <USB_FlushTxFifo>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f91f 	bl	8006e08 <USB_FlushRxFifo>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	461a      	mov	r2, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	e043      	b.n	8006c86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d118      	bne.n	8006c48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e013      	b.n	8006c5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e008      	b.n	8006c5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3301      	adds	r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3b7      	bcc.n	8006bfe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e043      	b.n	8006d1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006caa:	d118      	bne.n	8006cde <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e013      	b.n	8006cf0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e008      	b.n	8006cf0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3b7      	bcc.n	8006c94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <USB_DevInit+0x2c4>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f043 0208 	orr.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d107      	bne.n	8006d8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d84:	f043 0304 	orr.w	r3, r3, #4
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d98:	b004      	add	sp, #16
 8006d9a:	4770      	bx	lr
 8006d9c:	803c3800 	.word	0x803c3800

08006da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <USB_FlushTxFifo+0x64>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e01b      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	daf2      	bge.n	8006dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	019b      	lsls	r3, r3, #6
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <USB_FlushTxFifo+0x64>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e006      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d0f0      	beq.n	8006dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	00030d40 	.word	0x00030d40

08006e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <USB_FlushRxFifo+0x5c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e018      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	daf2      	bge.n	8006e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2210      	movs	r2, #16
 8006e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <USB_FlushRxFifo+0x5c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e006      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d0f0      	beq.n	8006e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	00030d40 	.word	0x00030d40

08006e68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eb4:	f023 0303 	bic.w	r3, r3, #3
 8006eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <USB_CoreReset+0x64>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e01b      	b.n	8006f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	daf2      	bge.n	8006f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <USB_CoreReset+0x64>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e006      	b.n	8006f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d0f0      	beq.n	8006f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	00030d40 	.word	0x00030d40

08006f60 <std>:
 8006f60:	2300      	movs	r3, #0
 8006f62:	b510      	push	{r4, lr}
 8006f64:	4604      	mov	r4, r0
 8006f66:	e9c0 3300 	strd	r3, r3, [r0]
 8006f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f6e:	6083      	str	r3, [r0, #8]
 8006f70:	8181      	strh	r1, [r0, #12]
 8006f72:	6643      	str	r3, [r0, #100]	; 0x64
 8006f74:	81c2      	strh	r2, [r0, #14]
 8006f76:	6183      	str	r3, [r0, #24]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	305c      	adds	r0, #92	; 0x5c
 8006f7e:	f000 fa17 	bl	80073b0 <memset>
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <std+0x58>)
 8006f84:	6263      	str	r3, [r4, #36]	; 0x24
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <std+0x5c>)
 8006f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <std+0x60>)
 8006f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <std+0x64>)
 8006f90:	6323      	str	r3, [r4, #48]	; 0x30
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <std+0x68>)
 8006f94:	6224      	str	r4, [r4, #32]
 8006f96:	429c      	cmp	r4, r3
 8006f98:	d006      	beq.n	8006fa8 <std+0x48>
 8006f9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f9e:	4294      	cmp	r4, r2
 8006fa0:	d002      	beq.n	8006fa8 <std+0x48>
 8006fa2:	33d0      	adds	r3, #208	; 0xd0
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	d105      	bne.n	8006fb4 <std+0x54>
 8006fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f000 ba88 	b.w	80074c4 <__retarget_lock_init_recursive>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08007201 	.word	0x08007201
 8006fbc:	08007223 	.word	0x08007223
 8006fc0:	0800725b 	.word	0x0800725b
 8006fc4:	0800727f 	.word	0x0800727f
 8006fc8:	20000a10 	.word	0x20000a10

08006fcc <stdio_exit_handler>:
 8006fcc:	4a02      	ldr	r2, [pc, #8]	; (8006fd8 <stdio_exit_handler+0xc>)
 8006fce:	4903      	ldr	r1, [pc, #12]	; (8006fdc <stdio_exit_handler+0x10>)
 8006fd0:	4803      	ldr	r0, [pc, #12]	; (8006fe0 <stdio_exit_handler+0x14>)
 8006fd2:	f000 b869 	b.w	80070a8 <_fwalk_sglue>
 8006fd6:	bf00      	nop
 8006fd8:	20000010 	.word	0x20000010
 8006fdc:	08008021 	.word	0x08008021
 8006fe0:	2000001c 	.word	0x2000001c

08006fe4 <cleanup_stdio>:
 8006fe4:	6841      	ldr	r1, [r0, #4]
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <cleanup_stdio+0x34>)
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	b510      	push	{r4, lr}
 8006fec:	4604      	mov	r4, r0
 8006fee:	d001      	beq.n	8006ff4 <cleanup_stdio+0x10>
 8006ff0:	f001 f816 	bl	8008020 <_fflush_r>
 8006ff4:	68a1      	ldr	r1, [r4, #8]
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <cleanup_stdio+0x38>)
 8006ff8:	4299      	cmp	r1, r3
 8006ffa:	d002      	beq.n	8007002 <cleanup_stdio+0x1e>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f001 f80f 	bl	8008020 <_fflush_r>
 8007002:	68e1      	ldr	r1, [r4, #12]
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <cleanup_stdio+0x3c>)
 8007006:	4299      	cmp	r1, r3
 8007008:	d004      	beq.n	8007014 <cleanup_stdio+0x30>
 800700a:	4620      	mov	r0, r4
 800700c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007010:	f001 b806 	b.w	8008020 <_fflush_r>
 8007014:	bd10      	pop	{r4, pc}
 8007016:	bf00      	nop
 8007018:	20000a10 	.word	0x20000a10
 800701c:	20000a78 	.word	0x20000a78
 8007020:	20000ae0 	.word	0x20000ae0

08007024 <global_stdio_init.part.0>:
 8007024:	b510      	push	{r4, lr}
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <global_stdio_init.part.0+0x30>)
 8007028:	4c0b      	ldr	r4, [pc, #44]	; (8007058 <global_stdio_init.part.0+0x34>)
 800702a:	4a0c      	ldr	r2, [pc, #48]	; (800705c <global_stdio_init.part.0+0x38>)
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	4620      	mov	r0, r4
 8007030:	2200      	movs	r2, #0
 8007032:	2104      	movs	r1, #4
 8007034:	f7ff ff94 	bl	8006f60 <std>
 8007038:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800703c:	2201      	movs	r2, #1
 800703e:	2109      	movs	r1, #9
 8007040:	f7ff ff8e 	bl	8006f60 <std>
 8007044:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007048:	2202      	movs	r2, #2
 800704a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800704e:	2112      	movs	r1, #18
 8007050:	f7ff bf86 	b.w	8006f60 <std>
 8007054:	20000b48 	.word	0x20000b48
 8007058:	20000a10 	.word	0x20000a10
 800705c:	08006fcd 	.word	0x08006fcd

08007060 <__sfp_lock_acquire>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__sfp_lock_acquire+0x8>)
 8007062:	f000 ba30 	b.w	80074c6 <__retarget_lock_acquire_recursive>
 8007066:	bf00      	nop
 8007068:	20000b51 	.word	0x20000b51

0800706c <__sfp_lock_release>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__sfp_lock_release+0x8>)
 800706e:	f000 ba2b 	b.w	80074c8 <__retarget_lock_release_recursive>
 8007072:	bf00      	nop
 8007074:	20000b51 	.word	0x20000b51

08007078 <__sinit>:
 8007078:	b510      	push	{r4, lr}
 800707a:	4604      	mov	r4, r0
 800707c:	f7ff fff0 	bl	8007060 <__sfp_lock_acquire>
 8007080:	6a23      	ldr	r3, [r4, #32]
 8007082:	b11b      	cbz	r3, 800708c <__sinit+0x14>
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f7ff bff0 	b.w	800706c <__sfp_lock_release>
 800708c:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <__sinit+0x28>)
 800708e:	6223      	str	r3, [r4, #32]
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <__sinit+0x2c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f5      	bne.n	8007084 <__sinit+0xc>
 8007098:	f7ff ffc4 	bl	8007024 <global_stdio_init.part.0>
 800709c:	e7f2      	b.n	8007084 <__sinit+0xc>
 800709e:	bf00      	nop
 80070a0:	08006fe5 	.word	0x08006fe5
 80070a4:	20000b48 	.word	0x20000b48

080070a8 <_fwalk_sglue>:
 80070a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ac:	4607      	mov	r7, r0
 80070ae:	4688      	mov	r8, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	2600      	movs	r6, #0
 80070b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b8:	f1b9 0901 	subs.w	r9, r9, #1
 80070bc:	d505      	bpl.n	80070ca <_fwalk_sglue+0x22>
 80070be:	6824      	ldr	r4, [r4, #0]
 80070c0:	2c00      	cmp	r4, #0
 80070c2:	d1f7      	bne.n	80070b4 <_fwalk_sglue+0xc>
 80070c4:	4630      	mov	r0, r6
 80070c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ca:	89ab      	ldrh	r3, [r5, #12]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d907      	bls.n	80070e0 <_fwalk_sglue+0x38>
 80070d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d4:	3301      	adds	r3, #1
 80070d6:	d003      	beq.n	80070e0 <_fwalk_sglue+0x38>
 80070d8:	4629      	mov	r1, r5
 80070da:	4638      	mov	r0, r7
 80070dc:	47c0      	blx	r8
 80070de:	4306      	orrs	r6, r0
 80070e0:	3568      	adds	r5, #104	; 0x68
 80070e2:	e7e9      	b.n	80070b8 <_fwalk_sglue+0x10>

080070e4 <iprintf>:
 80070e4:	b40f      	push	{r0, r1, r2, r3}
 80070e6:	b507      	push	{r0, r1, r2, lr}
 80070e8:	4906      	ldr	r1, [pc, #24]	; (8007104 <iprintf+0x20>)
 80070ea:	ab04      	add	r3, sp, #16
 80070ec:	6808      	ldr	r0, [r1, #0]
 80070ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f2:	6881      	ldr	r1, [r0, #8]
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	f000 fc63 	bl	80079c0 <_vfiprintf_r>
 80070fa:	b003      	add	sp, #12
 80070fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007100:	b004      	add	sp, #16
 8007102:	4770      	bx	lr
 8007104:	20000068 	.word	0x20000068

08007108 <_puts_r>:
 8007108:	6a03      	ldr	r3, [r0, #32]
 800710a:	b570      	push	{r4, r5, r6, lr}
 800710c:	6884      	ldr	r4, [r0, #8]
 800710e:	4605      	mov	r5, r0
 8007110:	460e      	mov	r6, r1
 8007112:	b90b      	cbnz	r3, 8007118 <_puts_r+0x10>
 8007114:	f7ff ffb0 	bl	8007078 <__sinit>
 8007118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d405      	bmi.n	800712a <_puts_r+0x22>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	0598      	lsls	r0, r3, #22
 8007122:	d402      	bmi.n	800712a <_puts_r+0x22>
 8007124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007126:	f000 f9ce 	bl	80074c6 <__retarget_lock_acquire_recursive>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	0719      	lsls	r1, r3, #28
 800712e:	d513      	bpl.n	8007158 <_puts_r+0x50>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	b18b      	cbz	r3, 8007158 <_puts_r+0x50>
 8007134:	3e01      	subs	r6, #1
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800713c:	3b01      	subs	r3, #1
 800713e:	60a3      	str	r3, [r4, #8]
 8007140:	b9e9      	cbnz	r1, 800717e <_puts_r+0x76>
 8007142:	2b00      	cmp	r3, #0
 8007144:	da2e      	bge.n	80071a4 <_puts_r+0x9c>
 8007146:	4622      	mov	r2, r4
 8007148:	210a      	movs	r1, #10
 800714a:	4628      	mov	r0, r5
 800714c:	f000 f89b 	bl	8007286 <__swbuf_r>
 8007150:	3001      	adds	r0, #1
 8007152:	d007      	beq.n	8007164 <_puts_r+0x5c>
 8007154:	250a      	movs	r5, #10
 8007156:	e007      	b.n	8007168 <_puts_r+0x60>
 8007158:	4621      	mov	r1, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f8d0 	bl	8007300 <__swsetup_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	d0e7      	beq.n	8007134 <_puts_r+0x2c>
 8007164:	f04f 35ff 	mov.w	r5, #4294967295
 8007168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d405      	bmi.n	800717a <_puts_r+0x72>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	059b      	lsls	r3, r3, #22
 8007172:	d402      	bmi.n	800717a <_puts_r+0x72>
 8007174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007176:	f000 f9a7 	bl	80074c8 <__retarget_lock_release_recursive>
 800717a:	4628      	mov	r0, r5
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	2b00      	cmp	r3, #0
 8007180:	da04      	bge.n	800718c <_puts_r+0x84>
 8007182:	69a2      	ldr	r2, [r4, #24]
 8007184:	429a      	cmp	r2, r3
 8007186:	dc06      	bgt.n	8007196 <_puts_r+0x8e>
 8007188:	290a      	cmp	r1, #10
 800718a:	d004      	beq.n	8007196 <_puts_r+0x8e>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	6022      	str	r2, [r4, #0]
 8007192:	7019      	strb	r1, [r3, #0]
 8007194:	e7cf      	b.n	8007136 <_puts_r+0x2e>
 8007196:	4622      	mov	r2, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f874 	bl	8007286 <__swbuf_r>
 800719e:	3001      	adds	r0, #1
 80071a0:	d1c9      	bne.n	8007136 <_puts_r+0x2e>
 80071a2:	e7df      	b.n	8007164 <_puts_r+0x5c>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	250a      	movs	r5, #10
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	701d      	strb	r5, [r3, #0]
 80071ae:	e7db      	b.n	8007168 <_puts_r+0x60>

080071b0 <puts>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <puts+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f7ff bfa7 	b.w	8007108 <_puts_r>
 80071ba:	bf00      	nop
 80071bc:	20000068 	.word	0x20000068

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	b500      	push	{lr}
 80071c4:	b09c      	sub	sp, #112	; 0x70
 80071c6:	ab1d      	add	r3, sp, #116	; 0x74
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <siprintf+0x38>)
 80071d2:	9107      	str	r1, [sp, #28]
 80071d4:	9104      	str	r1, [sp, #16]
 80071d6:	4909      	ldr	r1, [pc, #36]	; (80071fc <siprintf+0x3c>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	a902      	add	r1, sp, #8
 80071e4:	f000 fac4 	bl	8007770 <_svfiprintf_r>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	b01c      	add	sp, #112	; 0x70
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	20000068 	.word	0x20000068
 80071fc:	ffff0208 	.word	0xffff0208

08007200 <__sread>:
 8007200:	b510      	push	{r4, lr}
 8007202:	460c      	mov	r4, r1
 8007204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007208:	f000 f90e 	bl	8007428 <_read_r>
 800720c:	2800      	cmp	r0, #0
 800720e:	bfab      	itete	ge
 8007210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007212:	89a3      	ldrhlt	r3, [r4, #12]
 8007214:	181b      	addge	r3, r3, r0
 8007216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800721a:	bfac      	ite	ge
 800721c:	6563      	strge	r3, [r4, #84]	; 0x54
 800721e:	81a3      	strhlt	r3, [r4, #12]
 8007220:	bd10      	pop	{r4, pc}

08007222 <__swrite>:
 8007222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007226:	461f      	mov	r7, r3
 8007228:	898b      	ldrh	r3, [r1, #12]
 800722a:	05db      	lsls	r3, r3, #23
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	4616      	mov	r6, r2
 8007232:	d505      	bpl.n	8007240 <__swrite+0x1e>
 8007234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007238:	2302      	movs	r3, #2
 800723a:	2200      	movs	r2, #0
 800723c:	f000 f8e2 	bl	8007404 <_lseek_r>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	4628      	mov	r0, r5
 8007252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007256:	f000 b8f9 	b.w	800744c <_write_r>

0800725a <__sseek>:
 800725a:	b510      	push	{r4, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007262:	f000 f8cf 	bl	8007404 <_lseek_r>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	bf15      	itete	ne
 800726c:	6560      	strne	r0, [r4, #84]	; 0x54
 800726e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007276:	81a3      	strheq	r3, [r4, #12]
 8007278:	bf18      	it	ne
 800727a:	81a3      	strhne	r3, [r4, #12]
 800727c:	bd10      	pop	{r4, pc}

0800727e <__sclose>:
 800727e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007282:	f000 b8af 	b.w	80073e4 <_close_r>

08007286 <__swbuf_r>:
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	460e      	mov	r6, r1
 800728a:	4614      	mov	r4, r2
 800728c:	4605      	mov	r5, r0
 800728e:	b118      	cbz	r0, 8007298 <__swbuf_r+0x12>
 8007290:	6a03      	ldr	r3, [r0, #32]
 8007292:	b90b      	cbnz	r3, 8007298 <__swbuf_r+0x12>
 8007294:	f7ff fef0 	bl	8007078 <__sinit>
 8007298:	69a3      	ldr	r3, [r4, #24]
 800729a:	60a3      	str	r3, [r4, #8]
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	071a      	lsls	r2, r3, #28
 80072a0:	d525      	bpl.n	80072ee <__swbuf_r+0x68>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	b31b      	cbz	r3, 80072ee <__swbuf_r+0x68>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	1a98      	subs	r0, r3, r2
 80072ac:	6963      	ldr	r3, [r4, #20]
 80072ae:	b2f6      	uxtb	r6, r6
 80072b0:	4283      	cmp	r3, r0
 80072b2:	4637      	mov	r7, r6
 80072b4:	dc04      	bgt.n	80072c0 <__swbuf_r+0x3a>
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 feb1 	bl	8008020 <_fflush_r>
 80072be:	b9e0      	cbnz	r0, 80072fa <__swbuf_r+0x74>
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	701e      	strb	r6, [r3, #0]
 80072ce:	6962      	ldr	r2, [r4, #20]
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d004      	beq.n	80072e0 <__swbuf_r+0x5a>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	07db      	lsls	r3, r3, #31
 80072da:	d506      	bpl.n	80072ea <__swbuf_r+0x64>
 80072dc:	2e0a      	cmp	r6, #10
 80072de:	d104      	bne.n	80072ea <__swbuf_r+0x64>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 fe9c 	bl	8008020 <_fflush_r>
 80072e8:	b938      	cbnz	r0, 80072fa <__swbuf_r+0x74>
 80072ea:	4638      	mov	r0, r7
 80072ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f805 	bl	8007300 <__swsetup_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0d5      	beq.n	80072a6 <__swbuf_r+0x20>
 80072fa:	f04f 37ff 	mov.w	r7, #4294967295
 80072fe:	e7f4      	b.n	80072ea <__swbuf_r+0x64>

08007300 <__swsetup_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <__swsetup_r+0xac>)
 8007304:	4605      	mov	r5, r0
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	460c      	mov	r4, r1
 800730a:	b118      	cbz	r0, 8007314 <__swsetup_r+0x14>
 800730c:	6a03      	ldr	r3, [r0, #32]
 800730e:	b90b      	cbnz	r3, 8007314 <__swsetup_r+0x14>
 8007310:	f7ff feb2 	bl	8007078 <__sinit>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800731a:	0718      	lsls	r0, r3, #28
 800731c:	d422      	bmi.n	8007364 <__swsetup_r+0x64>
 800731e:	06d9      	lsls	r1, r3, #27
 8007320:	d407      	bmi.n	8007332 <__swsetup_r+0x32>
 8007322:	2309      	movs	r3, #9
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	e034      	b.n	800739c <__swsetup_r+0x9c>
 8007332:	0758      	lsls	r0, r3, #29
 8007334:	d512      	bpl.n	800735c <__swsetup_r+0x5c>
 8007336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007338:	b141      	cbz	r1, 800734c <__swsetup_r+0x4c>
 800733a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800733e:	4299      	cmp	r1, r3
 8007340:	d002      	beq.n	8007348 <__swsetup_r+0x48>
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f8c2 	bl	80074cc <_free_r>
 8007348:	2300      	movs	r3, #0
 800734a:	6363      	str	r3, [r4, #52]	; 0x34
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	2300      	movs	r3, #0
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	b94b      	cbnz	r3, 800737c <__swsetup_r+0x7c>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800736e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007372:	d003      	beq.n	800737c <__swsetup_r+0x7c>
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 fea0 	bl	80080bc <__smakebuf_r>
 800737c:	89a0      	ldrh	r0, [r4, #12]
 800737e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007382:	f010 0301 	ands.w	r3, r0, #1
 8007386:	d00a      	beq.n	800739e <__swsetup_r+0x9e>
 8007388:	2300      	movs	r3, #0
 800738a:	60a3      	str	r3, [r4, #8]
 800738c:	6963      	ldr	r3, [r4, #20]
 800738e:	425b      	negs	r3, r3
 8007390:	61a3      	str	r3, [r4, #24]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	b943      	cbnz	r3, 80073a8 <__swsetup_r+0xa8>
 8007396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800739a:	d1c4      	bne.n	8007326 <__swsetup_r+0x26>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	0781      	lsls	r1, r0, #30
 80073a0:	bf58      	it	pl
 80073a2:	6963      	ldrpl	r3, [r4, #20]
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	e7f4      	b.n	8007392 <__swsetup_r+0x92>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e7f7      	b.n	800739c <__swsetup_r+0x9c>
 80073ac:	20000068 	.word	0x20000068

080073b0 <memset>:
 80073b0:	4402      	add	r2, r0
 80073b2:	4603      	mov	r3, r0
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d100      	bne.n	80073ba <memset+0xa>
 80073b8:	4770      	bx	lr
 80073ba:	f803 1b01 	strb.w	r1, [r3], #1
 80073be:	e7f9      	b.n	80073b4 <memset+0x4>

080073c0 <strncmp>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	b16a      	cbz	r2, 80073e0 <strncmp+0x20>
 80073c4:	3901      	subs	r1, #1
 80073c6:	1884      	adds	r4, r0, r2
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d103      	bne.n	80073dc <strncmp+0x1c>
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d001      	beq.n	80073dc <strncmp+0x1c>
 80073d8:	2a00      	cmp	r2, #0
 80073da:	d1f5      	bne.n	80073c8 <strncmp+0x8>
 80073dc:	1ad0      	subs	r0, r2, r3
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	4610      	mov	r0, r2
 80073e2:	e7fc      	b.n	80073de <strncmp+0x1e>

080073e4 <_close_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d06      	ldr	r5, [pc, #24]	; (8007400 <_close_r+0x1c>)
 80073e8:	2300      	movs	r3, #0
 80073ea:	4604      	mov	r4, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	f7fa feb9 	bl	8002166 <_close>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_close_r+0x1a>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_close_r+0x1a>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	20000b4c 	.word	0x20000b4c

08007404 <_lseek_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d07      	ldr	r5, [pc, #28]	; (8007424 <_lseek_r+0x20>)
 8007408:	4604      	mov	r4, r0
 800740a:	4608      	mov	r0, r1
 800740c:	4611      	mov	r1, r2
 800740e:	2200      	movs	r2, #0
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7fa fece 	bl	80021b4 <_lseek>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_lseek_r+0x1e>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_lseek_r+0x1e>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20000b4c 	.word	0x20000b4c

08007428 <_read_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_read_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7fa fe5c 	bl	80020f4 <_read>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_read_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_read_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000b4c 	.word	0x20000b4c

0800744c <_write_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d07      	ldr	r5, [pc, #28]	; (800746c <_write_r+0x20>)
 8007450:	4604      	mov	r4, r0
 8007452:	4608      	mov	r0, r1
 8007454:	4611      	mov	r1, r2
 8007456:	2200      	movs	r2, #0
 8007458:	602a      	str	r2, [r5, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	f7fa fe67 	bl	800212e <_write>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_write_r+0x1e>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_write_r+0x1e>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20000b4c 	.word	0x20000b4c

08007470 <__errno>:
 8007470:	4b01      	ldr	r3, [pc, #4]	; (8007478 <__errno+0x8>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000068 	.word	0x20000068

0800747c <__libc_init_array>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4d0d      	ldr	r5, [pc, #52]	; (80074b4 <__libc_init_array+0x38>)
 8007480:	4c0d      	ldr	r4, [pc, #52]	; (80074b8 <__libc_init_array+0x3c>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	2600      	movs	r6, #0
 8007488:	42a6      	cmp	r6, r4
 800748a:	d109      	bne.n	80074a0 <__libc_init_array+0x24>
 800748c:	4d0b      	ldr	r5, [pc, #44]	; (80074bc <__libc_init_array+0x40>)
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <__libc_init_array+0x44>)
 8007490:	f000 fee2 	bl	8008258 <_init>
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	2600      	movs	r6, #0
 800749a:	42a6      	cmp	r6, r4
 800749c:	d105      	bne.n	80074aa <__libc_init_array+0x2e>
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a4:	4798      	blx	r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7ee      	b.n	8007488 <__libc_init_array+0xc>
 80074aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ae:	4798      	blx	r3
 80074b0:	3601      	adds	r6, #1
 80074b2:	e7f2      	b.n	800749a <__libc_init_array+0x1e>
 80074b4:	080083e0 	.word	0x080083e0
 80074b8:	080083e0 	.word	0x080083e0
 80074bc:	080083e0 	.word	0x080083e0
 80074c0:	080083e4 	.word	0x080083e4

080074c4 <__retarget_lock_init_recursive>:
 80074c4:	4770      	bx	lr

080074c6 <__retarget_lock_acquire_recursive>:
 80074c6:	4770      	bx	lr

080074c8 <__retarget_lock_release_recursive>:
 80074c8:	4770      	bx	lr
	...

080074cc <_free_r>:
 80074cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d044      	beq.n	800755c <_free_r+0x90>
 80074d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d6:	9001      	str	r0, [sp, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f1a1 0404 	sub.w	r4, r1, #4
 80074de:	bfb8      	it	lt
 80074e0:	18e4      	addlt	r4, r4, r3
 80074e2:	f000 f8df 	bl	80076a4 <__malloc_lock>
 80074e6:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <_free_r+0x94>)
 80074e8:	9801      	ldr	r0, [sp, #4]
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	b933      	cbnz	r3, 80074fc <_free_r+0x30>
 80074ee:	6063      	str	r3, [r4, #4]
 80074f0:	6014      	str	r4, [r2, #0]
 80074f2:	b003      	add	sp, #12
 80074f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074f8:	f000 b8da 	b.w	80076b0 <__malloc_unlock>
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	d908      	bls.n	8007512 <_free_r+0x46>
 8007500:	6825      	ldr	r5, [r4, #0]
 8007502:	1961      	adds	r1, r4, r5
 8007504:	428b      	cmp	r3, r1
 8007506:	bf01      	itttt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	1949      	addeq	r1, r1, r5
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	e7ed      	b.n	80074ee <_free_r+0x22>
 8007512:	461a      	mov	r2, r3
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	b10b      	cbz	r3, 800751c <_free_r+0x50>
 8007518:	42a3      	cmp	r3, r4
 800751a:	d9fa      	bls.n	8007512 <_free_r+0x46>
 800751c:	6811      	ldr	r1, [r2, #0]
 800751e:	1855      	adds	r5, r2, r1
 8007520:	42a5      	cmp	r5, r4
 8007522:	d10b      	bne.n	800753c <_free_r+0x70>
 8007524:	6824      	ldr	r4, [r4, #0]
 8007526:	4421      	add	r1, r4
 8007528:	1854      	adds	r4, r2, r1
 800752a:	42a3      	cmp	r3, r4
 800752c:	6011      	str	r1, [r2, #0]
 800752e:	d1e0      	bne.n	80074f2 <_free_r+0x26>
 8007530:	681c      	ldr	r4, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	6053      	str	r3, [r2, #4]
 8007536:	440c      	add	r4, r1
 8007538:	6014      	str	r4, [r2, #0]
 800753a:	e7da      	b.n	80074f2 <_free_r+0x26>
 800753c:	d902      	bls.n	8007544 <_free_r+0x78>
 800753e:	230c      	movs	r3, #12
 8007540:	6003      	str	r3, [r0, #0]
 8007542:	e7d6      	b.n	80074f2 <_free_r+0x26>
 8007544:	6825      	ldr	r5, [r4, #0]
 8007546:	1961      	adds	r1, r4, r5
 8007548:	428b      	cmp	r3, r1
 800754a:	bf04      	itt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	6063      	str	r3, [r4, #4]
 8007552:	bf04      	itt	eq
 8007554:	1949      	addeq	r1, r1, r5
 8007556:	6021      	streq	r1, [r4, #0]
 8007558:	6054      	str	r4, [r2, #4]
 800755a:	e7ca      	b.n	80074f2 <_free_r+0x26>
 800755c:	b003      	add	sp, #12
 800755e:	bd30      	pop	{r4, r5, pc}
 8007560:	20000b54 	.word	0x20000b54

08007564 <sbrk_aligned>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4e0e      	ldr	r6, [pc, #56]	; (80075a0 <sbrk_aligned+0x3c>)
 8007568:	460c      	mov	r4, r1
 800756a:	6831      	ldr	r1, [r6, #0]
 800756c:	4605      	mov	r5, r0
 800756e:	b911      	cbnz	r1, 8007576 <sbrk_aligned+0x12>
 8007570:	f000 fe1c 	bl	80081ac <_sbrk_r>
 8007574:	6030      	str	r0, [r6, #0]
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f000 fe17 	bl	80081ac <_sbrk_r>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d00a      	beq.n	8007598 <sbrk_aligned+0x34>
 8007582:	1cc4      	adds	r4, r0, #3
 8007584:	f024 0403 	bic.w	r4, r4, #3
 8007588:	42a0      	cmp	r0, r4
 800758a:	d007      	beq.n	800759c <sbrk_aligned+0x38>
 800758c:	1a21      	subs	r1, r4, r0
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fe0c 	bl	80081ac <_sbrk_r>
 8007594:	3001      	adds	r0, #1
 8007596:	d101      	bne.n	800759c <sbrk_aligned+0x38>
 8007598:	f04f 34ff 	mov.w	r4, #4294967295
 800759c:	4620      	mov	r0, r4
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	20000b58 	.word	0x20000b58

080075a4 <_malloc_r>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	1ccd      	adds	r5, r1, #3
 80075aa:	f025 0503 	bic.w	r5, r5, #3
 80075ae:	3508      	adds	r5, #8
 80075b0:	2d0c      	cmp	r5, #12
 80075b2:	bf38      	it	cc
 80075b4:	250c      	movcc	r5, #12
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	4607      	mov	r7, r0
 80075ba:	db01      	blt.n	80075c0 <_malloc_r+0x1c>
 80075bc:	42a9      	cmp	r1, r5
 80075be:	d905      	bls.n	80075cc <_malloc_r+0x28>
 80075c0:	230c      	movs	r3, #12
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	2600      	movs	r6, #0
 80075c6:	4630      	mov	r0, r6
 80075c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076a0 <_malloc_r+0xfc>
 80075d0:	f000 f868 	bl	80076a4 <__malloc_lock>
 80075d4:	f8d8 3000 	ldr.w	r3, [r8]
 80075d8:	461c      	mov	r4, r3
 80075da:	bb5c      	cbnz	r4, 8007634 <_malloc_r+0x90>
 80075dc:	4629      	mov	r1, r5
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ffc0 	bl	8007564 <sbrk_aligned>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	4604      	mov	r4, r0
 80075e8:	d155      	bne.n	8007696 <_malloc_r+0xf2>
 80075ea:	f8d8 4000 	ldr.w	r4, [r8]
 80075ee:	4626      	mov	r6, r4
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	d145      	bne.n	8007680 <_malloc_r+0xdc>
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d048      	beq.n	800768a <_malloc_r+0xe6>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	4631      	mov	r1, r6
 80075fc:	4638      	mov	r0, r7
 80075fe:	eb04 0903 	add.w	r9, r4, r3
 8007602:	f000 fdd3 	bl	80081ac <_sbrk_r>
 8007606:	4581      	cmp	r9, r0
 8007608:	d13f      	bne.n	800768a <_malloc_r+0xe6>
 800760a:	6821      	ldr	r1, [r4, #0]
 800760c:	1a6d      	subs	r5, r5, r1
 800760e:	4629      	mov	r1, r5
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff ffa7 	bl	8007564 <sbrk_aligned>
 8007616:	3001      	adds	r0, #1
 8007618:	d037      	beq.n	800768a <_malloc_r+0xe6>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	442b      	add	r3, r5
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	f8d8 3000 	ldr.w	r3, [r8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d038      	beq.n	800769a <_malloc_r+0xf6>
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	42a2      	cmp	r2, r4
 800762c:	d12b      	bne.n	8007686 <_malloc_r+0xe2>
 800762e:	2200      	movs	r2, #0
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	e00f      	b.n	8007654 <_malloc_r+0xb0>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	1b52      	subs	r2, r2, r5
 8007638:	d41f      	bmi.n	800767a <_malloc_r+0xd6>
 800763a:	2a0b      	cmp	r2, #11
 800763c:	d917      	bls.n	800766e <_malloc_r+0xca>
 800763e:	1961      	adds	r1, r4, r5
 8007640:	42a3      	cmp	r3, r4
 8007642:	6025      	str	r5, [r4, #0]
 8007644:	bf18      	it	ne
 8007646:	6059      	strne	r1, [r3, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	bf08      	it	eq
 800764c:	f8c8 1000 	streq.w	r1, [r8]
 8007650:	5162      	str	r2, [r4, r5]
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	4638      	mov	r0, r7
 8007656:	f104 060b 	add.w	r6, r4, #11
 800765a:	f000 f829 	bl	80076b0 <__malloc_unlock>
 800765e:	f026 0607 	bic.w	r6, r6, #7
 8007662:	1d23      	adds	r3, r4, #4
 8007664:	1af2      	subs	r2, r6, r3
 8007666:	d0ae      	beq.n	80075c6 <_malloc_r+0x22>
 8007668:	1b9b      	subs	r3, r3, r6
 800766a:	50a3      	str	r3, [r4, r2]
 800766c:	e7ab      	b.n	80075c6 <_malloc_r+0x22>
 800766e:	42a3      	cmp	r3, r4
 8007670:	6862      	ldr	r2, [r4, #4]
 8007672:	d1dd      	bne.n	8007630 <_malloc_r+0x8c>
 8007674:	f8c8 2000 	str.w	r2, [r8]
 8007678:	e7ec      	b.n	8007654 <_malloc_r+0xb0>
 800767a:	4623      	mov	r3, r4
 800767c:	6864      	ldr	r4, [r4, #4]
 800767e:	e7ac      	b.n	80075da <_malloc_r+0x36>
 8007680:	4634      	mov	r4, r6
 8007682:	6876      	ldr	r6, [r6, #4]
 8007684:	e7b4      	b.n	80075f0 <_malloc_r+0x4c>
 8007686:	4613      	mov	r3, r2
 8007688:	e7cc      	b.n	8007624 <_malloc_r+0x80>
 800768a:	230c      	movs	r3, #12
 800768c:	603b      	str	r3, [r7, #0]
 800768e:	4638      	mov	r0, r7
 8007690:	f000 f80e 	bl	80076b0 <__malloc_unlock>
 8007694:	e797      	b.n	80075c6 <_malloc_r+0x22>
 8007696:	6025      	str	r5, [r4, #0]
 8007698:	e7dc      	b.n	8007654 <_malloc_r+0xb0>
 800769a:	605b      	str	r3, [r3, #4]
 800769c:	deff      	udf	#255	; 0xff
 800769e:	bf00      	nop
 80076a0:	20000b54 	.word	0x20000b54

080076a4 <__malloc_lock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__malloc_lock+0x8>)
 80076a6:	f7ff bf0e 	b.w	80074c6 <__retarget_lock_acquire_recursive>
 80076aa:	bf00      	nop
 80076ac:	20000b50 	.word	0x20000b50

080076b0 <__malloc_unlock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_unlock+0x8>)
 80076b2:	f7ff bf09 	b.w	80074c8 <__retarget_lock_release_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000b50 	.word	0x20000b50

080076bc <__ssputs_r>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	688e      	ldr	r6, [r1, #8]
 80076c2:	461f      	mov	r7, r3
 80076c4:	42be      	cmp	r6, r7
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	4682      	mov	sl, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4690      	mov	r8, r2
 80076ce:	d82c      	bhi.n	800772a <__ssputs_r+0x6e>
 80076d0:	898a      	ldrh	r2, [r1, #12]
 80076d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076d6:	d026      	beq.n	8007726 <__ssputs_r+0x6a>
 80076d8:	6965      	ldr	r5, [r4, #20]
 80076da:	6909      	ldr	r1, [r1, #16]
 80076dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076e0:	eba3 0901 	sub.w	r9, r3, r1
 80076e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076e8:	1c7b      	adds	r3, r7, #1
 80076ea:	444b      	add	r3, r9
 80076ec:	106d      	asrs	r5, r5, #1
 80076ee:	429d      	cmp	r5, r3
 80076f0:	bf38      	it	cc
 80076f2:	461d      	movcc	r5, r3
 80076f4:	0553      	lsls	r3, r2, #21
 80076f6:	d527      	bpl.n	8007748 <__ssputs_r+0x8c>
 80076f8:	4629      	mov	r1, r5
 80076fa:	f7ff ff53 	bl	80075a4 <_malloc_r>
 80076fe:	4606      	mov	r6, r0
 8007700:	b360      	cbz	r0, 800775c <__ssputs_r+0xa0>
 8007702:	6921      	ldr	r1, [r4, #16]
 8007704:	464a      	mov	r2, r9
 8007706:	f000 fd61 	bl	80081cc <memcpy>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	6126      	str	r6, [r4, #16]
 8007718:	6165      	str	r5, [r4, #20]
 800771a:	444e      	add	r6, r9
 800771c:	eba5 0509 	sub.w	r5, r5, r9
 8007720:	6026      	str	r6, [r4, #0]
 8007722:	60a5      	str	r5, [r4, #8]
 8007724:	463e      	mov	r6, r7
 8007726:	42be      	cmp	r6, r7
 8007728:	d900      	bls.n	800772c <__ssputs_r+0x70>
 800772a:	463e      	mov	r6, r7
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	4632      	mov	r2, r6
 8007730:	4641      	mov	r1, r8
 8007732:	f000 fcff 	bl	8008134 <memmove>
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	1b9b      	subs	r3, r3, r6
 800773a:	60a3      	str	r3, [r4, #8]
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	4433      	add	r3, r6
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	2000      	movs	r0, #0
 8007744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007748:	462a      	mov	r2, r5
 800774a:	f000 fd4d 	bl	80081e8 <_realloc_r>
 800774e:	4606      	mov	r6, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	d1e0      	bne.n	8007716 <__ssputs_r+0x5a>
 8007754:	6921      	ldr	r1, [r4, #16]
 8007756:	4650      	mov	r0, sl
 8007758:	f7ff feb8 	bl	80074cc <_free_r>
 800775c:	230c      	movs	r3, #12
 800775e:	f8ca 3000 	str.w	r3, [sl]
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	f04f 30ff 	mov.w	r0, #4294967295
 800776e:	e7e9      	b.n	8007744 <__ssputs_r+0x88>

08007770 <_svfiprintf_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	4698      	mov	r8, r3
 8007776:	898b      	ldrh	r3, [r1, #12]
 8007778:	061b      	lsls	r3, r3, #24
 800777a:	b09d      	sub	sp, #116	; 0x74
 800777c:	4607      	mov	r7, r0
 800777e:	460d      	mov	r5, r1
 8007780:	4614      	mov	r4, r2
 8007782:	d50e      	bpl.n	80077a2 <_svfiprintf_r+0x32>
 8007784:	690b      	ldr	r3, [r1, #16]
 8007786:	b963      	cbnz	r3, 80077a2 <_svfiprintf_r+0x32>
 8007788:	2140      	movs	r1, #64	; 0x40
 800778a:	f7ff ff0b 	bl	80075a4 <_malloc_r>
 800778e:	6028      	str	r0, [r5, #0]
 8007790:	6128      	str	r0, [r5, #16]
 8007792:	b920      	cbnz	r0, 800779e <_svfiprintf_r+0x2e>
 8007794:	230c      	movs	r3, #12
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	e0d0      	b.n	8007940 <_svfiprintf_r+0x1d0>
 800779e:	2340      	movs	r3, #64	; 0x40
 80077a0:	616b      	str	r3, [r5, #20]
 80077a2:	2300      	movs	r3, #0
 80077a4:	9309      	str	r3, [sp, #36]	; 0x24
 80077a6:	2320      	movs	r3, #32
 80077a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80077b0:	2330      	movs	r3, #48	; 0x30
 80077b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007958 <_svfiprintf_r+0x1e8>
 80077b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ba:	f04f 0901 	mov.w	r9, #1
 80077be:	4623      	mov	r3, r4
 80077c0:	469a      	mov	sl, r3
 80077c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c6:	b10a      	cbz	r2, 80077cc <_svfiprintf_r+0x5c>
 80077c8:	2a25      	cmp	r2, #37	; 0x25
 80077ca:	d1f9      	bne.n	80077c0 <_svfiprintf_r+0x50>
 80077cc:	ebba 0b04 	subs.w	fp, sl, r4
 80077d0:	d00b      	beq.n	80077ea <_svfiprintf_r+0x7a>
 80077d2:	465b      	mov	r3, fp
 80077d4:	4622      	mov	r2, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	4638      	mov	r0, r7
 80077da:	f7ff ff6f 	bl	80076bc <__ssputs_r>
 80077de:	3001      	adds	r0, #1
 80077e0:	f000 80a9 	beq.w	8007936 <_svfiprintf_r+0x1c6>
 80077e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e6:	445a      	add	r2, fp
 80077e8:	9209      	str	r2, [sp, #36]	; 0x24
 80077ea:	f89a 3000 	ldrb.w	r3, [sl]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 80a1 	beq.w	8007936 <_svfiprintf_r+0x1c6>
 80077f4:	2300      	movs	r3, #0
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077fe:	f10a 0a01 	add.w	sl, sl, #1
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	9307      	str	r3, [sp, #28]
 8007806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800780a:	931a      	str	r3, [sp, #104]	; 0x68
 800780c:	4654      	mov	r4, sl
 800780e:	2205      	movs	r2, #5
 8007810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007814:	4850      	ldr	r0, [pc, #320]	; (8007958 <_svfiprintf_r+0x1e8>)
 8007816:	f7f8 fceb 	bl	80001f0 <memchr>
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	b9d8      	cbnz	r0, 8007856 <_svfiprintf_r+0xe6>
 800781e:	06d0      	lsls	r0, r2, #27
 8007820:	bf44      	itt	mi
 8007822:	2320      	movmi	r3, #32
 8007824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007828:	0711      	lsls	r1, r2, #28
 800782a:	bf44      	itt	mi
 800782c:	232b      	movmi	r3, #43	; 0x2b
 800782e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007832:	f89a 3000 	ldrb.w	r3, [sl]
 8007836:	2b2a      	cmp	r3, #42	; 0x2a
 8007838:	d015      	beq.n	8007866 <_svfiprintf_r+0xf6>
 800783a:	9a07      	ldr	r2, [sp, #28]
 800783c:	4654      	mov	r4, sl
 800783e:	2000      	movs	r0, #0
 8007840:	f04f 0c0a 	mov.w	ip, #10
 8007844:	4621      	mov	r1, r4
 8007846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800784a:	3b30      	subs	r3, #48	; 0x30
 800784c:	2b09      	cmp	r3, #9
 800784e:	d94d      	bls.n	80078ec <_svfiprintf_r+0x17c>
 8007850:	b1b0      	cbz	r0, 8007880 <_svfiprintf_r+0x110>
 8007852:	9207      	str	r2, [sp, #28]
 8007854:	e014      	b.n	8007880 <_svfiprintf_r+0x110>
 8007856:	eba0 0308 	sub.w	r3, r0, r8
 800785a:	fa09 f303 	lsl.w	r3, r9, r3
 800785e:	4313      	orrs	r3, r2
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	46a2      	mov	sl, r4
 8007864:	e7d2      	b.n	800780c <_svfiprintf_r+0x9c>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	1d19      	adds	r1, r3, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	9103      	str	r1, [sp, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfbb      	ittet	lt
 8007872:	425b      	neglt	r3, r3
 8007874:	f042 0202 	orrlt.w	r2, r2, #2
 8007878:	9307      	strge	r3, [sp, #28]
 800787a:	9307      	strlt	r3, [sp, #28]
 800787c:	bfb8      	it	lt
 800787e:	9204      	strlt	r2, [sp, #16]
 8007880:	7823      	ldrb	r3, [r4, #0]
 8007882:	2b2e      	cmp	r3, #46	; 0x2e
 8007884:	d10c      	bne.n	80078a0 <_svfiprintf_r+0x130>
 8007886:	7863      	ldrb	r3, [r4, #1]
 8007888:	2b2a      	cmp	r3, #42	; 0x2a
 800788a:	d134      	bne.n	80078f6 <_svfiprintf_r+0x186>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	9203      	str	r2, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfb8      	it	lt
 8007898:	f04f 33ff 	movlt.w	r3, #4294967295
 800789c:	3402      	adds	r4, #2
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007968 <_svfiprintf_r+0x1f8>
 80078a4:	7821      	ldrb	r1, [r4, #0]
 80078a6:	2203      	movs	r2, #3
 80078a8:	4650      	mov	r0, sl
 80078aa:	f7f8 fca1 	bl	80001f0 <memchr>
 80078ae:	b138      	cbz	r0, 80078c0 <_svfiprintf_r+0x150>
 80078b0:	9b04      	ldr	r3, [sp, #16]
 80078b2:	eba0 000a 	sub.w	r0, r0, sl
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	4082      	lsls	r2, r0
 80078ba:	4313      	orrs	r3, r2
 80078bc:	3401      	adds	r4, #1
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	4825      	ldr	r0, [pc, #148]	; (800795c <_svfiprintf_r+0x1ec>)
 80078c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078ca:	2206      	movs	r2, #6
 80078cc:	f7f8 fc90 	bl	80001f0 <memchr>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d038      	beq.n	8007946 <_svfiprintf_r+0x1d6>
 80078d4:	4b22      	ldr	r3, [pc, #136]	; (8007960 <_svfiprintf_r+0x1f0>)
 80078d6:	bb1b      	cbnz	r3, 8007920 <_svfiprintf_r+0x1b0>
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	3307      	adds	r3, #7
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	9303      	str	r3, [sp, #12]
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	4433      	add	r3, r6
 80078e8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ea:	e768      	b.n	80077be <_svfiprintf_r+0x4e>
 80078ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80078f0:	460c      	mov	r4, r1
 80078f2:	2001      	movs	r0, #1
 80078f4:	e7a6      	b.n	8007844 <_svfiprintf_r+0xd4>
 80078f6:	2300      	movs	r3, #0
 80078f8:	3401      	adds	r4, #1
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f04f 0c0a 	mov.w	ip, #10
 8007902:	4620      	mov	r0, r4
 8007904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007908:	3a30      	subs	r2, #48	; 0x30
 800790a:	2a09      	cmp	r2, #9
 800790c:	d903      	bls.n	8007916 <_svfiprintf_r+0x1a6>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0c6      	beq.n	80078a0 <_svfiprintf_r+0x130>
 8007912:	9105      	str	r1, [sp, #20]
 8007914:	e7c4      	b.n	80078a0 <_svfiprintf_r+0x130>
 8007916:	fb0c 2101 	mla	r1, ip, r1, r2
 800791a:	4604      	mov	r4, r0
 800791c:	2301      	movs	r3, #1
 800791e:	e7f0      	b.n	8007902 <_svfiprintf_r+0x192>
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	462a      	mov	r2, r5
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <_svfiprintf_r+0x1f4>)
 8007928:	a904      	add	r1, sp, #16
 800792a:	4638      	mov	r0, r7
 800792c:	f3af 8000 	nop.w
 8007930:	1c42      	adds	r2, r0, #1
 8007932:	4606      	mov	r6, r0
 8007934:	d1d6      	bne.n	80078e4 <_svfiprintf_r+0x174>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	065b      	lsls	r3, r3, #25
 800793a:	f53f af2d 	bmi.w	8007798 <_svfiprintf_r+0x28>
 800793e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007940:	b01d      	add	sp, #116	; 0x74
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	ab03      	add	r3, sp, #12
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	462a      	mov	r2, r5
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <_svfiprintf_r+0x1f4>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	4638      	mov	r0, r7
 8007952:	f000 f9bd 	bl	8007cd0 <_printf_i>
 8007956:	e7eb      	b.n	8007930 <_svfiprintf_r+0x1c0>
 8007958:	080083a4 	.word	0x080083a4
 800795c:	080083ae 	.word	0x080083ae
 8007960:	00000000 	.word	0x00000000
 8007964:	080076bd 	.word	0x080076bd
 8007968:	080083aa 	.word	0x080083aa

0800796c <__sfputc_r>:
 800796c:	6893      	ldr	r3, [r2, #8]
 800796e:	3b01      	subs	r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	b410      	push	{r4}
 8007974:	6093      	str	r3, [r2, #8]
 8007976:	da08      	bge.n	800798a <__sfputc_r+0x1e>
 8007978:	6994      	ldr	r4, [r2, #24]
 800797a:	42a3      	cmp	r3, r4
 800797c:	db01      	blt.n	8007982 <__sfputc_r+0x16>
 800797e:	290a      	cmp	r1, #10
 8007980:	d103      	bne.n	800798a <__sfputc_r+0x1e>
 8007982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007986:	f7ff bc7e 	b.w	8007286 <__swbuf_r>
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	1c58      	adds	r0, r3, #1
 800798e:	6010      	str	r0, [r2, #0]
 8007990:	7019      	strb	r1, [r3, #0]
 8007992:	4608      	mov	r0, r1
 8007994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007998:	4770      	bx	lr

0800799a <__sfputs_r>:
 800799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	18d5      	adds	r5, r2, r3
 80079a4:	42ac      	cmp	r4, r5
 80079a6:	d101      	bne.n	80079ac <__sfputs_r+0x12>
 80079a8:	2000      	movs	r0, #0
 80079aa:	e007      	b.n	80079bc <__sfputs_r+0x22>
 80079ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b0:	463a      	mov	r2, r7
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7ff ffda 	bl	800796c <__sfputc_r>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d1f3      	bne.n	80079a4 <__sfputs_r+0xa>
 80079bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c0 <_vfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460d      	mov	r5, r1
 80079c6:	b09d      	sub	sp, #116	; 0x74
 80079c8:	4614      	mov	r4, r2
 80079ca:	4698      	mov	r8, r3
 80079cc:	4606      	mov	r6, r0
 80079ce:	b118      	cbz	r0, 80079d8 <_vfiprintf_r+0x18>
 80079d0:	6a03      	ldr	r3, [r0, #32]
 80079d2:	b90b      	cbnz	r3, 80079d8 <_vfiprintf_r+0x18>
 80079d4:	f7ff fb50 	bl	8007078 <__sinit>
 80079d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079da:	07d9      	lsls	r1, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_vfiprintf_r+0x2a>
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	059a      	lsls	r2, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_vfiprintf_r+0x2a>
 80079e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e6:	f7ff fd6e 	bl	80074c6 <__retarget_lock_acquire_recursive>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	d501      	bpl.n	80079f4 <_vfiprintf_r+0x34>
 80079f0:	692b      	ldr	r3, [r5, #16]
 80079f2:	b99b      	cbnz	r3, 8007a1c <_vfiprintf_r+0x5c>
 80079f4:	4629      	mov	r1, r5
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff fc82 	bl	8007300 <__swsetup_r>
 80079fc:	b170      	cbz	r0, 8007a1c <_vfiprintf_r+0x5c>
 80079fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a00:	07dc      	lsls	r4, r3, #31
 8007a02:	d504      	bpl.n	8007a0e <_vfiprintf_r+0x4e>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	b01d      	add	sp, #116	; 0x74
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	0598      	lsls	r0, r3, #22
 8007a12:	d4f7      	bmi.n	8007a04 <_vfiprintf_r+0x44>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f7ff fd57 	bl	80074c8 <__retarget_lock_release_recursive>
 8007a1a:	e7f3      	b.n	8007a04 <_vfiprintf_r+0x44>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a20:	2320      	movs	r3, #32
 8007a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2a:	2330      	movs	r3, #48	; 0x30
 8007a2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007be0 <_vfiprintf_r+0x220>
 8007a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a34:	f04f 0901 	mov.w	r9, #1
 8007a38:	4623      	mov	r3, r4
 8007a3a:	469a      	mov	sl, r3
 8007a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a40:	b10a      	cbz	r2, 8007a46 <_vfiprintf_r+0x86>
 8007a42:	2a25      	cmp	r2, #37	; 0x25
 8007a44:	d1f9      	bne.n	8007a3a <_vfiprintf_r+0x7a>
 8007a46:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4a:	d00b      	beq.n	8007a64 <_vfiprintf_r+0xa4>
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffa1 	bl	800799a <__sfputs_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f000 80a9 	beq.w	8007bb0 <_vfiprintf_r+0x1f0>
 8007a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a60:	445a      	add	r2, fp
 8007a62:	9209      	str	r2, [sp, #36]	; 0x24
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80a1 	beq.w	8007bb0 <_vfiprintf_r+0x1f0>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a78:	f10a 0a01 	add.w	sl, sl, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a84:	931a      	str	r3, [sp, #104]	; 0x68
 8007a86:	4654      	mov	r4, sl
 8007a88:	2205      	movs	r2, #5
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	4854      	ldr	r0, [pc, #336]	; (8007be0 <_vfiprintf_r+0x220>)
 8007a90:	f7f8 fbae 	bl	80001f0 <memchr>
 8007a94:	9a04      	ldr	r2, [sp, #16]
 8007a96:	b9d8      	cbnz	r0, 8007ad0 <_vfiprintf_r+0x110>
 8007a98:	06d1      	lsls	r1, r2, #27
 8007a9a:	bf44      	itt	mi
 8007a9c:	2320      	movmi	r3, #32
 8007a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa2:	0713      	lsls	r3, r2, #28
 8007aa4:	bf44      	itt	mi
 8007aa6:	232b      	movmi	r3, #43	; 0x2b
 8007aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aac:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab2:	d015      	beq.n	8007ae0 <_vfiprintf_r+0x120>
 8007ab4:	9a07      	ldr	r2, [sp, #28]
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f04f 0c0a 	mov.w	ip, #10
 8007abe:	4621      	mov	r1, r4
 8007ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac4:	3b30      	subs	r3, #48	; 0x30
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d94d      	bls.n	8007b66 <_vfiprintf_r+0x1a6>
 8007aca:	b1b0      	cbz	r0, 8007afa <_vfiprintf_r+0x13a>
 8007acc:	9207      	str	r2, [sp, #28]
 8007ace:	e014      	b.n	8007afa <_vfiprintf_r+0x13a>
 8007ad0:	eba0 0308 	sub.w	r3, r0, r8
 8007ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	46a2      	mov	sl, r4
 8007ade:	e7d2      	b.n	8007a86 <_vfiprintf_r+0xc6>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d19      	adds	r1, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfbb      	ittet	lt
 8007aec:	425b      	neglt	r3, r3
 8007aee:	f042 0202 	orrlt.w	r2, r2, #2
 8007af2:	9307      	strge	r3, [sp, #28]
 8007af4:	9307      	strlt	r3, [sp, #28]
 8007af6:	bfb8      	it	lt
 8007af8:	9204      	strlt	r2, [sp, #16]
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	2b2e      	cmp	r3, #46	; 0x2e
 8007afe:	d10c      	bne.n	8007b1a <_vfiprintf_r+0x15a>
 8007b00:	7863      	ldrb	r3, [r4, #1]
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d134      	bne.n	8007b70 <_vfiprintf_r+0x1b0>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9203      	str	r2, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b16:	3402      	adds	r4, #2
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bf0 <_vfiprintf_r+0x230>
 8007b1e:	7821      	ldrb	r1, [r4, #0]
 8007b20:	2203      	movs	r2, #3
 8007b22:	4650      	mov	r0, sl
 8007b24:	f7f8 fb64 	bl	80001f0 <memchr>
 8007b28:	b138      	cbz	r0, 8007b3a <_vfiprintf_r+0x17a>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	eba0 000a 	sub.w	r0, r0, sl
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	4082      	lsls	r2, r0
 8007b34:	4313      	orrs	r3, r2
 8007b36:	3401      	adds	r4, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3e:	4829      	ldr	r0, [pc, #164]	; (8007be4 <_vfiprintf_r+0x224>)
 8007b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b44:	2206      	movs	r2, #6
 8007b46:	f7f8 fb53 	bl	80001f0 <memchr>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d03f      	beq.n	8007bce <_vfiprintf_r+0x20e>
 8007b4e:	4b26      	ldr	r3, [pc, #152]	; (8007be8 <_vfiprintf_r+0x228>)
 8007b50:	bb1b      	cbnz	r3, 8007b9a <_vfiprintf_r+0x1da>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	3307      	adds	r3, #7
 8007b56:	f023 0307 	bic.w	r3, r3, #7
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	443b      	add	r3, r7
 8007b62:	9309      	str	r3, [sp, #36]	; 0x24
 8007b64:	e768      	b.n	8007a38 <_vfiprintf_r+0x78>
 8007b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e7a6      	b.n	8007abe <_vfiprintf_r+0xfe>
 8007b70:	2300      	movs	r3, #0
 8007b72:	3401      	adds	r4, #1
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	4619      	mov	r1, r3
 8007b78:	f04f 0c0a 	mov.w	ip, #10
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b82:	3a30      	subs	r2, #48	; 0x30
 8007b84:	2a09      	cmp	r2, #9
 8007b86:	d903      	bls.n	8007b90 <_vfiprintf_r+0x1d0>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0c6      	beq.n	8007b1a <_vfiprintf_r+0x15a>
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	e7c4      	b.n	8007b1a <_vfiprintf_r+0x15a>
 8007b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b94:	4604      	mov	r4, r0
 8007b96:	2301      	movs	r3, #1
 8007b98:	e7f0      	b.n	8007b7c <_vfiprintf_r+0x1bc>
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4b12      	ldr	r3, [pc, #72]	; (8007bec <_vfiprintf_r+0x22c>)
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f3af 8000 	nop.w
 8007baa:	4607      	mov	r7, r0
 8007bac:	1c78      	adds	r0, r7, #1
 8007bae:	d1d6      	bne.n	8007b5e <_vfiprintf_r+0x19e>
 8007bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb2:	07d9      	lsls	r1, r3, #31
 8007bb4:	d405      	bmi.n	8007bc2 <_vfiprintf_r+0x202>
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	059a      	lsls	r2, r3, #22
 8007bba:	d402      	bmi.n	8007bc2 <_vfiprintf_r+0x202>
 8007bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bbe:	f7ff fc83 	bl	80074c8 <__retarget_lock_release_recursive>
 8007bc2:	89ab      	ldrh	r3, [r5, #12]
 8007bc4:	065b      	lsls	r3, r3, #25
 8007bc6:	f53f af1d 	bmi.w	8007a04 <_vfiprintf_r+0x44>
 8007bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bcc:	e71c      	b.n	8007a08 <_vfiprintf_r+0x48>
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <_vfiprintf_r+0x22c>)
 8007bd6:	a904      	add	r1, sp, #16
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 f879 	bl	8007cd0 <_printf_i>
 8007bde:	e7e4      	b.n	8007baa <_vfiprintf_r+0x1ea>
 8007be0:	080083a4 	.word	0x080083a4
 8007be4:	080083ae 	.word	0x080083ae
 8007be8:	00000000 	.word	0x00000000
 8007bec:	0800799b 	.word	0x0800799b
 8007bf0:	080083aa 	.word	0x080083aa

08007bf4 <_printf_common>:
 8007bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	4699      	mov	r9, r3
 8007bfc:	688a      	ldr	r2, [r1, #8]
 8007bfe:	690b      	ldr	r3, [r1, #16]
 8007c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bfb8      	it	lt
 8007c08:	4613      	movlt	r3, r2
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c10:	4607      	mov	r7, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	b10a      	cbz	r2, 8007c1a <_printf_common+0x26>
 8007c16:	3301      	adds	r3, #1
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	0699      	lsls	r1, r3, #26
 8007c1e:	bf42      	ittt	mi
 8007c20:	6833      	ldrmi	r3, [r6, #0]
 8007c22:	3302      	addmi	r3, #2
 8007c24:	6033      	strmi	r3, [r6, #0]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	f015 0506 	ands.w	r5, r5, #6
 8007c2c:	d106      	bne.n	8007c3c <_printf_common+0x48>
 8007c2e:	f104 0a19 	add.w	sl, r4, #25
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	6832      	ldr	r2, [r6, #0]
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	dc26      	bgt.n	8007c8a <_printf_common+0x96>
 8007c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c40:	1e13      	subs	r3, r2, #0
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	bf18      	it	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	0692      	lsls	r2, r2, #26
 8007c4a:	d42b      	bmi.n	8007ca4 <_printf_common+0xb0>
 8007c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d01e      	beq.n	8007c98 <_printf_common+0xa4>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6922      	ldr	r2, [r4, #16]
 8007c5e:	f003 0306 	and.w	r3, r3, #6
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	bf02      	ittt	eq
 8007c66:	68e5      	ldreq	r5, [r4, #12]
 8007c68:	6833      	ldreq	r3, [r6, #0]
 8007c6a:	1aed      	subeq	r5, r5, r3
 8007c6c:	68a3      	ldr	r3, [r4, #8]
 8007c6e:	bf0c      	ite	eq
 8007c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c74:	2500      	movne	r5, #0
 8007c76:	4293      	cmp	r3, r2
 8007c78:	bfc4      	itt	gt
 8007c7a:	1a9b      	subgt	r3, r3, r2
 8007c7c:	18ed      	addgt	r5, r5, r3
 8007c7e:	2600      	movs	r6, #0
 8007c80:	341a      	adds	r4, #26
 8007c82:	42b5      	cmp	r5, r6
 8007c84:	d11a      	bne.n	8007cbc <_printf_common+0xc8>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e008      	b.n	8007c9c <_printf_common+0xa8>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4638      	mov	r0, r7
 8007c92:	47c0      	blx	r8
 8007c94:	3001      	adds	r0, #1
 8007c96:	d103      	bne.n	8007ca0 <_printf_common+0xac>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	e7c6      	b.n	8007c32 <_printf_common+0x3e>
 8007ca4:	18e1      	adds	r1, r4, r3
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	2030      	movs	r0, #48	; 0x30
 8007caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cae:	4422      	add	r2, r4
 8007cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cb8:	3302      	adds	r3, #2
 8007cba:	e7c7      	b.n	8007c4c <_printf_common+0x58>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c0      	blx	r8
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d0e6      	beq.n	8007c98 <_printf_common+0xa4>
 8007cca:	3601      	adds	r6, #1
 8007ccc:	e7d9      	b.n	8007c82 <_printf_common+0x8e>
	...

08007cd0 <_printf_i>:
 8007cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	7e0f      	ldrb	r7, [r1, #24]
 8007cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cd8:	2f78      	cmp	r7, #120	; 0x78
 8007cda:	4691      	mov	r9, r2
 8007cdc:	4680      	mov	r8, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	469a      	mov	sl, r3
 8007ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ce6:	d807      	bhi.n	8007cf8 <_printf_i+0x28>
 8007ce8:	2f62      	cmp	r7, #98	; 0x62
 8007cea:	d80a      	bhi.n	8007d02 <_printf_i+0x32>
 8007cec:	2f00      	cmp	r7, #0
 8007cee:	f000 80d4 	beq.w	8007e9a <_printf_i+0x1ca>
 8007cf2:	2f58      	cmp	r7, #88	; 0x58
 8007cf4:	f000 80c0 	beq.w	8007e78 <_printf_i+0x1a8>
 8007cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d00:	e03a      	b.n	8007d78 <_printf_i+0xa8>
 8007d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d06:	2b15      	cmp	r3, #21
 8007d08:	d8f6      	bhi.n	8007cf8 <_printf_i+0x28>
 8007d0a:	a101      	add	r1, pc, #4	; (adr r1, 8007d10 <_printf_i+0x40>)
 8007d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007cf9 	.word	0x08007cf9
 8007d1c:	08007cf9 	.word	0x08007cf9
 8007d20:	08007cf9 	.word	0x08007cf9
 8007d24:	08007cf9 	.word	0x08007cf9
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007cf9 	.word	0x08007cf9
 8007d30:	08007cf9 	.word	0x08007cf9
 8007d34:	08007cf9 	.word	0x08007cf9
 8007d38:	08007cf9 	.word	0x08007cf9
 8007d3c:	08007e81 	.word	0x08007e81
 8007d40:	08007da9 	.word	0x08007da9
 8007d44:	08007e3b 	.word	0x08007e3b
 8007d48:	08007cf9 	.word	0x08007cf9
 8007d4c:	08007cf9 	.word	0x08007cf9
 8007d50:	08007ea3 	.word	0x08007ea3
 8007d54:	08007cf9 	.word	0x08007cf9
 8007d58:	08007da9 	.word	0x08007da9
 8007d5c:	08007cf9 	.word	0x08007cf9
 8007d60:	08007cf9 	.word	0x08007cf9
 8007d64:	08007e43 	.word	0x08007e43
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	1d1a      	adds	r2, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e09f      	b.n	8007ebc <_printf_i+0x1ec>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	0607      	lsls	r7, r0, #24
 8007d82:	f103 0104 	add.w	r1, r3, #4
 8007d86:	6029      	str	r1, [r5, #0]
 8007d88:	d501      	bpl.n	8007d8e <_printf_i+0xbe>
 8007d8a:	681e      	ldr	r6, [r3, #0]
 8007d8c:	e003      	b.n	8007d96 <_printf_i+0xc6>
 8007d8e:	0646      	lsls	r6, r0, #25
 8007d90:	d5fb      	bpl.n	8007d8a <_printf_i+0xba>
 8007d92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	da03      	bge.n	8007da2 <_printf_i+0xd2>
 8007d9a:	232d      	movs	r3, #45	; 0x2d
 8007d9c:	4276      	negs	r6, r6
 8007d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da2:	485a      	ldr	r0, [pc, #360]	; (8007f0c <_printf_i+0x23c>)
 8007da4:	230a      	movs	r3, #10
 8007da6:	e012      	b.n	8007dce <_printf_i+0xfe>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	1d19      	adds	r1, r3, #4
 8007dae:	6029      	str	r1, [r5, #0]
 8007db0:	0605      	lsls	r5, r0, #24
 8007db2:	d501      	bpl.n	8007db8 <_printf_i+0xe8>
 8007db4:	681e      	ldr	r6, [r3, #0]
 8007db6:	e002      	b.n	8007dbe <_printf_i+0xee>
 8007db8:	0641      	lsls	r1, r0, #25
 8007dba:	d5fb      	bpl.n	8007db4 <_printf_i+0xe4>
 8007dbc:	881e      	ldrh	r6, [r3, #0]
 8007dbe:	4853      	ldr	r0, [pc, #332]	; (8007f0c <_printf_i+0x23c>)
 8007dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2308      	moveq	r3, #8
 8007dc6:	230a      	movne	r3, #10
 8007dc8:	2100      	movs	r1, #0
 8007dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dce:	6865      	ldr	r5, [r4, #4]
 8007dd0:	60a5      	str	r5, [r4, #8]
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	bfa2      	ittt	ge
 8007dd6:	6821      	ldrge	r1, [r4, #0]
 8007dd8:	f021 0104 	bicge.w	r1, r1, #4
 8007ddc:	6021      	strge	r1, [r4, #0]
 8007dde:	b90e      	cbnz	r6, 8007de4 <_printf_i+0x114>
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	d04b      	beq.n	8007e7c <_printf_i+0x1ac>
 8007de4:	4615      	mov	r5, r2
 8007de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dea:	fb03 6711 	mls	r7, r3, r1, r6
 8007dee:	5dc7      	ldrb	r7, [r0, r7]
 8007df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007df4:	4637      	mov	r7, r6
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	460e      	mov	r6, r1
 8007dfa:	d9f4      	bls.n	8007de6 <_printf_i+0x116>
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d10b      	bne.n	8007e18 <_printf_i+0x148>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	07de      	lsls	r6, r3, #31
 8007e04:	d508      	bpl.n	8007e18 <_printf_i+0x148>
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	6861      	ldr	r1, [r4, #4]
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	bfde      	ittt	le
 8007e0e:	2330      	movle	r3, #48	; 0x30
 8007e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e18:	1b52      	subs	r2, r2, r5
 8007e1a:	6122      	str	r2, [r4, #16]
 8007e1c:	f8cd a000 	str.w	sl, [sp]
 8007e20:	464b      	mov	r3, r9
 8007e22:	aa03      	add	r2, sp, #12
 8007e24:	4621      	mov	r1, r4
 8007e26:	4640      	mov	r0, r8
 8007e28:	f7ff fee4 	bl	8007bf4 <_printf_common>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d14a      	bne.n	8007ec6 <_printf_i+0x1f6>
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	b004      	add	sp, #16
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	4833      	ldr	r0, [pc, #204]	; (8007f10 <_printf_i+0x240>)
 8007e44:	2778      	movs	r7, #120	; 0x78
 8007e46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	061f      	lsls	r7, r3, #24
 8007e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e54:	d402      	bmi.n	8007e5c <_printf_i+0x18c>
 8007e56:	065f      	lsls	r7, r3, #25
 8007e58:	bf48      	it	mi
 8007e5a:	b2b6      	uxthmi	r6, r6
 8007e5c:	07df      	lsls	r7, r3, #31
 8007e5e:	bf48      	it	mi
 8007e60:	f043 0320 	orrmi.w	r3, r3, #32
 8007e64:	6029      	str	r1, [r5, #0]
 8007e66:	bf48      	it	mi
 8007e68:	6023      	strmi	r3, [r4, #0]
 8007e6a:	b91e      	cbnz	r6, 8007e74 <_printf_i+0x1a4>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	f023 0320 	bic.w	r3, r3, #32
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	2310      	movs	r3, #16
 8007e76:	e7a7      	b.n	8007dc8 <_printf_i+0xf8>
 8007e78:	4824      	ldr	r0, [pc, #144]	; (8007f0c <_printf_i+0x23c>)
 8007e7a:	e7e4      	b.n	8007e46 <_printf_i+0x176>
 8007e7c:	4615      	mov	r5, r2
 8007e7e:	e7bd      	b.n	8007dfc <_printf_i+0x12c>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	6826      	ldr	r6, [r4, #0]
 8007e84:	6961      	ldr	r1, [r4, #20]
 8007e86:	1d18      	adds	r0, r3, #4
 8007e88:	6028      	str	r0, [r5, #0]
 8007e8a:	0635      	lsls	r5, r6, #24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	d501      	bpl.n	8007e94 <_printf_i+0x1c4>
 8007e90:	6019      	str	r1, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <_printf_i+0x1ca>
 8007e94:	0670      	lsls	r0, r6, #25
 8007e96:	d5fb      	bpl.n	8007e90 <_printf_i+0x1c0>
 8007e98:	8019      	strh	r1, [r3, #0]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	4615      	mov	r5, r2
 8007ea0:	e7bc      	b.n	8007e1c <_printf_i+0x14c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	1d1a      	adds	r2, r3, #4
 8007ea6:	602a      	str	r2, [r5, #0]
 8007ea8:	681d      	ldr	r5, [r3, #0]
 8007eaa:	6862      	ldr	r2, [r4, #4]
 8007eac:	2100      	movs	r1, #0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7f8 f99e 	bl	80001f0 <memchr>
 8007eb4:	b108      	cbz	r0, 8007eba <_printf_i+0x1ea>
 8007eb6:	1b40      	subs	r0, r0, r5
 8007eb8:	6060      	str	r0, [r4, #4]
 8007eba:	6863      	ldr	r3, [r4, #4]
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec4:	e7aa      	b.n	8007e1c <_printf_i+0x14c>
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4640      	mov	r0, r8
 8007ece:	47d0      	blx	sl
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d0ad      	beq.n	8007e30 <_printf_i+0x160>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	079b      	lsls	r3, r3, #30
 8007ed8:	d413      	bmi.n	8007f02 <_printf_i+0x232>
 8007eda:	68e0      	ldr	r0, [r4, #12]
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	4298      	cmp	r0, r3
 8007ee0:	bfb8      	it	lt
 8007ee2:	4618      	movlt	r0, r3
 8007ee4:	e7a6      	b.n	8007e34 <_printf_i+0x164>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4632      	mov	r2, r6
 8007eea:	4649      	mov	r1, r9
 8007eec:	4640      	mov	r0, r8
 8007eee:	47d0      	blx	sl
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d09d      	beq.n	8007e30 <_printf_i+0x160>
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	9903      	ldr	r1, [sp, #12]
 8007efa:	1a5b      	subs	r3, r3, r1
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	dcf2      	bgt.n	8007ee6 <_printf_i+0x216>
 8007f00:	e7eb      	b.n	8007eda <_printf_i+0x20a>
 8007f02:	2500      	movs	r5, #0
 8007f04:	f104 0619 	add.w	r6, r4, #25
 8007f08:	e7f5      	b.n	8007ef6 <_printf_i+0x226>
 8007f0a:	bf00      	nop
 8007f0c:	080083b5 	.word	0x080083b5
 8007f10:	080083c6 	.word	0x080083c6

08007f14 <__sflush_r>:
 8007f14:	898a      	ldrh	r2, [r1, #12]
 8007f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	0710      	lsls	r0, r2, #28
 8007f1e:	460c      	mov	r4, r1
 8007f20:	d458      	bmi.n	8007fd4 <__sflush_r+0xc0>
 8007f22:	684b      	ldr	r3, [r1, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc05      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc02      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d0f9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f40:	682f      	ldr	r7, [r5, #0]
 8007f42:	6a21      	ldr	r1, [r4, #32]
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	d032      	beq.n	8007fae <__sflush_r+0x9a>
 8007f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	075a      	lsls	r2, r3, #29
 8007f4e:	d505      	bpl.n	8007f5c <__sflush_r+0x48>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	1ac0      	subs	r0, r0, r3
 8007f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f56:	b10b      	cbz	r3, 8007f5c <__sflush_r+0x48>
 8007f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5a:	1ac0      	subs	r0, r0, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f62:	6a21      	ldr	r1, [r4, #32]
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b0      	blx	r6
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	d106      	bne.n	8007f7c <__sflush_r+0x68>
 8007f6e:	6829      	ldr	r1, [r5, #0]
 8007f70:	291d      	cmp	r1, #29
 8007f72:	d82b      	bhi.n	8007fcc <__sflush_r+0xb8>
 8007f74:	4a29      	ldr	r2, [pc, #164]	; (800801c <__sflush_r+0x108>)
 8007f76:	410a      	asrs	r2, r1
 8007f78:	07d6      	lsls	r6, r2, #31
 8007f7a:	d427      	bmi.n	8007fcc <__sflush_r+0xb8>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	6062      	str	r2, [r4, #4]
 8007f80:	04d9      	lsls	r1, r3, #19
 8007f82:	6922      	ldr	r2, [r4, #16]
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	d504      	bpl.n	8007f92 <__sflush_r+0x7e>
 8007f88:	1c42      	adds	r2, r0, #1
 8007f8a:	d101      	bne.n	8007f90 <__sflush_r+0x7c>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b903      	cbnz	r3, 8007f92 <__sflush_r+0x7e>
 8007f90:	6560      	str	r0, [r4, #84]	; 0x54
 8007f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f94:	602f      	str	r7, [r5, #0]
 8007f96:	2900      	cmp	r1, #0
 8007f98:	d0c9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9e:	4299      	cmp	r1, r3
 8007fa0:	d002      	beq.n	8007fa8 <__sflush_r+0x94>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7ff fa92 	bl	80074cc <_free_r>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	6360      	str	r0, [r4, #52]	; 0x34
 8007fac:	e7c0      	b.n	8007f30 <__sflush_r+0x1c>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b0      	blx	r6
 8007fb4:	1c41      	adds	r1, r0, #1
 8007fb6:	d1c8      	bne.n	8007f4a <__sflush_r+0x36>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c5      	beq.n	8007f4a <__sflush_r+0x36>
 8007fbe:	2b1d      	cmp	r3, #29
 8007fc0:	d001      	beq.n	8007fc6 <__sflush_r+0xb2>
 8007fc2:	2b16      	cmp	r3, #22
 8007fc4:	d101      	bne.n	8007fca <__sflush_r+0xb6>
 8007fc6:	602f      	str	r7, [r5, #0]
 8007fc8:	e7b1      	b.n	8007f2e <__sflush_r+0x1a>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e7ad      	b.n	8007f30 <__sflush_r+0x1c>
 8007fd4:	690f      	ldr	r7, [r1, #16]
 8007fd6:	2f00      	cmp	r7, #0
 8007fd8:	d0a9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007fda:	0793      	lsls	r3, r2, #30
 8007fdc:	680e      	ldr	r6, [r1, #0]
 8007fde:	bf08      	it	eq
 8007fe0:	694b      	ldreq	r3, [r1, #20]
 8007fe2:	600f      	str	r7, [r1, #0]
 8007fe4:	bf18      	it	ne
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	eba6 0807 	sub.w	r8, r6, r7
 8007fec:	608b      	str	r3, [r1, #8]
 8007fee:	f1b8 0f00 	cmp.w	r8, #0
 8007ff2:	dd9c      	ble.n	8007f2e <__sflush_r+0x1a>
 8007ff4:	6a21      	ldr	r1, [r4, #32]
 8007ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b0      	blx	r6
 8008000:	2800      	cmp	r0, #0
 8008002:	dc06      	bgt.n	8008012 <__sflush_r+0xfe>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e78e      	b.n	8007f30 <__sflush_r+0x1c>
 8008012:	4407      	add	r7, r0
 8008014:	eba8 0800 	sub.w	r8, r8, r0
 8008018:	e7e9      	b.n	8007fee <__sflush_r+0xda>
 800801a:	bf00      	nop
 800801c:	dfbffffe 	.word	0xdfbffffe

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b913      	cbnz	r3, 8008030 <_fflush_r+0x10>
 800802a:	2500      	movs	r5, #0
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	b118      	cbz	r0, 800803a <_fflush_r+0x1a>
 8008032:	6a03      	ldr	r3, [r0, #32]
 8008034:	b90b      	cbnz	r3, 800803a <_fflush_r+0x1a>
 8008036:	f7ff f81f 	bl	8007078 <__sinit>
 800803a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f3      	beq.n	800802a <_fflush_r+0xa>
 8008042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008044:	07d0      	lsls	r0, r2, #31
 8008046:	d404      	bmi.n	8008052 <_fflush_r+0x32>
 8008048:	0599      	lsls	r1, r3, #22
 800804a:	d402      	bmi.n	8008052 <_fflush_r+0x32>
 800804c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800804e:	f7ff fa3a 	bl	80074c6 <__retarget_lock_acquire_recursive>
 8008052:	4628      	mov	r0, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f7ff ff5d 	bl	8007f14 <__sflush_r>
 800805a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800805c:	07da      	lsls	r2, r3, #31
 800805e:	4605      	mov	r5, r0
 8008060:	d4e4      	bmi.n	800802c <_fflush_r+0xc>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	059b      	lsls	r3, r3, #22
 8008066:	d4e1      	bmi.n	800802c <_fflush_r+0xc>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f7ff fa2d 	bl	80074c8 <__retarget_lock_release_recursive>
 800806e:	e7dd      	b.n	800802c <_fflush_r+0xc>

08008070 <__swhatbuf_r>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	460c      	mov	r4, r1
 8008074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008078:	2900      	cmp	r1, #0
 800807a:	b096      	sub	sp, #88	; 0x58
 800807c:	4615      	mov	r5, r2
 800807e:	461e      	mov	r6, r3
 8008080:	da0d      	bge.n	800809e <__swhatbuf_r+0x2e>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008088:	f04f 0100 	mov.w	r1, #0
 800808c:	bf0c      	ite	eq
 800808e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008092:	2340      	movne	r3, #64	; 0x40
 8008094:	2000      	movs	r0, #0
 8008096:	6031      	str	r1, [r6, #0]
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	b016      	add	sp, #88	; 0x58
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	466a      	mov	r2, sp
 80080a0:	f000 f862 	bl	8008168 <_fstat_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	dbec      	blt.n	8008082 <__swhatbuf_r+0x12>
 80080a8:	9901      	ldr	r1, [sp, #4]
 80080aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080b2:	4259      	negs	r1, r3
 80080b4:	4159      	adcs	r1, r3
 80080b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ba:	e7eb      	b.n	8008094 <__swhatbuf_r+0x24>

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b002      	add	sp, #8
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffc8 	bl	8008070 <__swhatbuf_r>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff fa5d 	bl	80075a4 <_malloc_r>
 80080ea:	b948      	cbnz	r0, 8008100 <__smakebuf_r+0x44>
 80080ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d4ef      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e7e3      	b.n	80080c8 <__smakebuf_r+0xc>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	6020      	str	r0, [r4, #0]
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	9b00      	ldr	r3, [sp, #0]
 800810c:	6163      	str	r3, [r4, #20]
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	6120      	str	r0, [r4, #16]
 8008112:	b15b      	cbz	r3, 800812c <__smakebuf_r+0x70>
 8008114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f837 	bl	800818c <_isatty_r>
 800811e:	b128      	cbz	r0, 800812c <__smakebuf_r+0x70>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	431d      	orrs	r5, r3
 8008130:	81a5      	strh	r5, [r4, #12]
 8008132:	e7cf      	b.n	80080d4 <__smakebuf_r+0x18>

08008134 <memmove>:
 8008134:	4288      	cmp	r0, r1
 8008136:	b510      	push	{r4, lr}
 8008138:	eb01 0402 	add.w	r4, r1, r2
 800813c:	d902      	bls.n	8008144 <memmove+0x10>
 800813e:	4284      	cmp	r4, r0
 8008140:	4623      	mov	r3, r4
 8008142:	d807      	bhi.n	8008154 <memmove+0x20>
 8008144:	1e43      	subs	r3, r0, #1
 8008146:	42a1      	cmp	r1, r4
 8008148:	d008      	beq.n	800815c <memmove+0x28>
 800814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008152:	e7f8      	b.n	8008146 <memmove+0x12>
 8008154:	4402      	add	r2, r0
 8008156:	4601      	mov	r1, r0
 8008158:	428a      	cmp	r2, r1
 800815a:	d100      	bne.n	800815e <memmove+0x2a>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008166:	e7f7      	b.n	8008158 <memmove+0x24>

08008168 <_fstat_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_fstat_r+0x20>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	f7fa f802 	bl	800217e <_fstat>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d102      	bne.n	8008184 <_fstat_r+0x1c>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b103      	cbz	r3, 8008184 <_fstat_r+0x1c>
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	20000b4c 	.word	0x20000b4c

0800818c <_isatty_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_isatty_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7fa f801 	bl	800219e <_isatty>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_isatty_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_isatty_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20000b4c 	.word	0x20000b4c

080081ac <_sbrk_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d06      	ldr	r5, [pc, #24]	; (80081c8 <_sbrk_r+0x1c>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	602b      	str	r3, [r5, #0]
 80081b8:	f7fa f80a 	bl	80021d0 <_sbrk>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_sbrk_r+0x1a>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_sbrk_r+0x1a>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000b4c 	.word	0x20000b4c

080081cc <memcpy>:
 80081cc:	440a      	add	r2, r1
 80081ce:	4291      	cmp	r1, r2
 80081d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d4:	d100      	bne.n	80081d8 <memcpy+0xc>
 80081d6:	4770      	bx	lr
 80081d8:	b510      	push	{r4, lr}
 80081da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e2:	4291      	cmp	r1, r2
 80081e4:	d1f9      	bne.n	80081da <memcpy+0xe>
 80081e6:	bd10      	pop	{r4, pc}

080081e8 <_realloc_r>:
 80081e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ec:	4680      	mov	r8, r0
 80081ee:	4614      	mov	r4, r2
 80081f0:	460e      	mov	r6, r1
 80081f2:	b921      	cbnz	r1, 80081fe <_realloc_r+0x16>
 80081f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f8:	4611      	mov	r1, r2
 80081fa:	f7ff b9d3 	b.w	80075a4 <_malloc_r>
 80081fe:	b92a      	cbnz	r2, 800820c <_realloc_r+0x24>
 8008200:	f7ff f964 	bl	80074cc <_free_r>
 8008204:	4625      	mov	r5, r4
 8008206:	4628      	mov	r0, r5
 8008208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820c:	f000 f81b 	bl	8008246 <_malloc_usable_size_r>
 8008210:	4284      	cmp	r4, r0
 8008212:	4607      	mov	r7, r0
 8008214:	d802      	bhi.n	800821c <_realloc_r+0x34>
 8008216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800821a:	d812      	bhi.n	8008242 <_realloc_r+0x5a>
 800821c:	4621      	mov	r1, r4
 800821e:	4640      	mov	r0, r8
 8008220:	f7ff f9c0 	bl	80075a4 <_malloc_r>
 8008224:	4605      	mov	r5, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d0ed      	beq.n	8008206 <_realloc_r+0x1e>
 800822a:	42bc      	cmp	r4, r7
 800822c:	4622      	mov	r2, r4
 800822e:	4631      	mov	r1, r6
 8008230:	bf28      	it	cs
 8008232:	463a      	movcs	r2, r7
 8008234:	f7ff ffca 	bl	80081cc <memcpy>
 8008238:	4631      	mov	r1, r6
 800823a:	4640      	mov	r0, r8
 800823c:	f7ff f946 	bl	80074cc <_free_r>
 8008240:	e7e1      	b.n	8008206 <_realloc_r+0x1e>
 8008242:	4635      	mov	r5, r6
 8008244:	e7df      	b.n	8008206 <_realloc_r+0x1e>

08008246 <_malloc_usable_size_r>:
 8008246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824a:	1f18      	subs	r0, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	bfbc      	itt	lt
 8008250:	580b      	ldrlt	r3, [r1, r0]
 8008252:	18c0      	addlt	r0, r0, r3
 8008254:	4770      	bx	lr
	...

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
