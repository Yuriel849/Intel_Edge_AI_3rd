
12.TCP_IP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c74  08012354  08012354  00022354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fc8  08014fc8  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08014fc8  08014fc8  00024fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fd0  08014fd0  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014fd0  08014fd0  00024fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014fd4  08014fd4  00024fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08014fd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          00008e10  2000019c  2000019c  0003019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008fac  20008fac  0003019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028e3e  00000000  00000000  0003020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000068fe  00000000  00000000  0005904d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002118  00000000  00000000  0005f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a85  00000000  00000000  00061a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ef07  00000000  00000000  000634ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00035a8a  00000000  00000000  000723f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcbac  00000000  00000000  000a7e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000093ec  00000000  00000000  001a4a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001ade18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801233c 	.word	0x0801233c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a0 	.word	0x200001a0
 80001ec:	0801233c 	.word	0x0801233c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e00f      	b.n	80005b8 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <init_dotmatrix+0xb4>)
 80005a4:	4413      	add	r3, r2
 80005a6:	b2d9      	uxtb	r1, r3
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <init_dotmatrix+0xb8>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	ddec      	ble.n	8000598 <init_dotmatrix+0xc>
	}
	for (int i=1; i < number_of_character+1; i++)
 80005be:	2301      	movs	r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	e01e      	b.n	8000602 <init_dotmatrix+0x76>
	{
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	e015      	b.n	80005f6 <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	491c      	ldr	r1, [pc, #112]	; (8000640 <init_dotmatrix+0xb4>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	18ca      	adds	r2, r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	7819      	ldrb	r1, [r3, #0]
 80005e0:	4a19      	ldr	r2, [pc, #100]	; (8000648 <init_dotmatrix+0xbc>)
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	441a      	add	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	460a      	mov	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	dde6      	ble.n	80005ca <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	3301      	adds	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <init_dotmatrix+0xc0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	429a      	cmp	r2, r3
 800060a:	dddb      	ble.n	80005c4 <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i < 8; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	e00e      	b.n	8000630 <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // led all off
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <init_dotmatrix+0xc4>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <init_dotmatrix+0xc8>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fc1d 	bl	8002e64 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b07      	cmp	r3, #7
 8000634:	dded      	ble.n	8000612 <init_dotmatrix+0x86>
	}
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000060 	.word	0x20000060
 8000644:	200001b8 	.word	0x200001b8
 8000648:	200001c0 	.word	0x200001c0
 800064c:	20000128 	.word	0x20000128
 8000650:	20000000 	.word	0x20000000
 8000654:	20000050 	.word	0x20000050

08000658 <write_column_data>:
void write_column_data(int col)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 8; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e01f      	b.n	80006a6 <write_column_data+0x4e>
		if (i == col)
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
#else
//---------- common 캐소우드 방식
		if (i == col)
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	d10c      	bne.n	8000688 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // on
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <write_column_data+0x60>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <write_column_data+0x64>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	f002 fbef 	bl	8002e64 <HAL_GPIO_WritePin>
 8000686:	e00b      	b.n	80006a0 <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // off
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <write_column_data+0x60>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <write_column_data+0x64>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f002 fbe2 	bl	8002e64 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	dddc      	ble.n	8000666 <write_column_data+0xe>
#endif
	}
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000050 	.word	0x20000050

080006c0 <write_row_data>:
// 0b00111110
void write_row_data(unsigned char data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d = data;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	72fb      	strb	r3, [r7, #11]

	for(int i=0; i < 8; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	e023      	b.n	800071c <write_row_data+0x5c>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
#else
//-common 캐소우드
		if ( d & (1 << i))   // 1인경우
 80006d4:	7afa      	ldrb	r2, [r7, #11]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	fa42 f303 	asr.w	r3, r2, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00c      	beq.n	80006fe <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 80006e4:	4a11      	ldr	r2, [pc, #68]	; (800072c <write_row_data+0x6c>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <write_row_data+0x70>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	2200      	movs	r2, #0
 80006f6:	4619      	mov	r1, r3
 80006f8:	f002 fbb4 	bl	8002e64 <HAL_GPIO_WritePin>
 80006fc:	e00b      	b.n	8000716 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <write_row_data+0x6c>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <write_row_data+0x70>)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	f002 fba7 	bl	8002e64 <HAL_GPIO_WritePin>
	for(int i=0; i < 8; i++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b07      	cmp	r3, #7
 8000720:	ddd8      	ble.n	80006d4 <write_row_data+0x14>
#endif
	}
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000020 	.word	0x20000020
 8000730:	20000040 	.word	0x20000040

08000734 <dotmatrix_main>:
#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
	static int count=0;  // 컬럼 count
	static int index=0;  // scroll_buffer의 2차원 index값
	static uint32_t past_time=0;  // 이전 tick값 저장

	init_dotmatrix();
 800073a:	f7ff ff27 	bl	800058c <init_dotmatrix>

	while(1)
	{
		uint32_t now = HAL_GetTick();  // 1ms
 800073e:	f001 fb15 	bl	8001d6c <HAL_GetTick>
 8000742:	6078      	str	r0, [r7, #4]
		// 1.처음시작시 past_time=0; now: 500 --> past_time=500
		if (now - past_time >= 500) // 500ms scroll
 8000744:	4b35      	ldr	r3, [pc, #212]	; (800081c <dotmatrix_main+0xe8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000750:	d34d      	bcc.n	80007ee <dotmatrix_main+0xba>
		{
			past_time = now;
 8000752:	4a32      	ldr	r2, [pc, #200]	; (800081c <dotmatrix_main+0xe8>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6013      	str	r3, [r2, #0]
			for (int i=0; i < 8; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e029      	b.n	80007b2 <dotmatrix_main+0x7e>
			{

				display_data[i] = (scroll_buffer[index][i] >> count) |
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <dotmatrix_main+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a30      	ldr	r2, [pc, #192]	; (8000824 <dotmatrix_main+0xf0>)
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	441a      	add	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <dotmatrix_main+0xf4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	fa42 f303 	asr.w	r3, r2, r3
 8000778:	b25a      	sxtb	r2, r3
						(scroll_buffer[index+1][i] << 8 - count);
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <dotmatrix_main+0xec>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4928      	ldr	r1, [pc, #160]	; (8000824 <dotmatrix_main+0xf0>)
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	4419      	add	r1, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	440b      	add	r3, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <dotmatrix_main+0xf4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f1c3 0308 	rsb	r3, r3, #8
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
				display_data[i] = (scroll_buffer[index][i] >> count) |
 800079a:	b25b      	sxtb	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	b2d9      	uxtb	r1, r3
 80007a2:	4a22      	ldr	r2, [pc, #136]	; (800082c <dotmatrix_main+0xf8>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	460a      	mov	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
			for (int i=0; i < 8; i++)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	ddd2      	ble.n	800075e <dotmatrix_main+0x2a>
			}
			if (++count == 8) // 8칼람을 다 처리 했으면 다음 scroll_buffer로 이동
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <dotmatrix_main+0xf4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <dotmatrix_main+0xf4>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <dotmatrix_main+0xf4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d111      	bne.n	80007ee <dotmatrix_main+0xba>
			{
				count =0;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <dotmatrix_main+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
				index++;  // 다음 scroll_buffer로 이동
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <dotmatrix_main+0xec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <dotmatrix_main+0xec>)
 80007d8:	6013      	str	r3, [r2, #0]
				if (index == number_of_character+1) index=0;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <dotmatrix_main+0xfc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <dotmatrix_main+0xec>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d102      	bne.n	80007ee <dotmatrix_main+0xba>
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <dotmatrix_main+0xec>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
				// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
			}
		}
		for (int i=0; i < 8; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	e00f      	b.n	8000814 <dotmatrix_main+0xe0>
		{
			// 공통 양극 방식
			// column에는 0을 ROW에는 1을 출력해야 해당 LED가 on된다.
			write_column_data(i);
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f7ff ff2f 	bl	8000658 <write_column_data>
			write_row_data(display_data[i]);
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <dotmatrix_main+0xf8>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff5c 	bl	80006c0 <write_row_data>
			HAL_Delay(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f001 fabb 	bl	8001d84 <HAL_Delay>
		for (int i=0; i < 8; i++)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3301      	adds	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b07      	cmp	r3, #7
 8000818:	ddec      	ble.n	80007f4 <dotmatrix_main+0xc0>
	{
 800081a:	e790      	b.n	800073e <dotmatrix_main+0xa>
 800081c:	20000350 	.word	0x20000350
 8000820:	20000354 	.word	0x20000354
 8000824:	200001c0 	.word	0x200001c0
 8000828:	20000358 	.word	0x20000358
 800082c:	200001b8 	.word	0x200001b8
 8000830:	20000128 	.word	0x20000128

08000834 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_SYSTICK_Handler+0x18>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_SYSTICK_Handler+0x18>)
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000b20 	.word	0x20000b20

08000850 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <__io_putchar+0x20>)
 8000862:	f005 fbb2 	bl	8005fca <HAL_UART_Transmit>

  return ch;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000580 	.word	0x20000580

08000874 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d109      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 800088e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000898:	6013      	str	r3, [r2, #0]
	}
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40014400 	.word	0x40014400
 80008ac:	20000b18 	.word	0x20000b18
 80008b0:	20000b1c 	.word	0x20000b1c

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f001 f9f2 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f856 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 fb96 	bl	8000ff0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 fb12 	bl	8000eec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008c8:	f000 fb64 	bl	8000f94 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80008cc:	f000 fb38 	bl	8000f40 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80008d0:	f000 fac4 	bl	8000e5c <MX_TIM10_Init>
  MX_TIM11_Init();
 80008d4:	f000 fae6 	bl	8000ea4 <MX_TIM11_Init>
  MX_TIM3_Init();
 80008d8:	f000 f9a8 	bl	8000c2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80008dc:	f000 f9fa 	bl	8000cd4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80008e0:	f000 f94a 	bl	8000b78 <MX_TIM2_Init>
  MX_RTC_Init();
 80008e4:	f000 f8ee 	bl	8000ac4 <MX_RTC_Init>
  MX_TIM5_Init();
 80008e8:	f000 fa42 	bl	8000d70 <MX_TIM5_Init>
  MX_I2C1_Init();
 80008ec:	f000 f8aa 	bl	8000a44 <MX_I2C1_Init>
  MX_LWIP_Init();
 80008f0:	f006 fe98 	bl	8007624 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80008f4:	2201      	movs	r2, #1
 80008f6:	4912      	ldr	r1, [pc, #72]	; (8000940 <main+0x8c>)
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <main+0x90>)
 80008fa:	f005 fbf8 	bl	80060ee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80008fe:	2201      	movs	r2, #1
 8000900:	4911      	ldr	r1, [pc, #68]	; (8000948 <main+0x94>)
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <main+0x98>)
 8000904:	f005 fbf3 	bl	80060ee <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <main+0x9c>)
 800090a:	f003 fea1 	bl	8004650 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0xa0>)
 8000910:	f003 fe9e 	bl	8004650 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000914:	2100      	movs	r1, #0
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <main+0xa4>)
 8000918:	f004 f988 	bl	8004c2c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 800091c:	2100      	movs	r1, #0
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <main+0xa8>)
 8000920:	f004 f81e 	bl	8004960 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000924:	2100      	movs	r1, #0
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <main+0xac>)
 8000928:	f003 ff52 	bl	80047d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 800092c:	210c      	movs	r1, #12
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <main+0xb0>)
 8000930:	f003 ff4e 	bl	80047d0 <HAL_TIM_PWM_Start>

//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <main+0xb4>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]

//stepmotor_main_test();

  dotmatrix_main();
 800093a:	f7ff fefb 	bl	8000734 <dotmatrix_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093e:	e7fe      	b.n	800093e <main+0x8a>
 8000940:	20000b14 	.word	0x20000b14
 8000944:	20000580 	.word	0x20000580
 8000948:	20000b15 	.word	0x20000b15
 800094c:	200005c4 	.word	0x200005c4
 8000950:	200004f0 	.word	0x200004f0
 8000954:	20000538 	.word	0x20000538
 8000958:	20000418 	.word	0x20000418
 800095c:	20000460 	.word	0x20000460
 8000960:	200003d0 	.word	0x200003d0
 8000964:	200004a8 	.word	0x200004a8
 8000968:	20000b18 	.word	0x20000b18

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f010 fec8 	bl	8011710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemClock_Config+0xd0>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <SystemClock_Config+0xd0>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <SystemClock_Config+0xd0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemClock_Config+0xd4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <SystemClock_Config+0xd4>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <SystemClock_Config+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009c8:	2309      	movs	r3, #9
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009d2:	2301      	movs	r3, #1
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009e4:	23a8      	movs	r3, #168	; 0xa8
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ec:	2307      	movs	r3, #7
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fd4f 	bl	8003498 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a00:	f000 fc2e 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2105      	movs	r1, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 ffb0 	bl	8003988 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a2e:	f000 fc17 	bl	8001260 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_I2C1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <MX_I2C1_Init+0x7c>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a82:	f002 fa2d 	bl	8002ee0 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 fbe8 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000a94:	f002 fb68 	bl	8003168 <HAL_I2CEx_ConfigAnalogFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a9e:	f000 fbdf 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C1_Init+0x74>)
 8000aa6:	f002 fb9b 	bl	80031e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ab0:	f000 fbd6 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000035c 	.word	0x2000035c
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_RTC_Init+0xac>)
 8000ade:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <MX_RTC_Init+0xb0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_RTC_Init+0xac>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_RTC_Init+0xac>)
 8000aea:	227f      	movs	r2, #127	; 0x7f
 8000aec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_RTC_Init+0xac>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_RTC_Init+0xac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_RTC_Init+0xac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_RTC_Init+0xac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_RTC_Init+0xac>)
 8000b08:	f003 fb1e 	bl	8004148 <HAL_RTC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 fba5 	bl	8001260 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000b16:	2309      	movs	r3, #9
 8000b18:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000b1a:	2338      	movs	r3, #56	; 0x38
 8000b1c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <MX_RTC_Init+0xac>)
 8000b32:	f003 fb7f 	bl	8004234 <HAL_RTC_SetTime>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 fb90 	bl	8001260 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b40:	2301      	movs	r3, #1
 8000b42:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000b44:	2310      	movs	r3, #16
 8000b46:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000b48:	2316      	movs	r3, #22
 8000b4a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000b4c:	2323      	movs	r3, #35	; 0x23
 8000b4e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2201      	movs	r2, #1
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_RTC_Init+0xac>)
 8000b58:	f003 fc06 	bl	8004368 <HAL_RTC_SetDate>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b62:	f000 fb7d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200003b0 	.word	0x200003b0
 8000b74:	40002800 	.word	0x40002800

08000b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000ba4:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000bc6:	f003 fdb3 	bl	8004730 <HAL_TIM_PWM_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f000 fb46 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4619      	mov	r1, r3
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000be4:	f005 f914 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bee:	f000 fb37 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf2:	2360      	movs	r3, #96	; 0x60
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bf6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000c0c:	f004 fada 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c16:	f000 fb23 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM2_Init+0xb0>)
 8000c1c:	f000 fcb8 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200003d0 	.word	0x200003d0

08000c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c4a:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c50:	2253      	movs	r2, #83	; 0x53
 8000c52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c70:	f003 ff8c 	bl	8004b8c <HAL_TIM_IC_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 faf1 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000c8e:	f005 f8bf 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 fae2 	bl	8001260 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_TIM3_Init+0xa0>)
 8000cb4:	f004 f9ea 	bl	800508c <HAL_TIM_IC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cbe:	f000 facf 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000418 	.word	0x20000418
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_TIM4_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000cf8:	f240 3247 	movw	r2, #839	; 0x347
 8000cfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d06:	2263      	movs	r2, #99	; 0x63
 8000d08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d18:	f003 fc4b 	bl	80045b2 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 fa9d 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d34:	f004 fb08 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fa8f 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d50:	f005 f85e 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d5a:	f000 fa81 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000460 	.word	0x20000460
 8000d6c:	40000800 	.word	0x40000800

08000d70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000da2:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <MX_TIM5_Init+0xe8>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000da8:	2233      	movs	r2, #51	; 0x33
 8000daa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000db4:	f240 128f 	movw	r2, #399	; 0x18f
 8000db8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dc6:	4823      	ldr	r0, [pc, #140]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000dc8:	f003 fbf3 	bl	80045b2 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000dd2:	f000 fa45 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de0:	4619      	mov	r1, r3
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000de4:	f004 fab0 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000dee:	f000 fa37 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000df4:	f003 fc9c 	bl	8004730 <HAL_TIM_PWM_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000dfe:	f000 fa2f 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4810      	ldr	r0, [pc, #64]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000e12:	f004 fffd 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e1c:	f000 fa20 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e20:	2360      	movs	r3, #96	; 0x60
 8000e22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000e24:	23c7      	movs	r3, #199	; 0xc7
 8000e26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	220c      	movs	r2, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000e38:	f004 f9c4 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000e42:	f000 fa0d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM5_Init+0xe4>)
 8000e48:	f000 fba2 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000e4c:	bf00      	nop
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200004a8 	.word	0x200004a8
 8000e58:	40000c00 	.word	0x40000c00

08000e5c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <MX_TIM10_Init+0x44>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e68:	22a7      	movs	r2, #167	; 0xa7
 8000e6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e74:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e78:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM10_Init+0x40>)
 8000e88:	f003 fb93 	bl	80045b2 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e92:	f000 f9e5 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200004f0 	.word	0x200004f0
 8000ea0:	40014400 	.word	0x40014400

08000ea4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <MX_TIM11_Init+0x44>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eb0:	22a7      	movs	r2, #167	; 0xa7
 8000eb2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ed0:	f003 fb6f 	bl	80045b2 <HAL_TIM_Base_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000eda:	f000 f9c1 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000538 	.word	0x20000538
 8000ee8:	40014800 	.word	0x40014800

08000eec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART3_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f24:	f005 f804 	bl	8005f30 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f997 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000580 	.word	0x20000580
 8000f3c:	40004800 	.word	0x40004800

08000f40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART6_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f78:	f004 ffda 	bl	8005f30 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f96d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200005c4 	.word	0x200005c4
 8000f90:	40011400 	.word	0x40011400

08000f94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	f002 f941 	bl	800325e <HAL_PCD_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fe2:	f000 f93d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000608 	.word	0x20000608

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	4b8d      	ldr	r3, [pc, #564]	; (8001240 <MX_GPIO_Init+0x250>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a8c      	ldr	r2, [pc, #560]	; (8001240 <MX_GPIO_Init+0x250>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <MX_GPIO_Init+0x250>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	4b86      	ldr	r3, [pc, #536]	; (8001240 <MX_GPIO_Init+0x250>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a85      	ldr	r2, [pc, #532]	; (8001240 <MX_GPIO_Init+0x250>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b83      	ldr	r3, [pc, #524]	; (8001240 <MX_GPIO_Init+0x250>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b7f      	ldr	r3, [pc, #508]	; (8001240 <MX_GPIO_Init+0x250>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a7e      	ldr	r2, [pc, #504]	; (8001240 <MX_GPIO_Init+0x250>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <MX_GPIO_Init+0x250>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b78      	ldr	r3, [pc, #480]	; (8001240 <MX_GPIO_Init+0x250>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a77      	ldr	r2, [pc, #476]	; (8001240 <MX_GPIO_Init+0x250>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b75      	ldr	r3, [pc, #468]	; (8001240 <MX_GPIO_Init+0x250>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <MX_GPIO_Init+0x250>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a70      	ldr	r2, [pc, #448]	; (8001240 <MX_GPIO_Init+0x250>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <MX_GPIO_Init+0x250>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <MX_GPIO_Init+0x250>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a69      	ldr	r2, [pc, #420]	; (8001240 <MX_GPIO_Init+0x250>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <MX_GPIO_Init+0x250>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <MX_GPIO_Init+0x250>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a62      	ldr	r2, [pc, #392]	; (8001240 <MX_GPIO_Init+0x250>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <MX_GPIO_Init+0x250>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <MX_GPIO_Init+0x250>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a5b      	ldr	r2, [pc, #364]	; (8001240 <MX_GPIO_Init+0x250>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <MX_GPIO_Init+0x250>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80010ec:	4855      	ldr	r0, [pc, #340]	; (8001244 <MX_GPIO_Init+0x254>)
 80010ee:	f001 feb9 	bl	8002e64 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	4854      	ldr	r0, [pc, #336]	; (8001248 <MX_GPIO_Init+0x258>)
 80010f8:	f001 feb4 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f244 0181 	movw	r1, #16513	; 0x4081
 8001102:	4852      	ldr	r0, [pc, #328]	; (800124c <MX_GPIO_Init+0x25c>)
 8001104:	f001 feae 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4850      	ldr	r0, [pc, #320]	; (8001250 <MX_GPIO_Init+0x260>)
 8001110:	f001 fea8 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001114:	2200      	movs	r2, #0
 8001116:	f647 01ff 	movw	r1, #30975	; 0x78ff
 800111a:	484e      	ldr	r0, [pc, #312]	; (8001254 <MX_GPIO_Init+0x264>)
 800111c:	f001 fea2 	bl	8002e64 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	484c      	ldr	r0, [pc, #304]	; (8001258 <MX_GPIO_Init+0x268>)
 8001126:	f001 fe9d 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800112a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4840      	ldr	r0, [pc, #256]	; (8001244 <MX_GPIO_Init+0x254>)
 8001144:	f001 fce2 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	483f      	ldr	r0, [pc, #252]	; (800125c <MX_GPIO_Init+0x26c>)
 8001160:	f001 fcd4 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4833      	ldr	r0, [pc, #204]	; (8001248 <MX_GPIO_Init+0x258>)
 800117c:	f001 fcc6 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001180:	f244 0381 	movw	r3, #16513	; 0x4081
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <MX_GPIO_Init+0x25c>)
 800119a:	f001 fcb7 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4826      	ldr	r0, [pc, #152]	; (8001250 <MX_GPIO_Init+0x260>)
 80011b8:	f001 fca8 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80011bc:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_GPIO_Init+0x254>)
 80011d2:	f001 fc9b 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80011d6:	f647 03ff 	movw	r3, #30975	; 0x78ff
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <MX_GPIO_Init+0x264>)
 80011f0:	f001 fc8c 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <MX_GPIO_Init+0x268>)
 800120c:	f001 fc7e 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_GPIO_Init+0x268>)
 8001224:	f001 fc72 	bl	8002b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2028      	movs	r0, #40	; 0x28
 800122e:	f000 fea8 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f000 fec1 	bl	8001fba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	; 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40021400 	.word	0x40021400
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021800 	.word	0x40021800
 800125c:	40020800 	.word	0x40020800

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_I2C_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12c      	bne.n	8001338 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001300:	2312      	movs	r3, #18
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130c:	2304      	movs	r3, #4
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	; (8001348 <HAL_I2C_MspInit+0x8c>)
 8001318:	f001 fbf8 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0x88>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_I2C_MspInit+0x88>)
 8001326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40005400 	.word	0x40005400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2230      	movs	r2, #48	; 0x30
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f010 f9d7 	bl	8011710 <memset>
  if(hrtc->Instance==RTC)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_RTC_MspInit+0x4c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d111      	bne.n	8001390 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800136c:	2320      	movs	r3, #32
 800136e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fd24 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001386:	f7ff ff6b 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_RTC_MspInit+0x50>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	; 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40002800 	.word	0x40002800
 800139c:	42470e3c 	.word	0x42470e3c

080013a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d115      	bne.n	80013de <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_PWM_MspInit+0x48>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_PWM_MspInit+0x48>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_PWM_MspInit+0x48>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 fdd5 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d8:	201c      	movs	r0, #28
 80013da:	f000 fdee 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_TIM_IC_MspInit+0x94>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d133      	bne.n	8001476 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_TIM_IC_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001456:	2302      	movs	r3, #2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <HAL_TIM_IC_MspInit+0x9c>)
 8001462:	f001 fb53 	bl	8002b0c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201d      	movs	r0, #29
 800146c:	f000 fd89 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001470:	201d      	movs	r0, #29
 8001472:	f000 fda2 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000400 	.word	0x40000400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <HAL_TIM_Base_MspInit+0xf0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d116      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	201e      	movs	r0, #30
 80014c0:	f000 fd5f 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014c4:	201e      	movs	r0, #30
 80014c6:	f000 fd78 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80014ca:	e052      	b.n	8001572 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <HAL_TIM_Base_MspInit+0xf8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d116      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2032      	movs	r0, #50	; 0x32
 80014f8:	f000 fd43 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014fc:	2032      	movs	r0, #50	; 0x32
 80014fe:	f000 fd5c 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 8001502:	e036      	b.n	8001572 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_TIM_Base_MspInit+0xfc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d116      	bne.n	800153c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2019      	movs	r0, #25
 8001530:	f000 fd27 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001534:	2019      	movs	r0, #25
 8001536:	f000 fd40 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 800153a:	e01a      	b.n	8001572 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_TIM_Base_MspInit+0x100>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d115      	bne.n	8001572 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_Base_MspInit+0xf4>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	201a      	movs	r0, #26
 8001568:	f000 fd0b 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800156c:	201a      	movs	r0, #26
 800156e:	f000 fd24 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40000800 	.word	0x40000800
 8001580:	40023800 	.word	0x40023800
 8001584:	40000c00 	.word	0x40000c00
 8001588:	40014400 	.word	0x40014400
 800158c:	40014800 	.word	0x40014800

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b0:	d11e      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 80015ce:	2320      	movs	r3, #32
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015de:	2301      	movs	r3, #1
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4816      	ldr	r0, [pc, #88]	; (8001644 <HAL_TIM_MspPostInit+0xb4>)
 80015ea:	f001 fa8f 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015ee:	e022      	b.n	8001636 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_TIM_MspPostInit+0xb8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d11d      	bne.n	8001636 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_MspPostInit+0xb0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001616:	2308      	movs	r3, #8
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001626:	2302      	movs	r3, #2
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <HAL_TIM_MspPostInit+0xb4>)
 8001632:	f001 fa6b 	bl	8002b0c <HAL_GPIO_Init>
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40000c00 	.word	0x40000c00

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <HAL_UART_MspInit+0x108>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d135      	bne.n	80016da <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_UART_MspInit+0x10c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b8:	2307      	movs	r3, #7
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4826      	ldr	r0, [pc, #152]	; (800175c <HAL_UART_MspInit+0x110>)
 80016c4:	f001 fa22 	bl	8002b0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2027      	movs	r0, #39	; 0x27
 80016ce:	f000 fc58 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016d2:	2027      	movs	r0, #39	; 0x27
 80016d4:	f000 fc71 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016d8:	e038      	b.n	800174c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_UART_MspInit+0x114>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d133      	bne.n	800174c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_UART_MspInit+0x10c>)
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_UART_MspInit+0x10c>)
 80016ee:	f043 0320 	orr.w	r3, r3, #32
 80016f2:	6453      	str	r3, [r2, #68]	; 0x44
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_UART_MspInit+0x10c>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_UART_MspInit+0x10c>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_UART_MspInit+0x10c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171c:	23c0      	movs	r3, #192	; 0xc0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800172c:	2308      	movs	r3, #8
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_UART_MspInit+0x118>)
 8001738:	f001 f9e8 	bl	8002b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2047      	movs	r0, #71	; 0x47
 8001742:	f000 fc1e 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001746:	2047      	movs	r0, #71	; 0x47
 8001748:	f000 fc37 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004800 	.word	0x40004800
 8001758:	40023800 	.word	0x40023800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40011400 	.word	0x40011400
 8001764:	40020800 	.word	0x40020800

08001768 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001788:	d13f      	bne.n	800180a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_PCD_MspInit+0xac>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_PCD_MspInit+0xac>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_PCD_MspInit+0xac>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017a6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b8:	230a      	movs	r3, #10
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4815      	ldr	r0, [pc, #84]	; (8001818 <HAL_PCD_MspInit+0xb0>)
 80017c4:	f001 f9a2 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <HAL_PCD_MspInit+0xb0>)
 80017de:	f001 f995 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_PCD_MspInit+0xac>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_PCD_MspInit+0xac>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6353      	str	r3, [r2, #52]	; 0x34
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_PCD_MspInit+0xac>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_PCD_MspInit+0xac>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_PCD_MspInit+0xac>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 fa6c 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 800186c:	f7fe ffe2 	bl	8000834 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800187a:	f003 faff 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200004f0 	.word	0x200004f0

08001888 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800188e:	f003 faf5 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000538 	.word	0x20000538

0800189c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TIM2_IRQHandler+0x10>)
 80018a2:	f003 faeb 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003d0 	.word	0x200003d0

080018b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM3_IRQHandler+0x10>)
 80018b6:	f003 fae1 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000418 	.word	0x20000418

080018c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM4_IRQHandler+0x10>)
 80018ca:	f003 fad7 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000460 	.word	0x20000460

080018d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART3_IRQHandler+0x10>)
 80018de:	f004 fc37 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000580 	.word	0x20000580

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f4:	f001 fad0 	bl	8002e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <TIM5_IRQHandler+0x10>)
 8001902:	f003 fabb 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200004a8 	.word	0x200004a8

08001910 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <USART6_IRQHandler+0x10>)
 8001916:	f004 fc1b 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200005c4 	.word	0x200005c4

08001924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_kill>:

int _kill(int pid, int sig)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <_kill+0x20>)
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
  return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20008f9c 	.word	0x20008f9c

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffe5 	bl	8001934 <_kill>
  while (1) {}    /* Make sure we hang here */
 800196a:	e7fe      	b.n	800196a <_exit+0x12>

0800196c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e00a      	b.n	8001994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800197e:	f3af 8000 	nop.w
 8001982:	4601      	mov	r1, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <_read+0x12>
  }

  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e009      	b.n	80019cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	60ba      	str	r2, [r7, #8]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe ff45 	bl	8000850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf1      	blt.n	80019b8 <_write+0x12>
  }
  return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_close>:

int _close(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a06:	605a      	str	r2, [r3, #4]
  return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_isatty>:

int _isatty(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d205      	bcs.n	8001a84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <_sbrk+0x6c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a06      	ldr	r2, [pc, #24]	; (8001aac <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20030000 	.word	0x20030000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000b24 	.word	0x20000b24
 8001ab0:	20008fb0 	.word	0x20008fb0
 8001ab4:	20008f9c 	.word	0x20008f9c

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_UART_RxCpltCallback+0xd4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d12c      	bne.n	8001b46 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b27      	cmp	r3, #39	; 0x27
 8001af2:	dc1d      	bgt.n	8001b30 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_UART_RxCpltCallback+0xdc>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b0a      	cmp	r3, #10
 8001afa:	d003      	beq.n	8001b04 <HAL_UART_RxCpltCallback+0x28>
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_UART_RxCpltCallback+0xdc>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b0d      	cmp	r3, #13
 8001b02:	d10b      	bne.n	8001b1c <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <HAL_UART_RxCpltCallback+0xe0>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_UART_RxCpltCallback+0xe4>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e00f      	b.n	8001b3c <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	4924      	ldr	r1, [pc, #144]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b24:	600a      	str	r2, [r1, #0]
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <HAL_UART_RxCpltCallback+0xdc>)
 8001b28:	7811      	ldrb	r1, [r2, #0]
 8001b2a:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <HAL_UART_RxCpltCallback+0xe0>)
 8001b2c:	54d1      	strb	r1, [r2, r3]
 8001b2e:	e005      	b.n	8001b3c <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001b36:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <HAL_UART_RxCpltCallback+0xe8>)
 8001b38:	f00f fcfa 	bl	8011530 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	491e      	ldr	r1, [pc, #120]	; (8001bb8 <HAL_UART_RxCpltCallback+0xdc>)
 8001b40:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <HAL_UART_RxCpltCallback+0xd4>)
 8001b42:	f004 fad4 	bl	80060ee <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_UART_RxCpltCallback+0xec>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12c      	bne.n	8001ba8 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_UART_RxCpltCallback+0xf0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b27      	cmp	r3, #39	; 0x27
 8001b54:	dc1d      	bgt.n	8001b92 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_UART_RxCpltCallback+0xf4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d003      	beq.n	8001b66 <HAL_UART_RxCpltCallback+0x8a>
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_UART_RxCpltCallback+0xf4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b0d      	cmp	r3, #13
 8001b64:	d10b      	bne.n	8001b7e <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_UART_RxCpltCallback+0xf8>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_UART_RxCpltCallback+0xfc>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_UART_RxCpltCallback+0xf0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e00f      	b.n	8001b9e <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_UART_RxCpltCallback+0xf0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	4911      	ldr	r1, [pc, #68]	; (8001bcc <HAL_UART_RxCpltCallback+0xf0>)
 8001b86:	600a      	str	r2, [r1, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_UART_RxCpltCallback+0xf4>)
 8001b8a:	7811      	ldrb	r1, [r2, #0]
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_UART_RxCpltCallback+0xf8>)
 8001b8e:	54d1      	strb	r1, [r2, r3]
 8001b90:	e005      	b.n	8001b9e <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_UART_RxCpltCallback+0xf0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <HAL_UART_RxCpltCallback+0x100>)
 8001b9a:	f00f fcc9 	bl	8011530 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	490b      	ldr	r1, [pc, #44]	; (8001bd0 <HAL_UART_RxCpltCallback+0xf4>)
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_UART_RxCpltCallback+0xec>)
 8001ba4:	f004 faa3 	bl	80060ee <HAL_UART_Receive_IT>
	}
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000580 	.word	0x20000580
 8001bb4:	20000b50 	.word	0x20000b50
 8001bb8:	20000b14 	.word	0x20000b14
 8001bbc:	20000b28 	.word	0x20000b28
 8001bc0:	20000b54 	.word	0x20000b54
 8001bc4:	08012354 	.word	0x08012354
 8001bc8:	200005c4 	.word	0x200005c4
 8001bcc:	20000b80 	.word	0x20000b80
 8001bd0:	20000b15 	.word	0x20000b15
 8001bd4:	20000b58 	.word	0x20000b58
 8001bd8:	20000b84 	.word	0x20000b84
 8001bdc:	0801236c 	.word	0x0801236c

08001be0 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11f      	bne.n	8001c32 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001c0a:	e012      	b.n	8001c32 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10d      	bne.n	8001c32 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f003 fc5a 	bl	80054d8 <HAL_TIM_ReadCapturedValue>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001c2a:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	20000b90 	.word	0x20000b90
 8001c44:	20000b88 	.word	0x20000b88
 8001c48:	20000b8c 	.word	0x20000b8c

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c76:	f7ff ff1f 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f00f fd97 	bl	80117ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7fe fe19 	bl	80008b4 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001c90:	08014fd8 	.word	0x08014fd8
  ldr r2, =_sbss
 8001c94:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001c98:	20008fac 	.word	0x20008fac

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_Init+0x40>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x40>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x40>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f94f 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff faca 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f967 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 f92f 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000012c 	.word	0x2000012c
 8001d3c:	20000134 	.word	0x20000134
 8001d40:	20000130 	.word	0x20000130

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000134 	.word	0x20000134
 8001d68:	20000b94 	.word	0x20000b94

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000b94 	.word	0x20000b94

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000134 	.word	0x20000134

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff feb6 	bl	8001d6c <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d008      	beq.n	8002020 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e052      	b.n	80020c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0216 	bic.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <HAL_DMA_Abort+0x62>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0208 	bic.w	r2, r2, #8
 800205e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002070:	e013      	b.n	800209a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002072:	f7ff fe7b 	bl	8001d6c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b05      	cmp	r3, #5
 800207e:	d90c      	bls.n	800209a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e015      	b.n	80020c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e4      	bne.n	8002072 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e00c      	b.n	8002106 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2205      	movs	r2, #5
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06c      	b.n	8002200 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800212c:	2b00      	cmp	r3, #0
 800212e:	d106      	bne.n	800213e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2223      	movs	r2, #35	; 0x23
 8002134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f869 	bl	8002210 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_ETH_Init+0xf4>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a30      	ldr	r2, [pc, #192]	; (8002208 <HAL_ETH_Init+0xf4>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_ETH_Init+0xf4>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_ETH_Init+0xf8>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_ETH_Init+0xf8>)
 8002160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002164:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_ETH_Init+0xf8>)
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4927      	ldr	r1, [pc, #156]	; (800220c <HAL_ETH_Init+0xf8>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_ETH_Init+0xf8>)
 8002176:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800218e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002190:	f7ff fdec 	bl	8001d6c <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002196:	e011      	b.n	80021bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002198:	f7ff fde8 	bl	8001d6c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021a6:	d909      	bls.n	80021bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2204      	movs	r2, #4
 80021ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	22e0      	movs	r2, #224	; 0xe0
 80021b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e021      	b.n	8002200 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e4      	bne.n	8002198 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f9f6 	bl	80025c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa9d 	bl	8002714 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 faf3 	bl	80027c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	461a      	mov	r2, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fa5b 	bl	80026a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2210      	movs	r2, #16
 80021fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	40013800 	.word	0x40013800

08002210 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07c      	b.n	8002344 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002250:	2b23      	cmp	r3, #35	; 0x23
 8002252:	d176      	bne.n	8002342 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002254:	2200      	movs	r2, #0
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fb21 	bl	80028a0 <ETH_Prepare_Tx_Descriptors>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e065      	b.n	8002344 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002278:	f3bf 8f4f 	dsb	sy
}
 800227c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3206      	adds	r2, #6
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	2b03      	cmp	r3, #3
 800229c:	d904      	bls.n	80022a8 <HAL_ETH_Transmit+0x84>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	1f1a      	subs	r2, r3, #4
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3106      	adds	r1, #6
 80022b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022bc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80022be:	f7ff fd55 	bl	8001d6c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022c4:	e037      	b.n	8002336 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d011      	beq.n	80022fc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f043 0208 	orr.w	r2, r3, #8
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e023      	b.n	8002344 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d018      	beq.n	8002336 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7ff fd32 	bl	8001d6c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <HAL_ETH_Transmit+0xf6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002330:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e006      	b.n	8002344 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	dbc3      	blt.n	80022c6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <ETH_SetMACConfig+0x15c>)
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7c1b      	ldrb	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <ETH_SetMACConfig+0x28>
 800236e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002372:	e000      	b.n	8002376 <ETH_SetMACConfig+0x2a>
 8002374:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	7c5b      	ldrb	r3, [r3, #17]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <ETH_SetMACConfig+0x38>
 800237e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002382:	e000      	b.n	8002386 <ETH_SetMACConfig+0x3a>
 8002384:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002386:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800238c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7fdb      	ldrb	r3, [r3, #31]
 8002392:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002394:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800239a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	7f92      	ldrb	r2, [r2, #30]
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d102      	bne.n	80023aa <ETH_SetMACConfig+0x5e>
 80023a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a8:	e000      	b.n	80023ac <ETH_SetMACConfig+0x60>
 80023aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80023ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	7f1b      	ldrb	r3, [r3, #28]
 80023b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	791b      	ldrb	r3, [r3, #4]
 80023c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d102      	bne.n	80023d4 <ETH_SetMACConfig+0x88>
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	e000      	b.n	80023d6 <ETH_SetMACConfig+0x8a>
 80023d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7bdb      	ldrb	r3, [r3, #15]
 80023dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ee:	4313      	orrs	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff fcbc 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002432:	2a00      	cmp	r2, #0
 8002434:	d101      	bne.n	800243a <ETH_SetMACConfig+0xee>
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	e000      	b.n	800243c <ETH_SetMACConfig+0xf0>
 800243a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800243c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002442:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800244a:	2a01      	cmp	r2, #1
 800244c:	d101      	bne.n	8002452 <ETH_SetMACConfig+0x106>
 800244e:	2208      	movs	r2, #8
 8002450:	e000      	b.n	8002454 <ETH_SetMACConfig+0x108>
 8002452:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002454:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800245c:	2a01      	cmp	r2, #1
 800245e:	d101      	bne.n	8002464 <ETH_SetMACConfig+0x118>
 8002460:	2204      	movs	r2, #4
 8002462:	e000      	b.n	8002466 <ETH_SetMACConfig+0x11a>
 8002464:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002466:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800246e:	2a01      	cmp	r2, #1
 8002470:	d101      	bne.n	8002476 <ETH_SetMACConfig+0x12a>
 8002472:	2202      	movs	r2, #2
 8002474:	e000      	b.n	8002478 <ETH_SetMACConfig+0x12c>
 8002476:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002478:	4313      	orrs	r3, r2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff fc77 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	ff20810f 	.word	0xff20810f

080024ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <ETH_SetDMAConfig+0x110>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	7b1b      	ldrb	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <ETH_SetDMAConfig+0x2c>
 80024d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024d6:	e000      	b.n	80024da <ETH_SetDMAConfig+0x2e>
 80024d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7b5b      	ldrb	r3, [r3, #13]
 80024de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	7f52      	ldrb	r2, [r2, #29]
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d102      	bne.n	80024f0 <ETH_SetDMAConfig+0x44>
 80024ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ee:	e000      	b.n	80024f2 <ETH_SetDMAConfig+0x46>
 80024f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7b9b      	ldrb	r3, [r3, #14]
 80024f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002500:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	7f1b      	ldrb	r3, [r3, #28]
 8002506:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002508:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	7f9b      	ldrb	r3, [r3, #30]
 800250e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002510:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002516:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002520:	4313      	orrs	r3, r2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	461a      	mov	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff fc1e 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002550:	461a      	mov	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	791b      	ldrb	r3, [r3, #4]
 800255a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002560:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002566:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800256c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002574:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002576:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800257e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002584:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800258e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002592:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7ff fbef 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	f8de3f23 	.word	0xf8de3f23

080025c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0a6      	sub	sp, #152	; 0x98
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025fc:	2300      	movs	r3, #0
 80025fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002606:	2300      	movs	r3, #0
 8002608:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fe86 	bl	800234c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002674:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800267c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002680:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff08 	bl	80024ac <ETH_SetDMAConfig>
}
 800269c:	bf00      	nop
 800269e:	3798      	adds	r7, #152	; 0x98
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3305      	adds	r3, #5
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	3204      	adds	r2, #4
 80026bc:	7812      	ldrb	r2, [r2, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <ETH_MACAddressConfig+0x68>)
 80026c6:	4413      	add	r3, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3303      	adds	r3, #3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	061a      	lsls	r2, r3, #24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3302      	adds	r3, #2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4313      	orrs	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <ETH_MACAddressConfig+0x6c>)
 80026f6:	4413      	add	r3, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6013      	str	r3, [r2, #0]
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40028040 	.word	0x40028040
 8002710:	40028044 	.word	0x40028044

08002714 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e03e      	b.n	80027a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	3206      	adds	r2, #6
 8002754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d80c      	bhi.n	8002784 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e004      	b.n	800278e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d9bd      	bls.n	8002722 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b8:	611a      	str	r2, [r3, #16]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e046      	b.n	8002862 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002810:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002818:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	3212      	adds	r2, #18
 800282e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d80c      	bhi.n	8002852 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6919      	ldr	r1, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e004      	b.n	800285c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3301      	adds	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d9b5      	bls.n	80027d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002892:	60da      	str	r2, [r3, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b08d      	sub	sp, #52	; 0x34
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3318      	adds	r3, #24
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e2:	d007      	beq.n	80028f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	3304      	adds	r3, #4
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	e103      	b.n	8002b00 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	3301      	adds	r3, #1
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002910:	f023 031f 	bic.w	r3, r3, #31
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	431a      	orrs	r2, r3
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	431a      	orrs	r2, r3
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	601a      	str	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800297e:	f3bf 8f5f 	dmb	sy
}
 8002982:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002990:	e084      	b.n	8002a9c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e005      	b.n	80029be <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d902      	bls.n	80029d0 <ETH_Prepare_Tx_Descriptors+0x130>
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	3b04      	subs	r3, #4
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029f2:	d007      	beq.n	8002a04 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	3304      	adds	r3, #4
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d029      	beq.n	8002a58 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a10:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a16:	e019      	b.n	8002a4c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a18:	f3bf 8f5f 	dmb	sy
}
 8002a1c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d902      	bls.n	8002a3c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	3b04      	subs	r3, #4
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	3301      	adds	r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3e1      	bcc.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	e053      	b.n	8002b00 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002a76:	f023 031f 	bic.w	r3, r3, #31
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	3301      	adds	r3, #1
 8002a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a8a:	f3bf 8f5f 	dmb	sy
}
 8002a8e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af76 	bne.w	8002992 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e005      	b.n	8002ac6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	3304      	adds	r3, #4
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae8:	b672      	cpsid	i
}
 8002aea:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002afa:	b662      	cpsie	i
}
 8002afc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3734      	adds	r7, #52	; 0x34
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e177      	b.n	8002e18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8166 	bne.w	8002e12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80c0 	beq.w	8002e12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a61      	ldr	r2, [pc, #388]	; (8002e34 <HAL_GPIO_Init+0x328>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_GPIO_Init+0x32c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d037      	beq.n	8002d4a <HAL_GPIO_Init+0x23e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d031      	beq.n	8002d46 <HAL_GPIO_Init+0x23a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_GPIO_Init+0x334>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02b      	beq.n	8002d42 <HAL_GPIO_Init+0x236>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a55      	ldr	r2, [pc, #340]	; (8002e44 <HAL_GPIO_Init+0x338>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d025      	beq.n	8002d3e <HAL_GPIO_Init+0x232>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a54      	ldr	r2, [pc, #336]	; (8002e48 <HAL_GPIO_Init+0x33c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <HAL_GPIO_Init+0x22e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a53      	ldr	r2, [pc, #332]	; (8002e4c <HAL_GPIO_Init+0x340>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d019      	beq.n	8002d36 <HAL_GPIO_Init+0x22a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_GPIO_Init+0x344>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a51      	ldr	r2, [pc, #324]	; (8002e54 <HAL_GPIO_Init+0x348>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_GPIO_Init+0x222>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a50      	ldr	r2, [pc, #320]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0x21e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002d22:	2309      	movs	r3, #9
 8002d24:	e012      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d26:	230a      	movs	r3, #10
 8002d28:	e010      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	e00e      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d2e:	2307      	movs	r3, #7
 8002d30:	e00c      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d32:	2306      	movs	r3, #6
 8002d34:	e00a      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d36:	2305      	movs	r3, #5
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_GPIO_Init+0x328>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a34      	ldr	r2, [pc, #208]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de2:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f ae84 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40021c00 	.word	0x40021c00
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40022400 	.word	0x40022400
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f806 	bl	8002ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e12b      	b.n	800314a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f9d8 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f44:	f000 ff18 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8002f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a81      	ldr	r2, [pc, #516]	; (8003154 <HAL_I2C_Init+0x274>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d807      	bhi.n	8002f64 <HAL_I2C_Init+0x84>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_I2C_Init+0x278>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e006      	b.n	8002f72 <HAL_I2C_Init+0x92>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a7d      	ldr	r2, [pc, #500]	; (800315c <HAL_I2C_Init+0x27c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bf94      	ite	ls
 8002f6c:	2301      	movls	r3, #1
 8002f6e:	2300      	movhi	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0e7      	b.n	800314a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a78      	ldr	r2, [pc, #480]	; (8003160 <HAL_I2C_Init+0x280>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0c9b      	lsrs	r3, r3, #18
 8002f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_I2C_Init+0x274>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <HAL_I2C_Init+0xd4>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	e009      	b.n	8002fc8 <HAL_I2C_Init+0xe8>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_I2C_Init+0x284>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	495c      	ldr	r1, [pc, #368]	; (8003154 <HAL_I2C_Init+0x274>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d819      	bhi.n	800301c <HAL_I2C_Init+0x13c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e59      	subs	r1, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_I2C_Init+0x138>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e59      	subs	r1, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003016:	e051      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 8003018:	2304      	movs	r3, #4
 800301a:	e04f      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <HAL_I2C_Init+0x168>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e012      	b.n	800306e <HAL_I2C_Init+0x18e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x196>
 8003072:	2301      	movs	r3, #1
 8003074:	e022      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10e      	bne.n	800309c <HAL_I2C_Init+0x1bc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e58      	subs	r0, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309a:	e00f      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	0099      	lsls	r1, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	6809      	ldr	r1, [r1, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6911      	ldr	r1, [r2, #16]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	000186a0 	.word	0x000186a0
 8003158:	001e847f 	.word	0x001e847f
 800315c:	003d08ff 	.word	0x003d08ff
 8003160:	431bde83 	.word	0x431bde83
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d129      	bne.n	80031d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2224      	movs	r2, #36	; 0x24
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d12a      	bne.n	8003250 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	f023 030f 	bic.w	r3, r3, #15
 8003220:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b29a      	uxth	r2, r3
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	4313      	orrs	r3, r2
 800322a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	89fa      	ldrh	r2, [r7, #14]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800325e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003260:	b08f      	sub	sp, #60	; 0x3c
 8003262:	af0a      	add	r7, sp, #40	; 0x28
 8003264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e10f      	b.n	8003490 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fa6c 	bl	8001768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 ff17 	bl	80070e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	687e      	ldr	r6, [r7, #4]
 80032bc:	466d      	mov	r5, sp
 80032be:	f106 0410 	add.w	r4, r6, #16
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80032d2:	1d33      	adds	r3, r6, #4
 80032d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d6:	6838      	ldr	r0, [r7, #0]
 80032d8:	f003 fea2 	bl	8007020 <USB_CoreInit>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0d0      	b.n	8003490 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 ff05 	bl	8007104 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e04a      	b.n	8003396 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	333d      	adds	r3, #61	; 0x3d
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	333c      	adds	r3, #60	; 0x3c
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	b298      	uxth	r0, r3
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3344      	adds	r3, #68	; 0x44
 800333c:	4602      	mov	r2, r0
 800333e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3340      	adds	r3, #64	; 0x40
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3348      	adds	r3, #72	; 0x48
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334c      	adds	r3, #76	; 0x4c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3354      	adds	r3, #84	; 0x54
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	3301      	adds	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3af      	bcc.n	8003300 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e044      	b.n	8003430 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	3301      	adds	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d3b5      	bcc.n	80033a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	687e      	ldr	r6, [r7, #4]
 8003442:	466d      	mov	r5, sp
 8003444:	f106 0410 	add.w	r4, r6, #16
 8003448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800344c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003454:	e885 0003 	stmia.w	r5, {r0, r1}
 8003458:	1d33      	adds	r3, r6, #4
 800345a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f003 fe9d 	bl	800719c <USB_DevInit>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e00d      	b.n	8003490 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f004 f868 	bl	800755e <USB_DevDisconnect>

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e267      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d075      	beq.n	80035a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00c      	beq.n	80034dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d112      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05b      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d157      	bne.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e242      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x74>
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x98>
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6c      	ldr	r2, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 8003530:	4b69      	ldr	r3, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fc0c 	bl	8001d6c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe fc08 	bl	8001d6c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e207      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xc0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fbf8 	bl	8001d6c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe fbf4 	bl	8001d6c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1f3      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe fbad 	bl	8001d6c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7fe fba9 	bl	8001d6c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a8      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fb8c 	bl	8001d6c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe fb88 	bl	8001d6c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e187      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fb6c 	bl	8001d6c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fe fb68 	bl	8001d6c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e167      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe fb55 	bl	8001d6c <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fe fb51 	bl	8001d6c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e150      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b88      	ldr	r3, [pc, #544]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fe fb11 	bl	8001d6c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fe fb0d 	bl	8001d6c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e10c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x2ea>
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a63      	ldr	r2, [pc, #396]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x30c>
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 80037a4:	4b58      	ldr	r3, [pc, #352]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a57      	ldr	r2, [pc, #348]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fad2 	bl	8001d6c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fe face 	bl	8001d6c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0cb      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x334>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fe fabc 	bl	8001d6c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe fab8 	bl	8001d6c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b5      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a1 	beq.w	8003978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d05c      	beq.n	80038fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d141      	bne.n	80038ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe fa8c 	bl	8001d6c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe fa88 	bl	8001d6c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e087      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	491b      	ldr	r1, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fa61 	bl	8001d6c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe fa5d 	bl	8001d6c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x416>
 80038cc:	e054      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe fa4a 	bl	8001d6c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fa46 	bl	8001d6c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x444>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e038      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d028      	beq.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d121      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11a      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cc      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d90c      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d044      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e067      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4934      	ldr	r1, [pc, #208]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fe f978 	bl	8001d6c <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f974 	bl	8001d6c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20c      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f8d8 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08014de4 	.word	0x08014de4
 8003b4c:	2000012c 	.word	0x2000012c
 8003b50:	20000130 	.word	0x20000130

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b094      	sub	sp, #80	; 0x50
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b60:	2300      	movs	r3, #0
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b79      	ldr	r3, [pc, #484]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80e1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0db      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b8c:	e0db      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd8:	0150      	lsls	r0, r2, #5
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4621      	mov	r1, r4
 8003be0:	1a51      	subs	r1, r2, r1
 8003be2:	6139      	str	r1, [r7, #16]
 8003be4:	4629      	mov	r1, r5
 8003be6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	018b      	lsls	r3, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c02:	4651      	mov	r1, sl
 8003c04:	018a      	lsls	r2, r1, #6
 8003c06:	4651      	mov	r1, sl
 8003c08:	ebb2 0801 	subs.w	r8, r2, r1
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	eb18 0303 	adds.w	r3, r8, r3
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	462b      	mov	r3, r5
 8003c34:	eb49 0303 	adc.w	r3, r9, r3
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c46:	4629      	mov	r1, r5
 8003c48:	024b      	lsls	r3, r1, #9
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c50:	4621      	mov	r1, r4
 8003c52:	024a      	lsls	r2, r1, #9
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c64:	f7fc fb14 	bl	8000290 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	e058      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	0159      	lsls	r1, r3, #5
 8003c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9e:	0150      	lsls	r0, r2, #5
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003caa:	4649      	mov	r1, r9
 8003cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	00eb      	lsls	r3, r5, #3
 8003cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cda:	00e2      	lsls	r2, r4, #3
 8003cdc:	4614      	mov	r4, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	18e3      	adds	r3, r4, r3
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	eb45 0303 	adc.w	r3, r5, r3
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	61fa      	str	r2, [r7, #28]
 8003d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d18:	f7fc faba 	bl	8000290 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3750      	adds	r7, #80	; 0x50
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000012c 	.word	0x2000012c

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08014df4 	.word	0x08014df4

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08014df4 	.word	0x08014df4

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d075      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dfc:	4b91      	ldr	r3, [pc, #580]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e02:	f7fd ffb3 	bl	8001d6c <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e0a:	f7fd ffaf 	bl	8001d6c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e189      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e1c:	4b8a      	ldr	r3, [pc, #552]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	019a      	lsls	r2, r3, #6
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	4981      	ldr	r1, [pc, #516]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01f      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e54:	4b7c      	ldr	r3, [pc, #496]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	0f1b      	lsrs	r3, r3, #28
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	019a      	lsls	r2, r3, #6
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	071b      	lsls	r3, r3, #28
 8003e74:	4974      	ldr	r1, [pc, #464]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e7c:	4b72      	ldr	r3, [pc, #456]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e82:	f023 021f 	bic.w	r2, r3, #31
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	496e      	ldr	r1, [pc, #440]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	019a      	lsls	r2, r3, #6
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	071b      	lsls	r3, r3, #28
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec2:	f7fd ff53 	bl	8001d6c <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eca:	f7fd ff4f 	bl	8001d6c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e129      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003edc:	4b5a      	ldr	r3, [pc, #360]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d079      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f00:	4b52      	ldr	r3, [pc, #328]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f06:	f7fd ff31 	bl	8001d6c <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f0e:	f7fd ff2d 	bl	8001d6c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e107      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f20:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2c:	d0ef      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d020      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f3a:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	0f1b      	lsrs	r3, r3, #28
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	019a      	lsls	r2, r3, #6
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	431a      	orrs	r2, r3
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	493b      	ldr	r1, [pc, #236]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f62:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f88:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	0e1b      	lsrs	r3, r3, #24
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	019a      	lsls	r2, r3, #6
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	071b      	lsls	r3, r3, #28
 8003fa8:	4927      	ldr	r1, [pc, #156]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	4922      	ldr	r1, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fece 	bl	8001d6c <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fd4:	f7fd feca 	bl	8001d6c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0a4      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff2:	d1ef      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 808b 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800402a:	f7fd fe9f 	bl	8001d6c <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004030:	e010      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fd fe9b 	bl	8001d6c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d909      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e075      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004044:	42470068 	.word	0x42470068
 8004048:	40023800 	.word	0x40023800
 800404c:	42470070 	.word	0x42470070
 8004050:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0e8      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004060:	4b36      	ldr	r3, [pc, #216]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004068:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d028      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004086:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004088:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004094:	4a29      	ldr	r2, [pc, #164]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d114      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd fe61 	bl	8001d6c <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd fe5d 	bl	8001d6c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e035      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040dc:	d10d      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	4912      	ldr	r1, [pc, #72]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
 80040f8:	e005      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a0f      	ldr	r2, [pc, #60]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004100:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004104:	6093      	str	r3, [r2, #8]
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004114:	4313      	orrs	r3, r2
 8004116:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800412c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40007000 	.word	0x40007000
 800413c:	40023800 	.word	0x40023800
 8004140:	42470e40 	.word	0x42470e40
 8004144:	424711e0 	.word	0x424711e0

08004148 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e066      	b.n	800422c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7f5b      	ldrb	r3, [r3, #29]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd f8ec 	bl	800134c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	22ca      	movs	r2, #202	; 0xca
 8004180:	625a      	str	r2, [r3, #36]	; 0x24
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2253      	movs	r2, #83	; 0x53
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f998 	bl	80044c0 <RTC_EnterInitMode>
 8004190:	4603      	mov	r3, r0
 8004192:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d12c      	bne.n	80041f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68d2      	ldr	r2, [r2, #12]
 80041d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6919      	ldr	r1, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f99f 	bl	800452e <RTC_ExitInitMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	22ff      	movs	r2, #255	; 0xff
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	7f1b      	ldrb	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_RTC_SetTime+0x1c>
 800424c:	2302      	movs	r3, #2
 800424e:	e087      	b.n	8004360 <HAL_RTC_SetTime+0x12c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d126      	bne.n	80042b0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f97c 	bl	8004578 <RTC_ByteToBcd2>
 8004280:	4603      	mov	r3, r0
 8004282:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f975 	bl	8004578 <RTC_ByteToBcd2>
 800428e:	4603      	mov	r3, r0
 8004290:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004292:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f96d 	bl	8004578 <RTC_ByteToBcd2>
 800429e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80042a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	78db      	ldrb	r3, [r3, #3]
 80042a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e018      	b.n	80042e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	78db      	ldrb	r3, [r3, #3]
 80042dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	22ca      	movs	r2, #202	; 0xca
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2253      	movs	r2, #83	; 0x53
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8e4 	bl	80044c0 <RTC_EnterInitMode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d120      	bne.n	8004344 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800430c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004310:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004320:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6899      	ldr	r1, [r3, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8f7 	bl	800452e <RTC_ExitInitMode>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d102      	bne.n	8004350 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	771a      	strb	r2, [r3, #28]

  return status;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}

08004368 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	7f1b      	ldrb	r3, [r3, #28]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_RTC_SetDate+0x1c>
 8004380:	2302      	movs	r3, #2
 8004382:	e071      	b.n	8004468 <HAL_RTC_SetDate+0x100>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2202      	movs	r2, #2
 800438e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10e      	bne.n	80043b4 <HAL_RTC_SetDate+0x4c>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	f023 0310 	bic.w	r3, r3, #16
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	330a      	adds	r3, #10
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11c      	bne.n	80043f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8da 	bl	8004578 <RTC_ByteToBcd2>
 80043c4:	4603      	mov	r3, r0
 80043c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f8d3 	bl	8004578 <RTC_ByteToBcd2>
 80043d2:	4603      	mov	r3, r0
 80043d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	789b      	ldrb	r3, [r3, #2]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f8cb 	bl	8004578 <RTC_ByteToBcd2>
 80043e2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043e4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e00e      	b.n	8004412 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004400:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004406:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	22ca      	movs	r2, #202	; 0xca
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2253      	movs	r2, #83	; 0x53
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f84c 	bl	80044c0 <RTC_EnterInitMode>
 8004428:	4603      	mov	r3, r0
 800442a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800443c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004440:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f873 	bl	800452e <RTC_ExitInitMode>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	771a      	strb	r2, [r3, #28]

  return status;
 8004466:	7cfb      	ldrb	r3, [r7, #19]
}
 8004468:	4618      	mov	r0, r3
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd90      	pop	{r4, r7, pc}

08004470 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800448a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448c:	f7fd fc6e 	bl	8001d6c <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004492:	e009      	b.n	80044a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004494:	f7fd fc6a 	bl	8001d6c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a2:	d901      	bls.n	80044a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e007      	b.n	80044b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ee      	beq.n	8004494 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d122      	bne.n	8004524 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ee:	f7fd fc3d 	bl	8001d6c <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044f4:	e00c      	b.n	8004510 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f6:	f7fd fc39 	bl	8001d6c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004504:	d904      	bls.n	8004510 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2204      	movs	r2, #4
 800450a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <RTC_EnterInitMode+0x64>
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d1e8      	bne.n	80044f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004548:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff89 	bl	8004470 <HAL_RTC_WaitForSynchro>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004586:	e005      	b.n	8004594 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3301      	adds	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	3b0a      	subs	r3, #10
 8004592:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b09      	cmp	r3, #9
 8004598:	d8f6      	bhi.n	8004588 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	b2db      	uxtb	r3, r3
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e041      	b.n	8004648 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc ff57 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f000 ffd3 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04e      	b.n	8004706 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_TIM_Base_Start_IT+0xc4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d01d      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <HAL_TIM_Base_Start_IT+0xc8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <HAL_TIM_Base_Start_IT+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <HAL_TIM_Base_Start_IT+0xd4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_TIM_Base_Start_IT+0xd8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_TIM_Base_Start_IT+0xdc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d010      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	e007      	b.n	8004704 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40010400 	.word	0x40010400
 8004728:	40014000 	.word	0x40014000
 800472c:	40001800 	.word	0x40001800

08004730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e041      	b.n	80047c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fe22 	bl	80013a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 ff14 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start+0x24>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e022      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d109      	bne.n	800480e <HAL_TIM_PWM_Start+0x3e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e015      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x58>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e008      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07c      	b.n	800493c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0x82>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0x92>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2201      	movs	r2, #1
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fa9e 	bl	8005dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_TIM_PWM_Start+0x174>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_PWM_Start+0xcc>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <HAL_TIM_PWM_Start+0x178>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_PWM_Start+0xd0>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start+0xd2>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <HAL_TIM_PWM_Start+0x174>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d01d      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_TIM_PWM_Start+0x17c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_TIM_PWM_Start+0x180>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_TIM_PWM_Start+0x184>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a16      	ldr	r2, [pc, #88]	; (8004948 <HAL_TIM_PWM_Start+0x178>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_TIM_PWM_Start+0x188>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_TIM_PWM_Start+0x136>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a16      	ldr	r2, [pc, #88]	; (800495c <HAL_TIM_PWM_Start+0x18c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d111      	bne.n	800492a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d010      	beq.n	800493a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	e007      	b.n	800493a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40001800 	.word	0x40001800

08004960 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <HAL_TIM_PWM_Start_IT+0x28>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e022      	b.n	80049ce <HAL_TIM_PWM_Start_IT+0x6e>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d109      	bne.n	80049a2 <HAL_TIM_PWM_Start_IT+0x42>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	bf14      	ite	ne
 800499a:	2301      	movne	r3, #1
 800499c:	2300      	moveq	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e015      	b.n	80049ce <HAL_TIM_PWM_Start_IT+0x6e>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d109      	bne.n	80049bc <HAL_TIM_PWM_Start_IT+0x5c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e008      	b.n	80049ce <HAL_TIM_PWM_Start_IT+0x6e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0c7      	b.n	8004b66 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start_IT+0x86>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e4:	e013      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0xae>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start_IT+0x96>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f4:	e00b      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0xae>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start_IT+0xa6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	e003      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0xae>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d841      	bhi.n	8004a98 <HAL_TIM_PWM_Start_IT+0x138>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a99 	.word	0x08004a99
 8004a24:	08004a99 	.word	0x08004a99
 8004a28:	08004a99 	.word	0x08004a99
 8004a2c:	08004a63 	.word	0x08004a63
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004a99 	.word	0x08004a99
 8004a3c:	08004a75 	.word	0x08004a75
 8004a40:	08004a99 	.word	0x08004a99
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004a87 	.word	0x08004a87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0202 	orr.w	r2, r2, #2
 8004a5e:	60da      	str	r2, [r3, #12]
      break;
 8004a60:	e01d      	b.n	8004a9e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0204 	orr.w	r2, r2, #4
 8004a70:	60da      	str	r2, [r3, #12]
      break;
 8004a72:	e014      	b.n	8004a9e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0208 	orr.w	r2, r2, #8
 8004a82:	60da      	str	r2, [r3, #12]
      break;
 8004a84:	e00b      	b.n	8004a9e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0210 	orr.w	r2, r2, #16
 8004a94:	60da      	str	r2, [r3, #12]
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d15f      	bne.n	8004b64 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 f989 	bl	8005dc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2e      	ldr	r2, [pc, #184]	; (8004b70 <HAL_TIM_PWM_Start_IT+0x210>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_PWM_Start_IT+0x166>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <HAL_TIM_PWM_Start_IT+0x214>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Start_IT+0x16a>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_TIM_PWM_Start_IT+0x16c>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_TIM_PWM_Start_IT+0x210>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d01d      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HAL_TIM_PWM_Start_IT+0x218>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_TIM_PWM_Start_IT+0x220>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <HAL_TIM_PWM_Start_IT+0x214>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIM_PWM_Start_IT+0x224>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_TIM_PWM_Start_IT+0x228>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d010      	beq.n	8004b64 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	e007      	b.n	8004b64 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40001800 	.word	0x40001800

08004b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e041      	b.n	8004c22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fc1a 	bl	80013ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f000 fce6 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_IC_Start_IT+0x1e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e013      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0x46>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_IC_Start_IT+0x2e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e00b      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0x46>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_IC_Start_IT+0x3e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e003      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0x46>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_TIM_IC_Start_IT+0x58>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e013      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x80>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d104      	bne.n	8004c94 <HAL_TIM_IC_Start_IT+0x68>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e00b      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x80>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d104      	bne.n	8004ca4 <HAL_TIM_IC_Start_IT+0x78>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e003      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x80>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d102      	bne.n	8004cba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cb4:	7b7b      	ldrb	r3, [r7, #13]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0cc      	b.n	8004e58 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_IC_Start_IT+0xa2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	e013      	b.n	8004cf6 <HAL_TIM_IC_Start_IT+0xca>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_IC_Start_IT+0xb2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	e00b      	b.n	8004cf6 <HAL_TIM_IC_Start_IT+0xca>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_IC_Start_IT+0xc2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	e003      	b.n	8004cf6 <HAL_TIM_IC_Start_IT+0xca>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_IC_Start_IT+0xda>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	e013      	b.n	8004d2e <HAL_TIM_IC_Start_IT+0x102>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_IC_Start_IT+0xea>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d14:	e00b      	b.n	8004d2e <HAL_TIM_IC_Start_IT+0x102>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_IC_Start_IT+0xfa>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	e003      	b.n	8004d2e <HAL_TIM_IC_Start_IT+0x102>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b0c      	cmp	r3, #12
 8004d32:	d841      	bhi.n	8004db8 <HAL_TIM_IC_Start_IT+0x18c>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <HAL_TIM_IC_Start_IT+0x110>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004db9 	.word	0x08004db9
 8004d44:	08004db9 	.word	0x08004db9
 8004d48:	08004db9 	.word	0x08004db9
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004db9 	.word	0x08004db9
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004db9 	.word	0x08004db9
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004db9 	.word	0x08004db9
 8004d6c:	08004da7 	.word	0x08004da7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0202 	orr.w	r2, r2, #2
 8004d7e:	60da      	str	r2, [r3, #12]
      break;
 8004d80:	e01d      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0204 	orr.w	r2, r2, #4
 8004d90:	60da      	str	r2, [r3, #12]
      break;
 8004d92:	e014      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	60da      	str	r2, [r3, #12]
      break;
 8004da4:	e00b      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0210 	orr.w	r2, r2, #16
 8004db4:	60da      	str	r2, [r3, #12]
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d148      	bne.n	8004e56 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fff9 	bl	8005dc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_TIM_IC_Start_IT+0x234>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de4:	d01d      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_TIM_IC_Start_IT+0x238>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <HAL_TIM_IC_Start_IT+0x23c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_TIM_IC_Start_IT+0x240>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_TIM_IC_Start_IT+0x244>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_TIM_IC_Start_IT+0x248>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIM_IC_Start_IT+0x24c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d010      	beq.n	8004e56 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	e007      	b.n	8004e56 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40001800 	.word	0x40001800

08004e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fe8e 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fb4a 	bl	8005560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fb51 	bl	8005574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0204 	mvn.w	r2, #4
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fe64 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb20 	bl	8005560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fb27 	bl	8005574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0208 	mvn.w	r2, #8
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fe3a 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 faf6 	bl	8005560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fafd 	bl	8005574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc fe10 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 facc 	bl	8005560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fad3 	bl	8005574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0201 	mvn.w	r2, #1
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fb fc3a 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 ff78 	bl	8005f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa98 	bl	8005588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b20      	cmp	r3, #32
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0220 	mvn.w	r2, #32
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff42 	bl	8005f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e088      	b.n	80051bc <HAL_TIM_IC_ConfigChannel+0x130>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f000 fcb8 	bl	8005a3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 020c 	bic.w	r2, r2, #12
 80050da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6999      	ldr	r1, [r3, #24]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	619a      	str	r2, [r3, #24]
 80050ee:	e060      	b.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d11c      	bne.n	8005130 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f000 fd3c 	bl	8005b82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005118:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6999      	ldr	r1, [r3, #24]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	619a      	str	r2, [r3, #24]
 800512e:	e040      	b.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d11b      	bne.n	800516e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fd89 	bl	8005c5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 020c 	bic.w	r2, r2, #12
 8005158:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	61da      	str	r2, [r3, #28]
 800516c:	e021      	b.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d11c      	bne.n	80051ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f000 fda6 	bl	8005cd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005196:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69d9      	ldr	r1, [r3, #28]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	61da      	str	r2, [r3, #28]
 80051ac:	e001      	b.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0ae      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	f200 809f 	bhi.w	8005330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	08005331 	.word	0x08005331
 8005200:	08005331 	.word	0x08005331
 8005204:	08005331 	.word	0x08005331
 8005208:	0800526d 	.word	0x0800526d
 800520c:	08005331 	.word	0x08005331
 8005210:	08005331 	.word	0x08005331
 8005214:	08005331 	.word	0x08005331
 8005218:	080052af 	.word	0x080052af
 800521c:	08005331 	.word	0x08005331
 8005220:	08005331 	.word	0x08005331
 8005224:	08005331 	.word	0x08005331
 8005228:	080052ef 	.word	0x080052ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa52 	bl	80056dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	619a      	str	r2, [r3, #24]
      break;
 800526a:	e064      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 faa2 	bl	80057bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6999      	ldr	r1, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	021a      	lsls	r2, r3, #8
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	619a      	str	r2, [r3, #24]
      break;
 80052ac:	e043      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 faf7 	bl	80058a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0208 	orr.w	r2, r2, #8
 80052c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0204 	bic.w	r2, r2, #4
 80052d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	61da      	str	r2, [r3, #28]
      break;
 80052ec:	e023      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fb4b 	bl	8005990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69d9      	ldr	r1, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	021a      	lsls	r2, r3, #8
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	61da      	str	r2, [r3, #28]
      break;
 800532e:	e002      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0b4      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x186>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539c:	d03e      	beq.n	800541c <HAL_TIM_ConfigClockSource+0xd4>
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	f200 8087 	bhi.w	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	f000 8086 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x172>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d87f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d01a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xa6>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d87b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d050      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x11a>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d877      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d03c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xfa>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d873      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d058      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x13a>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d86f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d064      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d86b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d060      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d867      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d05a      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	e062      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f000 fcc1 	bl	8005d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	609a      	str	r2, [r3, #8]
      break;
 800541a:	e04f      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 fcaa 	bl	8005d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543e:	609a      	str	r2, [r3, #8]
      break;
 8005440:	e03c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fb68 	bl	8005b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2150      	movs	r1, #80	; 0x50
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fc77 	bl	8005d4e <TIM_ITRx_SetConfig>
      break;
 8005460:	e02c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	461a      	mov	r2, r3
 8005470:	f000 fbc4 	bl	8005bfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2160      	movs	r1, #96	; 0x60
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fc67 	bl	8005d4e <TIM_ITRx_SetConfig>
      break;
 8005480:	e01c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	461a      	mov	r2, r3
 8005490:	f000 fb48 	bl	8005b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2140      	movs	r1, #64	; 0x40
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fc57 	bl	8005d4e <TIM_ITRx_SetConfig>
      break;
 80054a0:	e00c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 fc4e 	bl	8005d4e <TIM_ITRx_SetConfig>
      break;
 80054b2:	e003      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e000      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d831      	bhi.n	8005550 <HAL_TIM_ReadCapturedValue+0x78>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005529 	.word	0x08005529
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005551 	.word	0x08005551
 8005500:	08005551 	.word	0x08005551
 8005504:	08005533 	.word	0x08005533
 8005508:	08005551 	.word	0x08005551
 800550c:	08005551 	.word	0x08005551
 8005510:	08005551 	.word	0x08005551
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005551 	.word	0x08005551
 800551c:	08005551 	.word	0x08005551
 8005520:	08005551 	.word	0x08005551
 8005524:	08005547 	.word	0x08005547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	60fb      	str	r3, [r7, #12]

      break;
 8005530:	e00f      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	60fb      	str	r3, [r7, #12]

      break;
 800553a:	e00a      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	60fb      	str	r3, [r7, #12]

      break;
 8005544:	e005      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	60fb      	str	r3, [r7, #12]

      break;
 800554e:	e000      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005550:	bf00      	nop
  }

  return tmpreg;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a40      	ldr	r2, [pc, #256]	; (80056b0 <TIM_Base_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ba:	d00f      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3d      	ldr	r2, [pc, #244]	; (80056b4 <TIM_Base_SetConfig+0x118>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00b      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a3c      	ldr	r2, [pc, #240]	; (80056b8 <TIM_Base_SetConfig+0x11c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3b      	ldr	r2, [pc, #236]	; (80056bc <TIM_Base_SetConfig+0x120>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3a      	ldr	r2, [pc, #232]	; (80056c0 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <TIM_Base_SetConfig+0x114>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d027      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <TIM_Base_SetConfig+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d023      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2b      	ldr	r2, [pc, #172]	; (80056b8 <TIM_Base_SetConfig+0x11c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <TIM_Base_SetConfig+0x120>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a29      	ldr	r2, [pc, #164]	; (80056c0 <TIM_Base_SetConfig+0x124>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d017      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <TIM_Base_SetConfig+0x128>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a27      	ldr	r2, [pc, #156]	; (80056c8 <TIM_Base_SetConfig+0x12c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a26      	ldr	r2, [pc, #152]	; (80056cc <TIM_Base_SetConfig+0x130>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <TIM_Base_SetConfig+0x134>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <TIM_Base_SetConfig+0x138>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a23      	ldr	r2, [pc, #140]	; (80056d8 <TIM_Base_SetConfig+0x13c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <TIM_Base_SetConfig+0x124>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d103      	bne.n	800569c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	615a      	str	r2, [r3, #20]
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800
 80056d0:	40001800 	.word	0x40001800
 80056d4:	40001c00 	.word	0x40001c00
 80056d8:	40002000 	.word	0x40002000

080056dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0302 	bic.w	r3, r3, #2
 8005724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <TIM_OC1_SetConfig+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC1_SetConfig+0x64>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <TIM_OC1_SetConfig+0xdc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10c      	bne.n	800575a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0308 	bic.w	r3, r3, #8
 8005746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <TIM_OC1_SetConfig+0xd8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_OC1_SetConfig+0x8e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a14      	ldr	r2, [pc, #80]	; (80057b8 <TIM_OC1_SetConfig+0xdc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d111      	bne.n	800578e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0210 	bic.w	r2, r3, #16
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0320 	bic.w	r3, r3, #32
 8005806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <TIM_OC2_SetConfig+0xe4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC2_SetConfig+0x68>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <TIM_OC2_SetConfig+0xe8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d10d      	bne.n	8005840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC2_SetConfig+0xe4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC2_SetConfig+0x94>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC2_SetConfig+0xe8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d113      	bne.n	8005878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400

080058a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_OC3_SetConfig+0xe0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC3_SetConfig+0x66>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_OC3_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10d      	bne.n	800592a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC3_SetConfig+0xe0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC3_SetConfig+0x92>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <TIM_OC3_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d113      	bne.n	8005962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <TIM_OC4_SetConfig+0xa4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC4_SetConfig+0x68>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <TIM_OC4_SetConfig+0xa8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400

08005a3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a28      	ldr	r2, [pc, #160]	; (8005b08 <TIM_TI1_SetConfig+0xcc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d017      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <TIM_TI1_SetConfig+0xd0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <TIM_TI1_SetConfig+0xd4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <TIM_TI1_SetConfig+0xd8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <TIM_TI1_SetConfig+0xdc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <TIM_TI1_SetConfig+0xe0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x66>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <TIM_TI1_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <TIM_TI1_SetConfig+0x6a>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <TIM_TI1_SetConfig+0x6c>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e003      	b.n	8005ac6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 030a 	bic.w	r3, r3, #10
 8005ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 030a 	and.w	r3, r3, #10
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40010400 	.word	0x40010400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40001800 	.word	0x40001800

08005b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 030a 	bic.w	r3, r3, #10
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b087      	sub	sp, #28
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 0210 	bic.w	r2, r3, #16
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	bf00      	nop
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f023 0210 	bic.w	r2, r3, #16
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	031b      	lsls	r3, r3, #12
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 0303 	bic.w	r3, r3, #3
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	031b      	lsls	r3, r3, #12
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	031b      	lsls	r3, r3, #12
 8005d2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f043 0307 	orr.w	r3, r3, #7
 8005d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	021a      	lsls	r2, r3, #8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1a      	ldr	r2, [r3, #32]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1a      	ldr	r2, [r3, #32]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e05a      	b.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d01d      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a18      	ldr	r2, [pc, #96]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10c      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40010400 	.word	0x40010400
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40001800 	.word	0x40001800

08005f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e03f      	b.n	8005fc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fb fb78 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fddf 	bl	8006b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b08a      	sub	sp, #40	; 0x28
 8005fce:	af02      	add	r7, sp, #8
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d17c      	bne.n	80060e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_UART_Transmit+0x2c>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e075      	b.n	80060e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_UART_Transmit+0x3e>
 8006004:	2302      	movs	r3, #2
 8006006:	e06e      	b.n	80060e6 <HAL_UART_Transmit+0x11c>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2221      	movs	r2, #33	; 0x21
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800601e:	f7fb fea5 	bl	8001d6c <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	88fa      	ldrh	r2, [r7, #6]
 800602e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d108      	bne.n	800604c <HAL_UART_Transmit+0x82>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e003      	b.n	8006054 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800605c:	e02a      	b.n	80060b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fb1f 	bl	80066ac <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e036      	b.n	80060e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800608c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	3302      	adds	r3, #2
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	e007      	b.n	80060a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1cf      	bne.n	800605e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2140      	movs	r1, #64	; 0x40
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 faef 	bl	80066ac <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	4613      	mov	r3, r2
 80060fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b20      	cmp	r3, #32
 8006106:	d11d      	bne.n	8006144 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Receive_IT+0x26>
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e016      	b.n	8006146 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UART_Receive_IT+0x38>
 8006122:	2302      	movs	r3, #2
 8006124:	e00f      	b.n	8006146 <HAL_UART_Receive_IT+0x58>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	461a      	mov	r2, r3
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fb24 	bl	8006788 <UART_Start_Receive_IT>
 8006140:	4603      	mov	r3, r0
 8006142:	e000      	b.n	8006146 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006144:	2302      	movs	r3, #2
  }
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0ba      	sub	sp, #232	; 0xe8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fc07 	bl	80069c2 <UART_Receive_IT>
      return;
 80061b4:	e256      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80de 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
 80061c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80d1 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0204 	orr.w	r2, r3, #4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
 8006252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800625e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f043 0208 	orr.w	r2, r3, #8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 81ed 	beq.w	800665a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb92 	bl	80069c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_UART_IRQHandler+0x17a>
 80062c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa9a 	bl	8006804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d141      	bne.n	8006362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800630a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800630e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1d9      	bne.n	80062de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	4a7d      	ldr	r2, [pc, #500]	; (800652c <HAL_UART_IRQHandler+0x3dc>)
 8006338:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb fec5 	bl	80020ce <HAL_DMA_Abort_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e00e      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f990 	bl	8006680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00a      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f98c 	bl	8006680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e006      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f988 	bl	8006680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006376:	e170      	b.n	800665a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	bf00      	nop
    return;
 800637a:	e16e      	b.n	800665a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	f040 814a 	bne.w	800661a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8143 	beq.w	800661a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 813c 	beq.w	800661a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	f040 80b4 	bne.w	8006530 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8140 	beq.w	800665e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f080 8139 	bcs.w	800665e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	f000 8088 	beq.w	8006512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800641c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800643a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1d9      	bne.n	8006402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800645e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800647a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e1      	bne.n	800644e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800649a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e3      	bne.n	800648a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80064f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e3      	bne.n	80064d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	4618      	mov	r0, r3
 800650e:	f7fb fd6e 	bl	8001fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651a:	b29b      	uxth	r3, r3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	b29b      	uxth	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8b6 	bl	8006694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006528:	e099      	b.n	800665e <HAL_UART_IRQHandler+0x50e>
 800652a:	bf00      	nop
 800652c:	080068cb 	.word	0x080068cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006538:	b29b      	uxth	r3, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 808b 	beq.w	8006662 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800654c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8086 	beq.w	8006662 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800656c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800657a:	647a      	str	r2, [r7, #68]	; 0x44
 800657c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	623b      	str	r3, [r7, #32]
   return(result);
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065b2:	633a      	str	r2, [r7, #48]	; 0x30
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	69b9      	ldr	r1, [r7, #24]
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	617b      	str	r3, [r7, #20]
   return(result);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e3      	bne.n	80065d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800660c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f83e 	bl	8006694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006618:	e023      	b.n	8006662 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_UART_IRQHandler+0x4ea>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f95d 	bl	80068f2 <UART_Transmit_IT>
    return;
 8006638:	e014      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <HAL_UART_IRQHandler+0x514>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f99d 	bl	8006992 <UART_EndTransmit_IT>
    return;
 8006658:	e004      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
    return;
 800665a:	bf00      	nop
 800665c:	e002      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
      return;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
      return;
 8006662:	bf00      	nop
  }
}
 8006664:	37e8      	adds	r7, #232	; 0xe8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b090      	sub	sp, #64	; 0x40
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066bc:	e050      	b.n	8006760 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d04c      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <UART_WaitOnFlagUntilTimeout+0x30>
 80066cc:	f7fb fb4e 	bl	8001d6c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d8:	429a      	cmp	r2, r3
 80066da:	d241      	bcs.n	8006760 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066fc:	637a      	str	r2, [r7, #52]	; 0x34
 80066fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3314      	adds	r3, #20
 8006716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	613b      	str	r3, [r7, #16]
   return(result);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006730:	623a      	str	r2, [r7, #32]
 8006732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	61bb      	str	r3, [r7, #24]
   return(result);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e00f      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	429a      	cmp	r2, r3
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	429a      	cmp	r2, r3
 800677c:	d09f      	beq.n	80066be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3740      	adds	r7, #64	; 0x40
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2222      	movs	r2, #34	; 0x22
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0220 	orr.w	r2, r2, #32
 80067f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b095      	sub	sp, #84	; 0x54
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800682c:	643a      	str	r2, [r7, #64]	; 0x40
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	d119      	bne.n	80068b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	60bb      	str	r3, [r7, #8]
   return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	647b      	str	r3, [r7, #68]	; 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689c:	61ba      	str	r2, [r7, #24]
 800689e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e5      	bne.n	800687c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068be:	bf00      	nop
 80068c0:	3754      	adds	r7, #84	; 0x54
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fecb 	bl	8006680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b21      	cmp	r3, #33	; 0x21
 8006904:	d13e      	bne.n	8006984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d114      	bne.n	800693a <UART_Transmit_IT+0x48>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d110      	bne.n	800693a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e008      	b.n	800694c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6211      	str	r1, [r2, #32]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4619      	mov	r1, r3
 800695a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10f      	bne.n	8006980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800696e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff fe5a 	bl	800666c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b08c      	sub	sp, #48	; 0x30
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b22      	cmp	r3, #34	; 0x22
 80069d4:	f040 80ab 	bne.w	8006b2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e0:	d117      	bne.n	8006a12 <UART_Receive_IT+0x50>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d113      	bne.n	8006a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a10:	e026      	b.n	8006a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d007      	beq.n	8006a36 <UART_Receive_IT+0x74>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <UART_Receive_IT+0x82>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e008      	b.n	8006a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d15a      	bne.n	8006b2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0220 	bic.w	r2, r2, #32
 8006a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d135      	bne.n	8006b20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	623a      	str	r2, [r7, #32]
 8006adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	69f9      	ldr	r1, [r7, #28]
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d10a      	bne.n	8006b12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fdbb 	bl	8006694 <HAL_UARTEx_RxEventCallback>
 8006b1e:	e002      	b.n	8006b26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fa ffdb 	bl	8001adc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e002      	b.n	8006b30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b3c:	b0c0      	sub	sp, #256	; 0x100
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	68d9      	ldr	r1, [r3, #12]
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	ea40 0301 	orr.w	r3, r0, r1
 8006b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b90:	f021 010c 	bic.w	r1, r1, #12
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	6999      	ldr	r1, [r3, #24]
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	ea40 0301 	orr.w	r3, r0, r1
 8006bbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b8f      	ldr	r3, [pc, #572]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d005      	beq.n	8006bd8 <UART_SetConfig+0xa0>
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b8d      	ldr	r3, [pc, #564]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d104      	bne.n	8006be2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd8:	f7fd f8e2 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8006bdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006be0:	e003      	b.n	8006bea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fd f8c9 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006be6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	f040 810c 	bne.w	8006e10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	1891      	adds	r1, r2, r2
 8006c10:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c12:	415b      	adcs	r3, r3
 8006c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	eb12 0801 	adds.w	r8, r2, r1
 8006c20:	4629      	mov	r1, r5
 8006c22:	eb43 0901 	adc.w	r9, r3, r1
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	4699      	mov	r9, r3
 8006c3e:	4623      	mov	r3, r4
 8006c40:	eb18 0303 	adds.w	r3, r8, r3
 8006c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c48:	462b      	mov	r3, r5
 8006c4a:	eb49 0303 	adc.w	r3, r9, r3
 8006c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c66:	460b      	mov	r3, r1
 8006c68:	18db      	adds	r3, r3, r3
 8006c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	eb42 0303 	adc.w	r3, r2, r3
 8006c72:	657b      	str	r3, [r7, #84]	; 0x54
 8006c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c7c:	f7f9 fb08 	bl	8000290 <__aeabi_uldivmod>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4b61      	ldr	r3, [pc, #388]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006c86:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	011c      	lsls	r4, r3, #4
 8006c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	1891      	adds	r1, r2, r2
 8006ca6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ca8:	415b      	adcs	r3, r3
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	eb12 0a01 	adds.w	sl, r2, r1
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	eb43 0b01 	adc.w	fp, r3, r1
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd0:	4692      	mov	sl, r2
 8006cd2:	469b      	mov	fp, r3
 8006cd4:	4643      	mov	r3, r8
 8006cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8006cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cde:	464b      	mov	r3, r9
 8006ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	18db      	adds	r3, r3, r3
 8006d00:	643b      	str	r3, [r7, #64]	; 0x40
 8006d02:	4613      	mov	r3, r2
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d12:	f7f9 fabd 	bl	8000290 <__aeabi_uldivmod>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	2264      	movs	r2, #100	; 0x64
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	1acb      	subs	r3, r1, r3
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d32:	4b36      	ldr	r3, [pc, #216]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006d34:	fba3 2302 	umull	r2, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d40:	441c      	add	r4, r3
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d64:	4641      	mov	r1, r8
 8006d66:	1851      	adds	r1, r2, r1
 8006d68:	6339      	str	r1, [r7, #48]	; 0x30
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	414b      	adcs	r3, r1
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	00cb      	lsls	r3, r1, #3
 8006d80:	4651      	mov	r1, sl
 8006d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d86:	4651      	mov	r1, sl
 8006d88:	00ca      	lsls	r2, r1, #3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4642      	mov	r2, r8
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d98:	464b      	mov	r3, r9
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006db0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006db8:	460b      	mov	r3, r1
 8006dba:	18db      	adds	r3, r3, r3
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	eb42 0303 	adc.w	r3, r2, r3
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dce:	f7f9 fa5f 	bl	8000290 <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	2164      	movs	r1, #100	; 0x64
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3332      	adds	r3, #50	; 0x32
 8006dea:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f003 0207 	and.w	r2, r3, #7
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4422      	add	r2, r4
 8006dfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e00:	e106      	b.n	8007010 <UART_SetConfig+0x4d8>
 8006e02:	bf00      	nop
 8006e04:	40011000 	.word	0x40011000
 8006e08:	40011400 	.word	0x40011400
 8006e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e22:	4642      	mov	r2, r8
 8006e24:	464b      	mov	r3, r9
 8006e26:	1891      	adds	r1, r2, r2
 8006e28:	6239      	str	r1, [r7, #32]
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e32:	4641      	mov	r1, r8
 8006e34:	1854      	adds	r4, r2, r1
 8006e36:	4649      	mov	r1, r9
 8006e38:	eb43 0501 	adc.w	r5, r3, r1
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	00eb      	lsls	r3, r5, #3
 8006e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e4a:	00e2      	lsls	r2, r4, #3
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	4643      	mov	r3, r8
 8006e52:	18e3      	adds	r3, r4, r3
 8006e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e58:	464b      	mov	r3, r9
 8006e5a:	eb45 0303 	adc.w	r3, r5, r3
 8006e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e7e:	4629      	mov	r1, r5
 8006e80:	008b      	lsls	r3, r1, #2
 8006e82:	4621      	mov	r1, r4
 8006e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e88:	4621      	mov	r1, r4
 8006e8a:	008a      	lsls	r2, r1, #2
 8006e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e90:	f7f9 f9fe 	bl	8000290 <__aeabi_uldivmod>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4b60      	ldr	r3, [pc, #384]	; (800701c <UART_SetConfig+0x4e4>)
 8006e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	011c      	lsls	r4, r3, #4
 8006ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006eac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	1891      	adds	r1, r2, r2
 8006eba:	61b9      	str	r1, [r7, #24]
 8006ebc:	415b      	adcs	r3, r3
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	1851      	adds	r1, r2, r1
 8006ec8:	6139      	str	r1, [r7, #16]
 8006eca:	4649      	mov	r1, r9
 8006ecc:	414b      	adcs	r3, r1
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006edc:	4659      	mov	r1, fp
 8006ede:	00cb      	lsls	r3, r1, #3
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	00ca      	lsls	r2, r1, #3
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ef8:	464b      	mov	r3, r9
 8006efa:	460a      	mov	r2, r1
 8006efc:	eb42 0303 	adc.w	r3, r2, r3
 8006f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	008b      	lsls	r3, r1, #2
 8006f20:	4641      	mov	r1, r8
 8006f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f26:	4641      	mov	r1, r8
 8006f28:	008a      	lsls	r2, r1, #2
 8006f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f2e:	f7f9 f9af 	bl	8000290 <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	4b38      	ldr	r3, [pc, #224]	; (800701c <UART_SetConfig+0x4e4>)
 8006f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2264      	movs	r2, #100	; 0x64
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	1acb      	subs	r3, r1, r3
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	3332      	adds	r3, #50	; 0x32
 8006f4c:	4a33      	ldr	r2, [pc, #204]	; (800701c <UART_SetConfig+0x4e4>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f58:	441c      	add	r4, r3
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5e:	2200      	movs	r2, #0
 8006f60:	673b      	str	r3, [r7, #112]	; 0x70
 8006f62:	677a      	str	r2, [r7, #116]	; 0x74
 8006f64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	1891      	adds	r1, r2, r2
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	415b      	adcs	r3, r3
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f78:	4641      	mov	r1, r8
 8006f7a:	1851      	adds	r1, r2, r1
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	4649      	mov	r1, r9
 8006f80:	414b      	adcs	r3, r1
 8006f82:	607b      	str	r3, [r7, #4]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f90:	4659      	mov	r1, fp
 8006f92:	00cb      	lsls	r3, r1, #3
 8006f94:	4651      	mov	r1, sl
 8006f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	00ca      	lsls	r2, r1, #3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006faa:	464b      	mov	r3, r9
 8006fac:	460a      	mov	r2, r1
 8006fae:	eb42 0303 	adc.w	r3, r2, r3
 8006fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fbe:	667a      	str	r2, [r7, #100]	; 0x64
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fcc:	4649      	mov	r1, r9
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	008a      	lsls	r2, r1, #2
 8006fda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fde:	f7f9 f957 	bl	8000290 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <UART_SetConfig+0x4e4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <UART_SetConfig+0x4e4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 020f 	and.w	r2, r3, #15
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4422      	add	r2, r4
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	bf00      	nop
 8007012:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007016:	46bd      	mov	sp, r7
 8007018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800701c:	51eb851f 	.word	0x51eb851f

08007020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007020:	b084      	sub	sp, #16
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	f107 001c 	add.w	r0, r7, #28
 800702e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d122      	bne.n	800707e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	2b01      	cmp	r3, #1
 8007064:	d105      	bne.n	8007072 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 faa2 	bl	80075bc <USB_CoreReset>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e01a      	b.n	80070b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa96 	bl	80075bc <USB_CoreReset>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
 80070a6:	e005      	b.n	80070b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d10b      	bne.n	80070d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f043 0206 	orr.w	r2, r3, #6
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f043 0220 	orr.w	r2, r3, #32
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070de:	b004      	add	sp, #16
 80070e0:	4770      	bx	lr

080070e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 0201 	bic.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d115      	bne.n	8007152 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007132:	2001      	movs	r0, #1
 8007134:	f7fa fe26 	bl	8001d84 <HAL_Delay>
      ms++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa2e 	bl	80075a0 <USB_GetMode>
 8007144:	4603      	mov	r3, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	d01e      	beq.n	8007188 <USB_SetCurrentMode+0x84>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b31      	cmp	r3, #49	; 0x31
 800714e:	d9f0      	bls.n	8007132 <USB_SetCurrentMode+0x2e>
 8007150:	e01a      	b.n	8007188 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d115      	bne.n	8007184 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007164:	2001      	movs	r0, #1
 8007166:	f7fa fe0d 	bl	8001d84 <HAL_Delay>
      ms++;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa15 	bl	80075a0 <USB_GetMode>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USB_SetCurrentMode+0x84>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b31      	cmp	r3, #49	; 0x31
 8007180:	d9f0      	bls.n	8007164 <USB_SetCurrentMode+0x60>
 8007182:	e001      	b.n	8007188 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e005      	b.n	8007194 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b32      	cmp	r3, #50	; 0x32
 800718c:	d101      	bne.n	8007192 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800719c:	b084      	sub	sp, #16
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	e009      	b.n	80071d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3340      	adds	r3, #64	; 0x40
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	3301      	adds	r3, #1
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b0e      	cmp	r3, #14
 80071d4:	d9f2      	bls.n	80071bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11c      	bne.n	8007216 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ea:	f043 0302 	orr.w	r3, r3, #2
 80071ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
 8007214:	e00b      	b.n	800722e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007234:	461a      	mov	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007240:	4619      	mov	r1, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	461a      	mov	r2, r3
 800724a:	680b      	ldr	r3, [r1, #0]
 800724c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	2b01      	cmp	r3, #1
 8007252:	d10c      	bne.n	800726e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800725a:	2100      	movs	r1, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f965 	bl	800752c <USB_SetDevSpeed>
 8007262:	e008      	b.n	8007276 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007264:	2101      	movs	r1, #1
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f960 	bl	800752c <USB_SetDevSpeed>
 800726c:	e003      	b.n	8007276 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800726e:	2103      	movs	r1, #3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f95b 	bl	800752c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007276:	2110      	movs	r1, #16
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8f3 	bl	8007464 <USB_FlushTxFifo>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f91f 	bl	80074cc <USB_FlushRxFifo>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	461a      	mov	r2, r3
 80072a0:	2300      	movs	r3, #0
 80072a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	461a      	mov	r2, r3
 80072ac:	2300      	movs	r3, #0
 80072ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	461a      	mov	r2, r3
 80072b8:	2300      	movs	r3, #0
 80072ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	e043      	b.n	800734a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d8:	d118      	bne.n	800730c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	461a      	mov	r2, r3
 80072ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e013      	b.n	800731e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	461a      	mov	r2, r3
 8007304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e008      	b.n	800731e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	461a      	mov	r2, r3
 800731a:	2300      	movs	r3, #0
 800731c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	461a      	mov	r2, r3
 800732c:	2300      	movs	r3, #0
 800732e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	461a      	mov	r2, r3
 800733e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3301      	adds	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	429a      	cmp	r2, r3
 8007350:	d3b7      	bcc.n	80072c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	e043      	b.n	80073e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800736a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800736e:	d118      	bne.n	80073a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	e013      	b.n	80073b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	461a      	mov	r2, r3
 800739a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e008      	b.n	80073b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	461a      	mov	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	461a      	mov	r2, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	461a      	mov	r2, r3
 80073d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	3301      	adds	r3, #1
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3b7      	bcc.n	8007358 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f043 0210 	orr.w	r2, r3, #16
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <USB_DevInit+0x2c4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f043 0208 	orr.w	r2, r3, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007448:	f043 0304 	orr.w	r3, r3, #4
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800745c:	b004      	add	sp, #16
 800745e:	4770      	bx	lr
 8007460:	803c3800 	.word	0x803c3800

08007464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <USB_FlushTxFifo+0x64>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e01b      	b.n	80074bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	daf2      	bge.n	8007472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	019b      	lsls	r3, r3, #6
 8007494:	f043 0220 	orr.w	r2, r3, #32
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <USB_FlushTxFifo+0x64>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e006      	b.n	80074bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d0f0      	beq.n	800749c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	00030d40 	.word	0x00030d40

080074cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a11      	ldr	r2, [pc, #68]	; (8007528 <USB_FlushRxFifo+0x5c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e018      	b.n	800751c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	daf2      	bge.n	80074d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2210      	movs	r2, #16
 80074fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a08      	ldr	r2, [pc, #32]	; (8007528 <USB_FlushRxFifo+0x5c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e006      	b.n	800751c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b10      	cmp	r3, #16
 8007518:	d0f0      	beq.n	80074fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	00030d40 	.word	0x00030d40

0800752c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754c:	4313      	orrs	r3, r2
 800754e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007578:	f023 0303 	bic.w	r3, r3, #3
 800757c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f003 0301 	and.w	r3, r3, #1
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <USB_CoreReset+0x64>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e01b      	b.n	8007612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	daf2      	bge.n	80075c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a09      	ldr	r2, [pc, #36]	; (8007620 <USB_CoreReset+0x64>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d901      	bls.n	8007604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e006      	b.n	8007612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b01      	cmp	r3, #1
 800760e:	d0f0      	beq.n	80075f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	00030d40 	.word	0x00030d40

08007624 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800762a:	4b87      	ldr	r3, [pc, #540]	; (8007848 <MX_LWIP_Init+0x224>)
 800762c:	220a      	movs	r2, #10
 800762e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8007630:	4b85      	ldr	r3, [pc, #532]	; (8007848 <MX_LWIP_Init+0x224>)
 8007632:	220a      	movs	r2, #10
 8007634:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 15;
 8007636:	4b84      	ldr	r3, [pc, #528]	; (8007848 <MX_LWIP_Init+0x224>)
 8007638:	220f      	movs	r2, #15
 800763a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 81;
 800763c:	4b82      	ldr	r3, [pc, #520]	; (8007848 <MX_LWIP_Init+0x224>)
 800763e:	2251      	movs	r2, #81	; 0x51
 8007640:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007642:	4b82      	ldr	r3, [pc, #520]	; (800784c <MX_LWIP_Init+0x228>)
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007648:	4b80      	ldr	r3, [pc, #512]	; (800784c <MX_LWIP_Init+0x228>)
 800764a:	22ff      	movs	r2, #255	; 0xff
 800764c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800764e:	4b7f      	ldr	r3, [pc, #508]	; (800784c <MX_LWIP_Init+0x228>)
 8007650:	22ff      	movs	r2, #255	; 0xff
 8007652:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007654:	4b7d      	ldr	r3, [pc, #500]	; (800784c <MX_LWIP_Init+0x228>)
 8007656:	2200      	movs	r2, #0
 8007658:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800765a:	4b7d      	ldr	r3, [pc, #500]	; (8007850 <MX_LWIP_Init+0x22c>)
 800765c:	220a      	movs	r2, #10
 800765e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8007660:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <MX_LWIP_Init+0x22c>)
 8007662:	220a      	movs	r2, #10
 8007664:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8007666:	4b7a      	ldr	r3, [pc, #488]	; (8007850 <MX_LWIP_Init+0x22c>)
 8007668:	220a      	movs	r2, #10
 800766a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 800766c:	4b78      	ldr	r3, [pc, #480]	; (8007850 <MX_LWIP_Init+0x22c>)
 800766e:	22fe      	movs	r2, #254	; 0xfe
 8007670:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007672:	f000 fa82 	bl	8007b7a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007676:	4b74      	ldr	r3, [pc, #464]	; (8007848 <MX_LWIP_Init+0x224>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	061a      	lsls	r2, r3, #24
 800767c:	4b72      	ldr	r3, [pc, #456]	; (8007848 <MX_LWIP_Init+0x224>)
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	041b      	lsls	r3, r3, #16
 8007682:	431a      	orrs	r2, r3
 8007684:	4b70      	ldr	r3, [pc, #448]	; (8007848 <MX_LWIP_Init+0x224>)
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	4313      	orrs	r3, r2
 800768c:	4a6e      	ldr	r2, [pc, #440]	; (8007848 <MX_LWIP_Init+0x224>)
 800768e:	78d2      	ldrb	r2, [r2, #3]
 8007690:	4313      	orrs	r3, r2
 8007692:	061a      	lsls	r2, r3, #24
 8007694:	4b6c      	ldr	r3, [pc, #432]	; (8007848 <MX_LWIP_Init+0x224>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	0619      	lsls	r1, r3, #24
 800769a:	4b6b      	ldr	r3, [pc, #428]	; (8007848 <MX_LWIP_Init+0x224>)
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	4319      	orrs	r1, r3
 80076a2:	4b69      	ldr	r3, [pc, #420]	; (8007848 <MX_LWIP_Init+0x224>)
 80076a4:	789b      	ldrb	r3, [r3, #2]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	430b      	orrs	r3, r1
 80076aa:	4967      	ldr	r1, [pc, #412]	; (8007848 <MX_LWIP_Init+0x224>)
 80076ac:	78c9      	ldrb	r1, [r1, #3]
 80076ae:	430b      	orrs	r3, r1
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076b6:	431a      	orrs	r2, r3
 80076b8:	4b63      	ldr	r3, [pc, #396]	; (8007848 <MX_LWIP_Init+0x224>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	0619      	lsls	r1, r3, #24
 80076be:	4b62      	ldr	r3, [pc, #392]	; (8007848 <MX_LWIP_Init+0x224>)
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	4319      	orrs	r1, r3
 80076c6:	4b60      	ldr	r3, [pc, #384]	; (8007848 <MX_LWIP_Init+0x224>)
 80076c8:	789b      	ldrb	r3, [r3, #2]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	430b      	orrs	r3, r1
 80076ce:	495e      	ldr	r1, [pc, #376]	; (8007848 <MX_LWIP_Init+0x224>)
 80076d0:	78c9      	ldrb	r1, [r1, #3]
 80076d2:	430b      	orrs	r3, r1
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076da:	431a      	orrs	r2, r3
 80076dc:	4b5a      	ldr	r3, [pc, #360]	; (8007848 <MX_LWIP_Init+0x224>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	0619      	lsls	r1, r3, #24
 80076e2:	4b59      	ldr	r3, [pc, #356]	; (8007848 <MX_LWIP_Init+0x224>)
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	4319      	orrs	r1, r3
 80076ea:	4b57      	ldr	r3, [pc, #348]	; (8007848 <MX_LWIP_Init+0x224>)
 80076ec:	789b      	ldrb	r3, [r3, #2]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	430b      	orrs	r3, r1
 80076f2:	4955      	ldr	r1, [pc, #340]	; (8007848 <MX_LWIP_Init+0x224>)
 80076f4:	78c9      	ldrb	r1, [r1, #3]
 80076f6:	430b      	orrs	r3, r1
 80076f8:	0e1b      	lsrs	r3, r3, #24
 80076fa:	4313      	orrs	r3, r2
 80076fc:	4a55      	ldr	r2, [pc, #340]	; (8007854 <MX_LWIP_Init+0x230>)
 80076fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007700:	4b52      	ldr	r3, [pc, #328]	; (800784c <MX_LWIP_Init+0x228>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	061a      	lsls	r2, r3, #24
 8007706:	4b51      	ldr	r3, [pc, #324]	; (800784c <MX_LWIP_Init+0x228>)
 8007708:	785b      	ldrb	r3, [r3, #1]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	431a      	orrs	r2, r3
 800770e:	4b4f      	ldr	r3, [pc, #316]	; (800784c <MX_LWIP_Init+0x228>)
 8007710:	789b      	ldrb	r3, [r3, #2]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	4313      	orrs	r3, r2
 8007716:	4a4d      	ldr	r2, [pc, #308]	; (800784c <MX_LWIP_Init+0x228>)
 8007718:	78d2      	ldrb	r2, [r2, #3]
 800771a:	4313      	orrs	r3, r2
 800771c:	061a      	lsls	r2, r3, #24
 800771e:	4b4b      	ldr	r3, [pc, #300]	; (800784c <MX_LWIP_Init+0x228>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	0619      	lsls	r1, r3, #24
 8007724:	4b49      	ldr	r3, [pc, #292]	; (800784c <MX_LWIP_Init+0x228>)
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	4319      	orrs	r1, r3
 800772c:	4b47      	ldr	r3, [pc, #284]	; (800784c <MX_LWIP_Init+0x228>)
 800772e:	789b      	ldrb	r3, [r3, #2]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	430b      	orrs	r3, r1
 8007734:	4945      	ldr	r1, [pc, #276]	; (800784c <MX_LWIP_Init+0x228>)
 8007736:	78c9      	ldrb	r1, [r1, #3]
 8007738:	430b      	orrs	r3, r1
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007740:	431a      	orrs	r2, r3
 8007742:	4b42      	ldr	r3, [pc, #264]	; (800784c <MX_LWIP_Init+0x228>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	0619      	lsls	r1, r3, #24
 8007748:	4b40      	ldr	r3, [pc, #256]	; (800784c <MX_LWIP_Init+0x228>)
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	4319      	orrs	r1, r3
 8007750:	4b3e      	ldr	r3, [pc, #248]	; (800784c <MX_LWIP_Init+0x228>)
 8007752:	789b      	ldrb	r3, [r3, #2]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	430b      	orrs	r3, r1
 8007758:	493c      	ldr	r1, [pc, #240]	; (800784c <MX_LWIP_Init+0x228>)
 800775a:	78c9      	ldrb	r1, [r1, #3]
 800775c:	430b      	orrs	r3, r1
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007764:	431a      	orrs	r2, r3
 8007766:	4b39      	ldr	r3, [pc, #228]	; (800784c <MX_LWIP_Init+0x228>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	0619      	lsls	r1, r3, #24
 800776c:	4b37      	ldr	r3, [pc, #220]	; (800784c <MX_LWIP_Init+0x228>)
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	041b      	lsls	r3, r3, #16
 8007772:	4319      	orrs	r1, r3
 8007774:	4b35      	ldr	r3, [pc, #212]	; (800784c <MX_LWIP_Init+0x228>)
 8007776:	789b      	ldrb	r3, [r3, #2]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	430b      	orrs	r3, r1
 800777c:	4933      	ldr	r1, [pc, #204]	; (800784c <MX_LWIP_Init+0x228>)
 800777e:	78c9      	ldrb	r1, [r1, #3]
 8007780:	430b      	orrs	r3, r1
 8007782:	0e1b      	lsrs	r3, r3, #24
 8007784:	4313      	orrs	r3, r2
 8007786:	4a34      	ldr	r2, [pc, #208]	; (8007858 <MX_LWIP_Init+0x234>)
 8007788:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800778a:	4b31      	ldr	r3, [pc, #196]	; (8007850 <MX_LWIP_Init+0x22c>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	061a      	lsls	r2, r3, #24
 8007790:	4b2f      	ldr	r3, [pc, #188]	; (8007850 <MX_LWIP_Init+0x22c>)
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	431a      	orrs	r2, r3
 8007798:	4b2d      	ldr	r3, [pc, #180]	; (8007850 <MX_LWIP_Init+0x22c>)
 800779a:	789b      	ldrb	r3, [r3, #2]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	4313      	orrs	r3, r2
 80077a0:	4a2b      	ldr	r2, [pc, #172]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077a2:	78d2      	ldrb	r2, [r2, #3]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	061a      	lsls	r2, r3, #24
 80077a8:	4b29      	ldr	r3, [pc, #164]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	0619      	lsls	r1, r3, #24
 80077ae:	4b28      	ldr	r3, [pc, #160]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	041b      	lsls	r3, r3, #16
 80077b4:	4319      	orrs	r1, r3
 80077b6:	4b26      	ldr	r3, [pc, #152]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077b8:	789b      	ldrb	r3, [r3, #2]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	430b      	orrs	r3, r1
 80077be:	4924      	ldr	r1, [pc, #144]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077c0:	78c9      	ldrb	r1, [r1, #3]
 80077c2:	430b      	orrs	r3, r1
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077ca:	431a      	orrs	r2, r3
 80077cc:	4b20      	ldr	r3, [pc, #128]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	0619      	lsls	r1, r3, #24
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	4319      	orrs	r1, r3
 80077da:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077dc:	789b      	ldrb	r3, [r3, #2]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	430b      	orrs	r3, r1
 80077e2:	491b      	ldr	r1, [pc, #108]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077e4:	78c9      	ldrb	r1, [r1, #3]
 80077e6:	430b      	orrs	r3, r1
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077ee:	431a      	orrs	r2, r3
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	0619      	lsls	r1, r3, #24
 80077f6:	4b16      	ldr	r3, [pc, #88]	; (8007850 <MX_LWIP_Init+0x22c>)
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	041b      	lsls	r3, r3, #16
 80077fc:	4319      	orrs	r1, r3
 80077fe:	4b14      	ldr	r3, [pc, #80]	; (8007850 <MX_LWIP_Init+0x22c>)
 8007800:	789b      	ldrb	r3, [r3, #2]
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	430b      	orrs	r3, r1
 8007806:	4912      	ldr	r1, [pc, #72]	; (8007850 <MX_LWIP_Init+0x22c>)
 8007808:	78c9      	ldrb	r1, [r1, #3]
 800780a:	430b      	orrs	r3, r1
 800780c:	0e1b      	lsrs	r3, r3, #24
 800780e:	4313      	orrs	r3, r2
 8007810:	4a12      	ldr	r2, [pc, #72]	; (800785c <MX_LWIP_Init+0x238>)
 8007812:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <MX_LWIP_Init+0x23c>)
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	4b12      	ldr	r3, [pc, #72]	; (8007864 <MX_LWIP_Init+0x240>)
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	2300      	movs	r3, #0
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4b0e      	ldr	r3, [pc, #56]	; (800785c <MX_LWIP_Init+0x238>)
 8007822:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <MX_LWIP_Init+0x234>)
 8007824:	490b      	ldr	r1, [pc, #44]	; (8007854 <MX_LWIP_Init+0x230>)
 8007826:	4810      	ldr	r0, [pc, #64]	; (8007868 <MX_LWIP_Init+0x244>)
 8007828:	f000 fe4c 	bl	80084c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800782c:	480e      	ldr	r0, [pc, #56]	; (8007868 <MX_LWIP_Init+0x244>)
 800782e:	f000 fffb 	bl	8008828 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007832:	480d      	ldr	r0, [pc, #52]	; (8007868 <MX_LWIP_Init+0x244>)
 8007834:	f001 f808 	bl	8008848 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007838:	490c      	ldr	r1, [pc, #48]	; (800786c <MX_LWIP_Init+0x248>)
 800783a:	480b      	ldr	r0, [pc, #44]	; (8007868 <MX_LWIP_Init+0x244>)
 800783c:	f001 f870 	bl	8008920 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007840:	bf00      	nop
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000bd8 	.word	0x20000bd8
 800784c:	20000bdc 	.word	0x20000bdc
 8007850:	20000be0 	.word	0x20000be0
 8007854:	20000bcc 	.word	0x20000bcc
 8007858:	20000bd0 	.word	0x20000bd0
 800785c:	20000bd4 	.word	0x20000bd4
 8007860:	080110b9 	.word	0x080110b9
 8007864:	08007aa1 	.word	0x08007aa1
 8007868:	20000b98 	.word	0x20000b98
 800786c:	08007871 	.word	0x08007871

08007870 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007890:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <low_level_init+0x100>)
 8007892:	4a3d      	ldr	r2, [pc, #244]	; (8007988 <low_level_init+0x104>)
 8007894:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007896:	2300      	movs	r3, #0
 8007898:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800789e:	23e1      	movs	r3, #225	; 0xe1
 80078a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80078a2:	2300      	movs	r3, #0
 80078a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80078a6:	2300      	movs	r3, #0
 80078a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80078aa:	2300      	movs	r3, #0
 80078ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80078ae:	4a35      	ldr	r2, [pc, #212]	; (8007984 <low_level_init+0x100>)
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80078b6:	4b33      	ldr	r3, [pc, #204]	; (8007984 <low_level_init+0x100>)
 80078b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80078bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80078be:	4b31      	ldr	r3, [pc, #196]	; (8007984 <low_level_init+0x100>)
 80078c0:	4a32      	ldr	r2, [pc, #200]	; (800798c <low_level_init+0x108>)
 80078c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80078c4:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <low_level_init+0x100>)
 80078c6:	4a32      	ldr	r2, [pc, #200]	; (8007990 <low_level_init+0x10c>)
 80078c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <low_level_init+0x100>)
 80078cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80078d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80078d2:	482c      	ldr	r0, [pc, #176]	; (8007984 <low_level_init+0x100>)
 80078d4:	f7fa fc1e 	bl	8002114 <HAL_ETH_Init>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80078dc:	2238      	movs	r2, #56	; 0x38
 80078de:	2100      	movs	r1, #0
 80078e0:	482c      	ldr	r0, [pc, #176]	; (8007994 <low_level_init+0x110>)
 80078e2:	f009 ff15 	bl	8011710 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80078e6:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <low_level_init+0x110>)
 80078e8:	2221      	movs	r2, #33	; 0x21
 80078ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80078ec:	4b29      	ldr	r3, [pc, #164]	; (8007994 <low_level_init+0x110>)
 80078ee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80078f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <low_level_init+0x110>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80078fa:	4827      	ldr	r0, [pc, #156]	; (8007998 <low_level_init+0x114>)
 80078fc:	f000 fcf0 	bl	80082e0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2206      	movs	r2, #6
 8007904:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007908:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <low_level_init+0x100>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007914:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <low_level_init+0x100>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	785a      	ldrb	r2, [r3, #1]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <low_level_init+0x100>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	789a      	ldrb	r2, [r3, #2]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800792c:	4b15      	ldr	r3, [pc, #84]	; (8007984 <low_level_init+0x100>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	78da      	ldrb	r2, [r3, #3]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <low_level_init+0x100>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	791a      	ldrb	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <low_level_init+0x100>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	795a      	ldrb	r2, [r3, #5]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007956:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800795e:	f043 030a 	orr.w	r3, r3, #10
 8007962:	b2da      	uxtb	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8ca 	bl	8007b0a <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007976:	e001      	b.n	800797c <low_level_init+0xf8>
    Error_Handler();
 8007978:	f7f9 fc72 	bl	8001260 <Error_Handler>
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	200056ac 	.word	0x200056ac
 8007988:	40028000 	.word	0x40028000
 800798c:	2000560c 	.word	0x2000560c
 8007990:	2000556c 	.word	0x2000556c
 8007994:	2000575c 	.word	0x2000575c
 8007998:	08014dfc 	.word	0x08014dfc

0800799c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b092      	sub	sp, #72	; 0x48
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80079b4:	f107 030c 	add.w	r3, r7, #12
 80079b8:	2230      	movs	r2, #48	; 0x30
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f009 fea7 	bl	8011710 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	2230      	movs	r2, #48	; 0x30
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f009 fea0 	bl	8011710 <memset>

  for(q = p; q != NULL; q = q->next)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	643b      	str	r3, [r7, #64]	; 0x40
 80079d4:	e045      	b.n	8007a62 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80079d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d902      	bls.n	80079e2 <low_level_output+0x46>
      return ERR_IF;
 80079dc:	f06f 030b 	mvn.w	r3, #11
 80079e0:	e055      	b.n	8007a8e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80079e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e4:	6859      	ldr	r1, [r3, #4]
 80079e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079e8:	4613      	mov	r3, r2
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	3348      	adds	r3, #72	; 0x48
 80079f2:	443b      	add	r3, r7
 80079f4:	3b3c      	subs	r3, #60	; 0x3c
 80079f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80079f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fa:	895b      	ldrh	r3, [r3, #10]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a00:	4613      	mov	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3348      	adds	r3, #72	; 0x48
 8007a0a:	443b      	add	r3, r7
 8007a0c:	3b38      	subs	r3, #56	; 0x38
 8007a0e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d011      	beq.n	8007a3a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	f107 000c 	add.w	r0, r7, #12
 8007a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a20:	460b      	mov	r3, r1
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	440b      	add	r3, r1
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	18c1      	adds	r1, r0, r3
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	3348      	adds	r3, #72	; 0x48
 8007a34:	443b      	add	r3, r7
 8007a36:	3b34      	subs	r3, #52	; 0x34
 8007a38:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a44:	4613      	mov	r3, r2
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	3348      	adds	r3, #72	; 0x48
 8007a4e:	443b      	add	r3, r7
 8007a50:	3b34      	subs	r3, #52	; 0x34
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a58:	3301      	adds	r3, #1
 8007a5a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	643b      	str	r3, [r7, #64]	; 0x40
 8007a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1b6      	bne.n	80079d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	891b      	ldrh	r3, [r3, #8]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <low_level_output+0xfc>)
 8007a70:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007a72:	4a09      	ldr	r2, [pc, #36]	; (8007a98 <low_level_output+0xfc>)
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007a7a:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <low_level_output+0xfc>)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007a80:	2214      	movs	r2, #20
 8007a82:	4905      	ldr	r1, [pc, #20]	; (8007a98 <low_level_output+0xfc>)
 8007a84:	4805      	ldr	r0, [pc, #20]	; (8007a9c <low_level_output+0x100>)
 8007a86:	f7fa fbcd 	bl	8002224 <HAL_ETH_Transmit>

  return errval;
 8007a8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3748      	adds	r7, #72	; 0x48
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	2000575c 	.word	0x2000575c
 8007a9c:	200056ac 	.word	0x200056ac

08007aa0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <ethernetif_init+0x1c>
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <ethernetif_init+0x48>)
 8007ab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007ab4:	490d      	ldr	r1, [pc, #52]	; (8007aec <ethernetif_init+0x4c>)
 8007ab6:	480e      	ldr	r0, [pc, #56]	; (8007af0 <ethernetif_init+0x50>)
 8007ab8:	f009 fcd4 	bl	8011464 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2273      	movs	r2, #115	; 0x73
 8007ac0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2274      	movs	r2, #116	; 0x74
 8007ac8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <ethernetif_init+0x54>)
 8007ad0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <ethernetif_init+0x58>)
 8007ad6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fed3 	bl	8007884 <low_level_init>

  return ERR_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	08012404 	.word	0x08012404
 8007aec:	08012420 	.word	0x08012420
 8007af0:	08012430 	.word	0x08012430
 8007af4:	0800f571 	.word	0x0800f571
 8007af8:	0800799d 	.word	0x0800799d

08007afc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b00:	f7fa f934 	bl	8001d6c <HAL_GetTick>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]

}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	4603      	mov	r3, r0
 8007b26:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	b21a      	sxth	r2, r3
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b21b      	sxth	r3, r3
 8007b3a:	b29b      	uxth	r3, r3
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	061a      	lsls	r2, r3, #24
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0a1b      	lsrs	r3, r3, #8
 8007b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	0e1b      	lsrs	r3, r3, #24
 8007b6c:	4313      	orrs	r3, r2
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007b84:	f000 f8d4 	bl	8007d30 <mem_init>
  memp_init();
 8007b88:	f000 fbda 	bl	8008340 <memp_init>
  pbuf_init();
  netif_init();
 8007b8c:	f000 fc92 	bl	80084b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007b90:	f006 ff18 	bl	800e9c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007b94:	f001 fcb2 	bl	80094fc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007b98:	f006 fecc 	bl	800e934 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <ptr_to_mem+0x20>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	4413      	add	r3, r2
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20005e00 	.word	0x20005e00

08007bc8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <mem_to_ptr+0x20>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	b29b      	uxth	r3, r3
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20005e00 	.word	0x20005e00

08007bec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007bf4:	4b45      	ldr	r3, [pc, #276]	; (8007d0c <plug_holes+0x120>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d206      	bcs.n	8007c0c <plug_holes+0x20>
 8007bfe:	4b44      	ldr	r3, [pc, #272]	; (8007d10 <plug_holes+0x124>)
 8007c00:	f240 12df 	movw	r2, #479	; 0x1df
 8007c04:	4943      	ldr	r1, [pc, #268]	; (8007d14 <plug_holes+0x128>)
 8007c06:	4844      	ldr	r0, [pc, #272]	; (8007d18 <plug_holes+0x12c>)
 8007c08:	f009 fc2c 	bl	8011464 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007c0c:	4b43      	ldr	r3, [pc, #268]	; (8007d1c <plug_holes+0x130>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d306      	bcc.n	8007c24 <plug_holes+0x38>
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <plug_holes+0x124>)
 8007c18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c1c:	4940      	ldr	r1, [pc, #256]	; (8007d20 <plug_holes+0x134>)
 8007c1e:	483e      	ldr	r0, [pc, #248]	; (8007d18 <plug_holes+0x12c>)
 8007c20:	f009 fc20 	bl	8011464 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <plug_holes+0x4e>
 8007c2c:	4b38      	ldr	r3, [pc, #224]	; (8007d10 <plug_holes+0x124>)
 8007c2e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007c32:	493c      	ldr	r1, [pc, #240]	; (8007d24 <plug_holes+0x138>)
 8007c34:	4838      	ldr	r0, [pc, #224]	; (8007d18 <plug_holes+0x12c>)
 8007c36:	f009 fc15 	bl	8011464 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c42:	d906      	bls.n	8007c52 <plug_holes+0x66>
 8007c44:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <plug_holes+0x124>)
 8007c46:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007c4a:	4937      	ldr	r1, [pc, #220]	; (8007d28 <plug_holes+0x13c>)
 8007c4c:	4832      	ldr	r0, [pc, #200]	; (8007d18 <plug_holes+0x12c>)
 8007c4e:	f009 fc09 	bl	8011464 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffa4 	bl	8007ba4 <ptr_to_mem>
 8007c5c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d024      	beq.n	8007cb0 <plug_holes+0xc4>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d120      	bne.n	8007cb0 <plug_holes+0xc4>
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <plug_holes+0x130>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d01b      	beq.n	8007cb0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <plug_holes+0x140>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d102      	bne.n	8007c88 <plug_holes+0x9c>
      lfree = mem;
 8007c82:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <plug_holes+0x140>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	881a      	ldrh	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c98:	d00a      	beq.n	8007cb0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff ff80 	bl	8007ba4 <ptr_to_mem>
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff8e 	bl	8007bc8 <mem_to_ptr>
 8007cac:	4603      	mov	r3, r0
 8007cae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff ff75 	bl	8007ba4 <ptr_to_mem>
 8007cba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d01f      	beq.n	8007d04 <plug_holes+0x118>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	791b      	ldrb	r3, [r3, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11b      	bne.n	8007d04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007ccc:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <plug_holes+0x140>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d102      	bne.n	8007cdc <plug_holes+0xf0>
      lfree = pmem;
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <plug_holes+0x140>)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007cec:	d00a      	beq.n	8007d04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff ff56 	bl	8007ba4 <ptr_to_mem>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	f7ff ff64 	bl	8007bc8 <mem_to_ptr>
 8007d00:	4603      	mov	r3, r0
 8007d02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007d04:	bf00      	nop
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd90      	pop	{r4, r7, pc}
 8007d0c:	20005e00 	.word	0x20005e00
 8007d10:	08012458 	.word	0x08012458
 8007d14:	08012488 	.word	0x08012488
 8007d18:	080124a0 	.word	0x080124a0
 8007d1c:	20005e04 	.word	0x20005e04
 8007d20:	080124c8 	.word	0x080124c8
 8007d24:	080124e4 	.word	0x080124e4
 8007d28:	08012500 	.word	0x08012500
 8007d2c:	20005e08 	.word	0x20005e08

08007d30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <mem_init+0x68>)
 8007d38:	3303      	adds	r3, #3
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <mem_init+0x6c>)
 8007d42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <mem_init+0x6c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007d5e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007d62:	f7ff ff1f 	bl	8007ba4 <ptr_to_mem>
 8007d66:	4603      	mov	r3, r0
 8007d68:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <mem_init+0x70>)
 8007d6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <mem_init+0x70>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2201      	movs	r2, #1
 8007d72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <mem_init+0x70>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007d7e:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <mem_init+0x70>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <mem_init+0x6c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <mem_init+0x74>)
 8007d8e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	200057ac 	.word	0x200057ac
 8007d9c:	20005e00 	.word	0x20005e00
 8007da0:	20005e04 	.word	0x20005e04
 8007da4:	20005e08 	.word	0x20005e08

08007da8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff ff09 	bl	8007bc8 <mem_to_ptr>
 8007db6:	4603      	mov	r3, r0
 8007db8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fef0 	bl	8007ba4 <ptr_to_mem>
 8007dc4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff feea 	bl	8007ba4 <ptr_to_mem>
 8007dd0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007dda:	d818      	bhi.n	8007e0e <mem_link_valid+0x66>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	885b      	ldrh	r3, [r3, #2]
 8007de0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007de4:	d813      	bhi.n	8007e0e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007dea:	8afa      	ldrh	r2, [r7, #22]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d004      	beq.n	8007dfa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	8afa      	ldrh	r2, [r7, #22]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d109      	bne.n	8007e0e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007dfa:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <mem_link_valid+0x74>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d006      	beq.n	8007e12 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	885b      	ldrh	r3, [r3, #2]
 8007e08:	8afa      	ldrh	r2, [r7, #22]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d001      	beq.n	8007e12 <mem_link_valid+0x6a>
    return 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <mem_link_valid+0x6c>
  }
  return 1;
 8007e12:	2301      	movs	r3, #1
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20005e04 	.word	0x20005e04

08007e20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d04c      	beq.n	8007ec8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007e38:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <mem_free+0xb0>)
 8007e3a:	f240 2273 	movw	r2, #627	; 0x273
 8007e3e:	4925      	ldr	r1, [pc, #148]	; (8007ed4 <mem_free+0xb4>)
 8007e40:	4825      	ldr	r0, [pc, #148]	; (8007ed8 <mem_free+0xb8>)
 8007e42:	f009 fb0f 	bl	8011464 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e46:	e040      	b.n	8007eca <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3b08      	subs	r3, #8
 8007e4c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007e4e:	4b23      	ldr	r3, [pc, #140]	; (8007edc <mem_free+0xbc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d306      	bcc.n	8007e66 <mem_free+0x46>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f103 020c 	add.w	r2, r3, #12
 8007e5e:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <mem_free+0xc0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d907      	bls.n	8007e76 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007e66:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <mem_free+0xb0>)
 8007e68:	f240 227f 	movw	r2, #639	; 0x27f
 8007e6c:	491d      	ldr	r1, [pc, #116]	; (8007ee4 <mem_free+0xc4>)
 8007e6e:	481a      	ldr	r0, [pc, #104]	; (8007ed8 <mem_free+0xb8>)
 8007e70:	f009 faf8 	bl	8011464 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e74:	e029      	b.n	8007eca <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007e7e:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <mem_free+0xb0>)
 8007e80:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007e84:	4918      	ldr	r1, [pc, #96]	; (8007ee8 <mem_free+0xc8>)
 8007e86:	4814      	ldr	r0, [pc, #80]	; (8007ed8 <mem_free+0xb8>)
 8007e88:	f009 faec 	bl	8011464 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e8c:	e01d      	b.n	8007eca <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff ff8a 	bl	8007da8 <mem_link_valid>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <mem_free+0xb0>)
 8007e9c:	f240 2295 	movw	r2, #661	; 0x295
 8007ea0:	4912      	ldr	r1, [pc, #72]	; (8007eec <mem_free+0xcc>)
 8007ea2:	480d      	ldr	r0, [pc, #52]	; (8007ed8 <mem_free+0xb8>)
 8007ea4:	f009 fade 	bl	8011464 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007ea8:	e00f      	b.n	8007eca <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <mem_free+0xd0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d202      	bcs.n	8007ec0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <mem_free+0xd0>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fe93 	bl	8007bec <plug_holes>
 8007ec6:	e000      	b.n	8007eca <mem_free+0xaa>
    return;
 8007ec8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	08012458 	.word	0x08012458
 8007ed4:	0801252c 	.word	0x0801252c
 8007ed8:	080124a0 	.word	0x080124a0
 8007edc:	20005e00 	.word	0x20005e00
 8007ee0:	20005e04 	.word	0x20005e04
 8007ee4:	08012550 	.word	0x08012550
 8007ee8:	0801256c 	.word	0x0801256c
 8007eec:	08012594 	.word	0x08012594
 8007ef0:	20005e08 	.word	0x20005e08

08007ef4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007f00:	887b      	ldrh	r3, [r7, #2]
 8007f02:	3303      	adds	r3, #3
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007f0c:	8bfb      	ldrh	r3, [r7, #30]
 8007f0e:	2b0b      	cmp	r3, #11
 8007f10:	d801      	bhi.n	8007f16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007f12:	230c      	movs	r3, #12
 8007f14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007f16:	8bfb      	ldrh	r3, [r7, #30]
 8007f18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f1c:	d803      	bhi.n	8007f26 <mem_trim+0x32>
 8007f1e:	8bfa      	ldrh	r2, [r7, #30]
 8007f20:	887b      	ldrh	r3, [r7, #2]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d201      	bcs.n	8007f2a <mem_trim+0x36>
    return NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e0cc      	b.n	80080c4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007f2a:	4b68      	ldr	r3, [pc, #416]	; (80080cc <mem_trim+0x1d8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d304      	bcc.n	8007f3e <mem_trim+0x4a>
 8007f34:	4b66      	ldr	r3, [pc, #408]	; (80080d0 <mem_trim+0x1dc>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d306      	bcc.n	8007f4c <mem_trim+0x58>
 8007f3e:	4b65      	ldr	r3, [pc, #404]	; (80080d4 <mem_trim+0x1e0>)
 8007f40:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007f44:	4964      	ldr	r1, [pc, #400]	; (80080d8 <mem_trim+0x1e4>)
 8007f46:	4865      	ldr	r0, [pc, #404]	; (80080dc <mem_trim+0x1e8>)
 8007f48:	f009 fa8c 	bl	8011464 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007f4c:	4b5f      	ldr	r3, [pc, #380]	; (80080cc <mem_trim+0x1d8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d304      	bcc.n	8007f60 <mem_trim+0x6c>
 8007f56:	4b5e      	ldr	r3, [pc, #376]	; (80080d0 <mem_trim+0x1dc>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d301      	bcc.n	8007f64 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	e0af      	b.n	80080c4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3b08      	subs	r3, #8
 8007f68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007f6a:	69b8      	ldr	r0, [r7, #24]
 8007f6c:	f7ff fe2c 	bl	8007bc8 <mem_to_ptr>
 8007f70:	4603      	mov	r3, r0
 8007f72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	881a      	ldrh	r2, [r3, #0]
 8007f78:	8afb      	ldrh	r3, [r7, #22]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b08      	subs	r3, #8
 8007f80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f82:	8bfa      	ldrh	r2, [r7, #30]
 8007f84:	8abb      	ldrh	r3, [r7, #20]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d906      	bls.n	8007f98 <mem_trim+0xa4>
 8007f8a:	4b52      	ldr	r3, [pc, #328]	; (80080d4 <mem_trim+0x1e0>)
 8007f8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007f90:	4953      	ldr	r1, [pc, #332]	; (80080e0 <mem_trim+0x1ec>)
 8007f92:	4852      	ldr	r0, [pc, #328]	; (80080dc <mem_trim+0x1e8>)
 8007f94:	f009 fa66 	bl	8011464 <iprintf>
  if (newsize > size) {
 8007f98:	8bfa      	ldrh	r2, [r7, #30]
 8007f9a:	8abb      	ldrh	r3, [r7, #20]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d901      	bls.n	8007fa4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e08f      	b.n	80080c4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007fa4:	8bfa      	ldrh	r2, [r7, #30]
 8007fa6:	8abb      	ldrh	r3, [r7, #20]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d101      	bne.n	8007fb0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	e089      	b.n	80080c4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fdf5 	bl	8007ba4 <ptr_to_mem>
 8007fba:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d13f      	bne.n	8008044 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fcc:	d106      	bne.n	8007fdc <mem_trim+0xe8>
 8007fce:	4b41      	ldr	r3, [pc, #260]	; (80080d4 <mem_trim+0x1e0>)
 8007fd0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007fd4:	4943      	ldr	r1, [pc, #268]	; (80080e4 <mem_trim+0x1f0>)
 8007fd6:	4841      	ldr	r0, [pc, #260]	; (80080dc <mem_trim+0x1e8>)
 8007fd8:	f009 fa44 	bl	8011464 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007fe2:	8afa      	ldrh	r2, [r7, #22]
 8007fe4:	8bfb      	ldrh	r3, [r7, #30]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3308      	adds	r3, #8
 8007fec:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007fee:	4b3e      	ldr	r3, [pc, #248]	; (80080e8 <mem_trim+0x1f4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d106      	bne.n	8008006 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fdd2 	bl	8007ba4 <ptr_to_mem>
 8008000:	4603      	mov	r3, r0
 8008002:	4a39      	ldr	r2, [pc, #228]	; (80080e8 <mem_trim+0x1f4>)
 8008004:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008006:	89fb      	ldrh	r3, [r7, #14]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fdcb 	bl	8007ba4 <ptr_to_mem>
 800800e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2200      	movs	r2, #0
 8008014:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	89ba      	ldrh	r2, [r7, #12]
 800801a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	8afa      	ldrh	r2, [r7, #22]
 8008020:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	89fa      	ldrh	r2, [r7, #14]
 8008026:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008030:	d047      	beq.n	80080c2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fdb4 	bl	8007ba4 <ptr_to_mem>
 800803c:	4602      	mov	r2, r0
 800803e:	89fb      	ldrh	r3, [r7, #14]
 8008040:	8053      	strh	r3, [r2, #2]
 8008042:	e03e      	b.n	80080c2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008044:	8bfb      	ldrh	r3, [r7, #30]
 8008046:	f103 0214 	add.w	r2, r3, #20
 800804a:	8abb      	ldrh	r3, [r7, #20]
 800804c:	429a      	cmp	r2, r3
 800804e:	d838      	bhi.n	80080c2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008050:	8afa      	ldrh	r2, [r7, #22]
 8008052:	8bfb      	ldrh	r3, [r7, #30]
 8008054:	4413      	add	r3, r2
 8008056:	b29b      	uxth	r3, r3
 8008058:	3308      	adds	r3, #8
 800805a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008064:	d106      	bne.n	8008074 <mem_trim+0x180>
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <mem_trim+0x1e0>)
 8008068:	f240 3216 	movw	r2, #790	; 0x316
 800806c:	491d      	ldr	r1, [pc, #116]	; (80080e4 <mem_trim+0x1f0>)
 800806e:	481b      	ldr	r0, [pc, #108]	; (80080dc <mem_trim+0x1e8>)
 8008070:	f009 f9f8 	bl	8011464 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008074:	89fb      	ldrh	r3, [r7, #14]
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fd94 	bl	8007ba4 <ptr_to_mem>
 800807c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800807e:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <mem_trim+0x1f4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d202      	bcs.n	800808e <mem_trim+0x19a>
      lfree = mem2;
 8008088:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <mem_trim+0x1f4>)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2200      	movs	r2, #0
 8008092:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	881a      	ldrh	r2, [r3, #0]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	8afa      	ldrh	r2, [r7, #22]
 80080a0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	89fa      	ldrh	r2, [r7, #14]
 80080a6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080b0:	d007      	beq.n	80080c2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fd74 	bl	8007ba4 <ptr_to_mem>
 80080bc:	4602      	mov	r2, r0
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80080c2:	687b      	ldr	r3, [r7, #4]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20005e00 	.word	0x20005e00
 80080d0:	20005e04 	.word	0x20005e04
 80080d4:	08012458 	.word	0x08012458
 80080d8:	080125c8 	.word	0x080125c8
 80080dc:	080124a0 	.word	0x080124a0
 80080e0:	080125e0 	.word	0x080125e0
 80080e4:	08012600 	.word	0x08012600
 80080e8:	20005e08 	.word	0x20005e08

080080ec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <mem_malloc+0x14>
    return NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e0d9      	b.n	80082b4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008100:	88fb      	ldrh	r3, [r7, #6]
 8008102:	3303      	adds	r3, #3
 8008104:	b29b      	uxth	r3, r3
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800810c:	8bbb      	ldrh	r3, [r7, #28]
 800810e:	2b0b      	cmp	r3, #11
 8008110:	d801      	bhi.n	8008116 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008112:	230c      	movs	r3, #12
 8008114:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008116:	8bbb      	ldrh	r3, [r7, #28]
 8008118:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800811c:	d803      	bhi.n	8008126 <mem_malloc+0x3a>
 800811e:	8bba      	ldrh	r2, [r7, #28]
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	429a      	cmp	r2, r3
 8008124:	d201      	bcs.n	800812a <mem_malloc+0x3e>
    return NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	e0c4      	b.n	80082b4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800812a:	4b64      	ldr	r3, [pc, #400]	; (80082bc <mem_malloc+0x1d0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fd4a 	bl	8007bc8 <mem_to_ptr>
 8008134:	4603      	mov	r3, r0
 8008136:	83fb      	strh	r3, [r7, #30]
 8008138:	e0b4      	b.n	80082a4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800813a:	8bfb      	ldrh	r3, [r7, #30]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fd31 	bl	8007ba4 <ptr_to_mem>
 8008142:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 80a4 	bne.w	8008296 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	8bfb      	ldrh	r3, [r7, #30]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f1a3 0208 	sub.w	r2, r3, #8
 800815c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800815e:	429a      	cmp	r2, r3
 8008160:	f0c0 8099 	bcc.w	8008296 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	8bfb      	ldrh	r3, [r7, #30]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	f1a3 0208 	sub.w	r2, r3, #8
 8008172:	8bbb      	ldrh	r3, [r7, #28]
 8008174:	3314      	adds	r3, #20
 8008176:	429a      	cmp	r2, r3
 8008178:	d333      	bcc.n	80081e2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800817a:	8bfa      	ldrh	r2, [r7, #30]
 800817c:	8bbb      	ldrh	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	b29b      	uxth	r3, r3
 8008182:	3308      	adds	r3, #8
 8008184:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008186:	8a7b      	ldrh	r3, [r7, #18]
 8008188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800818c:	d106      	bne.n	800819c <mem_malloc+0xb0>
 800818e:	4b4c      	ldr	r3, [pc, #304]	; (80082c0 <mem_malloc+0x1d4>)
 8008190:	f240 3287 	movw	r2, #903	; 0x387
 8008194:	494b      	ldr	r1, [pc, #300]	; (80082c4 <mem_malloc+0x1d8>)
 8008196:	484c      	ldr	r0, [pc, #304]	; (80082c8 <mem_malloc+0x1dc>)
 8008198:	f009 f964 	bl	8011464 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800819c:	8a7b      	ldrh	r3, [r7, #18]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fd00 	bl	8007ba4 <ptr_to_mem>
 80081a4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	881a      	ldrh	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8bfa      	ldrh	r2, [r7, #30]
 80081b8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	8a7a      	ldrh	r2, [r7, #18]
 80081be:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2201      	movs	r2, #1
 80081c4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081ce:	d00b      	beq.n	80081e8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fce5 	bl	8007ba4 <ptr_to_mem>
 80081da:	4602      	mov	r2, r0
 80081dc:	8a7b      	ldrh	r3, [r7, #18]
 80081de:	8053      	strh	r3, [r2, #2]
 80081e0:	e002      	b.n	80081e8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2201      	movs	r2, #1
 80081e6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80081e8:	4b34      	ldr	r3, [pc, #208]	; (80082bc <mem_malloc+0x1d0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d127      	bne.n	8008242 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80081f2:	4b32      	ldr	r3, [pc, #200]	; (80082bc <mem_malloc+0x1d0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80081f8:	e005      	b.n	8008206 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fcd0 	bl	8007ba4 <ptr_to_mem>
 8008204:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <mem_malloc+0x12c>
 800820e:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <mem_malloc+0x1e0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	d1f0      	bne.n	80081fa <mem_malloc+0x10e>
          }
          lfree = cur;
 8008218:	4a28      	ldr	r2, [pc, #160]	; (80082bc <mem_malloc+0x1d0>)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800821e:	4b27      	ldr	r3, [pc, #156]	; (80082bc <mem_malloc+0x1d0>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <mem_malloc+0x1e0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d00b      	beq.n	8008242 <mem_malloc+0x156>
 800822a:	4b24      	ldr	r3, [pc, #144]	; (80082bc <mem_malloc+0x1d0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d006      	beq.n	8008242 <mem_malloc+0x156>
 8008234:	4b22      	ldr	r3, [pc, #136]	; (80082c0 <mem_malloc+0x1d4>)
 8008236:	f240 32b5 	movw	r2, #949	; 0x3b5
 800823a:	4925      	ldr	r1, [pc, #148]	; (80082d0 <mem_malloc+0x1e4>)
 800823c:	4822      	ldr	r0, [pc, #136]	; (80082c8 <mem_malloc+0x1dc>)
 800823e:	f009 f911 	bl	8011464 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008242:	8bba      	ldrh	r2, [r7, #28]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	4413      	add	r3, r2
 8008248:	3308      	adds	r3, #8
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <mem_malloc+0x1e0>)
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	4293      	cmp	r3, r2
 8008250:	d906      	bls.n	8008260 <mem_malloc+0x174>
 8008252:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <mem_malloc+0x1d4>)
 8008254:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008258:	491e      	ldr	r1, [pc, #120]	; (80082d4 <mem_malloc+0x1e8>)
 800825a:	481b      	ldr	r0, [pc, #108]	; (80082c8 <mem_malloc+0x1dc>)
 800825c:	f009 f902 	bl	8011464 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <mem_malloc+0x18c>
 800826a:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <mem_malloc+0x1d4>)
 800826c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008270:	4919      	ldr	r1, [pc, #100]	; (80082d8 <mem_malloc+0x1ec>)
 8008272:	4815      	ldr	r0, [pc, #84]	; (80082c8 <mem_malloc+0x1dc>)
 8008274:	f009 f8f6 	bl	8011464 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d006      	beq.n	8008290 <mem_malloc+0x1a4>
 8008282:	4b0f      	ldr	r3, [pc, #60]	; (80082c0 <mem_malloc+0x1d4>)
 8008284:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008288:	4914      	ldr	r1, [pc, #80]	; (80082dc <mem_malloc+0x1f0>)
 800828a:	480f      	ldr	r0, [pc, #60]	; (80082c8 <mem_malloc+0x1dc>)
 800828c:	f009 f8ea 	bl	8011464 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3308      	adds	r3, #8
 8008294:	e00e      	b.n	80082b4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008296:	8bfb      	ldrh	r3, [r7, #30]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fc83 	bl	8007ba4 <ptr_to_mem>
 800829e:	4603      	mov	r3, r0
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80082a4:	8bfa      	ldrh	r2, [r7, #30]
 80082a6:	8bbb      	ldrh	r3, [r7, #28]
 80082a8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80082ac:	429a      	cmp	r2, r3
 80082ae:	f4ff af44 	bcc.w	800813a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20005e08 	.word	0x20005e08
 80082c0:	08012458 	.word	0x08012458
 80082c4:	08012600 	.word	0x08012600
 80082c8:	080124a0 	.word	0x080124a0
 80082cc:	20005e04 	.word	0x20005e04
 80082d0:	08012614 	.word	0x08012614
 80082d4:	08012630 	.word	0x08012630
 80082d8:	08012660 	.word	0x08012660
 80082dc:	08012690 	.word	0x08012690

080082e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	3303      	adds	r3, #3
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e011      	b.n	8008326 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	461a      	mov	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4293      	cmp	r3, r2
 8008330:	dbe7      	blt.n	8008302 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008346:	2300      	movs	r3, #0
 8008348:	80fb      	strh	r3, [r7, #6]
 800834a:	e009      	b.n	8008360 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	4a08      	ldr	r2, [pc, #32]	; (8008370 <memp_init+0x30>)
 8008350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ffc3 	bl	80082e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	3301      	adds	r3, #1
 800835e:	80fb      	strh	r3, [r7, #6]
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	2b08      	cmp	r3, #8
 8008364:	d9f2      	bls.n	800834c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	08014e74 	.word	0x08014e74

08008374 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d012      	beq.n	80083b0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d006      	beq.n	80083ac <do_memp_malloc_pool+0x38>
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <do_memp_malloc_pool+0x48>)
 80083a0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80083a4:	4906      	ldr	r1, [pc, #24]	; (80083c0 <do_memp_malloc_pool+0x4c>)
 80083a6:	4807      	ldr	r0, [pc, #28]	; (80083c4 <do_memp_malloc_pool+0x50>)
 80083a8:	f009 f85c 	bl	8011464 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	e000      	b.n	80083b2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	080126b4 	.word	0x080126b4
 80083c0:	080126e4 	.word	0x080126e4
 80083c4:	08012708 	.word	0x08012708

080083c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d908      	bls.n	80083ea <memp_malloc+0x22>
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <memp_malloc+0x3c>)
 80083da:	f240 1257 	movw	r2, #343	; 0x157
 80083de:	490a      	ldr	r1, [pc, #40]	; (8008408 <memp_malloc+0x40>)
 80083e0:	480a      	ldr	r0, [pc, #40]	; (800840c <memp_malloc+0x44>)
 80083e2:	f009 f83f 	bl	8011464 <iprintf>
 80083e6:	2300      	movs	r3, #0
 80083e8:	e008      	b.n	80083fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	4a08      	ldr	r2, [pc, #32]	; (8008410 <memp_malloc+0x48>)
 80083ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ffbe 	bl	8008374 <do_memp_malloc_pool>
 80083f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80083fa:	68fb      	ldr	r3, [r7, #12]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	080126b4 	.word	0x080126b4
 8008408:	08012744 	.word	0x08012744
 800840c:	08012708 	.word	0x08012708
 8008410:	08014e74 	.word	0x08014e74

08008414 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <do_memp_free_pool+0x22>
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <do_memp_free_pool+0x40>)
 800842a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800842e:	490a      	ldr	r1, [pc, #40]	; (8008458 <do_memp_free_pool+0x44>)
 8008430:	480a      	ldr	r0, [pc, #40]	; (800845c <do_memp_free_pool+0x48>)
 8008432:	f009 f817 	bl	8011464 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	080126b4 	.word	0x080126b4
 8008458:	08012764 	.word	0x08012764
 800845c:	08012708 	.word	0x08012708

08008460 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b08      	cmp	r3, #8
 8008470:	d907      	bls.n	8008482 <memp_free+0x22>
 8008472:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <memp_free+0x44>)
 8008474:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008478:	490b      	ldr	r1, [pc, #44]	; (80084a8 <memp_free+0x48>)
 800847a:	480c      	ldr	r0, [pc, #48]	; (80084ac <memp_free+0x4c>)
 800847c:	f008 fff2 	bl	8011464 <iprintf>
 8008480:	e00c      	b.n	800849c <memp_free+0x3c>

  if (mem == NULL) {
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <memp_free+0x50>)
 800848c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ffbe 	bl	8008414 <do_memp_free_pool>
 8008498:	e000      	b.n	800849c <memp_free+0x3c>
    return;
 800849a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	080126b4 	.word	0x080126b4
 80084a8:	08012784 	.word	0x08012784
 80084ac:	08012708 	.word	0x08012708
 80084b0:	08014e74 	.word	0x08014e74

080084b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80084b8:	bf00      	nop
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d108      	bne.n	80084ea <netif_add+0x26>
 80084d8:	4b57      	ldr	r3, [pc, #348]	; (8008638 <netif_add+0x174>)
 80084da:	f240 1227 	movw	r2, #295	; 0x127
 80084de:	4957      	ldr	r1, [pc, #348]	; (800863c <netif_add+0x178>)
 80084e0:	4857      	ldr	r0, [pc, #348]	; (8008640 <netif_add+0x17c>)
 80084e2:	f008 ffbf 	bl	8011464 <iprintf>
 80084e6:	2300      	movs	r3, #0
 80084e8:	e0a2      	b.n	8008630 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d108      	bne.n	8008502 <netif_add+0x3e>
 80084f0:	4b51      	ldr	r3, [pc, #324]	; (8008638 <netif_add+0x174>)
 80084f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80084f6:	4953      	ldr	r1, [pc, #332]	; (8008644 <netif_add+0x180>)
 80084f8:	4851      	ldr	r0, [pc, #324]	; (8008640 <netif_add+0x17c>)
 80084fa:	f008 ffb3 	bl	8011464 <iprintf>
 80084fe:	2300      	movs	r3, #0
 8008500:	e096      	b.n	8008630 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008508:	4b4f      	ldr	r3, [pc, #316]	; (8008648 <netif_add+0x184>)
 800850a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008512:	4b4d      	ldr	r3, [pc, #308]	; (8008648 <netif_add+0x184>)
 8008514:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800851c:	4b4a      	ldr	r3, [pc, #296]	; (8008648 <netif_add+0x184>)
 800851e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a45      	ldr	r2, [pc, #276]	; (800864c <netif_add+0x188>)
 8008536:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008552:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <netif_add+0x18c>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008560:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f913 	bl	8008794 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	4798      	blx	r3
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <netif_add+0xba>
    return NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	e058      	b.n	8008630 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008584:	2bff      	cmp	r3, #255	; 0xff
 8008586:	d103      	bne.n	8008590 <netif_add+0xcc>
        netif->num = 0;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008594:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <netif_add+0x190>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e02b      	b.n	80085f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d106      	bne.n	80085b2 <netif_add+0xee>
 80085a4:	4b24      	ldr	r3, [pc, #144]	; (8008638 <netif_add+0x174>)
 80085a6:	f240 128b 	movw	r2, #395	; 0x18b
 80085aa:	492b      	ldr	r1, [pc, #172]	; (8008658 <netif_add+0x194>)
 80085ac:	4824      	ldr	r0, [pc, #144]	; (8008640 <netif_add+0x17c>)
 80085ae:	f008 ff59 	bl	8011464 <iprintf>
        num_netifs++;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3301      	adds	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2bff      	cmp	r3, #255	; 0xff
 80085bc:	dd06      	ble.n	80085cc <netif_add+0x108>
 80085be:	4b1e      	ldr	r3, [pc, #120]	; (8008638 <netif_add+0x174>)
 80085c0:	f240 128d 	movw	r2, #397	; 0x18d
 80085c4:	4925      	ldr	r1, [pc, #148]	; (800865c <netif_add+0x198>)
 80085c6:	481e      	ldr	r0, [pc, #120]	; (8008640 <netif_add+0x17c>)
 80085c8:	f008 ff4c 	bl	8011464 <iprintf>
        if (netif2->num == netif->num) {
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085d8:	429a      	cmp	r2, r3
 80085da:	d108      	bne.n	80085ee <netif_add+0x12a>
          netif->num++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085e2:	3301      	adds	r3, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80085ec:	e005      	b.n	80085fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1d0      	bne.n	800859c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1be      	bne.n	800857e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008606:	2bfe      	cmp	r3, #254	; 0xfe
 8008608:	d103      	bne.n	8008612 <netif_add+0x14e>
    netif_num = 0;
 800860a:	4b11      	ldr	r3, [pc, #68]	; (8008650 <netif_add+0x18c>)
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	e006      	b.n	8008620 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008618:	3301      	adds	r3, #1
 800861a:	b2da      	uxtb	r2, r3
 800861c:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <netif_add+0x18c>)
 800861e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008620:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <netif_add+0x190>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008628:	4a0a      	ldr	r2, [pc, #40]	; (8008654 <netif_add+0x190>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800862e:	68fb      	ldr	r3, [r7, #12]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	080127a0 	.word	0x080127a0
 800863c:	08012834 	.word	0x08012834
 8008640:	080127f0 	.word	0x080127f0
 8008644:	08012850 	.word	0x08012850
 8008648:	08014ed8 	.word	0x08014ed8
 800864c:	08008943 	.word	0x08008943
 8008650:	20008d00 	.word	0x20008d00
 8008654:	20008cf8 	.word	0x20008cf8
 8008658:	08012874 	.word	0x08012874
 800865c:	08012888 	.word	0x08012888

08008660 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f002 fa8d 	bl	800ab8c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f006 fb2f 	bl	800ecd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <netif_do_set_ipaddr+0x20>
 8008696:	4b1d      	ldr	r3, [pc, #116]	; (800870c <netif_do_set_ipaddr+0x88>)
 8008698:	f240 12cb 	movw	r2, #459	; 0x1cb
 800869c:	491c      	ldr	r1, [pc, #112]	; (8008710 <netif_do_set_ipaddr+0x8c>)
 800869e:	481d      	ldr	r0, [pc, #116]	; (8008714 <netif_do_set_ipaddr+0x90>)
 80086a0:	f008 fee0 	bl	8011464 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <netif_do_set_ipaddr+0x34>
 80086aa:	4b18      	ldr	r3, [pc, #96]	; (800870c <netif_do_set_ipaddr+0x88>)
 80086ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80086b0:	4917      	ldr	r1, [pc, #92]	; (8008710 <netif_do_set_ipaddr+0x8c>)
 80086b2:	4818      	ldr	r0, [pc, #96]	; (8008714 <netif_do_set_ipaddr+0x90>)
 80086b4:	f008 fed6 	bl	8011464 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3304      	adds	r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d01c      	beq.n	8008700 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3304      	adds	r3, #4
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80086d6:	f107 0314 	add.w	r3, r7, #20
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff ffbf 	bl	8008660 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <netif_do_set_ipaddr+0x6a>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	e000      	b.n	80086f0 <netif_do_set_ipaddr+0x6c>
 80086ee:	2300      	movs	r3, #0
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80086f4:	2101      	movs	r1, #1
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 f8d2 	bl	80088a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	080127a0 	.word	0x080127a0
 8008710:	080128b8 	.word	0x080128b8
 8008714:	080127f0 	.word	0x080127f0

08008718 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3308      	adds	r3, #8
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d00a      	beq.n	8008748 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <netif_do_set_netmask+0x26>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	e000      	b.n	8008740 <netif_do_set_netmask+0x28>
 800873e:	2300      	movs	r3, #0
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008756:	b480      	push	{r7}
 8008758:	b085      	sub	sp, #20
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	330c      	adds	r3, #12
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d00a      	beq.n	8008786 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <netif_do_set_gw+0x26>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	e000      	b.n	800877e <netif_do_set_gw+0x28>
 800877c:	2300      	movs	r3, #0
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80087b0:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <netif_set_addr+0x90>)
 80087b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <netif_set_addr+0x90>)
 80087bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80087c4:	4b17      	ldr	r3, [pc, #92]	; (8008824 <netif_set_addr+0x90>)
 80087c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <netif_set_addr+0x42>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <netif_set_addr+0x46>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <netif_set_addr+0x48>
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff ff49 	bl	8008684 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7ff ff8e 	bl	8008718 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff ffa8 	bl	8008756 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800880c:	f107 0310 	add.w	r3, r7, #16
 8008810:	461a      	mov	r2, r3
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff ff35 	bl	8008684 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800881a:	bf00      	nop
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	08014ed8 	.word	0x08014ed8

08008828 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008830:	4a04      	ldr	r2, [pc, #16]	; (8008844 <netif_set_default+0x1c>)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20008cfc 	.word	0x20008cfc

08008848 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <netif_set_up+0x1e>
 8008856:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <netif_set_up+0x4c>)
 8008858:	f44f 7254 	mov.w	r2, #848	; 0x350
 800885c:	490e      	ldr	r1, [pc, #56]	; (8008898 <netif_set_up+0x50>)
 800885e:	480f      	ldr	r0, [pc, #60]	; (800889c <netif_set_up+0x54>)
 8008860:	f008 fe00 	bl	8011464 <iprintf>
 8008864:	e013      	b.n	800888e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10c      	bne.n	800888e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008886:	2103      	movs	r1, #3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f809 	bl	80088a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	080127a0 	.word	0x080127a0
 8008898:	08012928 	.word	0x08012928
 800889c:	080127f0 	.word	0x080127f0

080088a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <netif_issue_reports+0x20>
 80088b2:	4b18      	ldr	r3, [pc, #96]	; (8008914 <netif_issue_reports+0x74>)
 80088b4:	f240 326d 	movw	r2, #877	; 0x36d
 80088b8:	4917      	ldr	r1, [pc, #92]	; (8008918 <netif_issue_reports+0x78>)
 80088ba:	4818      	ldr	r0, [pc, #96]	; (800891c <netif_issue_reports+0x7c>)
 80088bc:	f008 fdd2 	bl	8011464 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01e      	beq.n	800890c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d017      	beq.n	800890c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d013      	beq.n	800890e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3304      	adds	r3, #4
 80088ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00e      	beq.n	800890e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3304      	adds	r3, #4
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f007 f921 	bl	800fb4c <etharp_request>
 800890a:	e000      	b.n	800890e <netif_issue_reports+0x6e>
    return;
 800890c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	080127a0 	.word	0x080127a0
 8008918:	08012944 	.word	0x08012944
 800891c:	080127f0 	.word	0x080127f0

08008920 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	61da      	str	r2, [r3, #28]
  }
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800894e:	f06f 030b 	mvn.w	r3, #11
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d013      	beq.n	8008998 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <netif_get_by_index+0x48>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e00c      	b.n	8008992 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800897e:	3301      	adds	r3, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	79fa      	ldrb	r2, [r7, #7]
 8008984:	429a      	cmp	r2, r3
 8008986:	d101      	bne.n	800898c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	e006      	b.n	800899a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1ef      	bne.n	8008978 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	20008cf8 	.word	0x20008cf8

080089ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80089b0:	4b03      	ldr	r3, [pc, #12]	; (80089c0 <pbuf_pool_is_empty+0x14>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80089b6:	bf00      	nop
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20008d01 	.word	0x20008d01

080089c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	4611      	mov	r1, r2
 80089d0:	461a      	mov	r2, r3
 80089d2:	460b      	mov	r3, r1
 80089d4:	80fb      	strh	r3, [r7, #6]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88ba      	ldrh	r2, [r7, #4]
 80089f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80089f2:	8b3b      	ldrh	r3, [r7, #24]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7f3a      	ldrb	r2, [r7, #28]
 80089fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	73da      	strb	r2, [r3, #15]
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08c      	sub	sp, #48	; 0x30
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	4603      	mov	r3, r0
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	460b      	mov	r3, r1
 8008a24:	80bb      	strh	r3, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008a2e:	887b      	ldrh	r3, [r7, #2]
 8008a30:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008a34:	d07f      	beq.n	8008b36 <pbuf_alloc+0x11e>
 8008a36:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008a3a:	f300 80c8 	bgt.w	8008bce <pbuf_alloc+0x1b6>
 8008a3e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008a42:	d010      	beq.n	8008a66 <pbuf_alloc+0x4e>
 8008a44:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008a48:	f300 80c1 	bgt.w	8008bce <pbuf_alloc+0x1b6>
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d002      	beq.n	8008a56 <pbuf_alloc+0x3e>
 8008a50:	2b41      	cmp	r3, #65	; 0x41
 8008a52:	f040 80bc 	bne.w	8008bce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008a56:	887a      	ldrh	r2, [r7, #2]
 8008a58:	88bb      	ldrh	r3, [r7, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	f000 f8d1 	bl	8008c04 <pbuf_alloc_reference>
 8008a62:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008a64:	e0bd      	b.n	8008be2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008a6e:	88bb      	ldrh	r3, [r7, #4]
 8008a70:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008a72:	2008      	movs	r0, #8
 8008a74:	f7ff fca8 	bl	80083c8 <memp_malloc>
 8008a78:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008a80:	f7ff ff94 	bl	80089ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a8c:	f000 faa8 	bl	8008fe0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	e0a7      	b.n	8008be4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a96:	3303      	adds	r3, #3
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	8b7a      	ldrh	r2, [r7, #26]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	bf28      	it	cs
 8008aac:	4613      	movcs	r3, r2
 8008aae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ab2:	3310      	adds	r3, #16
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3303      	adds	r3, #3
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	4618      	mov	r0, r3
 8008ac0:	89f9      	ldrh	r1, [r7, #14]
 8008ac2:	8b7a      	ldrh	r2, [r7, #26]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	887b      	ldrh	r3, [r7, #2]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	460b      	mov	r3, r1
 8008ace:	4601      	mov	r1, r0
 8008ad0:	6938      	ldr	r0, [r7, #16]
 8008ad2:	f7ff ff77 	bl	80089c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d006      	beq.n	8008af0 <pbuf_alloc+0xd8>
 8008ae2:	4b42      	ldr	r3, [pc, #264]	; (8008bec <pbuf_alloc+0x1d4>)
 8008ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ae8:	4941      	ldr	r1, [pc, #260]	; (8008bf0 <pbuf_alloc+0x1d8>)
 8008aea:	4842      	ldr	r0, [pc, #264]	; (8008bf4 <pbuf_alloc+0x1dc>)
 8008aec:	f008 fcba 	bl	8011464 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008af2:	3303      	adds	r3, #3
 8008af4:	f023 0303 	bic.w	r3, r3, #3
 8008af8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008afc:	d106      	bne.n	8008b0c <pbuf_alloc+0xf4>
 8008afe:	4b3b      	ldr	r3, [pc, #236]	; (8008bec <pbuf_alloc+0x1d4>)
 8008b00:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008b04:	493c      	ldr	r1, [pc, #240]	; (8008bf8 <pbuf_alloc+0x1e0>)
 8008b06:	483b      	ldr	r0, [pc, #236]	; (8008bf4 <pbuf_alloc+0x1dc>)
 8008b08:	f008 fcac 	bl	8011464 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
 8008b16:	e002      	b.n	8008b1e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008b22:	8b7a      	ldrh	r2, [r7, #26]
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008b2e:	8b7b      	ldrh	r3, [r7, #26]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d19e      	bne.n	8008a72 <pbuf_alloc+0x5a>
      break;
 8008b34:	e055      	b.n	8008be2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008b36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b38:	3303      	adds	r3, #3
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	88bb      	ldrh	r3, [r7, #4]
 8008b44:	3303      	adds	r3, #3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f023 0303 	bic.w	r3, r3, #3
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	4413      	add	r3, r2
 8008b50:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008b52:	8b3b      	ldrh	r3, [r7, #24]
 8008b54:	3310      	adds	r3, #16
 8008b56:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008b58:	8b3a      	ldrh	r2, [r7, #24]
 8008b5a:	88bb      	ldrh	r3, [r7, #4]
 8008b5c:	3303      	adds	r3, #3
 8008b5e:	f023 0303 	bic.w	r3, r3, #3
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d306      	bcc.n	8008b74 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008b66:	8afa      	ldrh	r2, [r7, #22]
 8008b68:	88bb      	ldrh	r3, [r7, #4]
 8008b6a:	3303      	adds	r3, #3
 8008b6c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d201      	bcs.n	8008b78 <pbuf_alloc+0x160>
        return NULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e035      	b.n	8008be4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff fab6 	bl	80080ec <mem_malloc>
 8008b80:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <pbuf_alloc+0x174>
        return NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e02b      	b.n	8008be4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b8e:	3310      	adds	r3, #16
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	4413      	add	r3, r2
 8008b94:	3303      	adds	r3, #3
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	88b9      	ldrh	r1, [r7, #4]
 8008b9e:	88ba      	ldrh	r2, [r7, #4]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	887b      	ldrh	r3, [r7, #2]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4601      	mov	r1, r0
 8008bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bae:	f7ff ff09 	bl	80089c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d010      	beq.n	8008be0 <pbuf_alloc+0x1c8>
 8008bbe:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <pbuf_alloc+0x1d4>)
 8008bc0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008bc4:	490d      	ldr	r1, [pc, #52]	; (8008bfc <pbuf_alloc+0x1e4>)
 8008bc6:	480b      	ldr	r0, [pc, #44]	; (8008bf4 <pbuf_alloc+0x1dc>)
 8008bc8:	f008 fc4c 	bl	8011464 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008bcc:	e008      	b.n	8008be0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008bce:	4b07      	ldr	r3, [pc, #28]	; (8008bec <pbuf_alloc+0x1d4>)
 8008bd0:	f240 1227 	movw	r2, #295	; 0x127
 8008bd4:	490a      	ldr	r1, [pc, #40]	; (8008c00 <pbuf_alloc+0x1e8>)
 8008bd6:	4807      	ldr	r0, [pc, #28]	; (8008bf4 <pbuf_alloc+0x1dc>)
 8008bd8:	f008 fc44 	bl	8011464 <iprintf>
      return NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e001      	b.n	8008be4 <pbuf_alloc+0x1cc>
      break;
 8008be0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3728      	adds	r7, #40	; 0x28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	080129d0 	.word	0x080129d0
 8008bf0:	08012a00 	.word	0x08012a00
 8008bf4:	08012a30 	.word	0x08012a30
 8008bf8:	08012a58 	.word	0x08012a58
 8008bfc:	08012a8c 	.word	0x08012a8c
 8008c00:	08012ab8 	.word	0x08012ab8

08008c04 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	807b      	strh	r3, [r7, #2]
 8008c10:	4613      	mov	r3, r2
 8008c12:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c14:	883b      	ldrh	r3, [r7, #0]
 8008c16:	2b41      	cmp	r3, #65	; 0x41
 8008c18:	d009      	beq.n	8008c2e <pbuf_alloc_reference+0x2a>
 8008c1a:	883b      	ldrh	r3, [r7, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d006      	beq.n	8008c2e <pbuf_alloc_reference+0x2a>
 8008c20:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <pbuf_alloc_reference+0x5c>)
 8008c22:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008c26:	490f      	ldr	r1, [pc, #60]	; (8008c64 <pbuf_alloc_reference+0x60>)
 8008c28:	480f      	ldr	r0, [pc, #60]	; (8008c68 <pbuf_alloc_reference+0x64>)
 8008c2a:	f008 fc1b 	bl	8011464 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008c2e:	2007      	movs	r0, #7
 8008c30:	f7ff fbca 	bl	80083c8 <memp_malloc>
 8008c34:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e00b      	b.n	8008c58 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008c40:	8879      	ldrh	r1, [r7, #2]
 8008c42:	887a      	ldrh	r2, [r7, #2]
 8008c44:	2300      	movs	r3, #0
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	883b      	ldrh	r3, [r7, #0]
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff feb7 	bl	80089c4 <pbuf_init_alloced_pbuf>
  return p;
 8008c56:	68fb      	ldr	r3, [r7, #12]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	080129d0 	.word	0x080129d0
 8008c64:	08012ad4 	.word	0x08012ad4
 8008c68:	08012a30 	.word	0x08012a30

08008c6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af02      	add	r7, sp, #8
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	81bb      	strh	r3, [r7, #12]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c84:	8a7b      	ldrh	r3, [r7, #18]
 8008c86:	3303      	adds	r3, #3
 8008c88:	f023 0203 	bic.w	r2, r3, #3
 8008c8c:	89bb      	ldrh	r3, [r7, #12]
 8008c8e:	441a      	add	r2, r3
 8008c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d901      	bls.n	8008c9a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e018      	b.n	8008ccc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008ca0:	8a7b      	ldrh	r3, [r7, #18]
 8008ca2:	3303      	adds	r3, #3
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	6a3a      	ldr	r2, [r7, #32]
 8008caa:	4413      	add	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	e001      	b.n	8008cb4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	89b9      	ldrh	r1, [r7, #12]
 8008cb8:	89ba      	ldrh	r2, [r7, #12]
 8008cba:	2302      	movs	r3, #2
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	897b      	ldrh	r3, [r7, #10]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	6979      	ldr	r1, [r7, #20]
 8008cc6:	f7ff fe7d 	bl	80089c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008cca:	687b      	ldr	r3, [r7, #4]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <pbuf_realloc+0x20>
 8008ce6:	4b3a      	ldr	r3, [pc, #232]	; (8008dd0 <pbuf_realloc+0xfc>)
 8008ce8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008cec:	4939      	ldr	r1, [pc, #228]	; (8008dd4 <pbuf_realloc+0x100>)
 8008cee:	483a      	ldr	r0, [pc, #232]	; (8008dd8 <pbuf_realloc+0x104>)
 8008cf0:	f008 fbb8 	bl	8011464 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	891b      	ldrh	r3, [r3, #8]
 8008cf8:	887a      	ldrh	r2, [r7, #2]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d263      	bcs.n	8008dc6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	891a      	ldrh	r2, [r3, #8]
 8008d02:	887b      	ldrh	r3, [r7, #2]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008d08:	887b      	ldrh	r3, [r7, #2]
 8008d0a:	817b      	strh	r3, [r7, #10]
  q = p;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008d10:	e018      	b.n	8008d44 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	895b      	ldrh	r3, [r3, #10]
 8008d16:	897a      	ldrh	r2, [r7, #10]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	891a      	ldrh	r2, [r3, #8]
 8008d20:	893b      	ldrh	r3, [r7, #8]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <pbuf_realloc+0x70>
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <pbuf_realloc+0xfc>)
 8008d38:	f240 12af 	movw	r2, #431	; 0x1af
 8008d3c:	4927      	ldr	r1, [pc, #156]	; (8008ddc <pbuf_realloc+0x108>)
 8008d3e:	4826      	ldr	r0, [pc, #152]	; (8008dd8 <pbuf_realloc+0x104>)
 8008d40:	f008 fb90 	bl	8011464 <iprintf>
  while (rem_len > q->len) {
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	895b      	ldrh	r3, [r3, #10]
 8008d48:	897a      	ldrh	r2, [r7, #10]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d8e1      	bhi.n	8008d12 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	7b1b      	ldrb	r3, [r3, #12]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d121      	bne.n	8008d9e <pbuf_realloc+0xca>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	895b      	ldrh	r3, [r3, #10]
 8008d5e:	897a      	ldrh	r2, [r7, #10]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d01c      	beq.n	8008d9e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	7b5b      	ldrb	r3, [r3, #13]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d116      	bne.n	8008d9e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	897b      	ldrh	r3, [r7, #10]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	4619      	mov	r1, r3
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff f8b6 	bl	8007ef4 <mem_trim>
 8008d88:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <pbuf_realloc+0xca>
 8008d90:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <pbuf_realloc+0xfc>)
 8008d92:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008d96:	4912      	ldr	r1, [pc, #72]	; (8008de0 <pbuf_realloc+0x10c>)
 8008d98:	480f      	ldr	r0, [pc, #60]	; (8008dd8 <pbuf_realloc+0x104>)
 8008d9a:	f008 fb63 	bl	8011464 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	897a      	ldrh	r2, [r7, #10]
 8008da2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	895a      	ldrh	r2, [r3, #10]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f911 	bl	8008fe0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e000      	b.n	8008dc8 <pbuf_realloc+0xf4>
    return;
 8008dc6:	bf00      	nop

}
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	080129d0 	.word	0x080129d0
 8008dd4:	08012ae8 	.word	0x08012ae8
 8008dd8:	08012a30 	.word	0x08012a30
 8008ddc:	08012b00 	.word	0x08012b00
 8008de0:	08012b18 	.word	0x08012b18

08008de4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <pbuf_add_header_impl+0x22>
 8008df8:	4b2b      	ldr	r3, [pc, #172]	; (8008ea8 <pbuf_add_header_impl+0xc4>)
 8008dfa:	f240 12df 	movw	r2, #479	; 0x1df
 8008dfe:	492b      	ldr	r1, [pc, #172]	; (8008eac <pbuf_add_header_impl+0xc8>)
 8008e00:	482b      	ldr	r0, [pc, #172]	; (8008eb0 <pbuf_add_header_impl+0xcc>)
 8008e02:	f008 fb2f 	bl	8011464 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <pbuf_add_header_impl+0x30>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e12:	d301      	bcc.n	8008e18 <pbuf_add_header_impl+0x34>
    return 1;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e043      	b.n	8008ea0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <pbuf_add_header_impl+0x3e>
    return 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e03e      	b.n	8008ea0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	891a      	ldrh	r2, [r3, #8]
 8008e2a:	8a7b      	ldrh	r3, [r7, #18]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8a7a      	ldrh	r2, [r7, #18]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d901      	bls.n	8008e3a <pbuf_add_header_impl+0x56>
    return 1;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e032      	b.n	8008ea0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	7b1b      	ldrb	r3, [r3, #12]
 8008e3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008e40:	8a3b      	ldrh	r3, [r7, #16]
 8008e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	425b      	negs	r3, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3310      	adds	r3, #16
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d20d      	bcs.n	8008e7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e01d      	b.n	8008ea0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d006      	beq.n	8008e78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	425b      	negs	r3, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]
 8008e76:	e001      	b.n	8008e7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e011      	b.n	8008ea0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	895a      	ldrh	r2, [r3, #10]
 8008e86:	8a7b      	ldrh	r3, [r7, #18]
 8008e88:	4413      	add	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	891a      	ldrh	r2, [r3, #8]
 8008e94:	8a7b      	ldrh	r3, [r7, #18]
 8008e96:	4413      	add	r3, r2
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	811a      	strh	r2, [r3, #8]


  return 0;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	080129d0 	.word	0x080129d0
 8008eac:	08012b34 	.word	0x08012b34
 8008eb0:	08012a30 	.word	0x08012a30

08008eb4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff8e 	bl	8008de4 <pbuf_add_header_impl>
 8008ec8:	4603      	mov	r3, r0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <pbuf_remove_header+0x1e>
 8008ee4:	4b20      	ldr	r3, [pc, #128]	; (8008f68 <pbuf_remove_header+0x94>)
 8008ee6:	f240 224b 	movw	r2, #587	; 0x24b
 8008eea:	4920      	ldr	r1, [pc, #128]	; (8008f6c <pbuf_remove_header+0x98>)
 8008eec:	4820      	ldr	r0, [pc, #128]	; (8008f70 <pbuf_remove_header+0x9c>)
 8008eee:	f008 fab9 	bl	8011464 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <pbuf_remove_header+0x2c>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efe:	d301      	bcc.n	8008f04 <pbuf_remove_header+0x30>
    return 1;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e02c      	b.n	8008f5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <pbuf_remove_header+0x3a>
    return 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e027      	b.n	8008f5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	895b      	ldrh	r3, [r3, #10]
 8008f16:	89fa      	ldrh	r2, [r7, #14]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d908      	bls.n	8008f2e <pbuf_remove_header+0x5a>
 8008f1c:	4b12      	ldr	r3, [pc, #72]	; (8008f68 <pbuf_remove_header+0x94>)
 8008f1e:	f240 2255 	movw	r2, #597	; 0x255
 8008f22:	4914      	ldr	r1, [pc, #80]	; (8008f74 <pbuf_remove_header+0xa0>)
 8008f24:	4812      	ldr	r0, [pc, #72]	; (8008f70 <pbuf_remove_header+0x9c>)
 8008f26:	f008 fa9d 	bl	8011464 <iprintf>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e017      	b.n	8008f5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	441a      	add	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	895a      	ldrh	r2, [r3, #10]
 8008f44:	89fb      	ldrh	r3, [r7, #14]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	891a      	ldrh	r2, [r3, #8]
 8008f52:	89fb      	ldrh	r3, [r7, #14]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	080129d0 	.word	0x080129d0
 8008f6c:	08012b34 	.word	0x08012b34
 8008f70:	08012a30 	.word	0x08012a30
 8008f74:	08012b40 	.word	0x08012b40

08008f78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
 8008f84:	4613      	mov	r3, r2
 8008f86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da08      	bge.n	8008fa2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008f90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f94:	425b      	negs	r3, r3
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff9b 	bl	8008ed4 <pbuf_remove_header>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	e007      	b.n	8008fb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008fa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fa6:	787a      	ldrb	r2, [r7, #1]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff ff1a 	bl	8008de4 <pbuf_add_header_impl>
 8008fb0:	4603      	mov	r3, r0
  }
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff ffd2 	bl	8008f78 <pbuf_header_impl>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <pbuf_free+0x22>
 8008ff4:	4b38      	ldr	r3, [pc, #224]	; (80090d8 <pbuf_free+0xf8>)
 8008ff6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008ffa:	4938      	ldr	r1, [pc, #224]	; (80090dc <pbuf_free+0xfc>)
 8008ffc:	4838      	ldr	r0, [pc, #224]	; (80090e0 <pbuf_free+0x100>)
 8008ffe:	f008 fa31 	bl	8011464 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009002:	2300      	movs	r3, #0
 8009004:	e063      	b.n	80090ce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800900a:	e05c      	b.n	80090c6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7b9b      	ldrb	r3, [r3, #14]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d106      	bne.n	8009022 <pbuf_free+0x42>
 8009014:	4b30      	ldr	r3, [pc, #192]	; (80090d8 <pbuf_free+0xf8>)
 8009016:	f240 22f1 	movw	r2, #753	; 0x2f1
 800901a:	4932      	ldr	r1, [pc, #200]	; (80090e4 <pbuf_free+0x104>)
 800901c:	4830      	ldr	r0, [pc, #192]	; (80090e0 <pbuf_free+0x100>)
 800901e:	f008 fa21 	bl	8011464 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7b9b      	ldrb	r3, [r3, #14]
 8009026:	3b01      	subs	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	739a      	strb	r2, [r3, #14]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7b9b      	ldrb	r3, [r3, #14]
 8009032:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009034:	7dbb      	ldrb	r3, [r7, #22]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d143      	bne.n	80090c2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	7b1b      	ldrb	r3, [r3, #12]
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7b5b      	ldrb	r3, [r3, #13]
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <pbuf_free+0x90>
 8009062:	4b1d      	ldr	r3, [pc, #116]	; (80090d8 <pbuf_free+0xf8>)
 8009064:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009068:	491f      	ldr	r1, [pc, #124]	; (80090e8 <pbuf_free+0x108>)
 800906a:	481d      	ldr	r0, [pc, #116]	; (80090e0 <pbuf_free+0x100>)
 800906c:	f008 f9fa 	bl	8011464 <iprintf>
        pc->custom_free_function(p);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
 8009078:	e01d      	b.n	80090b6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d104      	bne.n	800908a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	2008      	movs	r0, #8
 8009084:	f7ff f9ec 	bl	8008460 <memp_free>
 8009088:	e015      	b.n	80090b6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d104      	bne.n	800909a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	2007      	movs	r0, #7
 8009094:	f7ff f9e4 	bl	8008460 <memp_free>
 8009098:	e00d      	b.n	80090b6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d103      	bne.n	80090a8 <pbuf_free+0xc8>
          mem_free(p);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe febd 	bl	8007e20 <mem_free>
 80090a6:	e006      	b.n	80090b6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <pbuf_free+0xf8>)
 80090aa:	f240 320f 	movw	r2, #783	; 0x30f
 80090ae:	490f      	ldr	r1, [pc, #60]	; (80090ec <pbuf_free+0x10c>)
 80090b0:	480b      	ldr	r0, [pc, #44]	; (80090e0 <pbuf_free+0x100>)
 80090b2:	f008 f9d7 	bl	8011464 <iprintf>
        }
      }
      count++;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	3301      	adds	r3, #1
 80090ba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	e001      	b.n	80090c6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d19f      	bne.n	800900c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	080129d0 	.word	0x080129d0
 80090dc:	08012b34 	.word	0x08012b34
 80090e0:	08012a30 	.word	0x08012a30
 80090e4:	08012b60 	.word	0x08012b60
 80090e8:	08012b78 	.word	0x08012b78
 80090ec:	08012b9c 	.word	0x08012b9c

080090f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80090fc:	e005      	b.n	800910a <pbuf_clen+0x1a>
    ++len;
 80090fe:	89fb      	ldrh	r3, [r7, #14]
 8009100:	3301      	adds	r3, #1
 8009102:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f6      	bne.n	80090fe <pbuf_clen+0xe>
  }
  return len;
 8009110:	89fb      	ldrh	r3, [r7, #14]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
	...

08009120 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d010      	beq.n	8009150 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7b9b      	ldrb	r3, [r3, #14]
 8009132:	3301      	adds	r3, #1
 8009134:	b2da      	uxtb	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7b9b      	ldrb	r3, [r3, #14]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <pbuf_ref+0x30>
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <pbuf_ref+0x38>)
 8009144:	f240 3242 	movw	r2, #834	; 0x342
 8009148:	4904      	ldr	r1, [pc, #16]	; (800915c <pbuf_ref+0x3c>)
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <pbuf_ref+0x40>)
 800914c:	f008 f98a 	bl	8011464 <iprintf>
  }
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	080129d0 	.word	0x080129d0
 800915c:	08012bb0 	.word	0x08012bb0
 8009160:	08012a30 	.word	0x08012a30

08009164 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <pbuf_cat+0x16>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d107      	bne.n	800918a <pbuf_cat+0x26>
 800917a:	4b20      	ldr	r3, [pc, #128]	; (80091fc <pbuf_cat+0x98>)
 800917c:	f240 3259 	movw	r2, #857	; 0x359
 8009180:	491f      	ldr	r1, [pc, #124]	; (8009200 <pbuf_cat+0x9c>)
 8009182:	4820      	ldr	r0, [pc, #128]	; (8009204 <pbuf_cat+0xa0>)
 8009184:	f008 f96e 	bl	8011464 <iprintf>
 8009188:	e034      	b.n	80091f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	e00a      	b.n	80091a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	891a      	ldrh	r2, [r3, #8]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	891b      	ldrh	r3, [r3, #8]
 8009198:	4413      	add	r3, r2
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f0      	bne.n	8009190 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	891a      	ldrh	r2, [r3, #8]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	895b      	ldrh	r3, [r3, #10]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d006      	beq.n	80091c8 <pbuf_cat+0x64>
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <pbuf_cat+0x98>)
 80091bc:	f240 3262 	movw	r2, #866	; 0x362
 80091c0:	4911      	ldr	r1, [pc, #68]	; (8009208 <pbuf_cat+0xa4>)
 80091c2:	4810      	ldr	r0, [pc, #64]	; (8009204 <pbuf_cat+0xa0>)
 80091c4:	f008 f94e 	bl	8011464 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <pbuf_cat+0x7a>
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <pbuf_cat+0x98>)
 80091d2:	f240 3263 	movw	r2, #867	; 0x363
 80091d6:	490d      	ldr	r1, [pc, #52]	; (800920c <pbuf_cat+0xa8>)
 80091d8:	480a      	ldr	r0, [pc, #40]	; (8009204 <pbuf_cat+0xa0>)
 80091da:	f008 f943 	bl	8011464 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	891a      	ldrh	r2, [r3, #8]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	891b      	ldrh	r3, [r3, #8]
 80091e6:	4413      	add	r3, r2
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	080129d0 	.word	0x080129d0
 8009200:	08012bc4 	.word	0x08012bc4
 8009204:	08012a30 	.word	0x08012a30
 8009208:	08012bfc 	.word	0x08012bfc
 800920c:	08012c2c 	.word	0x08012c2c

08009210 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d008      	beq.n	800923a <pbuf_copy+0x2a>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <pbuf_copy+0x2a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	891a      	ldrh	r2, [r3, #8]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	891b      	ldrh	r3, [r3, #8]
 8009236:	429a      	cmp	r2, r3
 8009238:	d209      	bcs.n	800924e <pbuf_copy+0x3e>
 800923a:	4b57      	ldr	r3, [pc, #348]	; (8009398 <pbuf_copy+0x188>)
 800923c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009240:	4956      	ldr	r1, [pc, #344]	; (800939c <pbuf_copy+0x18c>)
 8009242:	4857      	ldr	r0, [pc, #348]	; (80093a0 <pbuf_copy+0x190>)
 8009244:	f008 f90e 	bl	8011464 <iprintf>
 8009248:	f06f 030f 	mvn.w	r3, #15
 800924c:	e09f      	b.n	800938e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	895b      	ldrh	r3, [r3, #10]
 8009252:	461a      	mov	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	895b      	ldrh	r3, [r3, #10]
 800925c:	4619      	mov	r1, r3
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	1acb      	subs	r3, r1, r3
 8009262:	429a      	cmp	r2, r3
 8009264:	d306      	bcc.n	8009274 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	895b      	ldrh	r3, [r3, #10]
 800926a:	461a      	mov	r2, r3
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e005      	b.n	8009280 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	895b      	ldrh	r3, [r3, #10]
 8009278:	461a      	mov	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	18d0      	adds	r0, r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4413      	add	r3, r2
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4619      	mov	r1, r3
 8009294:	f008 fab1 	bl	80117fa <memcpy>
    offset_to += len;
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	895b      	ldrh	r3, [r3, #10]
 80092ac:	461a      	mov	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d906      	bls.n	80092c2 <pbuf_copy+0xb2>
 80092b4:	4b38      	ldr	r3, [pc, #224]	; (8009398 <pbuf_copy+0x188>)
 80092b6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80092ba:	493a      	ldr	r1, [pc, #232]	; (80093a4 <pbuf_copy+0x194>)
 80092bc:	4838      	ldr	r0, [pc, #224]	; (80093a0 <pbuf_copy+0x190>)
 80092be:	f008 f8d1 	bl	8011464 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	895b      	ldrh	r3, [r3, #10]
 80092c6:	461a      	mov	r2, r3
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d906      	bls.n	80092dc <pbuf_copy+0xcc>
 80092ce:	4b32      	ldr	r3, [pc, #200]	; (8009398 <pbuf_copy+0x188>)
 80092d0:	f240 32da 	movw	r2, #986	; 0x3da
 80092d4:	4934      	ldr	r1, [pc, #208]	; (80093a8 <pbuf_copy+0x198>)
 80092d6:	4832      	ldr	r0, [pc, #200]	; (80093a0 <pbuf_copy+0x190>)
 80092d8:	f008 f8c4 	bl	8011464 <iprintf>
    if (offset_from >= p_from->len) {
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	895b      	ldrh	r3, [r3, #10]
 80092e0:	461a      	mov	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d304      	bcc.n	80092f2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	895b      	ldrh	r3, [r3, #10]
 80092f6:	461a      	mov	r2, r3
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d114      	bne.n	8009328 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10c      	bne.n	8009328 <pbuf_copy+0x118>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d009      	beq.n	8009328 <pbuf_copy+0x118>
 8009314:	4b20      	ldr	r3, [pc, #128]	; (8009398 <pbuf_copy+0x188>)
 8009316:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800931a:	4924      	ldr	r1, [pc, #144]	; (80093ac <pbuf_copy+0x19c>)
 800931c:	4820      	ldr	r0, [pc, #128]	; (80093a0 <pbuf_copy+0x190>)
 800931e:	f008 f8a1 	bl	8011464 <iprintf>
 8009322:	f06f 030f 	mvn.w	r3, #15
 8009326:	e032      	b.n	800938e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d013      	beq.n	8009356 <pbuf_copy+0x146>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	895a      	ldrh	r2, [r3, #10]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	891b      	ldrh	r3, [r3, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d10d      	bne.n	8009356 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <pbuf_copy+0x146>
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <pbuf_copy+0x188>)
 8009344:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009348:	4919      	ldr	r1, [pc, #100]	; (80093b0 <pbuf_copy+0x1a0>)
 800934a:	4815      	ldr	r0, [pc, #84]	; (80093a0 <pbuf_copy+0x190>)
 800934c:	f008 f88a 	bl	8011464 <iprintf>
 8009350:	f06f 0305 	mvn.w	r3, #5
 8009354:	e01b      	b.n	800938e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d013      	beq.n	8009384 <pbuf_copy+0x174>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	895a      	ldrh	r2, [r3, #10]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	891b      	ldrh	r3, [r3, #8]
 8009364:	429a      	cmp	r2, r3
 8009366:	d10d      	bne.n	8009384 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <pbuf_copy+0x174>
 8009370:	4b09      	ldr	r3, [pc, #36]	; (8009398 <pbuf_copy+0x188>)
 8009372:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009376:	490e      	ldr	r1, [pc, #56]	; (80093b0 <pbuf_copy+0x1a0>)
 8009378:	4809      	ldr	r0, [pc, #36]	; (80093a0 <pbuf_copy+0x190>)
 800937a:	f008 f873 	bl	8011464 <iprintf>
 800937e:	f06f 0305 	mvn.w	r3, #5
 8009382:	e004      	b.n	800938e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f47f af61 	bne.w	800924e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	080129d0 	.word	0x080129d0
 800939c:	08012c78 	.word	0x08012c78
 80093a0:	08012a30 	.word	0x08012a30
 80093a4:	08012ca8 	.word	0x08012ca8
 80093a8:	08012cc0 	.word	0x08012cc0
 80093ac:	08012cdc 	.word	0x08012cdc
 80093b0:	08012cec 	.word	0x08012cec

080093b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4611      	mov	r1, r2
 80093c0:	461a      	mov	r2, r3
 80093c2:	460b      	mov	r3, r1
 80093c4:	80fb      	strh	r3, [r7, #6]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d108      	bne.n	80093ea <pbuf_copy_partial+0x36>
 80093d8:	4b2b      	ldr	r3, [pc, #172]	; (8009488 <pbuf_copy_partial+0xd4>)
 80093da:	f240 420a 	movw	r2, #1034	; 0x40a
 80093de:	492b      	ldr	r1, [pc, #172]	; (800948c <pbuf_copy_partial+0xd8>)
 80093e0:	482b      	ldr	r0, [pc, #172]	; (8009490 <pbuf_copy_partial+0xdc>)
 80093e2:	f008 f83f 	bl	8011464 <iprintf>
 80093e6:	2300      	movs	r3, #0
 80093e8:	e04a      	b.n	8009480 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <pbuf_copy_partial+0x4e>
 80093f0:	4b25      	ldr	r3, [pc, #148]	; (8009488 <pbuf_copy_partial+0xd4>)
 80093f2:	f240 420b 	movw	r2, #1035	; 0x40b
 80093f6:	4927      	ldr	r1, [pc, #156]	; (8009494 <pbuf_copy_partial+0xe0>)
 80093f8:	4825      	ldr	r0, [pc, #148]	; (8009490 <pbuf_copy_partial+0xdc>)
 80093fa:	f008 f833 	bl	8011464 <iprintf>
 80093fe:	2300      	movs	r3, #0
 8009400:	e03e      	b.n	8009480 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	61fb      	str	r3, [r7, #28]
 8009406:	e034      	b.n	8009472 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009408:	88bb      	ldrh	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <pbuf_copy_partial+0x70>
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	895b      	ldrh	r3, [r3, #10]
 8009412:	88ba      	ldrh	r2, [r7, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d305      	bcc.n	8009424 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	895b      	ldrh	r3, [r3, #10]
 800941c:	88ba      	ldrh	r2, [r7, #4]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	80bb      	strh	r3, [r7, #4]
 8009422:	e023      	b.n	800946c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	895a      	ldrh	r2, [r3, #10]
 8009428:	88bb      	ldrh	r3, [r7, #4]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800942e:	8b3a      	ldrh	r2, [r7, #24]
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	429a      	cmp	r2, r3
 8009434:	d901      	bls.n	800943a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800943a:	8b7b      	ldrh	r3, [r7, #26]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	18d0      	adds	r0, r2, r3
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	88bb      	ldrh	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	8b3a      	ldrh	r2, [r7, #24]
 800944a:	4619      	mov	r1, r3
 800944c:	f008 f9d5 	bl	80117fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009450:	8afa      	ldrh	r2, [r7, #22]
 8009452:	8b3b      	ldrh	r3, [r7, #24]
 8009454:	4413      	add	r3, r2
 8009456:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009458:	8b7a      	ldrh	r2, [r7, #26]
 800945a:	8b3b      	ldrh	r3, [r7, #24]
 800945c:	4413      	add	r3, r2
 800945e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009460:	88fa      	ldrh	r2, [r7, #6]
 8009462:	8b3b      	ldrh	r3, [r7, #24]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <pbuf_copy_partial+0xca>
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1c4      	bne.n	8009408 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800947e:	8afb      	ldrh	r3, [r7, #22]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	080129d0 	.word	0x080129d0
 800948c:	08012d18 	.word	0x08012d18
 8009490:	08012a30 	.word	0x08012a30
 8009494:	08012d38 	.word	0x08012d38

08009498 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	603a      	str	r2, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
 80094a4:	460b      	mov	r3, r1
 80094a6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	8919      	ldrh	r1, [r3, #8]
 80094ac:	88ba      	ldrh	r2, [r7, #4]
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff fab1 	bl	8008a18 <pbuf_alloc>
 80094b6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <pbuf_clone+0x2a>
    return NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	e011      	b.n	80094e6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fea3 	bl	8009210 <pbuf_copy>
 80094ca:	4603      	mov	r3, r0
 80094cc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80094ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d006      	beq.n	80094e4 <pbuf_clone+0x4c>
 80094d6:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <pbuf_clone+0x58>)
 80094d8:	f240 5224 	movw	r2, #1316	; 0x524
 80094dc:	4905      	ldr	r1, [pc, #20]	; (80094f4 <pbuf_clone+0x5c>)
 80094de:	4806      	ldr	r0, [pc, #24]	; (80094f8 <pbuf_clone+0x60>)
 80094e0:	f007 ffc0 	bl	8011464 <iprintf>
  return q;
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	080129d0 	.word	0x080129d0
 80094f4:	08012e44 	.word	0x08012e44
 80094f8:	08012a30 	.word	0x08012a30

080094fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009500:	f007 feb0 	bl	8011264 <rand>
 8009504:	4603      	mov	r3, r0
 8009506:	b29b      	uxth	r3, r3
 8009508:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800950c:	b29b      	uxth	r3, r3
 800950e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009512:	b29a      	uxth	r2, r3
 8009514:	4b01      	ldr	r3, [pc, #4]	; (800951c <tcp_init+0x20>)
 8009516:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20000136 	.word	0x20000136

08009520 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7d1b      	ldrb	r3, [r3, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d105      	bne.n	800953c <tcp_free+0x1c>
 8009530:	4b06      	ldr	r3, [pc, #24]	; (800954c <tcp_free+0x2c>)
 8009532:	22d4      	movs	r2, #212	; 0xd4
 8009534:	4906      	ldr	r1, [pc, #24]	; (8009550 <tcp_free+0x30>)
 8009536:	4807      	ldr	r0, [pc, #28]	; (8009554 <tcp_free+0x34>)
 8009538:	f007 ff94 	bl	8011464 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	2001      	movs	r0, #1
 8009540:	f7fe ff8e 	bl	8008460 <memp_free>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	08012ed0 	.word	0x08012ed0
 8009550:	08012f00 	.word	0x08012f00
 8009554:	08012f14 	.word	0x08012f14

08009558 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7d1b      	ldrb	r3, [r3, #20]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d105      	bne.n	8009574 <tcp_free_listen+0x1c>
 8009568:	4b06      	ldr	r3, [pc, #24]	; (8009584 <tcp_free_listen+0x2c>)
 800956a:	22df      	movs	r2, #223	; 0xdf
 800956c:	4906      	ldr	r1, [pc, #24]	; (8009588 <tcp_free_listen+0x30>)
 800956e:	4807      	ldr	r0, [pc, #28]	; (800958c <tcp_free_listen+0x34>)
 8009570:	f007 ff78 	bl	8011464 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	2002      	movs	r0, #2
 8009578:	f7fe ff72 	bl	8008460 <memp_free>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	08012ed0 	.word	0x08012ed0
 8009588:	08012f3c 	.word	0x08012f3c
 800958c:	08012f14 	.word	0x08012f14

08009590 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009594:	f000 fea2 	bl	800a2dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <tcp_tmr+0x28>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <tcp_tmr+0x28>)
 80095a2:	701a      	strb	r2, [r3, #0]
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <tcp_tmr+0x28>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80095b0:	f000 fb54 	bl	8009c5c <tcp_slowtmr>
  }
}
 80095b4:	bf00      	nop
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20008d19 	.word	0x20008d19

080095bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d105      	bne.n	80095d8 <tcp_remove_listener+0x1c>
 80095cc:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <tcp_remove_listener+0x48>)
 80095ce:	22ff      	movs	r2, #255	; 0xff
 80095d0:	490d      	ldr	r1, [pc, #52]	; (8009608 <tcp_remove_listener+0x4c>)
 80095d2:	480e      	ldr	r0, [pc, #56]	; (800960c <tcp_remove_listener+0x50>)
 80095d4:	f007 ff46 	bl	8011464 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	e00a      	b.n	80095f4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d102      	bne.n	80095ee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f1      	bne.n	80095de <tcp_remove_listener+0x22>
    }
  }
}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	08012ed0 	.word	0x08012ed0
 8009608:	08012f58 	.word	0x08012f58
 800960c:	08012f14 	.word	0x08012f14

08009610 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <tcp_listen_closed+0x1c>
 800961e:	4b14      	ldr	r3, [pc, #80]	; (8009670 <tcp_listen_closed+0x60>)
 8009620:	f240 1211 	movw	r2, #273	; 0x111
 8009624:	4913      	ldr	r1, [pc, #76]	; (8009674 <tcp_listen_closed+0x64>)
 8009626:	4814      	ldr	r0, [pc, #80]	; (8009678 <tcp_listen_closed+0x68>)
 8009628:	f007 ff1c 	bl	8011464 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7d1b      	ldrb	r3, [r3, #20]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d006      	beq.n	8009642 <tcp_listen_closed+0x32>
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <tcp_listen_closed+0x60>)
 8009636:	f44f 7289 	mov.w	r2, #274	; 0x112
 800963a:	4910      	ldr	r1, [pc, #64]	; (800967c <tcp_listen_closed+0x6c>)
 800963c:	480e      	ldr	r0, [pc, #56]	; (8009678 <tcp_listen_closed+0x68>)
 800963e:	f007 ff11 	bl	8011464 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009642:	2301      	movs	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e00b      	b.n	8009660 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009648:	4a0d      	ldr	r2, [pc, #52]	; (8009680 <tcp_listen_closed+0x70>)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff ffb1 	bl	80095bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b03      	cmp	r3, #3
 8009664:	d9f0      	bls.n	8009648 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	08012ed0 	.word	0x08012ed0
 8009674:	08012f80 	.word	0x08012f80
 8009678:	08012f14 	.word	0x08012f14
 800967c:	08012f8c 	.word	0x08012f8c
 8009680:	08014eb0 	.word	0x08014eb0

08009684 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009684:	b5b0      	push	{r4, r5, r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af04      	add	r7, sp, #16
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <tcp_close_shutdown+0x20>
 8009696:	4b63      	ldr	r3, [pc, #396]	; (8009824 <tcp_close_shutdown+0x1a0>)
 8009698:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800969c:	4962      	ldr	r1, [pc, #392]	; (8009828 <tcp_close_shutdown+0x1a4>)
 800969e:	4863      	ldr	r0, [pc, #396]	; (800982c <tcp_close_shutdown+0x1a8>)
 80096a0:	f007 fee0 	bl	8011464 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d066      	beq.n	8009778 <tcp_close_shutdown+0xf4>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	7d1b      	ldrb	r3, [r3, #20]
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d003      	beq.n	80096ba <tcp_close_shutdown+0x36>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7d1b      	ldrb	r3, [r3, #20]
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	d15e      	bne.n	8009778 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d104      	bne.n	80096cc <tcp_close_shutdown+0x48>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80096ca:	d055      	beq.n	8009778 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8b5b      	ldrh	r3, [r3, #26]
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <tcp_close_shutdown+0x62>
 80096d8:	4b52      	ldr	r3, [pc, #328]	; (8009824 <tcp_close_shutdown+0x1a0>)
 80096da:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80096de:	4954      	ldr	r1, [pc, #336]	; (8009830 <tcp_close_shutdown+0x1ac>)
 80096e0:	4852      	ldr	r0, [pc, #328]	; (800982c <tcp_close_shutdown+0x1a8>)
 80096e2:	f007 febf 	bl	8011464 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80096ee:	687d      	ldr	r5, [r7, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	8ad2      	ldrh	r2, [r2, #22]
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	8b09      	ldrh	r1, [r1, #24]
 80096fc:	9102      	str	r1, [sp, #8]
 80096fe:	9201      	str	r2, [sp, #4]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	462b      	mov	r3, r5
 8009704:	4622      	mov	r2, r4
 8009706:	4601      	mov	r1, r0
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f004 fe91 	bl	800e430 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f8c6 	bl	800a8a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009714:	4b47      	ldr	r3, [pc, #284]	; (8009834 <tcp_close_shutdown+0x1b0>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d105      	bne.n	800972a <tcp_close_shutdown+0xa6>
 800971e:	4b45      	ldr	r3, [pc, #276]	; (8009834 <tcp_close_shutdown+0x1b0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a43      	ldr	r2, [pc, #268]	; (8009834 <tcp_close_shutdown+0x1b0>)
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	e013      	b.n	8009752 <tcp_close_shutdown+0xce>
 800972a:	4b42      	ldr	r3, [pc, #264]	; (8009834 <tcp_close_shutdown+0x1b0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	e00c      	b.n	800974c <tcp_close_shutdown+0xc8>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d104      	bne.n	8009746 <tcp_close_shutdown+0xc2>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	60da      	str	r2, [r3, #12]
 8009744:	e005      	b.n	8009752 <tcp_close_shutdown+0xce>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1ef      	bne.n	8009732 <tcp_close_shutdown+0xae>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	60da      	str	r2, [r3, #12]
 8009758:	4b37      	ldr	r3, [pc, #220]	; (8009838 <tcp_close_shutdown+0x1b4>)
 800975a:	2201      	movs	r2, #1
 800975c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800975e:	4b37      	ldr	r3, [pc, #220]	; (800983c <tcp_close_shutdown+0x1b8>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	d102      	bne.n	800976e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009768:	f003 fd5e 	bl	800d228 <tcp_trigger_input_pcb_close>
 800976c:	e002      	b.n	8009774 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fed6 	bl	8009520 <tcp_free>
      }
      return ERR_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e050      	b.n	800981a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d03b      	beq.n	80097f8 <tcp_close_shutdown+0x174>
 8009780:	2b02      	cmp	r3, #2
 8009782:	dc44      	bgt.n	800980e <tcp_close_shutdown+0x18a>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <tcp_close_shutdown+0x10a>
 8009788:	2b01      	cmp	r3, #1
 800978a:	d02a      	beq.n	80097e2 <tcp_close_shutdown+0x15e>
 800978c:	e03f      	b.n	800980e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	8adb      	ldrh	r3, [r3, #22]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d021      	beq.n	80097da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009796:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <tcp_close_shutdown+0x1bc>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d105      	bne.n	80097ac <tcp_close_shutdown+0x128>
 80097a0:	4b27      	ldr	r3, [pc, #156]	; (8009840 <tcp_close_shutdown+0x1bc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	4a26      	ldr	r2, [pc, #152]	; (8009840 <tcp_close_shutdown+0x1bc>)
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e013      	b.n	80097d4 <tcp_close_shutdown+0x150>
 80097ac:	4b24      	ldr	r3, [pc, #144]	; (8009840 <tcp_close_shutdown+0x1bc>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60bb      	str	r3, [r7, #8]
 80097b2:	e00c      	b.n	80097ce <tcp_close_shutdown+0x14a>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d104      	bne.n	80097c8 <tcp_close_shutdown+0x144>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	e005      	b.n	80097d4 <tcp_close_shutdown+0x150>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1ef      	bne.n	80097b4 <tcp_close_shutdown+0x130>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff fea0 	bl	8009520 <tcp_free>
      break;
 80097e0:	e01a      	b.n	8009818 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff ff14 	bl	8009610 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4816      	ldr	r0, [pc, #88]	; (8009844 <tcp_close_shutdown+0x1c0>)
 80097ec:	f001 f8a8 	bl	800a940 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff feb1 	bl	8009558 <tcp_free_listen>
      break;
 80097f6:	e00f      	b.n	8009818 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	480e      	ldr	r0, [pc, #56]	; (8009834 <tcp_close_shutdown+0x1b0>)
 80097fc:	f001 f8a0 	bl	800a940 <tcp_pcb_remove>
 8009800:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <tcp_close_shutdown+0x1b4>)
 8009802:	2201      	movs	r2, #1
 8009804:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fe8a 	bl	8009520 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800980c:	e004      	b.n	8009818 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f81a 	bl	8009848 <tcp_close_shutdown_fin>
 8009814:	4603      	mov	r3, r0
 8009816:	e000      	b.n	800981a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bdb0      	pop	{r4, r5, r7, pc}
 8009822:	bf00      	nop
 8009824:	08012ed0 	.word	0x08012ed0
 8009828:	08012fa4 	.word	0x08012fa4
 800982c:	08012f14 	.word	0x08012f14
 8009830:	08012fc4 	.word	0x08012fc4
 8009834:	20008d10 	.word	0x20008d10
 8009838:	20008d18 	.word	0x20008d18
 800983c:	20008d50 	.word	0x20008d50
 8009840:	20008d08 	.word	0x20008d08
 8009844:	20008d0c 	.word	0x20008d0c

08009848 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <tcp_close_shutdown_fin+0x1c>
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <tcp_close_shutdown_fin+0xc8>)
 8009858:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800985c:	492d      	ldr	r1, [pc, #180]	; (8009914 <tcp_close_shutdown_fin+0xcc>)
 800985e:	482e      	ldr	r0, [pc, #184]	; (8009918 <tcp_close_shutdown_fin+0xd0>)
 8009860:	f007 fe00 	bl	8011464 <iprintf>

  switch (pcb->state) {
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7d1b      	ldrb	r3, [r3, #20]
 8009868:	2b07      	cmp	r3, #7
 800986a:	d020      	beq.n	80098ae <tcp_close_shutdown_fin+0x66>
 800986c:	2b07      	cmp	r3, #7
 800986e:	dc2b      	bgt.n	80098c8 <tcp_close_shutdown_fin+0x80>
 8009870:	2b03      	cmp	r3, #3
 8009872:	d002      	beq.n	800987a <tcp_close_shutdown_fin+0x32>
 8009874:	2b04      	cmp	r3, #4
 8009876:	d00d      	beq.n	8009894 <tcp_close_shutdown_fin+0x4c>
 8009878:	e026      	b.n	80098c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f003 fee6 	bl	800d64c <tcp_send_fin>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11f      	bne.n	80098cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2205      	movs	r2, #5
 8009890:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009892:	e01b      	b.n	80098cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f003 fed9 	bl	800d64c <tcp_send_fin>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800989e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d114      	bne.n	80098d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2205      	movs	r2, #5
 80098aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80098ac:	e010      	b.n	80098d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f003 fecc 	bl	800d64c <tcp_send_fin>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80098b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d109      	bne.n	80098d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2209      	movs	r2, #9
 80098c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80098c6:	e005      	b.n	80098d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e01c      	b.n	8009906 <tcp_close_shutdown_fin+0xbe>
      break;
 80098cc:	bf00      	nop
 80098ce:	e002      	b.n	80098d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80098d0:	bf00      	nop
 80098d2:	e000      	b.n	80098d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80098d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80098d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f003 fff2 	bl	800d8c8 <tcp_output>
 80098e4:	e00d      	b.n	8009902 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80098e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	d108      	bne.n	8009902 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8b5b      	ldrh	r3, [r3, #26]
 80098f4:	f043 0308 	orr.w	r3, r3, #8
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	e001      	b.n	8009906 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	08012ed0 	.word	0x08012ed0
 8009914:	08012f80 	.word	0x08012f80
 8009918:	08012f14 	.word	0x08012f14

0800991c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <tcp_close+0x22>
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <tcp_close+0x4c>)
 800992c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009930:	490e      	ldr	r1, [pc, #56]	; (800996c <tcp_close+0x50>)
 8009932:	480f      	ldr	r0, [pc, #60]	; (8009970 <tcp_close+0x54>)
 8009934:	f007 fd96 	bl	8011464 <iprintf>
 8009938:	f06f 030f 	mvn.w	r3, #15
 800993c:	e00f      	b.n	800995e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7d1b      	ldrb	r3, [r3, #20]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d006      	beq.n	8009954 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8b5b      	ldrh	r3, [r3, #26]
 800994a:	f043 0310 	orr.w	r3, r3, #16
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009954:	2101      	movs	r1, #1
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fe94 	bl	8009684 <tcp_close_shutdown>
 800995c:	4603      	mov	r3, r0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	08012ed0 	.word	0x08012ed0
 800996c:	08012fe0 	.word	0x08012fe0
 8009970:	08012f14 	.word	0x08012f14

08009974 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08e      	sub	sp, #56	; 0x38
 8009978:	af04      	add	r7, sp, #16
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d107      	bne.n	8009994 <tcp_abandon+0x20>
 8009984:	4b52      	ldr	r3, [pc, #328]	; (8009ad0 <tcp_abandon+0x15c>)
 8009986:	f240 223d 	movw	r2, #573	; 0x23d
 800998a:	4952      	ldr	r1, [pc, #328]	; (8009ad4 <tcp_abandon+0x160>)
 800998c:	4852      	ldr	r0, [pc, #328]	; (8009ad8 <tcp_abandon+0x164>)
 800998e:	f007 fd69 	bl	8011464 <iprintf>
 8009992:	e099      	b.n	8009ac8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	7d1b      	ldrb	r3, [r3, #20]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d106      	bne.n	80099aa <tcp_abandon+0x36>
 800999c:	4b4c      	ldr	r3, [pc, #304]	; (8009ad0 <tcp_abandon+0x15c>)
 800999e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80099a2:	494e      	ldr	r1, [pc, #312]	; (8009adc <tcp_abandon+0x168>)
 80099a4:	484c      	ldr	r0, [pc, #304]	; (8009ad8 <tcp_abandon+0x164>)
 80099a6:	f007 fd5d 	bl	8011464 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	7d1b      	ldrb	r3, [r3, #20]
 80099ae:	2b0a      	cmp	r3, #10
 80099b0:	d107      	bne.n	80099c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	484a      	ldr	r0, [pc, #296]	; (8009ae0 <tcp_abandon+0x16c>)
 80099b6:	f000 ffc3 	bl	800a940 <tcp_pcb_remove>
    tcp_free(pcb);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fdb0 	bl	8009520 <tcp_free>
 80099c0:	e082      	b.n	8009ac8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7d1b      	ldrb	r3, [r3, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d126      	bne.n	8009a3a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8adb      	ldrh	r3, [r3, #22]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d02e      	beq.n	8009a52 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80099f4:	4b3b      	ldr	r3, [pc, #236]	; (8009ae4 <tcp_abandon+0x170>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d105      	bne.n	8009a0a <tcp_abandon+0x96>
 80099fe:	4b39      	ldr	r3, [pc, #228]	; (8009ae4 <tcp_abandon+0x170>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a37      	ldr	r2, [pc, #220]	; (8009ae4 <tcp_abandon+0x170>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	e013      	b.n	8009a32 <tcp_abandon+0xbe>
 8009a0a:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <tcp_abandon+0x170>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e00c      	b.n	8009a2c <tcp_abandon+0xb8>
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d104      	bne.n	8009a26 <tcp_abandon+0xb2>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	60da      	str	r2, [r3, #12]
 8009a24:	e005      	b.n	8009a32 <tcp_abandon+0xbe>
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1ef      	bne.n	8009a12 <tcp_abandon+0x9e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	60da      	str	r2, [r3, #12]
 8009a38:	e00b      	b.n	8009a52 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8adb      	ldrh	r3, [r3, #22]
 8009a42:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4828      	ldr	r0, [pc, #160]	; (8009ae8 <tcp_abandon+0x174>)
 8009a48:	f000 ff7a 	bl	800a940 <tcp_pcb_remove>
 8009a4c:	4b27      	ldr	r3, [pc, #156]	; (8009aec <tcp_abandon+0x178>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d004      	beq.n	8009a64 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fd1c 	bl	800a49c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fd13 	bl	800a49c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fd0a 	bl	800a49c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00e      	beq.n	8009aac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	8b12      	ldrh	r2, [r2, #24]
 8009a98:	9202      	str	r2, [sp, #8]
 8009a9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a9c:	9201      	str	r2, [sp, #4]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	69b9      	ldr	r1, [r7, #24]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f004 fcc2 	bl	800e430 <tcp_rst>
    }
    last_state = pcb->state;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	7d1b      	ldrb	r3, [r3, #20]
 8009ab0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fd34 	bl	8009520 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <tcp_abandon+0x154>
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f06f 010c 	mvn.w	r1, #12
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	4798      	blx	r3
  }
}
 8009ac8:	3728      	adds	r7, #40	; 0x28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	08012ed0 	.word	0x08012ed0
 8009ad4:	08013014 	.word	0x08013014
 8009ad8:	08012f14 	.word	0x08012f14
 8009adc:	08013030 	.word	0x08013030
 8009ae0:	20008d14 	.word	0x20008d14
 8009ae4:	20008d08 	.word	0x20008d08
 8009ae8:	20008d10 	.word	0x20008d10
 8009aec:	20008d18 	.word	0x20008d18

08009af0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009af8:	2101      	movs	r1, #1
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff ff3a 	bl	8009974 <tcp_abandon>
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <tcp_update_rcv_ann_wnd+0x1c>
 8009b16:	4b25      	ldr	r3, [pc, #148]	; (8009bac <tcp_update_rcv_ann_wnd+0xa4>)
 8009b18:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009b1c:	4924      	ldr	r1, [pc, #144]	; (8009bb0 <tcp_update_rcv_ann_wnd+0xa8>)
 8009b1e:	4825      	ldr	r0, [pc, #148]	; (8009bb4 <tcp_update_rcv_ann_wnd+0xac>)
 8009b20:	f007 fca0 	bl	8011464 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009b2c:	4413      	add	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009b38:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009b3c:	bf28      	it	cs
 8009b3e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009b42:	b292      	uxth	r2, r2
 8009b44:	4413      	add	r3, r2
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	db08      	blt.n	8009b60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	e020      	b.n	8009ba2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dd03      	ble.n	8009b76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b74:	e014      	b.n	8009ba0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b88:	d306      	bcc.n	8009b98 <tcp_update_rcv_ann_wnd+0x90>
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <tcp_update_rcv_ann_wnd+0xa4>)
 8009b8c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009b90:	4909      	ldr	r1, [pc, #36]	; (8009bb8 <tcp_update_rcv_ann_wnd+0xb0>)
 8009b92:	4808      	ldr	r0, [pc, #32]	; (8009bb4 <tcp_update_rcv_ann_wnd+0xac>)
 8009b94:	f007 fc66 	bl	8011464 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009ba0:	2300      	movs	r3, #0
  }
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08012ed0 	.word	0x08012ed0
 8009bb0:	0801312c 	.word	0x0801312c
 8009bb4:	08012f14 	.word	0x08012f14
 8009bb8:	08013150 	.word	0x08013150

08009bbc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d107      	bne.n	8009bde <tcp_recved+0x22>
 8009bce:	4b1f      	ldr	r3, [pc, #124]	; (8009c4c <tcp_recved+0x90>)
 8009bd0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009bd4:	491e      	ldr	r1, [pc, #120]	; (8009c50 <tcp_recved+0x94>)
 8009bd6:	481f      	ldr	r0, [pc, #124]	; (8009c54 <tcp_recved+0x98>)
 8009bd8:	f007 fc44 	bl	8011464 <iprintf>
 8009bdc:	e032      	b.n	8009c44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	7d1b      	ldrb	r3, [r3, #20]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d106      	bne.n	8009bf4 <tcp_recved+0x38>
 8009be6:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <tcp_recved+0x90>)
 8009be8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009bec:	491a      	ldr	r1, [pc, #104]	; (8009c58 <tcp_recved+0x9c>)
 8009bee:	4819      	ldr	r0, [pc, #100]	; (8009c54 <tcp_recved+0x98>)
 8009bf0:	f007 fc38 	bl	8011464 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bf8:	887b      	ldrh	r3, [r7, #2]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009bfe:	89fb      	ldrh	r3, [r7, #14]
 8009c00:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c04:	d804      	bhi.n	8009c10 <tcp_recved+0x54>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0a:	89fa      	ldrh	r2, [r7, #14]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d204      	bcs.n	8009c1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009c16:	851a      	strh	r2, [r3, #40]	; 0x28
 8009c18:	e002      	b.n	8009c20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	89fa      	ldrh	r2, [r7, #14]
 8009c1e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff71 	bl	8009b08 <tcp_update_rcv_ann_wnd>
 8009c26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009c2e:	d309      	bcc.n	8009c44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8b5b      	ldrh	r3, [r3, #26]
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f003 fe42 	bl	800d8c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	08012ed0 	.word	0x08012ed0
 8009c50:	0801316c 	.word	0x0801316c
 8009c54:	08012f14 	.word	0x08012f14
 8009c58:	08013184 	.word	0x08013184

08009c5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009c5c:	b5b0      	push	{r4, r5, r7, lr}
 8009c5e:	b090      	sub	sp, #64	; 0x40
 8009c60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009c68:	4b94      	ldr	r3, [pc, #592]	; (8009ebc <tcp_slowtmr+0x260>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4a93      	ldr	r2, [pc, #588]	; (8009ebc <tcp_slowtmr+0x260>)
 8009c70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009c72:	4b93      	ldr	r3, [pc, #588]	; (8009ec0 <tcp_slowtmr+0x264>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	4b91      	ldr	r3, [pc, #580]	; (8009ec0 <tcp_slowtmr+0x264>)
 8009c7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009c82:	4b90      	ldr	r3, [pc, #576]	; (8009ec4 <tcp_slowtmr+0x268>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009c88:	e29f      	b.n	800a1ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	7d1b      	ldrb	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <tcp_slowtmr+0x44>
 8009c92:	4b8d      	ldr	r3, [pc, #564]	; (8009ec8 <tcp_slowtmr+0x26c>)
 8009c94:	f240 42be 	movw	r2, #1214	; 0x4be
 8009c98:	498c      	ldr	r1, [pc, #560]	; (8009ecc <tcp_slowtmr+0x270>)
 8009c9a:	488d      	ldr	r0, [pc, #564]	; (8009ed0 <tcp_slowtmr+0x274>)
 8009c9c:	f007 fbe2 	bl	8011464 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	7d1b      	ldrb	r3, [r3, #20]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d106      	bne.n	8009cb6 <tcp_slowtmr+0x5a>
 8009ca8:	4b87      	ldr	r3, [pc, #540]	; (8009ec8 <tcp_slowtmr+0x26c>)
 8009caa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009cae:	4989      	ldr	r1, [pc, #548]	; (8009ed4 <tcp_slowtmr+0x278>)
 8009cb0:	4887      	ldr	r0, [pc, #540]	; (8009ed0 <tcp_slowtmr+0x274>)
 8009cb2:	f007 fbd7 	bl	8011464 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	7d1b      	ldrb	r3, [r3, #20]
 8009cba:	2b0a      	cmp	r3, #10
 8009cbc:	d106      	bne.n	8009ccc <tcp_slowtmr+0x70>
 8009cbe:	4b82      	ldr	r3, [pc, #520]	; (8009ec8 <tcp_slowtmr+0x26c>)
 8009cc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009cc4:	4984      	ldr	r1, [pc, #528]	; (8009ed8 <tcp_slowtmr+0x27c>)
 8009cc6:	4882      	ldr	r0, [pc, #520]	; (8009ed0 <tcp_slowtmr+0x274>)
 8009cc8:	f007 fbcc 	bl	8011464 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	7f9a      	ldrb	r2, [r3, #30]
 8009cd0:	4b7b      	ldr	r3, [pc, #492]	; (8009ec0 <tcp_slowtmr+0x264>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d105      	bne.n	8009ce4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009ce2:	e272      	b.n	800a1ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009ce4:	4b76      	ldr	r3, [pc, #472]	; (8009ec0 <tcp_slowtmr+0x264>)
 8009ce6:	781a      	ldrb	r2, [r3, #0]
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	7d1b      	ldrb	r3, [r3, #20]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d10a      	bne.n	8009d16 <tcp_slowtmr+0xba>
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d905      	bls.n	8009d16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d0e:	3301      	adds	r3, #1
 8009d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d14:	e11e      	b.n	8009f54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d1c:	2b0b      	cmp	r3, #11
 8009d1e:	d905      	bls.n	8009d2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d24:	3301      	adds	r3, #1
 8009d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d2a:	e113      	b.n	8009f54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d075      	beq.n	8009e22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d006      	beq.n	8009d4c <tcp_slowtmr+0xf0>
 8009d3e:	4b62      	ldr	r3, [pc, #392]	; (8009ec8 <tcp_slowtmr+0x26c>)
 8009d40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009d44:	4965      	ldr	r1, [pc, #404]	; (8009edc <tcp_slowtmr+0x280>)
 8009d46:	4862      	ldr	r0, [pc, #392]	; (8009ed0 <tcp_slowtmr+0x274>)
 8009d48:	f007 fb8c 	bl	8011464 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d106      	bne.n	8009d62 <tcp_slowtmr+0x106>
 8009d54:	4b5c      	ldr	r3, [pc, #368]	; (8009ec8 <tcp_slowtmr+0x26c>)
 8009d56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009d5a:	4961      	ldr	r1, [pc, #388]	; (8009ee0 <tcp_slowtmr+0x284>)
 8009d5c:	485c      	ldr	r0, [pc, #368]	; (8009ed0 <tcp_slowtmr+0x274>)
 8009d5e:	f007 fb81 	bl	8011464 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009d68:	2b0b      	cmp	r3, #11
 8009d6a:	d905      	bls.n	8009d78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d70:	3301      	adds	r3, #1
 8009d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d76:	e0ed      	b.n	8009f54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	4a58      	ldr	r2, [pc, #352]	; (8009ee4 <tcp_slowtmr+0x288>)
 8009d82:	5cd3      	ldrb	r3, [r2, r3]
 8009d84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009d8c:	7c7a      	ldrb	r2, [r7, #17]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d907      	bls.n	8009da2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009d98:	3301      	adds	r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009da8:	7c7a      	ldrb	r2, [r7, #17]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	f200 80d2 	bhi.w	8009f54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009db0:	2301      	movs	r3, #1
 8009db2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d108      	bne.n	8009dd0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dc0:	f004 fc2a 	bl	800e618 <tcp_zero_window_probe>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009dca:	2300      	movs	r3, #0
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	e011      	b.n	8009df4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dda:	f003 faef 	bl	800d3bc <tcp_split_unsent_seg>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d107      	bne.n	8009df4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009de6:	f003 fd6f 	bl	800d8c8 <tcp_output>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80ac 	beq.w	8009f54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009e0a:	2b06      	cmp	r3, #6
 8009e0c:	f200 80a2 	bhi.w	8009f54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009e16:	3301      	adds	r3, #1
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009e20:	e098      	b.n	8009f54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db0f      	blt.n	8009e4c <tcp_slowtmr+0x1f0>
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009e32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d008      	beq.n	8009e4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	3301      	adds	r3, #1
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	b21a      	sxth	r2, r3
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	db7b      	blt.n	8009f54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e5e:	f004 f827 	bl	800deb0 <tcp_rexmit_rto_prepare>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <tcp_slowtmr+0x21c>
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d171      	bne.n	8009f54 <tcp_slowtmr+0x2f8>
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d06d      	beq.n	8009f54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	7d1b      	ldrb	r3, [r3, #20]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d03a      	beq.n	8009ef6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e86:	2b0c      	cmp	r3, #12
 8009e88:	bf28      	it	cs
 8009e8a:	230c      	movcs	r3, #12
 8009e8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e94:	10db      	asrs	r3, r3, #3
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ea0:	4413      	add	r3, r2
 8009ea2:	7efa      	ldrb	r2, [r7, #27]
 8009ea4:	4910      	ldr	r1, [pc, #64]	; (8009ee8 <tcp_slowtmr+0x28c>)
 8009ea6:	5c8a      	ldrb	r2, [r1, r2]
 8009ea8:	4093      	lsls	r3, r2
 8009eaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	dc1a      	bgt.n	8009eec <tcp_slowtmr+0x290>
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	b21a      	sxth	r2, r3
 8009eba:	e019      	b.n	8009ef0 <tcp_slowtmr+0x294>
 8009ebc:	20008d04 	.word	0x20008d04
 8009ec0:	20008d1a 	.word	0x20008d1a
 8009ec4:	20008d10 	.word	0x20008d10
 8009ec8:	08012ed0 	.word	0x08012ed0
 8009ecc:	08013214 	.word	0x08013214
 8009ed0:	08012f14 	.word	0x08012f14
 8009ed4:	08013240 	.word	0x08013240
 8009ed8:	0801326c 	.word	0x0801326c
 8009edc:	0801329c 	.word	0x0801329c
 8009ee0:	080132d0 	.word	0x080132d0
 8009ee4:	08014ea8 	.word	0x08014ea8
 8009ee8:	08014e98 	.word	0x08014e98
 8009eec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	2200      	movs	r2, #0
 8009efa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bf28      	it	cs
 8009f0c:	4613      	movcs	r3, r2
 8009f0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009f10:	8a7b      	ldrh	r3, [r7, #18]
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d206      	bcs.n	8009f3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f50:	f004 f81e 	bl	800df90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	7d1b      	ldrb	r3, [r3, #20]
 8009f58:	2b06      	cmp	r3, #6
 8009f5a:	d111      	bne.n	8009f80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	8b5b      	ldrh	r3, [r3, #26]
 8009f60:	f003 0310 	and.w	r3, r3, #16
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f68:	4b9d      	ldr	r3, [pc, #628]	; (800a1e0 <tcp_slowtmr+0x584>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b28      	cmp	r3, #40	; 0x28
 8009f74:	d904      	bls.n	8009f80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f82:	7a5b      	ldrb	r3, [r3, #9]
 8009f84:	f003 0308 	and.w	r3, r3, #8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d04c      	beq.n	800a026 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d003      	beq.n	8009f9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009f98:	2b07      	cmp	r3, #7
 8009f9a:	d144      	bne.n	800a026 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f9c:	4b90      	ldr	r3, [pc, #576]	; (800a1e0 <tcp_slowtmr+0x584>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009fb0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009fb4:	498b      	ldr	r1, [pc, #556]	; (800a1e4 <tcp_slowtmr+0x588>)
 8009fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8009fba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d90a      	bls.n	8009fd6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fce:	3301      	adds	r3, #1
 8009fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fd4:	e027      	b.n	800a026 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009fd6:	4b82      	ldr	r3, [pc, #520]	; (800a1e0 <tcp_slowtmr+0x584>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009fec:	4618      	mov	r0, r3
 8009fee:	4b7e      	ldr	r3, [pc, #504]	; (800a1e8 <tcp_slowtmr+0x58c>)
 8009ff0:	fb00 f303 	mul.w	r3, r0, r3
 8009ff4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009ff6:	497b      	ldr	r1, [pc, #492]	; (800a1e4 <tcp_slowtmr+0x588>)
 8009ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8009ffc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d911      	bls.n	800a026 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a004:	f004 fac8 	bl	800e598 <tcp_keepalive>
 800a008:	4603      	mov	r3, r0
 800a00a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a00e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a01c:	3301      	adds	r3, #1
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a022:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d011      	beq.n	800a052 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a02e:	4b6c      	ldr	r3, [pc, #432]	; (800a1e0 <tcp_slowtmr+0x584>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	1ad2      	subs	r2, r2, r3
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a03e:	4619      	mov	r1, r3
 800a040:	460b      	mov	r3, r1
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	440b      	add	r3, r1
 800a046:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d302      	bcc.n	800a052 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a04e:	f000 fddb 	bl	800ac08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	7d1b      	ldrb	r3, [r3, #20]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d10b      	bne.n	800a072 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a05a:	4b61      	ldr	r3, [pc, #388]	; (800a1e0 <tcp_slowtmr+0x584>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	2b28      	cmp	r3, #40	; 0x28
 800a066:	d904      	bls.n	800a072 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a06c:	3301      	adds	r3, #1
 800a06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	7d1b      	ldrb	r3, [r3, #20]
 800a076:	2b09      	cmp	r3, #9
 800a078:	d10b      	bne.n	800a092 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a07a:	4b59      	ldr	r3, [pc, #356]	; (800a1e0 <tcp_slowtmr+0x584>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	2bf0      	cmp	r3, #240	; 0xf0
 800a086:	d904      	bls.n	800a092 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a08c:	3301      	adds	r3, #1
 800a08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a096:	2b00      	cmp	r3, #0
 800a098:	d060      	beq.n	800a15c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0a4:	f000 fbfc 	bl	800a8a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d010      	beq.n	800a0d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a0ae:	4b4f      	ldr	r3, [pc, #316]	; (800a1ec <tcp_slowtmr+0x590>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d106      	bne.n	800a0c6 <tcp_slowtmr+0x46a>
 800a0b8:	4b4d      	ldr	r3, [pc, #308]	; (800a1f0 <tcp_slowtmr+0x594>)
 800a0ba:	f240 526d 	movw	r2, #1389	; 0x56d
 800a0be:	494d      	ldr	r1, [pc, #308]	; (800a1f4 <tcp_slowtmr+0x598>)
 800a0c0:	484d      	ldr	r0, [pc, #308]	; (800a1f8 <tcp_slowtmr+0x59c>)
 800a0c2:	f007 f9cf 	bl	8011464 <iprintf>
        prev->next = pcb->next;
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	e00f      	b.n	800a0f0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a0d0:	4b46      	ldr	r3, [pc, #280]	; (800a1ec <tcp_slowtmr+0x590>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d006      	beq.n	800a0e8 <tcp_slowtmr+0x48c>
 800a0da:	4b45      	ldr	r3, [pc, #276]	; (800a1f0 <tcp_slowtmr+0x594>)
 800a0dc:	f240 5271 	movw	r2, #1393	; 0x571
 800a0e0:	4946      	ldr	r1, [pc, #280]	; (800a1fc <tcp_slowtmr+0x5a0>)
 800a0e2:	4845      	ldr	r0, [pc, #276]	; (800a1f8 <tcp_slowtmr+0x59c>)
 800a0e4:	f007 f9be 	bl	8011464 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	4a3f      	ldr	r2, [pc, #252]	; (800a1ec <tcp_slowtmr+0x590>)
 800a0ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a0f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d013      	beq.n	800a120 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a100:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	3304      	adds	r3, #4
 800a106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a108:	8ad2      	ldrh	r2, [r2, #22]
 800a10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a10c:	8b09      	ldrh	r1, [r1, #24]
 800a10e:	9102      	str	r1, [sp, #8]
 800a110:	9201      	str	r2, [sp, #4]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	462b      	mov	r3, r5
 800a116:	4622      	mov	r2, r4
 800a118:	4601      	mov	r1, r0
 800a11a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a11c:	f004 f988 	bl	800e430 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	7d1b      	ldrb	r3, [r3, #20]
 800a12a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a136:	6838      	ldr	r0, [r7, #0]
 800a138:	f7ff f9f2 	bl	8009520 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a13c:	4b30      	ldr	r3, [pc, #192]	; (800a200 <tcp_slowtmr+0x5a4>)
 800a13e:	2200      	movs	r2, #0
 800a140:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <tcp_slowtmr+0x4f6>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f06f 010c 	mvn.w	r1, #12
 800a14e:	68b8      	ldr	r0, [r7, #8]
 800a150:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a152:	4b2b      	ldr	r3, [pc, #172]	; (800a200 <tcp_slowtmr+0x5a4>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d037      	beq.n	800a1ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a15a:	e590      	b.n	8009c7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	7f1b      	ldrb	r3, [r3, #28]
 800a16a:	3301      	adds	r3, #1
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	7f1a      	ldrb	r2, [r3, #28]
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	7f5b      	ldrb	r3, [r3, #29]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d325      	bcc.n	800a1ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a184:	4b1e      	ldr	r3, [pc, #120]	; (800a200 <tcp_slowtmr+0x5a4>)
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <tcp_slowtmr+0x550>
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19c:	6912      	ldr	r2, [r2, #16]
 800a19e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a1aa:	e002      	b.n	800a1b2 <tcp_slowtmr+0x556>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a1b2:	4b13      	ldr	r3, [pc, #76]	; (800a200 <tcp_slowtmr+0x5a4>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d000      	beq.n	800a1bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a1ba:	e560      	b.n	8009c7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a1bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c6:	f003 fb7f 	bl	800d8c8 <tcp_output>
  while (pcb != NULL) {
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f47f ad5c 	bne.w	8009c8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <tcp_slowtmr+0x5a8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a1dc:	e067      	b.n	800a2ae <tcp_slowtmr+0x652>
 800a1de:	bf00      	nop
 800a1e0:	20008d04 	.word	0x20008d04
 800a1e4:	10624dd3 	.word	0x10624dd3
 800a1e8:	000124f8 	.word	0x000124f8
 800a1ec:	20008d10 	.word	0x20008d10
 800a1f0:	08012ed0 	.word	0x08012ed0
 800a1f4:	08013308 	.word	0x08013308
 800a1f8:	08012f14 	.word	0x08012f14
 800a1fc:	08013334 	.word	0x08013334
 800a200:	20008d18 	.word	0x20008d18
 800a204:	20008d14 	.word	0x20008d14
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	7d1b      	ldrb	r3, [r3, #20]
 800a20c:	2b0a      	cmp	r3, #10
 800a20e:	d006      	beq.n	800a21e <tcp_slowtmr+0x5c2>
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <tcp_slowtmr+0x664>)
 800a212:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a216:	492b      	ldr	r1, [pc, #172]	; (800a2c4 <tcp_slowtmr+0x668>)
 800a218:	482b      	ldr	r0, [pc, #172]	; (800a2c8 <tcp_slowtmr+0x66c>)
 800a21a:	f007 f923 	bl	8011464 <iprintf>
    pcb_remove = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a224:	4b29      	ldr	r3, [pc, #164]	; (800a2cc <tcp_slowtmr+0x670>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2bf0      	cmp	r3, #240	; 0xf0
 800a230:	d904      	bls.n	800a23c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a236:	3301      	adds	r3, #1
 800a238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a23c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a240:	2b00      	cmp	r3, #0
 800a242:	d02f      	beq.n	800a2a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a246:	f000 fb2b 	bl	800a8a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d010      	beq.n	800a272 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a250:	4b1f      	ldr	r3, [pc, #124]	; (800a2d0 <tcp_slowtmr+0x674>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a256:	429a      	cmp	r2, r3
 800a258:	d106      	bne.n	800a268 <tcp_slowtmr+0x60c>
 800a25a:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <tcp_slowtmr+0x664>)
 800a25c:	f240 52af 	movw	r2, #1455	; 0x5af
 800a260:	491c      	ldr	r1, [pc, #112]	; (800a2d4 <tcp_slowtmr+0x678>)
 800a262:	4819      	ldr	r0, [pc, #100]	; (800a2c8 <tcp_slowtmr+0x66c>)
 800a264:	f007 f8fe 	bl	8011464 <iprintf>
        prev->next = pcb->next;
 800a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	60da      	str	r2, [r3, #12]
 800a270:	e00f      	b.n	800a292 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a272:	4b17      	ldr	r3, [pc, #92]	; (800a2d0 <tcp_slowtmr+0x674>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d006      	beq.n	800a28a <tcp_slowtmr+0x62e>
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <tcp_slowtmr+0x664>)
 800a27e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a282:	4915      	ldr	r1, [pc, #84]	; (800a2d8 <tcp_slowtmr+0x67c>)
 800a284:	4810      	ldr	r0, [pc, #64]	; (800a2c8 <tcp_slowtmr+0x66c>)
 800a286:	f007 f8ed 	bl	8011464 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	4a10      	ldr	r2, [pc, #64]	; (800a2d0 <tcp_slowtmr+0x674>)
 800a290:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a29c:	69f8      	ldr	r0, [r7, #28]
 800a29e:	f7ff f93f 	bl	8009520 <tcp_free>
 800a2a2:	e004      	b.n	800a2ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1a9      	bne.n	800a208 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	3730      	adds	r7, #48	; 0x30
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08012ed0 	.word	0x08012ed0
 800a2c4:	08013360 	.word	0x08013360
 800a2c8:	08012f14 	.word	0x08012f14
 800a2cc:	20008d04 	.word	0x20008d04
 800a2d0:	20008d14 	.word	0x20008d14
 800a2d4:	08013390 	.word	0x08013390
 800a2d8:	080133b8 	.word	0x080133b8

0800a2dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <tcp_fasttmr+0xbc>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	4b2b      	ldr	r3, [pc, #172]	; (800a398 <tcp_fasttmr+0xbc>)
 800a2ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a2ee:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <tcp_fasttmr+0xc0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a2f4:	e048      	b.n	800a388 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7f9a      	ldrb	r2, [r3, #30]
 800a2fa:	4b27      	ldr	r3, [pc, #156]	; (800a398 <tcp_fasttmr+0xbc>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d03f      	beq.n	800a382 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a302:	4b25      	ldr	r3, [pc, #148]	; (800a398 <tcp_fasttmr+0xbc>)
 800a304:	781a      	ldrb	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8b5b      	ldrh	r3, [r3, #26]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d010      	beq.n	800a338 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8b5b      	ldrh	r3, [r3, #26]
 800a31a:	f043 0302 	orr.w	r3, r3, #2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 facf 	bl	800d8c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8b5b      	ldrh	r3, [r3, #26]
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8b5b      	ldrh	r3, [r3, #26]
 800a33c:	f003 0308 	and.w	r3, r3, #8
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	8b5b      	ldrh	r3, [r3, #26]
 800a348:	f023 0308 	bic.w	r3, r3, #8
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fa78 	bl	8009848 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a366:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <tcp_fasttmr+0xc4>)
 800a368:	2200      	movs	r2, #0
 800a36a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f819 	bl	800a3a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a372:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <tcp_fasttmr+0xc4>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d000      	beq.n	800a37c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a37a:	e7b8      	b.n	800a2ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	e002      	b.n	800a388 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1b3      	bne.n	800a2f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20008d1a 	.word	0x20008d1a
 800a39c:	20008d10 	.word	0x20008d10
 800a3a0:	20008d18 	.word	0x20008d18

0800a3a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <tcp_process_refused_data+0x22>
 800a3b2:	4b37      	ldr	r3, [pc, #220]	; (800a490 <tcp_process_refused_data+0xec>)
 800a3b4:	f240 6209 	movw	r2, #1545	; 0x609
 800a3b8:	4936      	ldr	r1, [pc, #216]	; (800a494 <tcp_process_refused_data+0xf0>)
 800a3ba:	4837      	ldr	r0, [pc, #220]	; (800a498 <tcp_process_refused_data+0xf4>)
 800a3bc:	f007 f852 	bl	8011464 <iprintf>
 800a3c0:	f06f 030f 	mvn.w	r3, #15
 800a3c4:	e060      	b.n	800a488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3ca:	7b5b      	ldrb	r3, [r3, #13]
 800a3cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <tcp_process_refused_data+0x58>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6918      	ldr	r0, [r3, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	47a0      	blx	r4
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]
 800a3fa:	e007      	b.n	800a40c <tcp_process_refused_data+0x68>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	2000      	movs	r0, #0
 800a404:	f000 f8a4 	bl	800a550 <tcp_recv_null>
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d12a      	bne.n	800a46a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d033      	beq.n	800a486 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a422:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a426:	d005      	beq.n	800a434 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42c:	3301      	adds	r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <tcp_process_refused_data+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6918      	ldr	r0, [r3, #16]
 800a448:	2300      	movs	r3, #0
 800a44a:	2200      	movs	r2, #0
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	47a0      	blx	r4
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]
 800a454:	e001      	b.n	800a45a <tcp_process_refused_data+0xb6>
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a45e:	f113 0f0d 	cmn.w	r3, #13
 800a462:	d110      	bne.n	800a486 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a464:	f06f 030c 	mvn.w	r3, #12
 800a468:	e00e      	b.n	800a488 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a46e:	f113 0f0d 	cmn.w	r3, #13
 800a472:	d102      	bne.n	800a47a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a474:	f06f 030c 	mvn.w	r3, #12
 800a478:	e006      	b.n	800a488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a480:	f06f 0304 	mvn.w	r3, #4
 800a484:	e000      	b.n	800a488 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}
 800a490:	08012ed0 	.word	0x08012ed0
 800a494:	080133e0 	.word	0x080133e0
 800a498:	08012f14 	.word	0x08012f14

0800a49c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a4a4:	e007      	b.n	800a4b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f80a 	bl	800a4c6 <tcp_seg_free>
    seg = next;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1f4      	bne.n	800a4a6 <tcp_segs_free+0xa>
  }
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00c      	beq.n	800a4ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fd7d 	bl	8008fe0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	2003      	movs	r0, #3
 800a4ea:	f7fd ffb9 	bl	8008460 <memp_free>
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <tcp_seg_copy+0x1c>
 800a506:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <tcp_seg_copy+0x4c>)
 800a508:	f240 6282 	movw	r2, #1666	; 0x682
 800a50c:	490e      	ldr	r1, [pc, #56]	; (800a548 <tcp_seg_copy+0x50>)
 800a50e:	480f      	ldr	r0, [pc, #60]	; (800a54c <tcp_seg_copy+0x54>)
 800a510:	f006 ffa8 	bl	8011464 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a514:	2003      	movs	r0, #3
 800a516:	f7fd ff57 	bl	80083c8 <memp_malloc>
 800a51a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <tcp_seg_copy+0x2e>
    return NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	e00a      	b.n	800a53c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a526:	2210      	movs	r2, #16
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f007 f965 	bl	80117fa <memcpy>
  pbuf_ref(cseg->p);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fdf3 	bl	8009120 <pbuf_ref>
  return cseg;
 800a53a:	68fb      	ldr	r3, [r7, #12]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	08012ed0 	.word	0x08012ed0
 800a548:	08013424 	.word	0x08013424
 800a54c:	08012f14 	.word	0x08012f14

0800a550 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d109      	bne.n	800a578 <tcp_recv_null+0x28>
 800a564:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <tcp_recv_null+0x60>)
 800a566:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a56a:	4912      	ldr	r1, [pc, #72]	; (800a5b4 <tcp_recv_null+0x64>)
 800a56c:	4812      	ldr	r0, [pc, #72]	; (800a5b8 <tcp_recv_null+0x68>)
 800a56e:	f006 ff79 	bl	8011464 <iprintf>
 800a572:	f06f 030f 	mvn.w	r3, #15
 800a576:	e016      	b.n	800a5a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	891b      	ldrh	r3, [r3, #8]
 800a582:	4619      	mov	r1, r3
 800a584:	68b8      	ldr	r0, [r7, #8]
 800a586:	f7ff fb19 	bl	8009bbc <tcp_recved>
    pbuf_free(p);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fe fd28 	bl	8008fe0 <pbuf_free>
 800a590:	e008      	b.n	800a5a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d104      	bne.n	800a5a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a59a:	68b8      	ldr	r0, [r7, #8]
 800a59c:	f7ff f9be 	bl	800991c <tcp_close>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	e000      	b.n	800a5a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	08012ed0 	.word	0x08012ed0
 800a5b4:	08013440 	.word	0x08013440
 800a5b8:	08012f14 	.word	0x08012f14

0800a5bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	db01      	blt.n	800a5d2 <tcp_kill_prio+0x16>
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	e000      	b.n	800a5d4 <tcp_kill_prio+0x18>
 800a5d2:	237f      	movs	r3, #127	; 0x7f
 800a5d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a5d6:	7afb      	ldrb	r3, [r7, #11]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d034      	beq.n	800a646 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ea:	4b19      	ldr	r3, [pc, #100]	; (800a650 <tcp_kill_prio+0x94>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e01f      	b.n	800a632 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	7d5b      	ldrb	r3, [r3, #21]
 800a5f6:	7afa      	ldrb	r2, [r7, #11]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d80c      	bhi.n	800a616 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a600:	7afa      	ldrb	r2, [r7, #11]
 800a602:	429a      	cmp	r2, r3
 800a604:	d112      	bne.n	800a62c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a606:	4b13      	ldr	r3, [pc, #76]	; (800a654 <tcp_kill_prio+0x98>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	429a      	cmp	r2, r3
 800a614:	d80a      	bhi.n	800a62c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a616:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <tcp_kill_prio+0x98>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	7d5b      	ldrb	r3, [r3, #21]
 800a62a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1dc      	bne.n	800a5f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a63e:	6938      	ldr	r0, [r7, #16]
 800a640:	f7ff fa56 	bl	8009af0 <tcp_abort>
 800a644:	e000      	b.n	800a648 <tcp_kill_prio+0x8c>
    return;
 800a646:	bf00      	nop
  }
}
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20008d10 	.word	0x20008d10
 800a654:	20008d04 	.word	0x20008d04

0800a658 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	2b08      	cmp	r3, #8
 800a666:	d009      	beq.n	800a67c <tcp_kill_state+0x24>
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	2b09      	cmp	r3, #9
 800a66c:	d006      	beq.n	800a67c <tcp_kill_state+0x24>
 800a66e:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <tcp_kill_state+0x80>)
 800a670:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a674:	4919      	ldr	r1, [pc, #100]	; (800a6dc <tcp_kill_state+0x84>)
 800a676:	481a      	ldr	r0, [pc, #104]	; (800a6e0 <tcp_kill_state+0x88>)
 800a678:	f006 fef4 	bl	8011464 <iprintf>

  inactivity = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a684:	4b17      	ldr	r3, [pc, #92]	; (800a6e4 <tcp_kill_state+0x8c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e017      	b.n	800a6bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	7d1b      	ldrb	r3, [r3, #20]
 800a690:	79fa      	ldrb	r2, [r7, #7]
 800a692:	429a      	cmp	r2, r3
 800a694:	d10f      	bne.n	800a6b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a696:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <tcp_kill_state+0x90>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d807      	bhi.n	800a6b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <tcp_kill_state+0x90>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e4      	bne.n	800a68c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f7ff f952 	bl	8009974 <tcp_abandon>
  }
}
 800a6d0:	bf00      	nop
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08012ed0 	.word	0x08012ed0
 800a6dc:	0801345c 	.word	0x0801345c
 800a6e0:	08012f14 	.word	0x08012f14
 800a6e4:	20008d10 	.word	0x20008d10
 800a6e8:	20008d04 	.word	0x20008d04

0800a6ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6fa:	4b12      	ldr	r3, [pc, #72]	; (800a744 <tcp_kill_timewait+0x58>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e012      	b.n	800a728 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a702:	4b11      	ldr	r3, [pc, #68]	; (800a748 <tcp_kill_timewait+0x5c>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d807      	bhi.n	800a722 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <tcp_kill_timewait+0x5c>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e9      	bne.n	800a702 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a734:	68b8      	ldr	r0, [r7, #8]
 800a736:	f7ff f9db 	bl	8009af0 <tcp_abort>
  }
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20008d14 	.word	0x20008d14
 800a748:	20008d04 	.word	0x20008d04

0800a74c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a752:	4b10      	ldr	r3, [pc, #64]	; (800a794 <tcp_handle_closepend+0x48>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a758:	e014      	b.n	800a784 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	8b5b      	ldrh	r3, [r3, #26]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d009      	beq.n	800a780 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	8b5b      	ldrh	r3, [r3, #26]
 800a770:	f023 0308 	bic.w	r3, r3, #8
 800a774:	b29a      	uxth	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff f864 	bl	8009848 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e7      	bne.n	800a75a <tcp_handle_closepend+0xe>
  }
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20008d10 	.word	0x20008d10

0800a798 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	f7fd fe10 	bl	80083c8 <memp_malloc>
 800a7a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d126      	bne.n	800a7fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a7b0:	f7ff ffcc 	bl	800a74c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a7b4:	f7ff ff9a 	bl	800a6ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f7fd fe05 	bl	80083c8 <memp_malloc>
 800a7be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d11b      	bne.n	800a7fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a7c6:	2009      	movs	r0, #9
 800a7c8:	f7ff ff46 	bl	800a658 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	f7fd fdfb 	bl	80083c8 <memp_malloc>
 800a7d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d111      	bne.n	800a7fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a7da:	2008      	movs	r0, #8
 800a7dc:	f7ff ff3c 	bl	800a658 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	f7fd fdf1 	bl	80083c8 <memp_malloc>
 800a7e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d107      	bne.n	800a7fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fee3 	bl	800a5bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	f7fd fde6 	bl	80083c8 <memp_malloc>
 800a7fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d03f      	beq.n	800a884 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a804:	229c      	movs	r2, #156	; 0x9c
 800a806:	2100      	movs	r1, #0
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f006 ff81 	bl	8011710 <memset>
    pcb->prio = prio;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	79fa      	ldrb	r2, [r7, #7]
 800a812:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a81a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a824:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	22ff      	movs	r2, #255	; 0xff
 800a832:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a83a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2206      	movs	r2, #6
 800a840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2206      	movs	r2, #6
 800a848:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a850:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a85a:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <tcp_alloc+0xf8>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a862:	4b0c      	ldr	r3, [pc, #48]	; (800a894 <tcp_alloc+0xfc>)
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a870:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4a08      	ldr	r2, [pc, #32]	; (800a898 <tcp_alloc+0x100>)
 800a878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4a07      	ldr	r2, [pc, #28]	; (800a89c <tcp_alloc+0x104>)
 800a880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a884:	68fb      	ldr	r3, [r7, #12]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20008d04 	.word	0x20008d04
 800a894:	20008d1a 	.word	0x20008d1a
 800a898:	0800a551 	.word	0x0800a551
 800a89c:	006ddd00 	.word	0x006ddd00

0800a8a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d107      	bne.n	800a8be <tcp_pcb_purge+0x1e>
 800a8ae:	4b21      	ldr	r3, [pc, #132]	; (800a934 <tcp_pcb_purge+0x94>)
 800a8b0:	f640 0251 	movw	r2, #2129	; 0x851
 800a8b4:	4920      	ldr	r1, [pc, #128]	; (800a938 <tcp_pcb_purge+0x98>)
 800a8b6:	4821      	ldr	r0, [pc, #132]	; (800a93c <tcp_pcb_purge+0x9c>)
 800a8b8:	f006 fdd4 	bl	8011464 <iprintf>
 800a8bc:	e037      	b.n	800a92e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	7d1b      	ldrb	r3, [r3, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d033      	beq.n	800a92e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a8ca:	2b0a      	cmp	r3, #10
 800a8cc:	d02f      	beq.n	800a92e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d02b      	beq.n	800a92e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d007      	beq.n	800a8ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fb7c 	bl	8008fe0 <pbuf_free>
      pcb->refused_data = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f986 	bl	800ac08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a902:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fdc7 	bl	800a49c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fdc2 	bl	800a49c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	66da      	str	r2, [r3, #108]	; 0x6c
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	08012ed0 	.word	0x08012ed0
 800a938:	0801351c 	.word	0x0801351c
 800a93c:	08012f14 	.word	0x08012f14

0800a940 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <tcp_pcb_remove+0x1e>
 800a950:	4b3e      	ldr	r3, [pc, #248]	; (800aa4c <tcp_pcb_remove+0x10c>)
 800a952:	f640 0283 	movw	r2, #2179	; 0x883
 800a956:	493e      	ldr	r1, [pc, #248]	; (800aa50 <tcp_pcb_remove+0x110>)
 800a958:	483e      	ldr	r0, [pc, #248]	; (800aa54 <tcp_pcb_remove+0x114>)
 800a95a:	f006 fd83 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d106      	bne.n	800a972 <tcp_pcb_remove+0x32>
 800a964:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <tcp_pcb_remove+0x10c>)
 800a966:	f640 0284 	movw	r2, #2180	; 0x884
 800a96a:	493b      	ldr	r1, [pc, #236]	; (800aa58 <tcp_pcb_remove+0x118>)
 800a96c:	4839      	ldr	r0, [pc, #228]	; (800aa54 <tcp_pcb_remove+0x114>)
 800a96e:	f006 fd79 	bl	8011464 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d105      	bne.n	800a988 <tcp_pcb_remove+0x48>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	e013      	b.n	800a9b0 <tcp_pcb_remove+0x70>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e00c      	b.n	800a9aa <tcp_pcb_remove+0x6a>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d104      	bne.n	800a9a4 <tcp_pcb_remove+0x64>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	60da      	str	r2, [r3, #12]
 800a9a2:	e005      	b.n	800a9b0 <tcp_pcb_remove+0x70>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1ef      	bne.n	800a990 <tcp_pcb_remove+0x50>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a9b6:	6838      	ldr	r0, [r7, #0]
 800a9b8:	f7ff ff72 	bl	800a8a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	7d1b      	ldrb	r3, [r3, #20]
 800a9c0:	2b0a      	cmp	r3, #10
 800a9c2:	d013      	beq.n	800a9ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d00f      	beq.n	800a9ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	8b5b      	ldrh	r3, [r3, #26]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d009      	beq.n	800a9ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	8b5b      	ldrh	r3, [r3, #26]
 800a9dc:	f043 0302 	orr.w	r3, r3, #2
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a9e6:	6838      	ldr	r0, [r7, #0]
 800a9e8:	f002 ff6e 	bl	800d8c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	7d1b      	ldrb	r3, [r3, #20]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d020      	beq.n	800aa36 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <tcp_pcb_remove+0xca>
 800a9fc:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <tcp_pcb_remove+0x10c>)
 800a9fe:	f640 0293 	movw	r2, #2195	; 0x893
 800aa02:	4916      	ldr	r1, [pc, #88]	; (800aa5c <tcp_pcb_remove+0x11c>)
 800aa04:	4813      	ldr	r0, [pc, #76]	; (800aa54 <tcp_pcb_remove+0x114>)
 800aa06:	f006 fd2d 	bl	8011464 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d006      	beq.n	800aa20 <tcp_pcb_remove+0xe0>
 800aa12:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <tcp_pcb_remove+0x10c>)
 800aa14:	f640 0294 	movw	r2, #2196	; 0x894
 800aa18:	4911      	ldr	r1, [pc, #68]	; (800aa60 <tcp_pcb_remove+0x120>)
 800aa1a:	480e      	ldr	r0, [pc, #56]	; (800aa54 <tcp_pcb_remove+0x114>)
 800aa1c:	f006 fd22 	bl	8011464 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d006      	beq.n	800aa36 <tcp_pcb_remove+0xf6>
 800aa28:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <tcp_pcb_remove+0x10c>)
 800aa2a:	f640 0296 	movw	r2, #2198	; 0x896
 800aa2e:	490d      	ldr	r1, [pc, #52]	; (800aa64 <tcp_pcb_remove+0x124>)
 800aa30:	4808      	ldr	r0, [pc, #32]	; (800aa54 <tcp_pcb_remove+0x114>)
 800aa32:	f006 fd17 	bl	8011464 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	08012ed0 	.word	0x08012ed0
 800aa50:	08013538 	.word	0x08013538
 800aa54:	08012f14 	.word	0x08012f14
 800aa58:	08013554 	.word	0x08013554
 800aa5c:	08013574 	.word	0x08013574
 800aa60:	0801358c 	.word	0x0801358c
 800aa64:	080135a8 	.word	0x080135a8

0800aa68 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <tcp_next_iss+0x1c>
 800aa76:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <tcp_next_iss+0x38>)
 800aa78:	f640 02af 	movw	r2, #2223	; 0x8af
 800aa7c:	4909      	ldr	r1, [pc, #36]	; (800aaa4 <tcp_next_iss+0x3c>)
 800aa7e:	480a      	ldr	r0, [pc, #40]	; (800aaa8 <tcp_next_iss+0x40>)
 800aa80:	f006 fcf0 	bl	8011464 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800aa84:	4b09      	ldr	r3, [pc, #36]	; (800aaac <tcp_next_iss+0x44>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <tcp_next_iss+0x48>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	4a07      	ldr	r2, [pc, #28]	; (800aaac <tcp_next_iss+0x44>)
 800aa90:	6013      	str	r3, [r2, #0]
  return iss;
 800aa92:	4b06      	ldr	r3, [pc, #24]	; (800aaac <tcp_next_iss+0x44>)
 800aa94:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	08012ed0 	.word	0x08012ed0
 800aaa4:	080135c0 	.word	0x080135c0
 800aaa8:	08012f14 	.word	0x08012f14
 800aaac:	20000138 	.word	0x20000138
 800aab0:	20008d04 	.word	0x20008d04

0800aab4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <tcp_eff_send_mss_netif+0x22>
 800aac8:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <tcp_eff_send_mss_netif+0x68>)
 800aaca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800aace:	4914      	ldr	r1, [pc, #80]	; (800ab20 <tcp_eff_send_mss_netif+0x6c>)
 800aad0:	4814      	ldr	r0, [pc, #80]	; (800ab24 <tcp_eff_send_mss_netif+0x70>)
 800aad2:	f006 fcc7 	bl	8011464 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aadc:	89fb      	ldrh	r3, [r7, #14]
 800aade:	e019      	b.n	800ab14 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aae4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aae6:	8afb      	ldrh	r3, [r7, #22]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d012      	beq.n	800ab12 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aaec:	2328      	movs	r3, #40	; 0x28
 800aaee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aaf0:	8afa      	ldrh	r2, [r7, #22]
 800aaf2:	8abb      	ldrh	r3, [r7, #20]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d904      	bls.n	800ab02 <tcp_eff_send_mss_netif+0x4e>
 800aaf8:	8afa      	ldrh	r2, [r7, #22]
 800aafa:	8abb      	ldrh	r3, [r7, #20]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	e000      	b.n	800ab04 <tcp_eff_send_mss_netif+0x50>
 800ab02:	2300      	movs	r3, #0
 800ab04:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ab06:	8a7a      	ldrh	r2, [r7, #18]
 800ab08:	89fb      	ldrh	r3, [r7, #14]
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	bf28      	it	cs
 800ab0e:	4613      	movcs	r3, r2
 800ab10:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ab12:	89fb      	ldrh	r3, [r7, #14]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	08012ed0 	.word	0x08012ed0
 800ab20:	080135dc 	.word	0x080135dc
 800ab24:	08012f14 	.word	0x08012f14

0800ab28 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d119      	bne.n	800ab70 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ab3c:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ab3e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ab42:	4910      	ldr	r1, [pc, #64]	; (800ab84 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ab44:	4810      	ldr	r0, [pc, #64]	; (800ab88 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ab46:	f006 fc8d 	bl	8011464 <iprintf>

  while (pcb != NULL) {
 800ab4a:	e011      	b.n	800ab70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d108      	bne.n	800ab6a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7fe ffc6 	bl	8009af0 <tcp_abort>
      pcb = next;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	e002      	b.n	800ab70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1ea      	bne.n	800ab4c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	08012ed0 	.word	0x08012ed0
 800ab84:	08013604 	.word	0x08013604
 800ab88:	08012f14 	.word	0x08012f14

0800ab8c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02a      	beq.n	800abf2 <tcp_netif_ip_addr_changed+0x66>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d026      	beq.n	800abf2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800aba4:	4b15      	ldr	r3, [pc, #84]	; (800abfc <tcp_netif_ip_addr_changed+0x70>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff ffbc 	bl	800ab28 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800abb0:	4b13      	ldr	r3, [pc, #76]	; (800ac00 <tcp_netif_ip_addr_changed+0x74>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff ffb6 	bl	800ab28 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d017      	beq.n	800abf2 <tcp_netif_ip_addr_changed+0x66>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d013      	beq.n	800abf2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800abca:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <tcp_netif_ip_addr_changed+0x78>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e00c      	b.n	800abec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d103      	bne.n	800abe6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1ef      	bne.n	800abd2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20008d10 	.word	0x20008d10
 800ac00:	20008d08 	.word	0x20008d08
 800ac04:	20008d0c 	.word	0x20008d0c

0800ac08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d007      	beq.n	800ac28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fc3d 	bl	800a49c <tcp_segs_free>
    pcb->ooseq = NULL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b08d      	sub	sp, #52	; 0x34
 800ac34:	af04      	add	r7, sp, #16
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <tcp_input+0x1c>
 800ac40:	4b9b      	ldr	r3, [pc, #620]	; (800aeb0 <tcp_input+0x280>)
 800ac42:	2283      	movs	r2, #131	; 0x83
 800ac44:	499b      	ldr	r1, [pc, #620]	; (800aeb4 <tcp_input+0x284>)
 800ac46:	489c      	ldr	r0, [pc, #624]	; (800aeb8 <tcp_input+0x288>)
 800ac48:	f006 fc0c 	bl	8011464 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	4a9a      	ldr	r2, [pc, #616]	; (800aebc <tcp_input+0x28c>)
 800ac52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	2b13      	cmp	r3, #19
 800ac5a:	f240 83d1 	bls.w	800b400 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ac5e:	4b98      	ldr	r3, [pc, #608]	; (800aec0 <tcp_input+0x290>)
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	4a97      	ldr	r2, [pc, #604]	; (800aec0 <tcp_input+0x290>)
 800ac64:	6812      	ldr	r2, [r2, #0]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f005 fba5 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 83c7 	bne.w	800b404 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ac76:	4b92      	ldr	r3, [pc, #584]	; (800aec0 <tcp_input+0x290>)
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ac7e:	2be0      	cmp	r3, #224	; 0xe0
 800ac80:	f000 83c0 	beq.w	800b404 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ac84:	4b8d      	ldr	r3, [pc, #564]	; (800aebc <tcp_input+0x28c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	899b      	ldrh	r3, [r3, #12]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fc ff46 	bl	8007b1e <lwip_htons>
 800ac92:	4603      	mov	r3, r0
 800ac94:	0b1b      	lsrs	r3, r3, #12
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ac9e:	7cbb      	ldrb	r3, [r7, #18]
 800aca0:	2b13      	cmp	r3, #19
 800aca2:	f240 83b1 	bls.w	800b408 <tcp_input+0x7d8>
 800aca6:	7cbb      	ldrb	r3, [r7, #18]
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	891b      	ldrh	r3, [r3, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	f200 83aa 	bhi.w	800b408 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800acb4:	7cbb      	ldrb	r3, [r7, #18]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	3b14      	subs	r3, #20
 800acba:	b29a      	uxth	r2, r3
 800acbc:	4b81      	ldr	r3, [pc, #516]	; (800aec4 <tcp_input+0x294>)
 800acbe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800acc0:	4b81      	ldr	r3, [pc, #516]	; (800aec8 <tcp_input+0x298>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	895a      	ldrh	r2, [r3, #10]
 800acca:	7cbb      	ldrb	r3, [r7, #18]
 800accc:	b29b      	uxth	r3, r3
 800acce:	429a      	cmp	r2, r3
 800acd0:	d309      	bcc.n	800ace6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800acd2:	4b7c      	ldr	r3, [pc, #496]	; (800aec4 <tcp_input+0x294>)
 800acd4:	881a      	ldrh	r2, [r3, #0]
 800acd6:	4b7d      	ldr	r3, [pc, #500]	; (800aecc <tcp_input+0x29c>)
 800acd8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800acda:	7cbb      	ldrb	r3, [r7, #18]
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7fe f8f8 	bl	8008ed4 <pbuf_remove_header>
 800ace4:	e04e      	b.n	800ad84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <tcp_input+0xca>
 800acee:	4b70      	ldr	r3, [pc, #448]	; (800aeb0 <tcp_input+0x280>)
 800acf0:	22c2      	movs	r2, #194	; 0xc2
 800acf2:	4977      	ldr	r1, [pc, #476]	; (800aed0 <tcp_input+0x2a0>)
 800acf4:	4870      	ldr	r0, [pc, #448]	; (800aeb8 <tcp_input+0x288>)
 800acf6:	f006 fbb5 	bl	8011464 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800acfa:	2114      	movs	r1, #20
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7fe f8e9 	bl	8008ed4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	895a      	ldrh	r2, [r3, #10]
 800ad06:	4b71      	ldr	r3, [pc, #452]	; (800aecc <tcp_input+0x29c>)
 800ad08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ad0a:	4b6e      	ldr	r3, [pc, #440]	; (800aec4 <tcp_input+0x294>)
 800ad0c:	881a      	ldrh	r2, [r3, #0]
 800ad0e:	4b6f      	ldr	r3, [pc, #444]	; (800aecc <tcp_input+0x29c>)
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ad16:	4b6d      	ldr	r3, [pc, #436]	; (800aecc <tcp_input+0x29c>)
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7fe f8d9 	bl	8008ed4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	895b      	ldrh	r3, [r3, #10]
 800ad28:	8a3a      	ldrh	r2, [r7, #16]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	f200 836e 	bhi.w	800b40c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4a64      	ldr	r2, [pc, #400]	; (800aec8 <tcp_input+0x298>)
 800ad38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	8a3a      	ldrh	r2, [r7, #16]
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe f8c6 	bl	8008ed4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	891a      	ldrh	r2, [r3, #8]
 800ad4c:	8a3b      	ldrh	r3, [r7, #16]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	895b      	ldrh	r3, [r3, #10]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <tcp_input+0x13a>
 800ad5e:	4b54      	ldr	r3, [pc, #336]	; (800aeb0 <tcp_input+0x280>)
 800ad60:	22df      	movs	r2, #223	; 0xdf
 800ad62:	495c      	ldr	r1, [pc, #368]	; (800aed4 <tcp_input+0x2a4>)
 800ad64:	4854      	ldr	r0, [pc, #336]	; (800aeb8 <tcp_input+0x288>)
 800ad66:	f006 fb7d 	bl	8011464 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	891a      	ldrh	r2, [r3, #8]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	891b      	ldrh	r3, [r3, #8]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d005      	beq.n	800ad84 <tcp_input+0x154>
 800ad78:	4b4d      	ldr	r3, [pc, #308]	; (800aeb0 <tcp_input+0x280>)
 800ad7a:	22e0      	movs	r2, #224	; 0xe0
 800ad7c:	4956      	ldr	r1, [pc, #344]	; (800aed8 <tcp_input+0x2a8>)
 800ad7e:	484e      	ldr	r0, [pc, #312]	; (800aeb8 <tcp_input+0x288>)
 800ad80:	f006 fb70 	bl	8011464 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ad84:	4b4d      	ldr	r3, [pc, #308]	; (800aebc <tcp_input+0x28c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4a4b      	ldr	r2, [pc, #300]	; (800aebc <tcp_input+0x28c>)
 800ad8e:	6814      	ldr	r4, [r2, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fc fec4 	bl	8007b1e <lwip_htons>
 800ad96:	4603      	mov	r3, r0
 800ad98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ad9a:	4b48      	ldr	r3, [pc, #288]	; (800aebc <tcp_input+0x28c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4a46      	ldr	r2, [pc, #280]	; (800aebc <tcp_input+0x28c>)
 800ada4:	6814      	ldr	r4, [r2, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fc feb9 	bl	8007b1e <lwip_htons>
 800adac:	4603      	mov	r3, r0
 800adae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800adb0:	4b42      	ldr	r3, [pc, #264]	; (800aebc <tcp_input+0x28c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	4a41      	ldr	r2, [pc, #260]	; (800aebc <tcp_input+0x28c>)
 800adb8:	6814      	ldr	r4, [r2, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fc fec4 	bl	8007b48 <lwip_htonl>
 800adc0:	4603      	mov	r3, r0
 800adc2:	6063      	str	r3, [r4, #4]
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	4a45      	ldr	r2, [pc, #276]	; (800aedc <tcp_input+0x2ac>)
 800adc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800adca:	4b3c      	ldr	r3, [pc, #240]	; (800aebc <tcp_input+0x28c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	4a3a      	ldr	r2, [pc, #232]	; (800aebc <tcp_input+0x28c>)
 800add2:	6814      	ldr	r4, [r2, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f7fc feb7 	bl	8007b48 <lwip_htonl>
 800adda:	4603      	mov	r3, r0
 800addc:	60a3      	str	r3, [r4, #8]
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	4a3f      	ldr	r2, [pc, #252]	; (800aee0 <tcp_input+0x2b0>)
 800ade2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ade4:	4b35      	ldr	r3, [pc, #212]	; (800aebc <tcp_input+0x28c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	89db      	ldrh	r3, [r3, #14]
 800adea:	b29b      	uxth	r3, r3
 800adec:	4a33      	ldr	r2, [pc, #204]	; (800aebc <tcp_input+0x28c>)
 800adee:	6814      	ldr	r4, [r2, #0]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fc fe94 	bl	8007b1e <lwip_htons>
 800adf6:	4603      	mov	r3, r0
 800adf8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800adfa:	4b30      	ldr	r3, [pc, #192]	; (800aebc <tcp_input+0x28c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	899b      	ldrh	r3, [r3, #12]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fc fe8b 	bl	8007b1e <lwip_htons>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	4b34      	ldr	r3, [pc, #208]	; (800aee4 <tcp_input+0x2b4>)
 800ae14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	891a      	ldrh	r2, [r3, #8]
 800ae1a:	4b33      	ldr	r3, [pc, #204]	; (800aee8 <tcp_input+0x2b8>)
 800ae1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ae1e:	4b31      	ldr	r3, [pc, #196]	; (800aee4 <tcp_input+0x2b4>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 0303 	and.w	r3, r3, #3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00c      	beq.n	800ae44 <tcp_input+0x214>
    tcplen++;
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	; (800aee8 <tcp_input+0x2b8>)
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	4b2d      	ldr	r3, [pc, #180]	; (800aee8 <tcp_input+0x2b8>)
 800ae34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	891a      	ldrh	r2, [r3, #8]
 800ae3a:	4b2b      	ldr	r3, [pc, #172]	; (800aee8 <tcp_input+0x2b8>)
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	f200 82e6 	bhi.w	800b410 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae48:	4b28      	ldr	r3, [pc, #160]	; (800aeec <tcp_input+0x2bc>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	61fb      	str	r3, [r7, #28]
 800ae4e:	e09d      	b.n	800af8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	7d1b      	ldrb	r3, [r3, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d105      	bne.n	800ae64 <tcp_input+0x234>
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <tcp_input+0x280>)
 800ae5a:	22fb      	movs	r2, #251	; 0xfb
 800ae5c:	4924      	ldr	r1, [pc, #144]	; (800aef0 <tcp_input+0x2c0>)
 800ae5e:	4816      	ldr	r0, [pc, #88]	; (800aeb8 <tcp_input+0x288>)
 800ae60:	f006 fb00 	bl	8011464 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	7d1b      	ldrb	r3, [r3, #20]
 800ae68:	2b0a      	cmp	r3, #10
 800ae6a:	d105      	bne.n	800ae78 <tcp_input+0x248>
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <tcp_input+0x280>)
 800ae6e:	22fc      	movs	r2, #252	; 0xfc
 800ae70:	4920      	ldr	r1, [pc, #128]	; (800aef4 <tcp_input+0x2c4>)
 800ae72:	4811      	ldr	r0, [pc, #68]	; (800aeb8 <tcp_input+0x288>)
 800ae74:	f006 faf6 	bl	8011464 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	7d1b      	ldrb	r3, [r3, #20]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d105      	bne.n	800ae8c <tcp_input+0x25c>
 800ae80:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <tcp_input+0x280>)
 800ae82:	22fd      	movs	r2, #253	; 0xfd
 800ae84:	491c      	ldr	r1, [pc, #112]	; (800aef8 <tcp_input+0x2c8>)
 800ae86:	480c      	ldr	r0, [pc, #48]	; (800aeb8 <tcp_input+0x288>)
 800ae88:	f006 faec 	bl	8011464 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	7a1b      	ldrb	r3, [r3, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d033      	beq.n	800aefc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	7a1a      	ldrb	r2, [r3, #8]
 800ae98:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <tcp_input+0x290>)
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aea0:	3301      	adds	r3, #1
 800aea2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d029      	beq.n	800aefc <tcp_input+0x2cc>
      prev = pcb;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	61bb      	str	r3, [r7, #24]
      continue;
 800aeac:	e06b      	b.n	800af86 <tcp_input+0x356>
 800aeae:	bf00      	nop
 800aeb0:	08013638 	.word	0x08013638
 800aeb4:	0801366c 	.word	0x0801366c
 800aeb8:	08013684 	.word	0x08013684
 800aebc:	20008d2c 	.word	0x20008d2c
 800aec0:	20005794 	.word	0x20005794
 800aec4:	20008d30 	.word	0x20008d30
 800aec8:	20008d34 	.word	0x20008d34
 800aecc:	20008d32 	.word	0x20008d32
 800aed0:	080136ac 	.word	0x080136ac
 800aed4:	080136bc 	.word	0x080136bc
 800aed8:	080136c8 	.word	0x080136c8
 800aedc:	20008d3c 	.word	0x20008d3c
 800aee0:	20008d40 	.word	0x20008d40
 800aee4:	20008d48 	.word	0x20008d48
 800aee8:	20008d46 	.word	0x20008d46
 800aeec:	20008d10 	.word	0x20008d10
 800aef0:	080136e8 	.word	0x080136e8
 800aef4:	08013710 	.word	0x08013710
 800aef8:	0801373c 	.word	0x0801373c
    }

    if (pcb->remote_port == tcphdr->src &&
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	8b1a      	ldrh	r2, [r3, #24]
 800af00:	4b72      	ldr	r3, [pc, #456]	; (800b0cc <tcp_input+0x49c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	b29b      	uxth	r3, r3
 800af08:	429a      	cmp	r2, r3
 800af0a:	d13a      	bne.n	800af82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	8ada      	ldrh	r2, [r3, #22]
 800af10:	4b6e      	ldr	r3, [pc, #440]	; (800b0cc <tcp_input+0x49c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	885b      	ldrh	r3, [r3, #2]
 800af16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800af18:	429a      	cmp	r2, r3
 800af1a:	d132      	bne.n	800af82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	4b6b      	ldr	r3, [pc, #428]	; (800b0d0 <tcp_input+0x4a0>)
 800af22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800af24:	429a      	cmp	r2, r3
 800af26:	d12c      	bne.n	800af82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	4b68      	ldr	r3, [pc, #416]	; (800b0d0 <tcp_input+0x4a0>)
 800af2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af30:	429a      	cmp	r2, r3
 800af32:	d126      	bne.n	800af82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d106      	bne.n	800af4c <tcp_input+0x31c>
 800af3e:	4b65      	ldr	r3, [pc, #404]	; (800b0d4 <tcp_input+0x4a4>)
 800af40:	f240 120d 	movw	r2, #269	; 0x10d
 800af44:	4964      	ldr	r1, [pc, #400]	; (800b0d8 <tcp_input+0x4a8>)
 800af46:	4865      	ldr	r0, [pc, #404]	; (800b0dc <tcp_input+0x4ac>)
 800af48:	f006 fa8c 	bl	8011464 <iprintf>
      if (prev != NULL) {
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <tcp_input+0x338>
        prev->next = pcb->next;
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800af5a:	4b61      	ldr	r3, [pc, #388]	; (800b0e0 <tcp_input+0x4b0>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800af62:	4a5f      	ldr	r2, [pc, #380]	; (800b0e0 <tcp_input+0x4b0>)
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d111      	bne.n	800af96 <tcp_input+0x366>
 800af72:	4b58      	ldr	r3, [pc, #352]	; (800b0d4 <tcp_input+0x4a4>)
 800af74:	f240 1215 	movw	r2, #277	; 0x115
 800af78:	495a      	ldr	r1, [pc, #360]	; (800b0e4 <tcp_input+0x4b4>)
 800af7a:	4858      	ldr	r0, [pc, #352]	; (800b0dc <tcp_input+0x4ac>)
 800af7c:	f006 fa72 	bl	8011464 <iprintf>
      break;
 800af80:	e009      	b.n	800af96 <tcp_input+0x366>
    }
    prev = pcb;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f47f af5e 	bne.w	800ae50 <tcp_input+0x220>
 800af94:	e000      	b.n	800af98 <tcp_input+0x368>
      break;
 800af96:	bf00      	nop
  }

  if (pcb == NULL) {
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 80aa 	bne.w	800b0f4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800afa0:	4b51      	ldr	r3, [pc, #324]	; (800b0e8 <tcp_input+0x4b8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	e03f      	b.n	800b028 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	7d1b      	ldrb	r3, [r3, #20]
 800afac:	2b0a      	cmp	r3, #10
 800afae:	d006      	beq.n	800afbe <tcp_input+0x38e>
 800afb0:	4b48      	ldr	r3, [pc, #288]	; (800b0d4 <tcp_input+0x4a4>)
 800afb2:	f240 121f 	movw	r2, #287	; 0x11f
 800afb6:	494d      	ldr	r1, [pc, #308]	; (800b0ec <tcp_input+0x4bc>)
 800afb8:	4848      	ldr	r0, [pc, #288]	; (800b0dc <tcp_input+0x4ac>)
 800afba:	f006 fa53 	bl	8011464 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	7a1b      	ldrb	r3, [r3, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	7a1a      	ldrb	r2, [r3, #8]
 800afca:	4b41      	ldr	r3, [pc, #260]	; (800b0d0 <tcp_input+0x4a0>)
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afd2:	3301      	adds	r3, #1
 800afd4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d122      	bne.n	800b020 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	8b1a      	ldrh	r2, [r3, #24]
 800afde:	4b3b      	ldr	r3, [pc, #236]	; (800b0cc <tcp_input+0x49c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d11b      	bne.n	800b022 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	8ada      	ldrh	r2, [r3, #22]
 800afee:	4b37      	ldr	r3, [pc, #220]	; (800b0cc <tcp_input+0x49c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	885b      	ldrh	r3, [r3, #2]
 800aff4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d113      	bne.n	800b022 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	4b34      	ldr	r3, [pc, #208]	; (800b0d0 <tcp_input+0x4a0>)
 800b000:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b002:	429a      	cmp	r2, r3
 800b004:	d10d      	bne.n	800b022 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <tcp_input+0x4a0>)
 800b00c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b00e:	429a      	cmp	r2, r3
 800b010:	d107      	bne.n	800b022 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b012:	69f8      	ldr	r0, [r7, #28]
 800b014:	f000 fb56 	bl	800b6c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7fd ffe1 	bl	8008fe0 <pbuf_free>
        return;
 800b01e:	e1fd      	b.n	800b41c <tcp_input+0x7ec>
        continue;
 800b020:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1bc      	bne.n	800afa8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b032:	4b2f      	ldr	r3, [pc, #188]	; (800b0f0 <tcp_input+0x4c0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e02a      	b.n	800b090 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	7a1b      	ldrb	r3, [r3, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	7a1a      	ldrb	r2, [r3, #8]
 800b046:	4b22      	ldr	r3, [pc, #136]	; (800b0d0 <tcp_input+0x4a0>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b04e:	3301      	adds	r3, #1
 800b050:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b052:	429a      	cmp	r2, r3
 800b054:	d002      	beq.n	800b05c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	61bb      	str	r3, [r7, #24]
        continue;
 800b05a:	e016      	b.n	800b08a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	8ada      	ldrh	r2, [r3, #22]
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <tcp_input+0x49c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	b29b      	uxth	r3, r3
 800b068:	429a      	cmp	r2, r3
 800b06a:	d10c      	bne.n	800b086 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4b17      	ldr	r3, [pc, #92]	; (800b0d0 <tcp_input+0x4a0>)
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	429a      	cmp	r2, r3
 800b076:	d00f      	beq.n	800b098 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00d      	beq.n	800b09a <tcp_input+0x46a>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d009      	beq.n	800b09a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1d1      	bne.n	800b03a <tcp_input+0x40a>
 800b096:	e000      	b.n	800b09a <tcp_input+0x46a>
            break;
 800b098:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d029      	beq.n	800b0f4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b0ae:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <tcp_input+0x4c0>)
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b0b6:	4a0e      	ldr	r2, [pc, #56]	; (800b0f0 <tcp_input+0x4c0>)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b0bc:	6978      	ldr	r0, [r7, #20]
 800b0be:	f000 fa03 	bl	800b4c8 <tcp_listen_input>
      }
      pbuf_free(p);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fd ff8c 	bl	8008fe0 <pbuf_free>
      return;
 800b0c8:	e1a8      	b.n	800b41c <tcp_input+0x7ec>
 800b0ca:	bf00      	nop
 800b0cc:	20008d2c 	.word	0x20008d2c
 800b0d0:	20005794 	.word	0x20005794
 800b0d4:	08013638 	.word	0x08013638
 800b0d8:	08013764 	.word	0x08013764
 800b0dc:	08013684 	.word	0x08013684
 800b0e0:	20008d10 	.word	0x20008d10
 800b0e4:	08013790 	.word	0x08013790
 800b0e8:	20008d14 	.word	0x20008d14
 800b0ec:	080137bc 	.word	0x080137bc
 800b0f0:	20008d0c 	.word	0x20008d0c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8158 	beq.w	800b3ac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b0fc:	4b95      	ldr	r3, [pc, #596]	; (800b354 <tcp_input+0x724>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	891a      	ldrh	r2, [r3, #8]
 800b106:	4b93      	ldr	r3, [pc, #588]	; (800b354 <tcp_input+0x724>)
 800b108:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b10a:	4a92      	ldr	r2, [pc, #584]	; (800b354 <tcp_input+0x724>)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b110:	4b91      	ldr	r3, [pc, #580]	; (800b358 <tcp_input+0x728>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a8f      	ldr	r2, [pc, #572]	; (800b354 <tcp_input+0x724>)
 800b116:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b118:	4b90      	ldr	r3, [pc, #576]	; (800b35c <tcp_input+0x72c>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b11e:	4b90      	ldr	r3, [pc, #576]	; (800b360 <tcp_input+0x730>)
 800b120:	2200      	movs	r2, #0
 800b122:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b124:	4b8f      	ldr	r3, [pc, #572]	; (800b364 <tcp_input+0x734>)
 800b126:	2200      	movs	r2, #0
 800b128:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b12a:	4b8f      	ldr	r3, [pc, #572]	; (800b368 <tcp_input+0x738>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0308 	and.w	r3, r3, #8
 800b132:	2b00      	cmp	r3, #0
 800b134:	d006      	beq.n	800b144 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7b5b      	ldrb	r3, [r3, #13]
 800b13a:	f043 0301 	orr.w	r3, r3, #1
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d017      	beq.n	800b17c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b14c:	69f8      	ldr	r0, [r7, #28]
 800b14e:	f7ff f929 	bl	800a3a4 <tcp_process_refused_data>
 800b152:	4603      	mov	r3, r0
 800b154:	f113 0f0d 	cmn.w	r3, #13
 800b158:	d007      	beq.n	800b16a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b162:	4b82      	ldr	r3, [pc, #520]	; (800b36c <tcp_input+0x73c>)
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d008      	beq.n	800b17c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 80e3 	bne.w	800b33a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b174:	69f8      	ldr	r0, [r7, #28]
 800b176:	f003 f9ad 	bl	800e4d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b17a:	e0de      	b.n	800b33a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b17c:	4a7c      	ldr	r2, [pc, #496]	; (800b370 <tcp_input+0x740>)
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b182:	69f8      	ldr	r0, [r7, #28]
 800b184:	f000 fb18 	bl	800b7b8 <tcp_process>
 800b188:	4603      	mov	r3, r0
 800b18a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b18c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b190:	f113 0f0d 	cmn.w	r3, #13
 800b194:	f000 80d3 	beq.w	800b33e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b198:	4b71      	ldr	r3, [pc, #452]	; (800b360 <tcp_input+0x730>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d015      	beq.n	800b1d0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d008      	beq.n	800b1c0 <tcp_input+0x590>
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b4:	69fa      	ldr	r2, [r7, #28]
 800b1b6:	6912      	ldr	r2, [r2, #16]
 800b1b8:	f06f 010d 	mvn.w	r1, #13
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	486c      	ldr	r0, [pc, #432]	; (800b374 <tcp_input+0x744>)
 800b1c4:	f7ff fbbc 	bl	800a940 <tcp_pcb_remove>
        tcp_free(pcb);
 800b1c8:	69f8      	ldr	r0, [r7, #28]
 800b1ca:	f7fe f9a9 	bl	8009520 <tcp_free>
 800b1ce:	e0da      	b.n	800b386 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b1d4:	4b63      	ldr	r3, [pc, #396]	; (800b364 <tcp_input+0x734>)
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01d      	beq.n	800b218 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b1dc:	4b61      	ldr	r3, [pc, #388]	; (800b364 <tcp_input+0x734>)
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <tcp_input+0x5d2>
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	6910      	ldr	r0, [r2, #16]
 800b1f6:	89fa      	ldrh	r2, [r7, #14]
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	4798      	blx	r3
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	74fb      	strb	r3, [r7, #19]
 800b200:	e001      	b.n	800b206 <tcp_input+0x5d6>
 800b202:	2300      	movs	r3, #0
 800b204:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b206:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b20a:	f113 0f0d 	cmn.w	r3, #13
 800b20e:	f000 8098 	beq.w	800b342 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b212:	4b54      	ldr	r3, [pc, #336]	; (800b364 <tcp_input+0x734>)
 800b214:	2200      	movs	r2, #0
 800b216:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b218:	69f8      	ldr	r0, [r7, #28]
 800b21a:	f000 f915 	bl	800b448 <tcp_input_delayed_close>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	f040 8090 	bne.w	800b346 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b226:	4b4d      	ldr	r3, [pc, #308]	; (800b35c <tcp_input+0x72c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d041      	beq.n	800b2b2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <tcp_input+0x614>
 800b236:	4b50      	ldr	r3, [pc, #320]	; (800b378 <tcp_input+0x748>)
 800b238:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b23c:	494f      	ldr	r1, [pc, #316]	; (800b37c <tcp_input+0x74c>)
 800b23e:	4850      	ldr	r0, [pc, #320]	; (800b380 <tcp_input+0x750>)
 800b240:	f006 f910 	bl	8011464 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	8b5b      	ldrh	r3, [r3, #26]
 800b248:	f003 0310 	and.w	r3, r3, #16
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d008      	beq.n	800b262 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b250:	4b42      	ldr	r3, [pc, #264]	; (800b35c <tcp_input+0x72c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fec3 	bl	8008fe0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b25a:	69f8      	ldr	r0, [r7, #28]
 800b25c:	f7fe fc48 	bl	8009af0 <tcp_abort>
            goto aborted;
 800b260:	e091      	b.n	800b386 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00c      	beq.n	800b286 <tcp_input+0x656>
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	6918      	ldr	r0, [r3, #16]
 800b276:	4b39      	ldr	r3, [pc, #228]	; (800b35c <tcp_input+0x72c>)
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	69f9      	ldr	r1, [r7, #28]
 800b27e:	47a0      	blx	r4
 800b280:	4603      	mov	r3, r0
 800b282:	74fb      	strb	r3, [r7, #19]
 800b284:	e008      	b.n	800b298 <tcp_input+0x668>
 800b286:	4b35      	ldr	r3, [pc, #212]	; (800b35c <tcp_input+0x72c>)
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	69f9      	ldr	r1, [r7, #28]
 800b28e:	2000      	movs	r0, #0
 800b290:	f7ff f95e 	bl	800a550 <tcp_recv_null>
 800b294:	4603      	mov	r3, r0
 800b296:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b298:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b29c:	f113 0f0d 	cmn.w	r3, #13
 800b2a0:	d053      	beq.n	800b34a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b2a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b2aa:	4b2c      	ldr	r3, [pc, #176]	; (800b35c <tcp_input+0x72c>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b2b2:	4b2b      	ldr	r3, [pc, #172]	; (800b360 <tcp_input+0x730>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d030      	beq.n	800b320 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ca:	7b5a      	ldrb	r2, [r3, #13]
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2d0:	f042 0220 	orr.w	r2, r2, #32
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	735a      	strb	r2, [r3, #13]
 800b2d8:	e022      	b.n	800b320 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b2e2:	d005      	beq.n	800b2f0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <tcp_input+0x6e2>
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	6918      	ldr	r0, [r3, #16]
 800b304:	2300      	movs	r3, #0
 800b306:	2200      	movs	r2, #0
 800b308:	69f9      	ldr	r1, [r7, #28]
 800b30a:	47a0      	blx	r4
 800b30c:	4603      	mov	r3, r0
 800b30e:	74fb      	strb	r3, [r7, #19]
 800b310:	e001      	b.n	800b316 <tcp_input+0x6e6>
 800b312:	2300      	movs	r3, #0
 800b314:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b316:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b31a:	f113 0f0d 	cmn.w	r3, #13
 800b31e:	d016      	beq.n	800b34e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b320:	4b13      	ldr	r3, [pc, #76]	; (800b370 <tcp_input+0x740>)
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b326:	69f8      	ldr	r0, [r7, #28]
 800b328:	f000 f88e 	bl	800b448 <tcp_input_delayed_close>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d128      	bne.n	800b384 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b332:	69f8      	ldr	r0, [r7, #28]
 800b334:	f002 fac8 	bl	800d8c8 <tcp_output>
 800b338:	e025      	b.n	800b386 <tcp_input+0x756>
        goto aborted;
 800b33a:	bf00      	nop
 800b33c:	e023      	b.n	800b386 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b33e:	bf00      	nop
 800b340:	e021      	b.n	800b386 <tcp_input+0x756>
              goto aborted;
 800b342:	bf00      	nop
 800b344:	e01f      	b.n	800b386 <tcp_input+0x756>
          goto aborted;
 800b346:	bf00      	nop
 800b348:	e01d      	b.n	800b386 <tcp_input+0x756>
            goto aborted;
 800b34a:	bf00      	nop
 800b34c:	e01b      	b.n	800b386 <tcp_input+0x756>
              goto aborted;
 800b34e:	bf00      	nop
 800b350:	e019      	b.n	800b386 <tcp_input+0x756>
 800b352:	bf00      	nop
 800b354:	20008d1c 	.word	0x20008d1c
 800b358:	20008d2c 	.word	0x20008d2c
 800b35c:	20008d4c 	.word	0x20008d4c
 800b360:	20008d49 	.word	0x20008d49
 800b364:	20008d44 	.word	0x20008d44
 800b368:	20008d48 	.word	0x20008d48
 800b36c:	20008d46 	.word	0x20008d46
 800b370:	20008d50 	.word	0x20008d50
 800b374:	20008d10 	.word	0x20008d10
 800b378:	08013638 	.word	0x08013638
 800b37c:	080137ec 	.word	0x080137ec
 800b380:	08013684 	.word	0x08013684
          goto aborted;
 800b384:	bf00      	nop
    tcp_input_pcb = NULL;
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <tcp_input+0x7f4>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b38c:	4b26      	ldr	r3, [pc, #152]	; (800b428 <tcp_input+0x7f8>)
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b392:	4b26      	ldr	r3, [pc, #152]	; (800b42c <tcp_input+0x7fc>)
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d03f      	beq.n	800b41a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b39a:	4b24      	ldr	r3, [pc, #144]	; (800b42c <tcp_input+0x7fc>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fd fe1e 	bl	8008fe0 <pbuf_free>
      inseg.p = NULL;
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <tcp_input+0x7fc>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b3aa:	e036      	b.n	800b41a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b3ac:	4b20      	ldr	r3, [pc, #128]	; (800b430 <tcp_input+0x800>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	899b      	ldrh	r3, [r3, #12]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fc fbb2 	bl	8007b1e <lwip_htons>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d118      	bne.n	800b3f8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3c6:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <tcp_input+0x804>)
 800b3c8:	6819      	ldr	r1, [r3, #0]
 800b3ca:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <tcp_input+0x808>)
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <tcp_input+0x80c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d6:	4b16      	ldr	r3, [pc, #88]	; (800b430 <tcp_input+0x800>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3da:	885b      	ldrh	r3, [r3, #2]
 800b3dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3de:	4a14      	ldr	r2, [pc, #80]	; (800b430 <tcp_input+0x800>)
 800b3e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	b292      	uxth	r2, r2
 800b3e6:	9202      	str	r2, [sp, #8]
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	4b15      	ldr	r3, [pc, #84]	; (800b440 <tcp_input+0x810>)
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	4b15      	ldr	r3, [pc, #84]	; (800b444 <tcp_input+0x814>)
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f003 f81c 	bl	800e430 <tcp_rst>
    pbuf_free(p);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7fd fdf1 	bl	8008fe0 <pbuf_free>
  return;
 800b3fe:	e00c      	b.n	800b41a <tcp_input+0x7ea>
    goto dropped;
 800b400:	bf00      	nop
 800b402:	e006      	b.n	800b412 <tcp_input+0x7e2>
    goto dropped;
 800b404:	bf00      	nop
 800b406:	e004      	b.n	800b412 <tcp_input+0x7e2>
    goto dropped;
 800b408:	bf00      	nop
 800b40a:	e002      	b.n	800b412 <tcp_input+0x7e2>
      goto dropped;
 800b40c:	bf00      	nop
 800b40e:	e000      	b.n	800b412 <tcp_input+0x7e2>
      goto dropped;
 800b410:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7fd fde4 	bl	8008fe0 <pbuf_free>
 800b418:	e000      	b.n	800b41c <tcp_input+0x7ec>
  return;
 800b41a:	bf00      	nop
}
 800b41c:	3724      	adds	r7, #36	; 0x24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd90      	pop	{r4, r7, pc}
 800b422:	bf00      	nop
 800b424:	20008d50 	.word	0x20008d50
 800b428:	20008d4c 	.word	0x20008d4c
 800b42c:	20008d1c 	.word	0x20008d1c
 800b430:	20008d2c 	.word	0x20008d2c
 800b434:	20008d40 	.word	0x20008d40
 800b438:	20008d46 	.word	0x20008d46
 800b43c:	20008d3c 	.word	0x20008d3c
 800b440:	200057a4 	.word	0x200057a4
 800b444:	200057a8 	.word	0x200057a8

0800b448 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <tcp_input_delayed_close+0x1c>
 800b456:	4b17      	ldr	r3, [pc, #92]	; (800b4b4 <tcp_input_delayed_close+0x6c>)
 800b458:	f240 225a 	movw	r2, #602	; 0x25a
 800b45c:	4916      	ldr	r1, [pc, #88]	; (800b4b8 <tcp_input_delayed_close+0x70>)
 800b45e:	4817      	ldr	r0, [pc, #92]	; (800b4bc <tcp_input_delayed_close+0x74>)
 800b460:	f006 f800 	bl	8011464 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b464:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <tcp_input_delayed_close+0x78>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f003 0310 	and.w	r3, r3, #16
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d01c      	beq.n	800b4aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8b5b      	ldrh	r3, [r3, #26]
 800b474:	f003 0310 	and.w	r3, r3, #16
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10d      	bne.n	800b498 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b482:	2b00      	cmp	r3, #0
 800b484:	d008      	beq.n	800b498 <tcp_input_delayed_close+0x50>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	6912      	ldr	r2, [r2, #16]
 800b490:	f06f 010e 	mvn.w	r1, #14
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	480a      	ldr	r0, [pc, #40]	; (800b4c4 <tcp_input_delayed_close+0x7c>)
 800b49c:	f7ff fa50 	bl	800a940 <tcp_pcb_remove>
    tcp_free(pcb);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7fe f83d 	bl	8009520 <tcp_free>
    return 1;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	08013638 	.word	0x08013638
 800b4b8:	08013808 	.word	0x08013808
 800b4bc:	08013684 	.word	0x08013684
 800b4c0:	20008d49 	.word	0x20008d49
 800b4c4:	20008d10 	.word	0x20008d10

0800b4c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b4c8:	b590      	push	{r4, r7, lr}
 800b4ca:	b08b      	sub	sp, #44	; 0x2c
 800b4cc:	af04      	add	r7, sp, #16
 800b4ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b4d0:	4b6f      	ldr	r3, [pc, #444]	; (800b690 <tcp_listen_input+0x1c8>)
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f040 80d2 	bne.w	800b682 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <tcp_listen_input+0x2a>
 800b4e4:	4b6b      	ldr	r3, [pc, #428]	; (800b694 <tcp_listen_input+0x1cc>)
 800b4e6:	f240 2281 	movw	r2, #641	; 0x281
 800b4ea:	496b      	ldr	r1, [pc, #428]	; (800b698 <tcp_listen_input+0x1d0>)
 800b4ec:	486b      	ldr	r0, [pc, #428]	; (800b69c <tcp_listen_input+0x1d4>)
 800b4ee:	f005 ffb9 	bl	8011464 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b4f2:	4b67      	ldr	r3, [pc, #412]	; (800b690 <tcp_listen_input+0x1c8>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	f003 0310 	and.w	r3, r3, #16
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d019      	beq.n	800b532 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4fe:	4b68      	ldr	r3, [pc, #416]	; (800b6a0 <tcp_listen_input+0x1d8>)
 800b500:	6819      	ldr	r1, [r3, #0]
 800b502:	4b68      	ldr	r3, [pc, #416]	; (800b6a4 <tcp_listen_input+0x1dc>)
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	4b67      	ldr	r3, [pc, #412]	; (800b6a8 <tcp_listen_input+0x1e0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b50e:	4b67      	ldr	r3, [pc, #412]	; (800b6ac <tcp_listen_input+0x1e4>)
 800b510:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b512:	885b      	ldrh	r3, [r3, #2]
 800b514:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b516:	4a65      	ldr	r2, [pc, #404]	; (800b6ac <tcp_listen_input+0x1e4>)
 800b518:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b51a:	8812      	ldrh	r2, [r2, #0]
 800b51c:	b292      	uxth	r2, r2
 800b51e:	9202      	str	r2, [sp, #8]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	4b63      	ldr	r3, [pc, #396]	; (800b6b0 <tcp_listen_input+0x1e8>)
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	4b63      	ldr	r3, [pc, #396]	; (800b6b4 <tcp_listen_input+0x1ec>)
 800b528:	4602      	mov	r2, r0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f002 ff80 	bl	800e430 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b530:	e0a9      	b.n	800b686 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b532:	4b57      	ldr	r3, [pc, #348]	; (800b690 <tcp_listen_input+0x1c8>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 80a3 	beq.w	800b686 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	7d5b      	ldrb	r3, [r3, #21]
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff f927 	bl	800a798 <tcp_alloc>
 800b54a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d111      	bne.n	800b576 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <tcp_listen_input+0xa8>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	6910      	ldr	r0, [r2, #16]
 800b562:	f04f 32ff 	mov.w	r2, #4294967295
 800b566:	2100      	movs	r1, #0
 800b568:	4798      	blx	r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	73bb      	strb	r3, [r7, #14]
      return;
 800b56e:	e08b      	b.n	800b688 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b570:	23f0      	movs	r3, #240	; 0xf0
 800b572:	73bb      	strb	r3, [r7, #14]
      return;
 800b574:	e088      	b.n	800b688 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b576:	4b50      	ldr	r3, [pc, #320]	; (800b6b8 <tcp_listen_input+0x1f0>)
 800b578:	695a      	ldr	r2, [r3, #20]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b57e:	4b4e      	ldr	r3, [pc, #312]	; (800b6b8 <tcp_listen_input+0x1f0>)
 800b580:	691a      	ldr	r2, [r3, #16]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	8ada      	ldrh	r2, [r3, #22]
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b58e:	4b47      	ldr	r3, [pc, #284]	; (800b6ac <tcp_listen_input+0x1e4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	b29a      	uxth	r2, r3
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2203      	movs	r2, #3
 800b59e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b5a0:	4b41      	ldr	r3, [pc, #260]	; (800b6a8 <tcp_listen_input+0x1e0>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b5b2:	6978      	ldr	r0, [r7, #20]
 800b5b4:	f7ff fa58 	bl	800aa68 <tcp_next_iss>
 800b5b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b5d2:	4b35      	ldr	r3, [pc, #212]	; (800b6a8 <tcp_listen_input+0x1e0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	1e5a      	subs	r2, r3, #1
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	691a      	ldr	r2, [r3, #16]
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7a5b      	ldrb	r3, [r3, #9]
 800b5ee:	f003 030c 	and.w	r3, r3, #12
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7a1a      	ldrb	r2, [r3, #8]
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b600:	4b2e      	ldr	r3, [pc, #184]	; (800b6bc <tcp_listen_input+0x1f4>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	60da      	str	r2, [r3, #12]
 800b608:	4a2c      	ldr	r2, [pc, #176]	; (800b6bc <tcp_listen_input+0x1f4>)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	f003 f8d1 	bl	800e7b4 <tcp_timer_needed>
 800b612:	4b2b      	ldr	r3, [pc, #172]	; (800b6c0 <tcp_listen_input+0x1f8>)
 800b614:	2201      	movs	r2, #1
 800b616:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b618:	6978      	ldr	r0, [r7, #20]
 800b61a:	f001 fd8f 	bl	800d13c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b61e:	4b23      	ldr	r3, [pc, #140]	; (800b6ac <tcp_listen_input+0x1e4>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	89db      	ldrh	r3, [r3, #14]
 800b624:	b29a      	uxth	r2, r3
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	3304      	adds	r3, #4
 800b640:	4618      	mov	r0, r3
 800b642:	f004 fc23 	bl	800fe8c <ip4_route>
 800b646:	4601      	mov	r1, r0
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	3304      	adds	r3, #4
 800b64c:	461a      	mov	r2, r3
 800b64e:	4620      	mov	r0, r4
 800b650:	f7ff fa30 	bl	800aab4 <tcp_eff_send_mss_netif>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b65c:	2112      	movs	r1, #18
 800b65e:	6978      	ldr	r0, [r7, #20]
 800b660:	f002 f844 	bl	800d6ec <tcp_enqueue_flags>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d004      	beq.n	800b67a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b670:	2100      	movs	r1, #0
 800b672:	6978      	ldr	r0, [r7, #20]
 800b674:	f7fe f97e 	bl	8009974 <tcp_abandon>
      return;
 800b678:	e006      	b.n	800b688 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b67a:	6978      	ldr	r0, [r7, #20]
 800b67c:	f002 f924 	bl	800d8c8 <tcp_output>
  return;
 800b680:	e001      	b.n	800b686 <tcp_listen_input+0x1be>
    return;
 800b682:	bf00      	nop
 800b684:	e000      	b.n	800b688 <tcp_listen_input+0x1c0>
  return;
 800b686:	bf00      	nop
}
 800b688:	371c      	adds	r7, #28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd90      	pop	{r4, r7, pc}
 800b68e:	bf00      	nop
 800b690:	20008d48 	.word	0x20008d48
 800b694:	08013638 	.word	0x08013638
 800b698:	08013830 	.word	0x08013830
 800b69c:	08013684 	.word	0x08013684
 800b6a0:	20008d40 	.word	0x20008d40
 800b6a4:	20008d46 	.word	0x20008d46
 800b6a8:	20008d3c 	.word	0x20008d3c
 800b6ac:	20008d2c 	.word	0x20008d2c
 800b6b0:	200057a4 	.word	0x200057a4
 800b6b4:	200057a8 	.word	0x200057a8
 800b6b8:	20005794 	.word	0x20005794
 800b6bc:	20008d10 	.word	0x20008d10
 800b6c0:	20008d18 	.word	0x20008d18

0800b6c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af04      	add	r7, sp, #16
 800b6ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b6cc:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <tcp_timewait_input+0xc8>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 0304 	and.w	r3, r3, #4
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d153      	bne.n	800b780 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <tcp_timewait_input+0x28>
 800b6de:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <tcp_timewait_input+0xcc>)
 800b6e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b6e4:	492b      	ldr	r1, [pc, #172]	; (800b794 <tcp_timewait_input+0xd0>)
 800b6e6:	482c      	ldr	r0, [pc, #176]	; (800b798 <tcp_timewait_input+0xd4>)
 800b6e8:	f005 febc 	bl	8011464 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b6ec:	4b27      	ldr	r3, [pc, #156]	; (800b78c <tcp_timewait_input+0xc8>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02a      	beq.n	800b74e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b6f8:	4b28      	ldr	r3, [pc, #160]	; (800b79c <tcp_timewait_input+0xd8>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b00      	cmp	r3, #0
 800b704:	db2d      	blt.n	800b762 <tcp_timewait_input+0x9e>
 800b706:	4b25      	ldr	r3, [pc, #148]	; (800b79c <tcp_timewait_input+0xd8>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	6879      	ldr	r1, [r7, #4]
 800b710:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b712:	440b      	add	r3, r1
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	dc23      	bgt.n	800b762 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b71a:	4b21      	ldr	r3, [pc, #132]	; (800b7a0 <tcp_timewait_input+0xdc>)
 800b71c:	6819      	ldr	r1, [r3, #0]
 800b71e:	4b21      	ldr	r3, [pc, #132]	; (800b7a4 <tcp_timewait_input+0xe0>)
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	4b1d      	ldr	r3, [pc, #116]	; (800b79c <tcp_timewait_input+0xd8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b72a:	4b1f      	ldr	r3, [pc, #124]	; (800b7a8 <tcp_timewait_input+0xe4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b72e:	885b      	ldrh	r3, [r3, #2]
 800b730:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b732:	4a1d      	ldr	r2, [pc, #116]	; (800b7a8 <tcp_timewait_input+0xe4>)
 800b734:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b736:	8812      	ldrh	r2, [r2, #0]
 800b738:	b292      	uxth	r2, r2
 800b73a:	9202      	str	r2, [sp, #8]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	4b1b      	ldr	r3, [pc, #108]	; (800b7ac <tcp_timewait_input+0xe8>)
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <tcp_timewait_input+0xec>)
 800b744:	4602      	mov	r2, r0
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f002 fe72 	bl	800e430 <tcp_rst>
      return;
 800b74c:	e01b      	b.n	800b786 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <tcp_timewait_input+0xc8>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b75a:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <tcp_timewait_input+0xf0>)
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b762:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <tcp_timewait_input+0xe0>)
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00c      	beq.n	800b784 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	8b5b      	ldrh	r3, [r3, #26]
 800b76e:	f043 0302 	orr.w	r3, r3, #2
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f002 f8a5 	bl	800d8c8 <tcp_output>
  }
  return;
 800b77e:	e001      	b.n	800b784 <tcp_timewait_input+0xc0>
    return;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <tcp_timewait_input+0xc2>
  return;
 800b784:	bf00      	nop
}
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20008d48 	.word	0x20008d48
 800b790:	08013638 	.word	0x08013638
 800b794:	08013850 	.word	0x08013850
 800b798:	08013684 	.word	0x08013684
 800b79c:	20008d3c 	.word	0x20008d3c
 800b7a0:	20008d40 	.word	0x20008d40
 800b7a4:	20008d46 	.word	0x20008d46
 800b7a8:	20008d2c 	.word	0x20008d2c
 800b7ac:	200057a4 	.word	0x200057a4
 800b7b0:	200057a8 	.word	0x200057a8
 800b7b4:	20008d04 	.word	0x20008d04

0800b7b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b08d      	sub	sp, #52	; 0x34
 800b7bc:	af04      	add	r7, sp, #16
 800b7be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d106      	bne.n	800b7dc <tcp_process+0x24>
 800b7ce:	4b9d      	ldr	r3, [pc, #628]	; (800ba44 <tcp_process+0x28c>)
 800b7d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b7d4:	499c      	ldr	r1, [pc, #624]	; (800ba48 <tcp_process+0x290>)
 800b7d6:	489d      	ldr	r0, [pc, #628]	; (800ba4c <tcp_process+0x294>)
 800b7d8:	f005 fe44 	bl	8011464 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b7dc:	4b9c      	ldr	r3, [pc, #624]	; (800ba50 <tcp_process+0x298>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d04e      	beq.n	800b886 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d108      	bne.n	800b802 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7f4:	4b97      	ldr	r3, [pc, #604]	; (800ba54 <tcp_process+0x29c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d123      	bne.n	800b844 <tcp_process+0x8c>
        acceptable = 1;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	76fb      	strb	r3, [r7, #27]
 800b800:	e020      	b.n	800b844 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b806:	4b94      	ldr	r3, [pc, #592]	; (800ba58 <tcp_process+0x2a0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d102      	bne.n	800b814 <tcp_process+0x5c>
        acceptable = 1;
 800b80e:	2301      	movs	r3, #1
 800b810:	76fb      	strb	r3, [r7, #27]
 800b812:	e017      	b.n	800b844 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b814:	4b90      	ldr	r3, [pc, #576]	; (800ba58 <tcp_process+0x2a0>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	db10      	blt.n	800b844 <tcp_process+0x8c>
 800b822:	4b8d      	ldr	r3, [pc, #564]	; (800ba58 <tcp_process+0x2a0>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b82e:	440b      	add	r3, r1
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	dc06      	bgt.n	800b844 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	8b5b      	ldrh	r3, [r3, #26]
 800b83a:	f043 0302 	orr.w	r3, r3, #2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b844:	7efb      	ldrb	r3, [r7, #27]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01b      	beq.n	800b882 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7d1b      	ldrb	r3, [r3, #20]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_process+0xa8>
 800b852:	4b7c      	ldr	r3, [pc, #496]	; (800ba44 <tcp_process+0x28c>)
 800b854:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b858:	4980      	ldr	r1, [pc, #512]	; (800ba5c <tcp_process+0x2a4>)
 800b85a:	487c      	ldr	r0, [pc, #496]	; (800ba4c <tcp_process+0x294>)
 800b85c:	f005 fe02 	bl	8011464 <iprintf>
      recv_flags |= TF_RESET;
 800b860:	4b7f      	ldr	r3, [pc, #508]	; (800ba60 <tcp_process+0x2a8>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	f043 0308 	orr.w	r3, r3, #8
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	4b7d      	ldr	r3, [pc, #500]	; (800ba60 <tcp_process+0x2a8>)
 800b86c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8b5b      	ldrh	r3, [r3, #26]
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b87c:	f06f 030d 	mvn.w	r3, #13
 800b880:	e37a      	b.n	800bf78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	e378      	b.n	800bf78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b886:	4b72      	ldr	r3, [pc, #456]	; (800ba50 <tcp_process+0x298>)
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d010      	beq.n	800b8b4 <tcp_process+0xfc>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d00c      	beq.n	800b8b4 <tcp_process+0xfc>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	7d1b      	ldrb	r3, [r3, #20]
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d008      	beq.n	800b8b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8b5b      	ldrh	r3, [r3, #26]
 800b8a6:	f043 0302 	orr.w	r3, r3, #2
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e361      	b.n	800bf78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8b5b      	ldrh	r3, [r3, #26]
 800b8b8:	f003 0310 	and.w	r3, r3, #16
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b8c0:	4b68      	ldr	r3, [pc, #416]	; (800ba64 <tcp_process+0x2ac>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 fc2f 	bl	800d13c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7d1b      	ldrb	r3, [r3, #20]
 800b8e2:	3b02      	subs	r3, #2
 800b8e4:	2b07      	cmp	r3, #7
 800b8e6:	f200 8337 	bhi.w	800bf58 <tcp_process+0x7a0>
 800b8ea:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <tcp_process+0x138>)
 800b8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f0:	0800b911 	.word	0x0800b911
 800b8f4:	0800bb41 	.word	0x0800bb41
 800b8f8:	0800bcb9 	.word	0x0800bcb9
 800b8fc:	0800bce3 	.word	0x0800bce3
 800b900:	0800be07 	.word	0x0800be07
 800b904:	0800bcb9 	.word	0x0800bcb9
 800b908:	0800be93 	.word	0x0800be93
 800b90c:	0800bf23 	.word	0x0800bf23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b910:	4b4f      	ldr	r3, [pc, #316]	; (800ba50 <tcp_process+0x298>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 80e4 	beq.w	800bae6 <tcp_process+0x32e>
 800b91e:	4b4c      	ldr	r3, [pc, #304]	; (800ba50 <tcp_process+0x298>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 80dd 	beq.w	800bae6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	4b48      	ldr	r3, [pc, #288]	; (800ba54 <tcp_process+0x29c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	f040 80d5 	bne.w	800bae6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b93c:	4b46      	ldr	r3, [pc, #280]	; (800ba58 <tcp_process+0x2a0>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b94e:	4b41      	ldr	r3, [pc, #260]	; (800ba54 <tcp_process+0x29c>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b956:	4b44      	ldr	r3, [pc, #272]	; (800ba68 <tcp_process+0x2b0>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	89db      	ldrh	r3, [r3, #14]
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b970:	4b39      	ldr	r3, [pc, #228]	; (800ba58 <tcp_process+0x2a0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	1e5a      	subs	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2204      	movs	r2, #4
 800b97e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f004 fa7f 	bl	800fe8c <ip4_route>
 800b98e:	4601      	mov	r1, r0
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3304      	adds	r3, #4
 800b994:	461a      	mov	r2, r3
 800b996:	4620      	mov	r0, r4
 800b998:	f7ff f88c 	bl	800aab4 <tcp_eff_send_mss_netif>
 800b99c:	4603      	mov	r3, r0
 800b99e:	461a      	mov	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9a8:	009a      	lsls	r2, r3, #2
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800b9b4:	428b      	cmp	r3, r1
 800b9b6:	bf38      	it	cc
 800b9b8:	460b      	movcc	r3, r1
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d204      	bcs.n	800b9c8 <tcp_process+0x210>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	e00d      	b.n	800b9e4 <tcp_process+0x22c>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d904      	bls.n	800b9e0 <tcp_process+0x228>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	e001      	b.n	800b9e4 <tcp_process+0x22c>
 800b9e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <tcp_process+0x24a>
 800b9f4:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <tcp_process+0x28c>)
 800b9f6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b9fa:	491c      	ldr	r1, [pc, #112]	; (800ba6c <tcp_process+0x2b4>)
 800b9fc:	4813      	ldr	r0, [pc, #76]	; (800ba4c <tcp_process+0x294>)
 800b9fe:	f005 fd31 	bl	8011464 <iprintf>
        --pcb->snd_queuelen;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d12a      	bne.n	800ba74 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba22:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <tcp_process+0x280>
 800ba2a:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <tcp_process+0x28c>)
 800ba2c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ba30:	490f      	ldr	r1, [pc, #60]	; (800ba70 <tcp_process+0x2b8>)
 800ba32:	4806      	ldr	r0, [pc, #24]	; (800ba4c <tcp_process+0x294>)
 800ba34:	f005 fd16 	bl	8011464 <iprintf>
          pcb->unsent = rseg->next;
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba40:	e01c      	b.n	800ba7c <tcp_process+0x2c4>
 800ba42:	bf00      	nop
 800ba44:	08013638 	.word	0x08013638
 800ba48:	08013870 	.word	0x08013870
 800ba4c:	08013684 	.word	0x08013684
 800ba50:	20008d48 	.word	0x20008d48
 800ba54:	20008d40 	.word	0x20008d40
 800ba58:	20008d3c 	.word	0x20008d3c
 800ba5c:	0801388c 	.word	0x0801388c
 800ba60:	20008d49 	.word	0x20008d49
 800ba64:	20008d04 	.word	0x20008d04
 800ba68:	20008d2c 	.word	0x20008d2c
 800ba6c:	080138ac 	.word	0x080138ac
 800ba70:	080138c4 	.word	0x080138c4
        } else {
          pcb->unacked = rseg->next;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ba7c:	69f8      	ldr	r0, [r7, #28]
 800ba7e:	f7fe fd22 	bl	800a4c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba90:	861a      	strh	r2, [r3, #48]	; 0x30
 800ba92:	e006      	b.n	800baa2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00a      	beq.n	800bac2 <tcp_process+0x30a>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	6910      	ldr	r0, [r2, #16]
 800bab6:	2200      	movs	r2, #0
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4798      	blx	r3
 800babc:	4603      	mov	r3, r0
 800babe:	76bb      	strb	r3, [r7, #26]
 800bac0:	e001      	b.n	800bac6 <tcp_process+0x30e>
 800bac2:	2300      	movs	r3, #0
 800bac4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bac6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800baca:	f113 0f0d 	cmn.w	r3, #13
 800bace:	d102      	bne.n	800bad6 <tcp_process+0x31e>
          return ERR_ABRT;
 800bad0:	f06f 030c 	mvn.w	r3, #12
 800bad4:	e250      	b.n	800bf78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8b5b      	ldrh	r3, [r3, #26]
 800bada:	f043 0302 	orr.w	r3, r3, #2
 800bade:	b29a      	uxth	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bae4:	e23a      	b.n	800bf5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bae6:	4b98      	ldr	r3, [pc, #608]	; (800bd48 <tcp_process+0x590>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0310 	and.w	r3, r3, #16
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 8234 	beq.w	800bf5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baf4:	4b95      	ldr	r3, [pc, #596]	; (800bd4c <tcp_process+0x594>)
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	4b95      	ldr	r3, [pc, #596]	; (800bd50 <tcp_process+0x598>)
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	461a      	mov	r2, r3
 800bafe:	4b95      	ldr	r3, [pc, #596]	; (800bd54 <tcp_process+0x59c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb04:	4b94      	ldr	r3, [pc, #592]	; (800bd58 <tcp_process+0x5a0>)
 800bb06:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb08:	885b      	ldrh	r3, [r3, #2]
 800bb0a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb0c:	4a92      	ldr	r2, [pc, #584]	; (800bd58 <tcp_process+0x5a0>)
 800bb0e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb10:	8812      	ldrh	r2, [r2, #0]
 800bb12:	b292      	uxth	r2, r2
 800bb14:	9202      	str	r2, [sp, #8]
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	4b90      	ldr	r3, [pc, #576]	; (800bd5c <tcp_process+0x5a4>)
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4b90      	ldr	r3, [pc, #576]	; (800bd60 <tcp_process+0x5a8>)
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f002 fc85 	bl	800e430 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb2c:	2b05      	cmp	r3, #5
 800bb2e:	f200 8215 	bhi.w	800bf5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f002 fa51 	bl	800dfe0 <tcp_rexmit_rto>
      break;
 800bb3e:	e20d      	b.n	800bf5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bb40:	4b81      	ldr	r3, [pc, #516]	; (800bd48 <tcp_process+0x590>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 80a1 	beq.w	800bc90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb4e:	4b7f      	ldr	r3, [pc, #508]	; (800bd4c <tcp_process+0x594>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	db7e      	blt.n	800bc5c <tcp_process+0x4a4>
 800bb5e:	4b7b      	ldr	r3, [pc, #492]	; (800bd4c <tcp_process+0x594>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc77      	bgt.n	800bc5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2204      	movs	r2, #4
 800bb70:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bb7a:	23fa      	movs	r3, #250	; 0xfa
 800bb7c:	76bb      	strb	r3, [r7, #26]
 800bb7e:	e01d      	b.n	800bbbc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <tcp_process+0x3e0>
 800bb8a:	4b76      	ldr	r3, [pc, #472]	; (800bd64 <tcp_process+0x5ac>)
 800bb8c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bb90:	4975      	ldr	r1, [pc, #468]	; (800bd68 <tcp_process+0x5b0>)
 800bb92:	4876      	ldr	r0, [pc, #472]	; (800bd6c <tcp_process+0x5b4>)
 800bb94:	f005 fc66 	bl	8011464 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <tcp_process+0x400>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6910      	ldr	r0, [r2, #16]
 800bbac:	2200      	movs	r2, #0
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	4798      	blx	r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	76bb      	strb	r3, [r7, #26]
 800bbb6:	e001      	b.n	800bbbc <tcp_process+0x404>
 800bbb8:	23f0      	movs	r3, #240	; 0xf0
 800bbba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bbbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bbc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bbc8:	f113 0f0d 	cmn.w	r3, #13
 800bbcc:	d002      	beq.n	800bbd4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7fd ff8e 	bl	8009af0 <tcp_abort>
            }
            return ERR_ABRT;
 800bbd4:	f06f 030c 	mvn.w	r3, #12
 800bbd8:	e1ce      	b.n	800bf78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fae0 	bl	800c1a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bbe0:	4b63      	ldr	r3, [pc, #396]	; (800bd70 <tcp_process+0x5b8>)
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d005      	beq.n	800bbf4 <tcp_process+0x43c>
            recv_acked--;
 800bbe8:	4b61      	ldr	r3, [pc, #388]	; (800bd70 <tcp_process+0x5b8>)
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	4b5f      	ldr	r3, [pc, #380]	; (800bd70 <tcp_process+0x5b8>)
 800bbf2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbf8:	009a      	lsls	r2, r3, #2
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	f241 111c 	movw	r1, #4380	; 0x111c
 800bc04:	428b      	cmp	r3, r1
 800bc06:	bf38      	it	cc
 800bc08:	460b      	movcc	r3, r1
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d204      	bcs.n	800bc18 <tcp_process+0x460>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	e00d      	b.n	800bc34 <tcp_process+0x47c>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	f241 121c 	movw	r2, #4380	; 0x111c
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d904      	bls.n	800bc30 <tcp_process+0x478>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	e001      	b.n	800bc34 <tcp_process+0x47c>
 800bc30:	f241 131c 	movw	r3, #4380	; 0x111c
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bc3a:	4b4e      	ldr	r3, [pc, #312]	; (800bd74 <tcp_process+0x5bc>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d037      	beq.n	800bcb6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	8b5b      	ldrh	r3, [r3, #26]
 800bc4a:	f043 0302 	orr.w	r3, r3, #2
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2207      	movs	r2, #7
 800bc58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bc5a:	e02c      	b.n	800bcb6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc5c:	4b3b      	ldr	r3, [pc, #236]	; (800bd4c <tcp_process+0x594>)
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	4b3b      	ldr	r3, [pc, #236]	; (800bd50 <tcp_process+0x598>)
 800bc62:	881b      	ldrh	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	4b3b      	ldr	r3, [pc, #236]	; (800bd54 <tcp_process+0x59c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc6c:	4b3a      	ldr	r3, [pc, #232]	; (800bd58 <tcp_process+0x5a0>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc70:	885b      	ldrh	r3, [r3, #2]
 800bc72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc74:	4a38      	ldr	r2, [pc, #224]	; (800bd58 <tcp_process+0x5a0>)
 800bc76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc78:	8812      	ldrh	r2, [r2, #0]
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	9202      	str	r2, [sp, #8]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	4b36      	ldr	r3, [pc, #216]	; (800bd5c <tcp_process+0x5a4>)
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <tcp_process+0x5a8>)
 800bc86:	4602      	mov	r2, r0
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f002 fbd1 	bl	800e430 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bc8e:	e167      	b.n	800bf60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bc90:	4b2d      	ldr	r3, [pc, #180]	; (800bd48 <tcp_process+0x590>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	f003 0302 	and.w	r3, r3, #2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 8161 	beq.w	800bf60 <tcp_process+0x7a8>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	1e5a      	subs	r2, r3, #1
 800bca4:	4b2b      	ldr	r3, [pc, #172]	; (800bd54 <tcp_process+0x59c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	f040 8159 	bne.w	800bf60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f002 f9b8 	bl	800e024 <tcp_rexmit>
      break;
 800bcb4:	e154      	b.n	800bf60 <tcp_process+0x7a8>
 800bcb6:	e153      	b.n	800bf60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fa71 	bl	800c1a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bcbe:	4b2d      	ldr	r3, [pc, #180]	; (800bd74 <tcp_process+0x5bc>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 814c 	beq.w	800bf64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	8b5b      	ldrh	r3, [r3, #26]
 800bcd0:	f043 0302 	orr.w	r3, r3, #2
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2207      	movs	r2, #7
 800bcde:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bce0:	e140      	b.n	800bf64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa5c 	bl	800c1a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bce8:	4b22      	ldr	r3, [pc, #136]	; (800bd74 <tcp_process+0x5bc>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	f003 0320 	and.w	r3, r3, #32
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d071      	beq.n	800bdd8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bcf4:	4b14      	ldr	r3, [pc, #80]	; (800bd48 <tcp_process+0x590>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 0310 	and.w	r3, r3, #16
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d060      	beq.n	800bdc2 <tcp_process+0x60a>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd04:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <tcp_process+0x594>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d15a      	bne.n	800bdc2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d156      	bne.n	800bdc2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	8b5b      	ldrh	r3, [r3, #26]
 800bd18:	f043 0302 	orr.w	r3, r3, #2
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7fe fdbc 	bl	800a8a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bd28:	4b13      	ldr	r3, [pc, #76]	; (800bd78 <tcp_process+0x5c0>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d105      	bne.n	800bd3e <tcp_process+0x586>
 800bd32:	4b11      	ldr	r3, [pc, #68]	; (800bd78 <tcp_process+0x5c0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	4a0f      	ldr	r2, [pc, #60]	; (800bd78 <tcp_process+0x5c0>)
 800bd3a:	6013      	str	r3, [r2, #0]
 800bd3c:	e02e      	b.n	800bd9c <tcp_process+0x5e4>
 800bd3e:	4b0e      	ldr	r3, [pc, #56]	; (800bd78 <tcp_process+0x5c0>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	e027      	b.n	800bd96 <tcp_process+0x5de>
 800bd46:	bf00      	nop
 800bd48:	20008d48 	.word	0x20008d48
 800bd4c:	20008d40 	.word	0x20008d40
 800bd50:	20008d46 	.word	0x20008d46
 800bd54:	20008d3c 	.word	0x20008d3c
 800bd58:	20008d2c 	.word	0x20008d2c
 800bd5c:	200057a4 	.word	0x200057a4
 800bd60:	200057a8 	.word	0x200057a8
 800bd64:	08013638 	.word	0x08013638
 800bd68:	080138d8 	.word	0x080138d8
 800bd6c:	08013684 	.word	0x08013684
 800bd70:	20008d44 	.word	0x20008d44
 800bd74:	20008d49 	.word	0x20008d49
 800bd78:	20008d10 	.word	0x20008d10
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d104      	bne.n	800bd90 <tcp_process+0x5d8>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	60da      	str	r2, [r3, #12]
 800bd8e:	e005      	b.n	800bd9c <tcp_process+0x5e4>
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1ef      	bne.n	800bd7c <tcp_process+0x5c4>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	60da      	str	r2, [r3, #12]
 800bda2:	4b77      	ldr	r3, [pc, #476]	; (800bf80 <tcp_process+0x7c8>)
 800bda4:	2201      	movs	r2, #1
 800bda6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	220a      	movs	r2, #10
 800bdac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bdae:	4b75      	ldr	r3, [pc, #468]	; (800bf84 <tcp_process+0x7cc>)
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	60da      	str	r2, [r3, #12]
 800bdb6:	4a73      	ldr	r2, [pc, #460]	; (800bf84 <tcp_process+0x7cc>)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	f002 fcfa 	bl	800e7b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bdc0:	e0d2      	b.n	800bf68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8b5b      	ldrh	r3, [r3, #26]
 800bdc6:	f043 0302 	orr.w	r3, r3, #2
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	751a      	strb	r2, [r3, #20]
      break;
 800bdd6:	e0c7      	b.n	800bf68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdd8:	4b6b      	ldr	r3, [pc, #428]	; (800bf88 <tcp_process+0x7d0>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	f003 0310 	and.w	r3, r3, #16
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 80c1 	beq.w	800bf68 <tcp_process+0x7b0>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdea:	4b68      	ldr	r3, [pc, #416]	; (800bf8c <tcp_process+0x7d4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	f040 80ba 	bne.w	800bf68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f040 80b5 	bne.w	800bf68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2206      	movs	r2, #6
 800be02:	751a      	strb	r2, [r3, #20]
      break;
 800be04:	e0b0      	b.n	800bf68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f9ca 	bl	800c1a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800be0c:	4b60      	ldr	r3, [pc, #384]	; (800bf90 <tcp_process+0x7d8>)
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f003 0320 	and.w	r3, r3, #32
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 80a9 	beq.w	800bf6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	8b5b      	ldrh	r3, [r3, #26]
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	b29a      	uxth	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7fe fd39 	bl	800a8a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800be2e:	4b59      	ldr	r3, [pc, #356]	; (800bf94 <tcp_process+0x7dc>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	429a      	cmp	r2, r3
 800be36:	d105      	bne.n	800be44 <tcp_process+0x68c>
 800be38:	4b56      	ldr	r3, [pc, #344]	; (800bf94 <tcp_process+0x7dc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	4a55      	ldr	r2, [pc, #340]	; (800bf94 <tcp_process+0x7dc>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	e013      	b.n	800be6c <tcp_process+0x6b4>
 800be44:	4b53      	ldr	r3, [pc, #332]	; (800bf94 <tcp_process+0x7dc>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	e00c      	b.n	800be66 <tcp_process+0x6ae>
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	429a      	cmp	r2, r3
 800be54:	d104      	bne.n	800be60 <tcp_process+0x6a8>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	60da      	str	r2, [r3, #12]
 800be5e:	e005      	b.n	800be6c <tcp_process+0x6b4>
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	613b      	str	r3, [r7, #16]
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1ef      	bne.n	800be4c <tcp_process+0x694>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	60da      	str	r2, [r3, #12]
 800be72:	4b43      	ldr	r3, [pc, #268]	; (800bf80 <tcp_process+0x7c8>)
 800be74:	2201      	movs	r2, #1
 800be76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	220a      	movs	r2, #10
 800be7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800be7e:	4b41      	ldr	r3, [pc, #260]	; (800bf84 <tcp_process+0x7cc>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60da      	str	r2, [r3, #12]
 800be86:	4a3f      	ldr	r2, [pc, #252]	; (800bf84 <tcp_process+0x7cc>)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	f002 fc92 	bl	800e7b4 <tcp_timer_needed>
      }
      break;
 800be90:	e06c      	b.n	800bf6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f984 	bl	800c1a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800be98:	4b3b      	ldr	r3, [pc, #236]	; (800bf88 <tcp_process+0x7d0>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d065      	beq.n	800bf70 <tcp_process+0x7b8>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bea8:	4b38      	ldr	r3, [pc, #224]	; (800bf8c <tcp_process+0x7d4>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d15f      	bne.n	800bf70 <tcp_process+0x7b8>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d15b      	bne.n	800bf70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7fe fcf1 	bl	800a8a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bebe:	4b35      	ldr	r3, [pc, #212]	; (800bf94 <tcp_process+0x7dc>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d105      	bne.n	800bed4 <tcp_process+0x71c>
 800bec8:	4b32      	ldr	r3, [pc, #200]	; (800bf94 <tcp_process+0x7dc>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	4a31      	ldr	r2, [pc, #196]	; (800bf94 <tcp_process+0x7dc>)
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	e013      	b.n	800befc <tcp_process+0x744>
 800bed4:	4b2f      	ldr	r3, [pc, #188]	; (800bf94 <tcp_process+0x7dc>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e00c      	b.n	800bef6 <tcp_process+0x73e>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d104      	bne.n	800bef0 <tcp_process+0x738>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	60da      	str	r2, [r3, #12]
 800beee:	e005      	b.n	800befc <tcp_process+0x744>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1ef      	bne.n	800bedc <tcp_process+0x724>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	60da      	str	r2, [r3, #12]
 800bf02:	4b1f      	ldr	r3, [pc, #124]	; (800bf80 <tcp_process+0x7c8>)
 800bf04:	2201      	movs	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	220a      	movs	r2, #10
 800bf0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bf0e:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <tcp_process+0x7cc>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	4a1b      	ldr	r2, [pc, #108]	; (800bf84 <tcp_process+0x7cc>)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	f002 fc4a 	bl	800e7b4 <tcp_timer_needed>
      }
      break;
 800bf20:	e026      	b.n	800bf70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f93c 	bl	800c1a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bf28:	4b17      	ldr	r3, [pc, #92]	; (800bf88 <tcp_process+0x7d0>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	f003 0310 	and.w	r3, r3, #16
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d01f      	beq.n	800bf74 <tcp_process+0x7bc>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf38:	4b14      	ldr	r3, [pc, #80]	; (800bf8c <tcp_process+0x7d4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d119      	bne.n	800bf74 <tcp_process+0x7bc>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d115      	bne.n	800bf74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bf48:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <tcp_process+0x7d8>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	f043 0310 	orr.w	r3, r3, #16
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <tcp_process+0x7d8>)
 800bf54:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bf56:	e00d      	b.n	800bf74 <tcp_process+0x7bc>
    default:
      break;
 800bf58:	bf00      	nop
 800bf5a:	e00c      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf5c:	bf00      	nop
 800bf5e:	e00a      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf60:	bf00      	nop
 800bf62:	e008      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf64:	bf00      	nop
 800bf66:	e006      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf68:	bf00      	nop
 800bf6a:	e004      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf6c:	bf00      	nop
 800bf6e:	e002      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf70:	bf00      	nop
 800bf72:	e000      	b.n	800bf76 <tcp_process+0x7be>
      break;
 800bf74:	bf00      	nop
  }
  return ERR_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3724      	adds	r7, #36	; 0x24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd90      	pop	{r4, r7, pc}
 800bf80:	20008d18 	.word	0x20008d18
 800bf84:	20008d14 	.word	0x20008d14
 800bf88:	20008d48 	.word	0x20008d48
 800bf8c:	20008d40 	.word	0x20008d40
 800bf90:	20008d49 	.word	0x20008d49
 800bf94:	20008d10 	.word	0x20008d10

0800bf98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <tcp_oos_insert_segment+0x1e>
 800bfa8:	4b3b      	ldr	r3, [pc, #236]	; (800c098 <tcp_oos_insert_segment+0x100>)
 800bfaa:	f240 421f 	movw	r2, #1055	; 0x41f
 800bfae:	493b      	ldr	r1, [pc, #236]	; (800c09c <tcp_oos_insert_segment+0x104>)
 800bfb0:	483b      	ldr	r0, [pc, #236]	; (800c0a0 <tcp_oos_insert_segment+0x108>)
 800bfb2:	f005 fa57 	bl	8011464 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	899b      	ldrh	r3, [r3, #12]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fb fdad 	bl	8007b1e <lwip_htons>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d028      	beq.n	800c022 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bfd0:	6838      	ldr	r0, [r7, #0]
 800bfd2:	f7fe fa63 	bl	800a49c <tcp_segs_free>
    next = NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	603b      	str	r3, [r7, #0]
 800bfda:	e056      	b.n	800c08a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	899b      	ldrh	r3, [r3, #12]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fb fd9a 	bl	8007b1e <lwip_htons>
 800bfea:	4603      	mov	r3, r0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00d      	beq.n	800c012 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	899b      	ldrh	r3, [r3, #12]
 800bffc:	b29c      	uxth	r4, r3
 800bffe:	2001      	movs	r0, #1
 800c000:	f7fb fd8d 	bl	8007b1e <lwip_htons>
 800c004:	4603      	mov	r3, r0
 800c006:	461a      	mov	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	4322      	orrs	r2, r4
 800c00e:	b292      	uxth	r2, r2
 800c010:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7fe fa52 	bl	800a4c6 <tcp_seg_free>
    while (next &&
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00e      	beq.n	800c046 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	891b      	ldrh	r3, [r3, #8]
 800c02c:	461a      	mov	r2, r3
 800c02e:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <tcp_oos_insert_segment+0x10c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	441a      	add	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	8909      	ldrh	r1, [r1, #8]
 800c03e:	440b      	add	r3, r1
 800c040:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c042:	2b00      	cmp	r3, #0
 800c044:	daca      	bge.n	800bfdc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d01e      	beq.n	800c08a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	891b      	ldrh	r3, [r3, #8]
 800c050:	461a      	mov	r2, r3
 800c052:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <tcp_oos_insert_segment+0x10c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	441a      	add	r2, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c060:	2b00      	cmp	r3, #0
 800c062:	dd12      	ble.n	800c08a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <tcp_oos_insert_segment+0x10c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	b29b      	uxth	r3, r3
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	891b      	ldrh	r3, [r3, #8]
 800c082:	4619      	mov	r1, r3
 800c084:	4610      	mov	r0, r2
 800c086:	f7fc fe25 	bl	8008cd4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	601a      	str	r2, [r3, #0]
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}
 800c098:	08013638 	.word	0x08013638
 800c09c:	080138f8 	.word	0x080138f8
 800c0a0:	08013684 	.word	0x08013684
 800c0a4:	20008d3c 	.word	0x20008d3c

0800c0a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c0a8:	b5b0      	push	{r4, r5, r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c0b6:	e03e      	b.n	800c136 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd f812 	bl	80090f0 <pbuf_clen>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0d6:	8a7a      	ldrh	r2, [r7, #18]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d906      	bls.n	800c0ea <tcp_free_acked_segments+0x42>
 800c0dc:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <tcp_free_acked_segments+0xe0>)
 800c0de:	f240 4257 	movw	r2, #1111	; 0x457
 800c0e2:	492a      	ldr	r1, [pc, #168]	; (800c18c <tcp_free_acked_segments+0xe4>)
 800c0e4:	482a      	ldr	r0, [pc, #168]	; (800c190 <tcp_free_acked_segments+0xe8>)
 800c0e6:	f005 f9bd 	bl	8011464 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c0f0:	8a7b      	ldrh	r3, [r7, #18]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	891a      	ldrh	r2, [r3, #8]
 800c100:	4b24      	ldr	r3, [pc, #144]	; (800c194 <tcp_free_acked_segments+0xec>)
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	4413      	add	r3, r2
 800c106:	b29a      	uxth	r2, r3
 800c108:	4b22      	ldr	r3, [pc, #136]	; (800c194 <tcp_free_acked_segments+0xec>)
 800c10a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c10c:	6978      	ldr	r0, [r7, #20]
 800c10e:	f7fe f9da 	bl	800a4c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00c      	beq.n	800c136 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <tcp_free_acked_segments+0x8e>
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <tcp_free_acked_segments+0x8e>
 800c128:	4b17      	ldr	r3, [pc, #92]	; (800c188 <tcp_free_acked_segments+0xe0>)
 800c12a:	f240 4261 	movw	r2, #1121	; 0x461
 800c12e:	491a      	ldr	r1, [pc, #104]	; (800c198 <tcp_free_acked_segments+0xf0>)
 800c130:	4817      	ldr	r0, [pc, #92]	; (800c190 <tcp_free_acked_segments+0xe8>)
 800c132:	f005 f997 	bl	8011464 <iprintf>
  while (seg_list != NULL &&
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d020      	beq.n	800c17e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	4618      	mov	r0, r3
 800c144:	f7fb fd00 	bl	8007b48 <lwip_htonl>
 800c148:	4604      	mov	r4, r0
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	891b      	ldrh	r3, [r3, #8]
 800c14e:	461d      	mov	r5, r3
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	b29b      	uxth	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fb fce0 	bl	8007b1e <lwip_htons>
 800c15e:	4603      	mov	r3, r0
 800c160:	b2db      	uxtb	r3, r3
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <tcp_free_acked_segments+0xc6>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e000      	b.n	800c170 <tcp_free_acked_segments+0xc8>
 800c16e:	2300      	movs	r3, #0
 800c170:	442b      	add	r3, r5
 800c172:	18e2      	adds	r2, r4, r3
 800c174:	4b09      	ldr	r3, [pc, #36]	; (800c19c <tcp_free_acked_segments+0xf4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dd9c      	ble.n	800c0b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c17e:	68bb      	ldr	r3, [r7, #8]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bdb0      	pop	{r4, r5, r7, pc}
 800c188:	08013638 	.word	0x08013638
 800c18c:	08013920 	.word	0x08013920
 800c190:	08013684 	.word	0x08013684
 800c194:	20008d44 	.word	0x20008d44
 800c198:	08013948 	.word	0x08013948
 800c19c:	20008d40 	.word	0x20008d40

0800c1a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c1a0:	b5b0      	push	{r4, r5, r7, lr}
 800c1a2:	b094      	sub	sp, #80	; 0x50
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <tcp_receive+0x20>
 800c1b2:	4b91      	ldr	r3, [pc, #580]	; (800c3f8 <tcp_receive+0x258>)
 800c1b4:	f240 427b 	movw	r2, #1147	; 0x47b
 800c1b8:	4990      	ldr	r1, [pc, #576]	; (800c3fc <tcp_receive+0x25c>)
 800c1ba:	4891      	ldr	r0, [pc, #580]	; (800c400 <tcp_receive+0x260>)
 800c1bc:	f005 f952 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7d1b      	ldrb	r3, [r3, #20]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d806      	bhi.n	800c1d6 <tcp_receive+0x36>
 800c1c8:	4b8b      	ldr	r3, [pc, #556]	; (800c3f8 <tcp_receive+0x258>)
 800c1ca:	f240 427c 	movw	r2, #1148	; 0x47c
 800c1ce:	498d      	ldr	r1, [pc, #564]	; (800c404 <tcp_receive+0x264>)
 800c1d0:	488b      	ldr	r0, [pc, #556]	; (800c400 <tcp_receive+0x260>)
 800c1d2:	f005 f947 	bl	8011464 <iprintf>

  if (flags & TCP_ACK) {
 800c1d6:	4b8c      	ldr	r3, [pc, #560]	; (800c408 <tcp_receive+0x268>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	f003 0310 	and.w	r3, r3, #16
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 8264 	beq.w	800c6ac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f0:	4413      	add	r3, r2
 800c1f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1f8:	4b84      	ldr	r3, [pc, #528]	; (800c40c <tcp_receive+0x26c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	db1b      	blt.n	800c23a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c206:	4b81      	ldr	r3, [pc, #516]	; (800c40c <tcp_receive+0x26c>)
 800c208:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d106      	bne.n	800c21c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c212:	4b7f      	ldr	r3, [pc, #508]	; (800c410 <tcp_receive+0x270>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	2b00      	cmp	r3, #0
 800c21a:	db0e      	blt.n	800c23a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c220:	4b7b      	ldr	r3, [pc, #492]	; (800c410 <tcp_receive+0x270>)
 800c222:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c224:	429a      	cmp	r2, r3
 800c226:	d125      	bne.n	800c274 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c228:	4b7a      	ldr	r3, [pc, #488]	; (800c414 <tcp_receive+0x274>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	89db      	ldrh	r3, [r3, #14]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c236:	429a      	cmp	r2, r3
 800c238:	d91c      	bls.n	800c274 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c23a:	4b76      	ldr	r3, [pc, #472]	; (800c414 <tcp_receive+0x274>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	89db      	ldrh	r3, [r3, #14]
 800c240:	b29a      	uxth	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c254:	429a      	cmp	r2, r3
 800c256:	d205      	bcs.n	800c264 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c264:	4b69      	ldr	r3, [pc, #420]	; (800c40c <tcp_receive+0x26c>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c26c:	4b68      	ldr	r3, [pc, #416]	; (800c410 <tcp_receive+0x270>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c274:	4b66      	ldr	r3, [pc, #408]	; (800c410 <tcp_receive+0x270>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	dc58      	bgt.n	800c334 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c282:	4b65      	ldr	r3, [pc, #404]	; (800c418 <tcp_receive+0x278>)
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d14b      	bne.n	800c322 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c294:	4413      	add	r3, r2
 800c296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c298:	429a      	cmp	r2, r3
 800c29a:	d142      	bne.n	800c322 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	db3d      	blt.n	800c322 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2aa:	4b59      	ldr	r3, [pc, #356]	; (800c410 <tcp_receive+0x270>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d137      	bne.n	800c322 <tcp_receive+0x182>
              found_dupack = 1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2bc:	2bff      	cmp	r3, #255	; 0xff
 800c2be:	d007      	beq.n	800c2d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d91b      	bls.n	800c312 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2e4:	4413      	add	r3, r2
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d30a      	bcc.n	800c308 <tcp_receive+0x168>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2fc:	4413      	add	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c306:	e004      	b.n	800c312 <tcp_receive+0x172>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c30e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d902      	bls.n	800c322 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 feed 	bl	800e0fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c324:	2b00      	cmp	r3, #0
 800c326:	f040 8161 	bne.w	800c5ec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c332:	e15b      	b.n	800c5ec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c334:	4b36      	ldr	r3, [pc, #216]	; (800c410 <tcp_receive+0x270>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	3b01      	subs	r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	f2c0 814e 	blt.w	800c5e2 <tcp_receive+0x442>
 800c346:	4b32      	ldr	r3, [pc, #200]	; (800c410 <tcp_receive+0x270>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	2b00      	cmp	r3, #0
 800c352:	f300 8146 	bgt.w	800c5e2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	8b5b      	ldrh	r3, [r3, #26]
 800c35a:	f003 0304 	and.w	r3, r3, #4
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d010      	beq.n	800c384 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	8b5b      	ldrh	r3, [r3, #26]
 800c366:	f023 0304 	bic.w	r3, r3, #4
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c392:	10db      	asrs	r3, r3, #3
 800c394:	b21b      	sxth	r3, r3
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	b21a      	sxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c3ac:	4b18      	ldr	r3, [pc, #96]	; (800c410 <tcp_receive+0x270>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c3c4:	4b12      	ldr	r3, [pc, #72]	; (800c410 <tcp_receive+0x270>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7d1b      	ldrb	r3, [r3, #20]
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	f240 8097 	bls.w	800c504 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d245      	bcs.n	800c472 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	8b5b      	ldrh	r3, [r3, #26]
 800c3ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d014      	beq.n	800c41c <tcp_receive+0x27c>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e013      	b.n	800c41e <tcp_receive+0x27e>
 800c3f6:	bf00      	nop
 800c3f8:	08013638 	.word	0x08013638
 800c3fc:	08013968 	.word	0x08013968
 800c400:	08013684 	.word	0x08013684
 800c404:	08013984 	.word	0x08013984
 800c408:	20008d48 	.word	0x20008d48
 800c40c:	20008d3c 	.word	0x20008d3c
 800c410:	20008d40 	.word	0x20008d40
 800c414:	20008d2c 	.word	0x20008d2c
 800c418:	20008d46 	.word	0x20008d46
 800c41c:	2302      	movs	r3, #2
 800c41e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c42c:	fb12 f303 	smulbb	r3, r2, r3
 800c430:	b29b      	uxth	r3, r3
 800c432:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c434:	4293      	cmp	r3, r2
 800c436:	bf28      	it	cs
 800c438:	4613      	movcs	r3, r2
 800c43a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c442:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c444:	4413      	add	r3, r2
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c44e:	429a      	cmp	r2, r3
 800c450:	d309      	bcc.n	800c466 <tcp_receive+0x2c6>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c45a:	4413      	add	r3, r2
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c464:	e04e      	b.n	800c504 <tcp_receive+0x364>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c46c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c470:	e048      	b.n	800c504 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c47a:	4413      	add	r3, r2
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c484:	429a      	cmp	r2, r3
 800c486:	d309      	bcc.n	800c49c <tcp_receive+0x2fc>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c48e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c490:	4413      	add	r3, r2
 800c492:	b29a      	uxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c49a:	e004      	b.n	800c4a6 <tcp_receive+0x306>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d326      	bcc.n	800c504 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4d6:	4413      	add	r3, r2
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d30a      	bcc.n	800c4fa <tcp_receive+0x35a>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4ee:	4413      	add	r3, r2
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c4f8:	e004      	b.n	800c504 <tcp_receive+0x364>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c50c:	4a98      	ldr	r2, [pc, #608]	; (800c770 <tcp_receive+0x5d0>)
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7ff fdca 	bl	800c0a8 <tcp_free_acked_segments>
 800c514:	4602      	mov	r2, r0
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c522:	4a94      	ldr	r2, [pc, #592]	; (800c774 <tcp_receive+0x5d4>)
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff fdbf 	bl	800c0a8 <tcp_free_acked_segments>
 800c52a:	4602      	mov	r2, r0
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c534:	2b00      	cmp	r3, #0
 800c536:	d104      	bne.n	800c542 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c53e:	861a      	strh	r2, [r3, #48]	; 0x30
 800c540:	e002      	b.n	800c548 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c564:	4b84      	ldr	r3, [pc, #528]	; (800c778 <tcp_receive+0x5d8>)
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	4413      	add	r3, r2
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	8b5b      	ldrh	r3, [r3, #26]
 800c576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d035      	beq.n	800c5ea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c582:	2b00      	cmp	r3, #0
 800c584:	d118      	bne.n	800c5b8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00c      	beq.n	800c5a8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fb fad4 	bl	8007b48 <lwip_htonl>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	dc20      	bgt.n	800c5ea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	8b5b      	ldrh	r3, [r3, #26]
 800c5ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5b6:	e018      	b.n	800c5ea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fb fabf 	bl	8007b48 <lwip_htonl>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	1ae3      	subs	r3, r4, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	dc0b      	bgt.n	800c5ea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	8b5b      	ldrh	r3, [r3, #26]
 800c5d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5e0:	e003      	b.n	800c5ea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 ff76 	bl	800e4d4 <tcp_send_empty_ack>
 800c5e8:	e000      	b.n	800c5ec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5ea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d05b      	beq.n	800c6ac <tcp_receive+0x50c>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5f8:	4b60      	ldr	r3, [pc, #384]	; (800c77c <tcp_receive+0x5dc>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da54      	bge.n	800c6ac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c602:	4b5f      	ldr	r3, [pc, #380]	; (800c780 <tcp_receive+0x5e0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	b29b      	uxth	r3, r3
 800c612:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c616:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c620:	10db      	asrs	r3, r3, #3
 800c622:	b21b      	sxth	r3, r3
 800c624:	b29b      	uxth	r3, r3
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	b29b      	uxth	r3, r3
 800c62a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c634:	b29a      	uxth	r2, r3
 800c636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c63a:	4413      	add	r3, r2
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	b21a      	sxth	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c644:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c648:	2b00      	cmp	r3, #0
 800c64a:	da05      	bge.n	800c658 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c64c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c650:	425b      	negs	r3, r3
 800c652:	b29b      	uxth	r3, r3
 800c654:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c658:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c662:	109b      	asrs	r3, r3, #2
 800c664:	b21b      	sxth	r3, r3
 800c666:	b29b      	uxth	r3, r3
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c676:	b29a      	uxth	r2, r3
 800c678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c67c:	4413      	add	r3, r2
 800c67e:	b29b      	uxth	r3, r3
 800c680:	b21a      	sxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c68c:	10db      	asrs	r3, r3, #3
 800c68e:	b21b      	sxth	r3, r3
 800c690:	b29a      	uxth	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c698:	b29b      	uxth	r3, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	b21a      	sxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c6ac:	4b35      	ldr	r3, [pc, #212]	; (800c784 <tcp_receive+0x5e4>)
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 84e2 	beq.w	800d07a <tcp_receive+0xeda>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	2b06      	cmp	r3, #6
 800c6bc:	f200 84dd 	bhi.w	800d07a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c4:	4b30      	ldr	r3, [pc, #192]	; (800c788 <tcp_receive+0x5e8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f2c0 808f 	blt.w	800c7f0 <tcp_receive+0x650>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6d6:	4b2b      	ldr	r3, [pc, #172]	; (800c784 <tcp_receive+0x5e4>)
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4b2a      	ldr	r3, [pc, #168]	; (800c788 <tcp_receive+0x5e8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	440b      	add	r3, r1
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f300 8082 	bgt.w	800c7f0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c6ec:	4b27      	ldr	r3, [pc, #156]	; (800c78c <tcp_receive+0x5ec>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6f6:	4b24      	ldr	r3, [pc, #144]	; (800c788 <tcp_receive+0x5e8>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c6fe:	4b23      	ldr	r3, [pc, #140]	; (800c78c <tcp_receive+0x5ec>)
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <tcp_receive+0x574>
 800c706:	4b22      	ldr	r3, [pc, #136]	; (800c790 <tcp_receive+0x5f0>)
 800c708:	f240 5294 	movw	r2, #1428	; 0x594
 800c70c:	4921      	ldr	r1, [pc, #132]	; (800c794 <tcp_receive+0x5f4>)
 800c70e:	4822      	ldr	r0, [pc, #136]	; (800c798 <tcp_receive+0x5f8>)
 800c710:	f004 fea8 	bl	8011464 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d906      	bls.n	800c72c <tcp_receive+0x58c>
 800c71e:	4b1c      	ldr	r3, [pc, #112]	; (800c790 <tcp_receive+0x5f0>)
 800c720:	f240 5295 	movw	r2, #1429	; 0x595
 800c724:	491d      	ldr	r1, [pc, #116]	; (800c79c <tcp_receive+0x5fc>)
 800c726:	481c      	ldr	r0, [pc, #112]	; (800c798 <tcp_receive+0x5f8>)
 800c728:	f004 fe9c 	bl	8011464 <iprintf>
      off = (u16_t)off32;
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c732:	4b16      	ldr	r3, [pc, #88]	; (800c78c <tcp_receive+0x5ec>)
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	891b      	ldrh	r3, [r3, #8]
 800c738:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d906      	bls.n	800c74e <tcp_receive+0x5ae>
 800c740:	4b13      	ldr	r3, [pc, #76]	; (800c790 <tcp_receive+0x5f0>)
 800c742:	f240 5297 	movw	r2, #1431	; 0x597
 800c746:	4916      	ldr	r1, [pc, #88]	; (800c7a0 <tcp_receive+0x600>)
 800c748:	4813      	ldr	r0, [pc, #76]	; (800c798 <tcp_receive+0x5f8>)
 800c74a:	f004 fe8b 	bl	8011464 <iprintf>
      inseg.len -= off;
 800c74e:	4b0f      	ldr	r3, [pc, #60]	; (800c78c <tcp_receive+0x5ec>)
 800c750:	891a      	ldrh	r2, [r3, #8]
 800c752:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	b29a      	uxth	r2, r3
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <tcp_receive+0x5ec>)
 800c75c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c75e:	4b0b      	ldr	r3, [pc, #44]	; (800c78c <tcp_receive+0x5ec>)
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	891a      	ldrh	r2, [r3, #8]
 800c764:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c76c:	e02a      	b.n	800c7c4 <tcp_receive+0x624>
 800c76e:	bf00      	nop
 800c770:	080139a0 	.word	0x080139a0
 800c774:	080139a8 	.word	0x080139a8
 800c778:	20008d44 	.word	0x20008d44
 800c77c:	20008d40 	.word	0x20008d40
 800c780:	20008d04 	.word	0x20008d04
 800c784:	20008d46 	.word	0x20008d46
 800c788:	20008d3c 	.word	0x20008d3c
 800c78c:	20008d1c 	.word	0x20008d1c
 800c790:	08013638 	.word	0x08013638
 800c794:	080139b0 	.word	0x080139b0
 800c798:	08013684 	.word	0x08013684
 800c79c:	080139c0 	.word	0x080139c0
 800c7a0:	080139d0 	.word	0x080139d0
        off -= p->len;
 800c7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7a6:	895b      	ldrh	r3, [r3, #10]
 800c7a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c6:	895b      	ldrh	r3, [r3, #10]
 800c7c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d8e9      	bhi.n	800c7a4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c7d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c7d8:	f7fc fb7c 	bl	8008ed4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	4a91      	ldr	r2, [pc, #580]	; (800ca28 <tcp_receive+0x888>)
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	4b91      	ldr	r3, [pc, #580]	; (800ca2c <tcp_receive+0x88c>)
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	4a8f      	ldr	r2, [pc, #572]	; (800ca28 <tcp_receive+0x888>)
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c7ee:	e00d      	b.n	800c80c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c7f0:	4b8d      	ldr	r3, [pc, #564]	; (800ca28 <tcp_receive+0x888>)
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da06      	bge.n	800c80c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	8b5b      	ldrh	r3, [r3, #26]
 800c802:	f043 0302 	orr.w	r3, r3, #2
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c80c:	4b86      	ldr	r3, [pc, #536]	; (800ca28 <tcp_receive+0x888>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	f2c0 842a 	blt.w	800d070 <tcp_receive+0xed0>
 800c81c:	4b82      	ldr	r3, [pc, #520]	; (800ca28 <tcp_receive+0x888>)
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c828:	440b      	add	r3, r1
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	3301      	adds	r3, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f300 841e 	bgt.w	800d070 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c838:	4b7b      	ldr	r3, [pc, #492]	; (800ca28 <tcp_receive+0x888>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	f040 829a 	bne.w	800cd76 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c842:	4b7a      	ldr	r3, [pc, #488]	; (800ca2c <tcp_receive+0x88c>)
 800c844:	891c      	ldrh	r4, [r3, #8]
 800c846:	4b79      	ldr	r3, [pc, #484]	; (800ca2c <tcp_receive+0x88c>)
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	899b      	ldrh	r3, [r3, #12]
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fb f965 	bl	8007b1e <lwip_htons>
 800c854:	4603      	mov	r3, r0
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <tcp_receive+0x6c4>
 800c860:	2301      	movs	r3, #1
 800c862:	e000      	b.n	800c866 <tcp_receive+0x6c6>
 800c864:	2300      	movs	r3, #0
 800c866:	4423      	add	r3, r4
 800c868:	b29a      	uxth	r2, r3
 800c86a:	4b71      	ldr	r3, [pc, #452]	; (800ca30 <tcp_receive+0x890>)
 800c86c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c872:	4b6f      	ldr	r3, [pc, #444]	; (800ca30 <tcp_receive+0x890>)
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d275      	bcs.n	800c966 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c87a:	4b6c      	ldr	r3, [pc, #432]	; (800ca2c <tcp_receive+0x88c>)
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	899b      	ldrh	r3, [r3, #12]
 800c880:	b29b      	uxth	r3, r3
 800c882:	4618      	mov	r0, r3
 800c884:	f7fb f94b 	bl	8007b1e <lwip_htons>
 800c888:	4603      	mov	r3, r0
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d01f      	beq.n	800c8d4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c894:	4b65      	ldr	r3, [pc, #404]	; (800ca2c <tcp_receive+0x88c>)
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	899b      	ldrh	r3, [r3, #12]
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	b21b      	sxth	r3, r3
 800c89e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8a2:	b21c      	sxth	r4, r3
 800c8a4:	4b61      	ldr	r3, [pc, #388]	; (800ca2c <tcp_receive+0x88c>)
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	899b      	ldrh	r3, [r3, #12]
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fb f936 	bl	8007b1e <lwip_htons>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fb f92d 	bl	8007b1e <lwip_htons>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	b21b      	sxth	r3, r3
 800c8c8:	4323      	orrs	r3, r4
 800c8ca:	b21a      	sxth	r2, r3
 800c8cc:	4b57      	ldr	r3, [pc, #348]	; (800ca2c <tcp_receive+0x88c>)
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	b292      	uxth	r2, r2
 800c8d2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8d8:	4b54      	ldr	r3, [pc, #336]	; (800ca2c <tcp_receive+0x88c>)
 800c8da:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c8dc:	4b53      	ldr	r3, [pc, #332]	; (800ca2c <tcp_receive+0x88c>)
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	899b      	ldrh	r3, [r3, #12]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fb f91a 	bl	8007b1e <lwip_htons>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <tcp_receive+0x762>
            inseg.len -= 1;
 800c8f6:	4b4d      	ldr	r3, [pc, #308]	; (800ca2c <tcp_receive+0x88c>)
 800c8f8:	891b      	ldrh	r3, [r3, #8]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	4b4b      	ldr	r3, [pc, #300]	; (800ca2c <tcp_receive+0x88c>)
 800c900:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c902:	4b4a      	ldr	r3, [pc, #296]	; (800ca2c <tcp_receive+0x88c>)
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	4a49      	ldr	r2, [pc, #292]	; (800ca2c <tcp_receive+0x88c>)
 800c908:	8912      	ldrh	r2, [r2, #8]
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc f9e1 	bl	8008cd4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c912:	4b46      	ldr	r3, [pc, #280]	; (800ca2c <tcp_receive+0x88c>)
 800c914:	891c      	ldrh	r4, [r3, #8]
 800c916:	4b45      	ldr	r3, [pc, #276]	; (800ca2c <tcp_receive+0x88c>)
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	899b      	ldrh	r3, [r3, #12]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fb f8fd 	bl	8007b1e <lwip_htons>
 800c924:	4603      	mov	r3, r0
 800c926:	b2db      	uxtb	r3, r3
 800c928:	f003 0303 	and.w	r3, r3, #3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <tcp_receive+0x794>
 800c930:	2301      	movs	r3, #1
 800c932:	e000      	b.n	800c936 <tcp_receive+0x796>
 800c934:	2300      	movs	r3, #0
 800c936:	4423      	add	r3, r4
 800c938:	b29a      	uxth	r2, r3
 800c93a:	4b3d      	ldr	r3, [pc, #244]	; (800ca30 <tcp_receive+0x890>)
 800c93c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c93e:	4b3c      	ldr	r3, [pc, #240]	; (800ca30 <tcp_receive+0x890>)
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	4b38      	ldr	r3, [pc, #224]	; (800ca28 <tcp_receive+0x888>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	441a      	add	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c952:	440b      	add	r3, r1
 800c954:	429a      	cmp	r2, r3
 800c956:	d006      	beq.n	800c966 <tcp_receive+0x7c6>
 800c958:	4b36      	ldr	r3, [pc, #216]	; (800ca34 <tcp_receive+0x894>)
 800c95a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c95e:	4936      	ldr	r1, [pc, #216]	; (800ca38 <tcp_receive+0x898>)
 800c960:	4836      	ldr	r0, [pc, #216]	; (800ca3c <tcp_receive+0x89c>)
 800c962:	f004 fd7f 	bl	8011464 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 80e7 	beq.w	800cb3e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c970:	4b2e      	ldr	r3, [pc, #184]	; (800ca2c <tcp_receive+0x88c>)
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	899b      	ldrh	r3, [r3, #12]
 800c976:	b29b      	uxth	r3, r3
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fb f8d0 	bl	8007b1e <lwip_htons>
 800c97e:	4603      	mov	r3, r0
 800c980:	b2db      	uxtb	r3, r3
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d010      	beq.n	800c9ac <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c98a:	e00a      	b.n	800c9a2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c990:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7fd fd92 	bl	800a4c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1f0      	bne.n	800c98c <tcp_receive+0x7ec>
 800c9aa:	e0c8      	b.n	800cb3e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c9b2:	e052      	b.n	800ca5a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	899b      	ldrh	r3, [r3, #12]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fb f8ae 	bl	8007b1e <lwip_htons>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d03d      	beq.n	800ca4a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c9ce:	4b17      	ldr	r3, [pc, #92]	; (800ca2c <tcp_receive+0x88c>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	899b      	ldrh	r3, [r3, #12]
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fb f8a1 	bl	8007b1e <lwip_htons>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d130      	bne.n	800ca4a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c9e8:	4b10      	ldr	r3, [pc, #64]	; (800ca2c <tcp_receive+0x88c>)
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	899b      	ldrh	r3, [r3, #12]
 800c9ee:	b29c      	uxth	r4, r3
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	f7fb f894 	bl	8007b1e <lwip_htons>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <tcp_receive+0x88c>)
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	4322      	orrs	r2, r4
 800ca00:	b292      	uxth	r2, r2
 800ca02:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ca04:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <tcp_receive+0x88c>)
 800ca06:	891c      	ldrh	r4, [r3, #8]
 800ca08:	4b08      	ldr	r3, [pc, #32]	; (800ca2c <tcp_receive+0x88c>)
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	899b      	ldrh	r3, [r3, #12]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fb f884 	bl	8007b1e <lwip_htons>
 800ca16:	4603      	mov	r3, r0
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00e      	beq.n	800ca40 <tcp_receive+0x8a0>
 800ca22:	2301      	movs	r3, #1
 800ca24:	e00d      	b.n	800ca42 <tcp_receive+0x8a2>
 800ca26:	bf00      	nop
 800ca28:	20008d3c 	.word	0x20008d3c
 800ca2c:	20008d1c 	.word	0x20008d1c
 800ca30:	20008d46 	.word	0x20008d46
 800ca34:	08013638 	.word	0x08013638
 800ca38:	080139e0 	.word	0x080139e0
 800ca3c:	08013684 	.word	0x08013684
 800ca40:	2300      	movs	r3, #0
 800ca42:	4423      	add	r3, r4
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	4b98      	ldr	r3, [pc, #608]	; (800cca8 <tcp_receive+0xb08>)
 800ca48:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ca4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ca54:	6938      	ldr	r0, [r7, #16]
 800ca56:	f7fd fd36 	bl	800a4c6 <tcp_seg_free>
            while (next &&
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00e      	beq.n	800ca7e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ca60:	4b91      	ldr	r3, [pc, #580]	; (800cca8 <tcp_receive+0xb08>)
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	4b91      	ldr	r3, [pc, #580]	; (800ccac <tcp_receive+0xb0c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	441a      	add	r2, r3
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca74:	8909      	ldrh	r1, [r1, #8]
 800ca76:	440b      	add	r3, r1
 800ca78:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	da9a      	bge.n	800c9b4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d059      	beq.n	800cb38 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ca84:	4b88      	ldr	r3, [pc, #544]	; (800cca8 <tcp_receive+0xb08>)
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	4b88      	ldr	r3, [pc, #544]	; (800ccac <tcp_receive+0xb0c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	441a      	add	r2, r3
 800ca90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dd4d      	ble.n	800cb38 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ca9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	4b81      	ldr	r3, [pc, #516]	; (800ccac <tcp_receive+0xb0c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	b29a      	uxth	r2, r3
 800caae:	4b80      	ldr	r3, [pc, #512]	; (800ccb0 <tcp_receive+0xb10>)
 800cab0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cab2:	4b7f      	ldr	r3, [pc, #508]	; (800ccb0 <tcp_receive+0xb10>)
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	899b      	ldrh	r3, [r3, #12]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fb f82f 	bl	8007b1e <lwip_htons>
 800cac0:	4603      	mov	r3, r0
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d005      	beq.n	800cad8 <tcp_receive+0x938>
                inseg.len -= 1;
 800cacc:	4b78      	ldr	r3, [pc, #480]	; (800ccb0 <tcp_receive+0xb10>)
 800cace:	891b      	ldrh	r3, [r3, #8]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	4b76      	ldr	r3, [pc, #472]	; (800ccb0 <tcp_receive+0xb10>)
 800cad6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cad8:	4b75      	ldr	r3, [pc, #468]	; (800ccb0 <tcp_receive+0xb10>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4a74      	ldr	r2, [pc, #464]	; (800ccb0 <tcp_receive+0xb10>)
 800cade:	8912      	ldrh	r2, [r2, #8]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fc f8f6 	bl	8008cd4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cae8:	4b71      	ldr	r3, [pc, #452]	; (800ccb0 <tcp_receive+0xb10>)
 800caea:	891c      	ldrh	r4, [r3, #8]
 800caec:	4b70      	ldr	r3, [pc, #448]	; (800ccb0 <tcp_receive+0xb10>)
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	899b      	ldrh	r3, [r3, #12]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fb f812 	bl	8007b1e <lwip_htons>
 800cafa:	4603      	mov	r3, r0
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <tcp_receive+0x96a>
 800cb06:	2301      	movs	r3, #1
 800cb08:	e000      	b.n	800cb0c <tcp_receive+0x96c>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4423      	add	r3, r4
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	4b65      	ldr	r3, [pc, #404]	; (800cca8 <tcp_receive+0xb08>)
 800cb12:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cb14:	4b64      	ldr	r3, [pc, #400]	; (800cca8 <tcp_receive+0xb08>)
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4b64      	ldr	r3, [pc, #400]	; (800ccac <tcp_receive+0xb0c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	441a      	add	r2, r3
 800cb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d006      	beq.n	800cb38 <tcp_receive+0x998>
 800cb2a:	4b62      	ldr	r3, [pc, #392]	; (800ccb4 <tcp_receive+0xb14>)
 800cb2c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cb30:	4961      	ldr	r1, [pc, #388]	; (800ccb8 <tcp_receive+0xb18>)
 800cb32:	4862      	ldr	r0, [pc, #392]	; (800ccbc <tcp_receive+0xb1c>)
 800cb34:	f004 fc96 	bl	8011464 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb3c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cb3e:	4b5a      	ldr	r3, [pc, #360]	; (800cca8 <tcp_receive+0xb08>)
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	4b59      	ldr	r3, [pc, #356]	; (800ccac <tcp_receive+0xb0c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	441a      	add	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb52:	4b55      	ldr	r3, [pc, #340]	; (800cca8 <tcp_receive+0xb08>)
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d206      	bcs.n	800cb68 <tcp_receive+0x9c8>
 800cb5a:	4b56      	ldr	r3, [pc, #344]	; (800ccb4 <tcp_receive+0xb14>)
 800cb5c:	f240 6207 	movw	r2, #1543	; 0x607
 800cb60:	4957      	ldr	r1, [pc, #348]	; (800ccc0 <tcp_receive+0xb20>)
 800cb62:	4856      	ldr	r0, [pc, #344]	; (800ccbc <tcp_receive+0xb1c>)
 800cb64:	f004 fc7e 	bl	8011464 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb6c:	4b4e      	ldr	r3, [pc, #312]	; (800cca8 <tcp_receive+0xb08>)
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7fc ffc5 	bl	8009b08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cb7e:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <tcp_receive+0xb10>)
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	891b      	ldrh	r3, [r3, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d006      	beq.n	800cb96 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cb88:	4b49      	ldr	r3, [pc, #292]	; (800ccb0 <tcp_receive+0xb10>)
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	4a4d      	ldr	r2, [pc, #308]	; (800ccc4 <tcp_receive+0xb24>)
 800cb8e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cb90:	4b47      	ldr	r3, [pc, #284]	; (800ccb0 <tcp_receive+0xb10>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb96:	4b46      	ldr	r3, [pc, #280]	; (800ccb0 <tcp_receive+0xb10>)
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	899b      	ldrh	r3, [r3, #12]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fa ffbd 	bl	8007b1e <lwip_htons>
 800cba4:	4603      	mov	r3, r0
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f003 0301 	and.w	r3, r3, #1
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 80b8 	beq.w	800cd22 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cbb2:	4b45      	ldr	r3, [pc, #276]	; (800ccc8 <tcp_receive+0xb28>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	f043 0320 	orr.w	r3, r3, #32
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	4b42      	ldr	r3, [pc, #264]	; (800ccc8 <tcp_receive+0xb28>)
 800cbbe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cbc0:	e0af      	b.n	800cd22 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	4a36      	ldr	r2, [pc, #216]	; (800ccac <tcp_receive+0xb0c>)
 800cbd2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	891b      	ldrh	r3, [r3, #8]
 800cbd8:	461c      	mov	r4, r3
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	899b      	ldrh	r3, [r3, #12]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fa ff9b 	bl	8007b1e <lwip_htons>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <tcp_receive+0xa58>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e000      	b.n	800cbfa <tcp_receive+0xa5a>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	191a      	adds	r2, r3, r4
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	441a      	add	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc0a:	461c      	mov	r4, r3
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	891b      	ldrh	r3, [r3, #8]
 800cc10:	461d      	mov	r5, r3
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	899b      	ldrh	r3, [r3, #12]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fa ff7f 	bl	8007b1e <lwip_htons>
 800cc20:	4603      	mov	r3, r0
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <tcp_receive+0xa90>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e000      	b.n	800cc32 <tcp_receive+0xa92>
 800cc30:	2300      	movs	r3, #0
 800cc32:	442b      	add	r3, r5
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d206      	bcs.n	800cc46 <tcp_receive+0xaa6>
 800cc38:	4b1e      	ldr	r3, [pc, #120]	; (800ccb4 <tcp_receive+0xb14>)
 800cc3a:	f240 622b 	movw	r2, #1579	; 0x62b
 800cc3e:	4923      	ldr	r1, [pc, #140]	; (800cccc <tcp_receive+0xb2c>)
 800cc40:	481e      	ldr	r0, [pc, #120]	; (800ccbc <tcp_receive+0xb1c>)
 800cc42:	f004 fc0f 	bl	8011464 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	891b      	ldrh	r3, [r3, #8]
 800cc4a:	461c      	mov	r4, r3
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	899b      	ldrh	r3, [r3, #12]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fa ff62 	bl	8007b1e <lwip_htons>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 0303 	and.w	r3, r3, #3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <tcp_receive+0xaca>
 800cc66:	2301      	movs	r3, #1
 800cc68:	e000      	b.n	800cc6c <tcp_receive+0xacc>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	1919      	adds	r1, r3, r4
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc72:	b28b      	uxth	r3, r1
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7fc ff43 	bl	8009b08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	891b      	ldrh	r3, [r3, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d028      	beq.n	800ccde <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cc8c:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <tcp_receive+0xb24>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01d      	beq.n	800ccd0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800cc94:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <tcp_receive+0xb24>)
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4610      	mov	r0, r2
 800cca0:	f7fc fa60 	bl	8009164 <pbuf_cat>
 800cca4:	e018      	b.n	800ccd8 <tcp_receive+0xb38>
 800cca6:	bf00      	nop
 800cca8:	20008d46 	.word	0x20008d46
 800ccac:	20008d3c 	.word	0x20008d3c
 800ccb0:	20008d1c 	.word	0x20008d1c
 800ccb4:	08013638 	.word	0x08013638
 800ccb8:	08013a18 	.word	0x08013a18
 800ccbc:	08013684 	.word	0x08013684
 800ccc0:	08013a54 	.word	0x08013a54
 800ccc4:	20008d4c 	.word	0x20008d4c
 800ccc8:	20008d49 	.word	0x20008d49
 800cccc:	08013a74 	.word	0x08013a74
            } else {
              recv_data = cseg->p;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	4a70      	ldr	r2, [pc, #448]	; (800ce98 <tcp_receive+0xcf8>)
 800ccd6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	899b      	ldrh	r3, [r3, #12]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fa ff19 	bl	8007b1e <lwip_htons>
 800ccec:	4603      	mov	r3, r0
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00d      	beq.n	800cd14 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ccf8:	4b68      	ldr	r3, [pc, #416]	; (800ce9c <tcp_receive+0xcfc>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f043 0320 	orr.w	r3, r3, #32
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	4b66      	ldr	r3, [pc, #408]	; (800ce9c <tcp_receive+0xcfc>)
 800cd04:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	7d1b      	ldrb	r3, [r3, #20]
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	d102      	bne.n	800cd14 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2207      	movs	r2, #7
 800cd12:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cd1c:	68b8      	ldr	r0, [r7, #8]
 800cd1e:	f7fd fbd2 	bl	800a4c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d008      	beq.n	800cd3c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cd36:	429a      	cmp	r2, r3
 800cd38:	f43f af43 	beq.w	800cbc2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00e      	beq.n	800cd66 <tcp_receive+0xbc6>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f023 0301 	bic.w	r3, r3, #1
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	835a      	strh	r2, [r3, #26]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	8b5b      	ldrh	r3, [r3, #26]
 800cd5a:	f043 0302 	orr.w	r3, r3, #2
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cd64:	e188      	b.n	800d078 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	8b5b      	ldrh	r3, [r3, #26]
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cd74:	e180      	b.n	800d078 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cd7e:	4848      	ldr	r0, [pc, #288]	; (800cea0 <tcp_receive+0xd00>)
 800cd80:	f7fd fbba 	bl	800a4f8 <tcp_seg_copy>
 800cd84:	4602      	mov	r2, r0
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	675a      	str	r2, [r3, #116]	; 0x74
 800cd8a:	e16d      	b.n	800d068 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd94:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd96:	e157      	b.n	800d048 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	685a      	ldr	r2, [r3, #4]
 800cd9e:	4b41      	ldr	r3, [pc, #260]	; (800cea4 <tcp_receive+0xd04>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d11d      	bne.n	800cde2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cda6:	4b3e      	ldr	r3, [pc, #248]	; (800cea0 <tcp_receive+0xd00>)
 800cda8:	891a      	ldrh	r2, [r3, #8]
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	891b      	ldrh	r3, [r3, #8]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	f240 814f 	bls.w	800d052 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cdb4:	483a      	ldr	r0, [pc, #232]	; (800cea0 <tcp_receive+0xd00>)
 800cdb6:	f7fd fb9f 	bl	800a4f8 <tcp_seg_copy>
 800cdba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 8149 	beq.w	800d056 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800cdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <tcp_receive+0xc32>
                    prev->next = cseg;
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	e002      	b.n	800cdd8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cdd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdda:	6978      	ldr	r0, [r7, #20]
 800cddc:	f7ff f8dc 	bl	800bf98 <tcp_oos_insert_segment>
                }
                break;
 800cde0:	e139      	b.n	800d056 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d117      	bne.n	800ce18 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cde8:	4b2e      	ldr	r3, [pc, #184]	; (800cea4 <tcp_receive+0xd04>)
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	da57      	bge.n	800cea8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cdf8:	4829      	ldr	r0, [pc, #164]	; (800cea0 <tcp_receive+0xd00>)
 800cdfa:	f7fd fb7d 	bl	800a4f8 <tcp_seg_copy>
 800cdfe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 8129 	beq.w	800d05a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ce0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce10:	69b8      	ldr	r0, [r7, #24]
 800ce12:	f7ff f8c1 	bl	800bf98 <tcp_oos_insert_segment>
                  }
                  break;
 800ce16:	e120      	b.n	800d05a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ce18:	4b22      	ldr	r3, [pc, #136]	; (800cea4 <tcp_receive+0xd04>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	db3e      	blt.n	800cea8 <tcp_receive+0xd08>
 800ce2a:	4b1e      	ldr	r3, [pc, #120]	; (800cea4 <tcp_receive+0xd04>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	3301      	adds	r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc35      	bgt.n	800cea8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ce3c:	4818      	ldr	r0, [pc, #96]	; (800cea0 <tcp_receive+0xd00>)
 800ce3e:	f7fd fb5b 	bl	800a4f8 <tcp_seg_copy>
 800ce42:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 8109 	beq.w	800d05e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce54:	8912      	ldrh	r2, [r2, #8]
 800ce56:	441a      	add	r2, r3
 800ce58:	4b12      	ldr	r3, [pc, #72]	; (800cea4 <tcp_receive+0xd04>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd12      	ble.n	800ce88 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ce62:	4b10      	ldr	r3, [pc, #64]	; (800cea4 <tcp_receive+0xd04>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ce78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	891b      	ldrh	r3, [r3, #8]
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f7fb ff26 	bl	8008cd4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	69fa      	ldr	r2, [r7, #28]
 800ce8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ce8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce90:	69f8      	ldr	r0, [r7, #28]
 800ce92:	f7ff f881 	bl	800bf98 <tcp_oos_insert_segment>
                  }
                  break;
 800ce96:	e0e2      	b.n	800d05e <tcp_receive+0xebe>
 800ce98:	20008d4c 	.word	0x20008d4c
 800ce9c:	20008d49 	.word	0x20008d49
 800cea0:	20008d1c 	.word	0x20008d1c
 800cea4:	20008d3c 	.word	0x20008d3c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 80c6 	bne.w	800d042 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ceb6:	4b80      	ldr	r3, [pc, #512]	; (800d0b8 <tcp_receive+0xf18>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f340 80bd 	ble.w	800d042 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	899b      	ldrh	r3, [r3, #12]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fa fe24 	bl	8007b1e <lwip_htons>
 800ced6:	4603      	mov	r3, r0
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 80bf 	bne.w	800d062 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cee4:	4875      	ldr	r0, [pc, #468]	; (800d0bc <tcp_receive+0xf1c>)
 800cee6:	f7fd fb07 	bl	800a4f8 <tcp_seg_copy>
 800ceea:	4602      	mov	r2, r0
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 80b6 	beq.w	800d066 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf02:	8912      	ldrh	r2, [r2, #8]
 800cf04:	441a      	add	r2, r3
 800cf06:	4b6c      	ldr	r3, [pc, #432]	; (800d0b8 <tcp_receive+0xf18>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd12      	ble.n	800cf36 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cf10:	4b69      	ldr	r3, [pc, #420]	; (800d0b8 <tcp_receive+0xf18>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	891b      	ldrh	r3, [r3, #8]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fb fecf 	bl	8008cd4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cf36:	4b62      	ldr	r3, [pc, #392]	; (800d0c0 <tcp_receive+0xf20>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	4b5e      	ldr	r3, [pc, #376]	; (800d0b8 <tcp_receive+0xf18>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	441a      	add	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf4a:	440b      	add	r3, r1
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f340 8089 	ble.w	800d066 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	899b      	ldrh	r3, [r3, #12]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fa fddd 	bl	8007b1e <lwip_htons>
 800cf64:	4603      	mov	r3, r0
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d022      	beq.n	800cfb6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	899b      	ldrh	r3, [r3, #12]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	b21b      	sxth	r3, r3
 800cf7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf80:	b21c      	sxth	r4, r3
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	899b      	ldrh	r3, [r3, #12]
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fa fdc6 	bl	8007b1e <lwip_htons>
 800cf92:	4603      	mov	r3, r0
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fa fdbd 	bl	8007b1e <lwip_htons>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	b21b      	sxth	r3, r3
 800cfa8:	4323      	orrs	r3, r4
 800cfaa:	b21a      	sxth	r2, r3
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	b292      	uxth	r2, r2
 800cfb4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc0:	4413      	add	r3, r2
 800cfc2:	b299      	uxth	r1, r3
 800cfc4:	4b3c      	ldr	r3, [pc, #240]	; (800d0b8 <tcp_receive+0xf18>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	1a8a      	subs	r2, r1, r2
 800cfd0:	b292      	uxth	r2, r2
 800cfd2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	891b      	ldrh	r3, [r3, #8]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	f7fb fe76 	bl	8008cd4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	891c      	ldrh	r4, [r3, #8]
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	899b      	ldrh	r3, [r3, #12]
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fa fd90 	bl	8007b1e <lwip_htons>
 800cffe:	4603      	mov	r3, r0
 800d000:	b2db      	uxtb	r3, r3
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <tcp_receive+0xe6e>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e000      	b.n	800d010 <tcp_receive+0xe70>
 800d00e:	2300      	movs	r3, #0
 800d010:	4423      	add	r3, r4
 800d012:	b29a      	uxth	r2, r3
 800d014:	4b2a      	ldr	r3, [pc, #168]	; (800d0c0 <tcp_receive+0xf20>)
 800d016:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d018:	4b29      	ldr	r3, [pc, #164]	; (800d0c0 <tcp_receive+0xf20>)
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	4b26      	ldr	r3, [pc, #152]	; (800d0b8 <tcp_receive+0xf18>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	441a      	add	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d02c:	440b      	add	r3, r1
 800d02e:	429a      	cmp	r2, r3
 800d030:	d019      	beq.n	800d066 <tcp_receive+0xec6>
 800d032:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <tcp_receive+0xf24>)
 800d034:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d038:	4923      	ldr	r1, [pc, #140]	; (800d0c8 <tcp_receive+0xf28>)
 800d03a:	4824      	ldr	r0, [pc, #144]	; (800d0cc <tcp_receive+0xf2c>)
 800d03c:	f004 fa12 	bl	8011464 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d040:	e011      	b.n	800d066 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	63bb      	str	r3, [r7, #56]	; 0x38
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f47f aea4 	bne.w	800cd98 <tcp_receive+0xbf8>
 800d050:	e00a      	b.n	800d068 <tcp_receive+0xec8>
                break;
 800d052:	bf00      	nop
 800d054:	e008      	b.n	800d068 <tcp_receive+0xec8>
                break;
 800d056:	bf00      	nop
 800d058:	e006      	b.n	800d068 <tcp_receive+0xec8>
                  break;
 800d05a:	bf00      	nop
 800d05c:	e004      	b.n	800d068 <tcp_receive+0xec8>
                  break;
 800d05e:	bf00      	nop
 800d060:	e002      	b.n	800d068 <tcp_receive+0xec8>
                  break;
 800d062:	bf00      	nop
 800d064:	e000      	b.n	800d068 <tcp_receive+0xec8>
                break;
 800d066:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 fa33 	bl	800e4d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d06e:	e003      	b.n	800d078 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f001 fa2f 	bl	800e4d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d076:	e01a      	b.n	800d0ae <tcp_receive+0xf0e>
 800d078:	e019      	b.n	800d0ae <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <tcp_receive+0xf18>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	db0a      	blt.n	800d09e <tcp_receive+0xefe>
 800d088:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <tcp_receive+0xf18>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d090:	6879      	ldr	r1, [r7, #4]
 800d092:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d094:	440b      	add	r3, r1
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	3301      	adds	r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd07      	ble.n	800d0ae <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	8b5b      	ldrh	r3, [r3, #26]
 800d0a2:	f043 0302 	orr.w	r3, r3, #2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d0ac:	e7ff      	b.n	800d0ae <tcp_receive+0xf0e>
 800d0ae:	bf00      	nop
 800d0b0:	3750      	adds	r7, #80	; 0x50
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20008d3c 	.word	0x20008d3c
 800d0bc:	20008d1c 	.word	0x20008d1c
 800d0c0:	20008d46 	.word	0x20008d46
 800d0c4:	08013638 	.word	0x08013638
 800d0c8:	080139e0 	.word	0x080139e0
 800d0cc:	08013684 	.word	0x08013684

0800d0d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d0d6:	4b15      	ldr	r3, [pc, #84]	; (800d12c <tcp_get_next_optbyte+0x5c>)
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	1c5a      	adds	r2, r3, #1
 800d0dc:	b291      	uxth	r1, r2
 800d0de:	4a13      	ldr	r2, [pc, #76]	; (800d12c <tcp_get_next_optbyte+0x5c>)
 800d0e0:	8011      	strh	r1, [r2, #0]
 800d0e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d0e4:	4b12      	ldr	r3, [pc, #72]	; (800d130 <tcp_get_next_optbyte+0x60>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <tcp_get_next_optbyte+0x26>
 800d0ec:	4b11      	ldr	r3, [pc, #68]	; (800d134 <tcp_get_next_optbyte+0x64>)
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d208      	bcs.n	800d108 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d0f6:	4b10      	ldr	r3, [pc, #64]	; (800d138 <tcp_get_next_optbyte+0x68>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3314      	adds	r3, #20
 800d0fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d0fe:	88fb      	ldrh	r3, [r7, #6]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	4413      	add	r3, r2
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	e00b      	b.n	800d120 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	4b09      	ldr	r3, [pc, #36]	; (800d134 <tcp_get_next_optbyte+0x64>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b2db      	uxtb	r3, r3
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d116:	4b06      	ldr	r3, [pc, #24]	; (800d130 <tcp_get_next_optbyte+0x60>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	797b      	ldrb	r3, [r7, #5]
 800d11c:	4413      	add	r3, r2
 800d11e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d120:	4618      	mov	r0, r3
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20008d38 	.word	0x20008d38
 800d130:	20008d34 	.word	0x20008d34
 800d134:	20008d32 	.word	0x20008d32
 800d138:	20008d2c 	.word	0x20008d2c

0800d13c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d106      	bne.n	800d158 <tcp_parseopt+0x1c>
 800d14a:	4b32      	ldr	r3, [pc, #200]	; (800d214 <tcp_parseopt+0xd8>)
 800d14c:	f240 727d 	movw	r2, #1917	; 0x77d
 800d150:	4931      	ldr	r1, [pc, #196]	; (800d218 <tcp_parseopt+0xdc>)
 800d152:	4832      	ldr	r0, [pc, #200]	; (800d21c <tcp_parseopt+0xe0>)
 800d154:	f004 f986 	bl	8011464 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d158:	4b31      	ldr	r3, [pc, #196]	; (800d220 <tcp_parseopt+0xe4>)
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d055      	beq.n	800d20c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d160:	4b30      	ldr	r3, [pc, #192]	; (800d224 <tcp_parseopt+0xe8>)
 800d162:	2200      	movs	r2, #0
 800d164:	801a      	strh	r2, [r3, #0]
 800d166:	e045      	b.n	800d1f4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d168:	f7ff ffb2 	bl	800d0d0 <tcp_get_next_optbyte>
 800d16c:	4603      	mov	r3, r0
 800d16e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d006      	beq.n	800d184 <tcp_parseopt+0x48>
 800d176:	2b02      	cmp	r3, #2
 800d178:	dc2b      	bgt.n	800d1d2 <tcp_parseopt+0x96>
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d041      	beq.n	800d202 <tcp_parseopt+0xc6>
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d127      	bne.n	800d1d2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d182:	e037      	b.n	800d1f4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d184:	f7ff ffa4 	bl	800d0d0 <tcp_get_next_optbyte>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	d13b      	bne.n	800d206 <tcp_parseopt+0xca>
 800d18e:	4b25      	ldr	r3, [pc, #148]	; (800d224 <tcp_parseopt+0xe8>)
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	4a22      	ldr	r2, [pc, #136]	; (800d220 <tcp_parseopt+0xe4>)
 800d196:	8812      	ldrh	r2, [r2, #0]
 800d198:	4293      	cmp	r3, r2
 800d19a:	da34      	bge.n	800d206 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d19c:	f7ff ff98 	bl	800d0d0 <tcp_get_next_optbyte>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	021b      	lsls	r3, r3, #8
 800d1a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d1a8:	f7ff ff92 	bl	800d0d0 <tcp_get_next_optbyte>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	89bb      	ldrh	r3, [r7, #12]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d1b6:	89bb      	ldrh	r3, [r7, #12]
 800d1b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d1bc:	d804      	bhi.n	800d1c8 <tcp_parseopt+0x8c>
 800d1be:	89bb      	ldrh	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <tcp_parseopt+0x8c>
 800d1c4:	89ba      	ldrh	r2, [r7, #12]
 800d1c6:	e001      	b.n	800d1cc <tcp_parseopt+0x90>
 800d1c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d1d0:	e010      	b.n	800d1f4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d1d2:	f7ff ff7d 	bl	800d0d0 <tcp_get_next_optbyte>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d1da:	7afb      	ldrb	r3, [r7, #11]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d914      	bls.n	800d20a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <tcp_parseopt+0xe8>)
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	3b02      	subs	r3, #2
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <tcp_parseopt+0xe8>)
 800d1f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <tcp_parseopt+0xe8>)
 800d1f6:	881a      	ldrh	r2, [r3, #0]
 800d1f8:	4b09      	ldr	r3, [pc, #36]	; (800d220 <tcp_parseopt+0xe4>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d3b3      	bcc.n	800d168 <tcp_parseopt+0x2c>
 800d200:	e004      	b.n	800d20c <tcp_parseopt+0xd0>
          return;
 800d202:	bf00      	nop
 800d204:	e002      	b.n	800d20c <tcp_parseopt+0xd0>
            return;
 800d206:	bf00      	nop
 800d208:	e000      	b.n	800d20c <tcp_parseopt+0xd0>
            return;
 800d20a:	bf00      	nop
      }
    }
  }
}
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	08013638 	.word	0x08013638
 800d218:	08013a9c 	.word	0x08013a9c
 800d21c:	08013684 	.word	0x08013684
 800d220:	20008d30 	.word	0x20008d30
 800d224:	20008d38 	.word	0x20008d38

0800d228 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d228:	b480      	push	{r7}
 800d22a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <tcp_trigger_input_pcb_close+0x1c>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	f043 0310 	orr.w	r3, r3, #16
 800d234:	b2da      	uxtb	r2, r3
 800d236:	4b03      	ldr	r3, [pc, #12]	; (800d244 <tcp_trigger_input_pcb_close+0x1c>)
 800d238:	701a      	strb	r2, [r3, #0]
}
 800d23a:	bf00      	nop
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	20008d49 	.word	0x20008d49

0800d248 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <tcp_route+0x28>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	7a1b      	ldrb	r3, [r3, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	7a1b      	ldrb	r3, [r3, #8]
 800d266:	4618      	mov	r0, r3
 800d268:	f7fb fb7a 	bl	8008960 <netif_get_by_index>
 800d26c:	4603      	mov	r3, r0
 800d26e:	e003      	b.n	800d278 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f002 fe0b 	bl	800fe8c <ip4_route>
 800d276:	4603      	mov	r3, r0
  }
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d280:	b590      	push	{r4, r7, lr}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	4613      	mov	r3, r2
 800d28e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d105      	bne.n	800d2a2 <tcp_create_segment+0x22>
 800d296:	4b44      	ldr	r3, [pc, #272]	; (800d3a8 <tcp_create_segment+0x128>)
 800d298:	22a3      	movs	r2, #163	; 0xa3
 800d29a:	4944      	ldr	r1, [pc, #272]	; (800d3ac <tcp_create_segment+0x12c>)
 800d29c:	4844      	ldr	r0, [pc, #272]	; (800d3b0 <tcp_create_segment+0x130>)
 800d29e:	f004 f8e1 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <tcp_create_segment+0x34>
 800d2a8:	4b3f      	ldr	r3, [pc, #252]	; (800d3a8 <tcp_create_segment+0x128>)
 800d2aa:	22a4      	movs	r2, #164	; 0xa4
 800d2ac:	4941      	ldr	r1, [pc, #260]	; (800d3b4 <tcp_create_segment+0x134>)
 800d2ae:	4840      	ldr	r0, [pc, #256]	; (800d3b0 <tcp_create_segment+0x130>)
 800d2b0:	f004 f8d8 	bl	8011464 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d2b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d2c2:	2003      	movs	r0, #3
 800d2c4:	f7fb f880 	bl	80083c8 <memp_malloc>
 800d2c8:	6138      	str	r0, [r7, #16]
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d104      	bne.n	800d2da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d2d0:	68b8      	ldr	r0, [r7, #8]
 800d2d2:	f7fb fe85 	bl	8008fe0 <pbuf_free>
    return NULL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e061      	b.n	800d39e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d2e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	891a      	ldrh	r2, [r3, #8]
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d205      	bcs.n	800d306 <tcp_create_segment+0x86>
 800d2fa:	4b2b      	ldr	r3, [pc, #172]	; (800d3a8 <tcp_create_segment+0x128>)
 800d2fc:	22b0      	movs	r2, #176	; 0xb0
 800d2fe:	492e      	ldr	r1, [pc, #184]	; (800d3b8 <tcp_create_segment+0x138>)
 800d300:	482b      	ldr	r0, [pc, #172]	; (800d3b0 <tcp_create_segment+0x130>)
 800d302:	f004 f8af 	bl	8011464 <iprintf>
  seg->len = p->tot_len - optlen;
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	891a      	ldrh	r2, [r3, #8]
 800d30a:	7dfb      	ldrb	r3, [r7, #23]
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	b29a      	uxth	r2, r3
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d316:	2114      	movs	r1, #20
 800d318:	68b8      	ldr	r0, [r7, #8]
 800d31a:	f7fb fdcb 	bl	8008eb4 <pbuf_add_header>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d004      	beq.n	800d32e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d324:	6938      	ldr	r0, [r7, #16]
 800d326:	f7fd f8ce 	bl	800a4c6 <tcp_seg_free>
    return NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e037      	b.n	800d39e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	8ada      	ldrh	r2, [r3, #22]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	68dc      	ldr	r4, [r3, #12]
 800d340:	4610      	mov	r0, r2
 800d342:	f7fa fbec 	bl	8007b1e <lwip_htons>
 800d346:	4603      	mov	r3, r0
 800d348:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	8b1a      	ldrh	r2, [r3, #24]
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	68dc      	ldr	r4, [r3, #12]
 800d352:	4610      	mov	r0, r2
 800d354:	f7fa fbe3 	bl	8007b1e <lwip_htons>
 800d358:	4603      	mov	r3, r0
 800d35a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	68dc      	ldr	r4, [r3, #12]
 800d360:	6838      	ldr	r0, [r7, #0]
 800d362:	f7fa fbf1 	bl	8007b48 <lwip_htonl>
 800d366:	4603      	mov	r3, r0
 800d368:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
 800d36c:	089b      	lsrs	r3, r3, #2
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	b29b      	uxth	r3, r3
 800d372:	3305      	adds	r3, #5
 800d374:	b29b      	uxth	r3, r3
 800d376:	031b      	lsls	r3, r3, #12
 800d378:	b29a      	uxth	r2, r3
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	4313      	orrs	r3, r2
 800d380:	b29a      	uxth	r2, r3
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	68dc      	ldr	r4, [r3, #12]
 800d386:	4610      	mov	r0, r2
 800d388:	f7fa fbc9 	bl	8007b1e <lwip_htons>
 800d38c:	4603      	mov	r3, r0
 800d38e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	749a      	strb	r2, [r3, #18]
 800d398:	2200      	movs	r2, #0
 800d39a:	74da      	strb	r2, [r3, #19]
  return seg;
 800d39c:	693b      	ldr	r3, [r7, #16]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	371c      	adds	r7, #28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd90      	pop	{r4, r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	08013ab8 	.word	0x08013ab8
 800d3ac:	08013aec 	.word	0x08013aec
 800d3b0:	08013b0c 	.word	0x08013b0c
 800d3b4:	08013b34 	.word	0x08013b34
 800d3b8:	08013b58 	.word	0x08013b58

0800d3bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d3bc:	b590      	push	{r4, r7, lr}
 800d3be:	b08b      	sub	sp, #44	; 0x2c
 800d3c0:	af02      	add	r7, sp, #8
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <tcp_split_unsent_seg+0x2c>
 800d3da:	4b95      	ldr	r3, [pc, #596]	; (800d630 <tcp_split_unsent_seg+0x274>)
 800d3dc:	f240 324b 	movw	r2, #843	; 0x34b
 800d3e0:	4994      	ldr	r1, [pc, #592]	; (800d634 <tcp_split_unsent_seg+0x278>)
 800d3e2:	4895      	ldr	r0, [pc, #596]	; (800d638 <tcp_split_unsent_seg+0x27c>)
 800d3e4:	f004 f83e 	bl	8011464 <iprintf>

  useg = pcb->unsent;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f8:	e116      	b.n	800d628 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d3fa:	887b      	ldrh	r3, [r7, #2]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d109      	bne.n	800d414 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d400:	4b8b      	ldr	r3, [pc, #556]	; (800d630 <tcp_split_unsent_seg+0x274>)
 800d402:	f240 3253 	movw	r2, #851	; 0x353
 800d406:	498d      	ldr	r1, [pc, #564]	; (800d63c <tcp_split_unsent_seg+0x280>)
 800d408:	488b      	ldr	r0, [pc, #556]	; (800d638 <tcp_split_unsent_seg+0x27c>)
 800d40a:	f004 f82b 	bl	8011464 <iprintf>
    return ERR_VAL;
 800d40e:	f06f 0305 	mvn.w	r3, #5
 800d412:	e109      	b.n	800d628 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	891b      	ldrh	r3, [r3, #8]
 800d418:	887a      	ldrh	r2, [r7, #2]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d301      	bcc.n	800d422 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	e102      	b.n	800d628 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d426:	887a      	ldrh	r2, [r7, #2]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d906      	bls.n	800d43a <tcp_split_unsent_seg+0x7e>
 800d42c:	4b80      	ldr	r3, [pc, #512]	; (800d630 <tcp_split_unsent_seg+0x274>)
 800d42e:	f240 325b 	movw	r2, #859	; 0x35b
 800d432:	4983      	ldr	r1, [pc, #524]	; (800d640 <tcp_split_unsent_seg+0x284>)
 800d434:	4880      	ldr	r0, [pc, #512]	; (800d638 <tcp_split_unsent_seg+0x27c>)
 800d436:	f004 f815 	bl	8011464 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	891b      	ldrh	r3, [r3, #8]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d106      	bne.n	800d450 <tcp_split_unsent_seg+0x94>
 800d442:	4b7b      	ldr	r3, [pc, #492]	; (800d630 <tcp_split_unsent_seg+0x274>)
 800d444:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d448:	497e      	ldr	r1, [pc, #504]	; (800d644 <tcp_split_unsent_seg+0x288>)
 800d44a:	487b      	ldr	r0, [pc, #492]	; (800d638 <tcp_split_unsent_seg+0x27c>)
 800d44c:	f004 f80a 	bl	8011464 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	7a9b      	ldrb	r3, [r3, #10]
 800d454:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d456:	7bfb      	ldrb	r3, [r7, #15]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	891a      	ldrh	r2, [r3, #8]
 800d466:	887b      	ldrh	r3, [r7, #2]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	89bb      	ldrh	r3, [r7, #12]
 800d472:	4413      	add	r3, r2
 800d474:	b29b      	uxth	r3, r3
 800d476:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d47a:	4619      	mov	r1, r3
 800d47c:	2036      	movs	r0, #54	; 0x36
 800d47e:	f7fb facb 	bl	8008a18 <pbuf_alloc>
 800d482:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	f000 80b7 	beq.w	800d5fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	891a      	ldrh	r2, [r3, #8]
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	b29a      	uxth	r2, r3
 800d49a:	887b      	ldrh	r3, [r7, #2]
 800d49c:	4413      	add	r3, r2
 800d49e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	6858      	ldr	r0, [r3, #4]
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
 800d4aa:	18d1      	adds	r1, r2, r3
 800d4ac:	897b      	ldrh	r3, [r7, #10]
 800d4ae:	89ba      	ldrh	r2, [r7, #12]
 800d4b0:	f7fb ff80 	bl	80093b4 <pbuf_copy_partial>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	89bb      	ldrh	r3, [r7, #12]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	f040 809f 	bne.w	800d5fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	899b      	ldrh	r3, [r3, #12]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fa fb28 	bl	8007b1e <lwip_htons>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d4d8:	2300      	movs	r3, #0
 800d4da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d4dc:	7efb      	ldrb	r3, [r7, #27]
 800d4de:	f003 0308 	and.w	r3, r3, #8
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d007      	beq.n	800d4f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d4e6:	7efb      	ldrb	r3, [r7, #27]
 800d4e8:	f023 0308 	bic.w	r3, r3, #8
 800d4ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d4ee:	7ebb      	ldrb	r3, [r7, #26]
 800d4f0:	f043 0308 	orr.w	r3, r3, #8
 800d4f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d4f6:	7efb      	ldrb	r3, [r7, #27]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d007      	beq.n	800d510 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d500:	7efb      	ldrb	r3, [r7, #27]
 800d502:	f023 0301 	bic.w	r3, r3, #1
 800d506:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d508:	7ebb      	ldrb	r3, [r7, #26]
 800d50a:	f043 0301 	orr.w	r3, r3, #1
 800d50e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fa fb16 	bl	8007b48 <lwip_htonl>
 800d51c:	4602      	mov	r2, r0
 800d51e:	887b      	ldrh	r3, [r7, #2]
 800d520:	18d1      	adds	r1, r2, r3
 800d522:	7eba      	ldrb	r2, [r7, #26]
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	460b      	mov	r3, r1
 800d52a:	6939      	ldr	r1, [r7, #16]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fea7 	bl	800d280 <tcp_create_segment>
 800d532:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d063      	beq.n	800d602 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fb fdd6 	bl	80090f0 <pbuf_clen>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	b29a      	uxth	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	6858      	ldr	r0, [r3, #4]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	891a      	ldrh	r2, [r3, #8]
 800d562:	89bb      	ldrh	r3, [r7, #12]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	b29b      	uxth	r3, r3
 800d568:	4619      	mov	r1, r3
 800d56a:	f7fb fbb3 	bl	8008cd4 <pbuf_realloc>
  useg->len -= remainder;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	891a      	ldrh	r2, [r3, #8]
 800d572:	89bb      	ldrh	r3, [r7, #12]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	b29a      	uxth	r2, r3
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	899b      	ldrh	r3, [r3, #12]
 800d582:	b29c      	uxth	r4, r3
 800d584:	7efb      	ldrb	r3, [r7, #27]
 800d586:	b29b      	uxth	r3, r3
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fa fac8 	bl	8007b1e <lwip_htons>
 800d58e:	4603      	mov	r3, r0
 800d590:	461a      	mov	r2, r3
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	4322      	orrs	r2, r4
 800d598:	b292      	uxth	r2, r2
 800d59a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fb fda5 	bl	80090f0 <pbuf_clen>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5b0:	4413      	add	r3, r2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fb fd96 	bl	80090f0 <pbuf_clen>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5ce:	4413      	add	r3, r2
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d103      	bne.n	800d5f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e016      	b.n	800d628 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d5fa:	bf00      	nop
 800d5fc:	e002      	b.n	800d604 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d5fe:	bf00      	nop
 800d600:	e000      	b.n	800d604 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d602:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d006      	beq.n	800d618 <tcp_split_unsent_seg+0x25c>
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <tcp_split_unsent_seg+0x274>)
 800d60c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d610:	490d      	ldr	r1, [pc, #52]	; (800d648 <tcp_split_unsent_seg+0x28c>)
 800d612:	4809      	ldr	r0, [pc, #36]	; (800d638 <tcp_split_unsent_seg+0x27c>)
 800d614:	f003 ff26 	bl	8011464 <iprintf>
  if (p != NULL) {
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d61e:	6938      	ldr	r0, [r7, #16]
 800d620:	f7fb fcde 	bl	8008fe0 <pbuf_free>
  }

  return ERR_MEM;
 800d624:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3724      	adds	r7, #36	; 0x24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd90      	pop	{r4, r7, pc}
 800d630:	08013ab8 	.word	0x08013ab8
 800d634:	08013e4c 	.word	0x08013e4c
 800d638:	08013b0c 	.word	0x08013b0c
 800d63c:	08013e70 	.word	0x08013e70
 800d640:	08013e94 	.word	0x08013e94
 800d644:	08013ea4 	.word	0x08013ea4
 800d648:	08013eb4 	.word	0x08013eb4

0800d64c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <tcp_send_fin+0x1c>
 800d65a:	4b21      	ldr	r3, [pc, #132]	; (800d6e0 <tcp_send_fin+0x94>)
 800d65c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d660:	4920      	ldr	r1, [pc, #128]	; (800d6e4 <tcp_send_fin+0x98>)
 800d662:	4821      	ldr	r0, [pc, #132]	; (800d6e8 <tcp_send_fin+0x9c>)
 800d664:	f003 fefe 	bl	8011464 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d02e      	beq.n	800d6ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d674:	60fb      	str	r3, [r7, #12]
 800d676:	e002      	b.n	800d67e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1f8      	bne.n	800d678 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	899b      	ldrh	r3, [r3, #12]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fa fa45 	bl	8007b1e <lwip_htons>
 800d694:	4603      	mov	r3, r0
 800d696:	b2db      	uxtb	r3, r3
 800d698:	f003 0307 	and.w	r3, r3, #7
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d116      	bne.n	800d6ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	899b      	ldrh	r3, [r3, #12]
 800d6a6:	b29c      	uxth	r4, r3
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	f7fa fa38 	bl	8007b1e <lwip_htons>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	4322      	orrs	r2, r4
 800d6b8:	b292      	uxth	r2, r2
 800d6ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	8b5b      	ldrh	r3, [r3, #26]
 800d6c0:	f043 0320 	orr.w	r3, r3, #32
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e004      	b.n	800d6d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f80b 	bl	800d6ec <tcp_enqueue_flags>
 800d6d6:	4603      	mov	r3, r0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd90      	pop	{r4, r7, pc}
 800d6e0:	08013ab8 	.word	0x08013ab8
 800d6e4:	08013ec0 	.word	0x08013ec0
 800d6e8:	08013b0c 	.word	0x08013b0c

0800d6ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d700:	78fb      	ldrb	r3, [r7, #3]
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <tcp_enqueue_flags+0x2c>
 800d70a:	4b67      	ldr	r3, [pc, #412]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d70c:	f240 4211 	movw	r2, #1041	; 0x411
 800d710:	4966      	ldr	r1, [pc, #408]	; (800d8ac <tcp_enqueue_flags+0x1c0>)
 800d712:	4867      	ldr	r0, [pc, #412]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d714:	f003 fea6 	bl	8011464 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <tcp_enqueue_flags+0x40>
 800d71e:	4b62      	ldr	r3, [pc, #392]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d720:	f240 4213 	movw	r2, #1043	; 0x413
 800d724:	4963      	ldr	r1, [pc, #396]	; (800d8b4 <tcp_enqueue_flags+0x1c8>)
 800d726:	4862      	ldr	r0, [pc, #392]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d728:	f003 fe9c 	bl	8011464 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d72c:	78fb      	ldrb	r3, [r7, #3]
 800d72e:	f003 0302 	and.w	r3, r3, #2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d001      	beq.n	800d73a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d736:	2301      	movs	r3, #1
 800d738:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d73a:	7ffb      	ldrb	r3, [r7, #31]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 0304 	and.w	r3, r3, #4
 800d744:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d74e:	4619      	mov	r1, r3
 800d750:	2036      	movs	r0, #54	; 0x36
 800d752:	f7fb f961 	bl	8008a18 <pbuf_alloc>
 800d756:	6138      	str	r0, [r7, #16]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d109      	bne.n	800d772 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	8b5b      	ldrh	r3, [r3, #26]
 800d762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d766:	b29a      	uxth	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d76c:	f04f 33ff 	mov.w	r3, #4294967295
 800d770:	e095      	b.n	800d89e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	895a      	ldrh	r2, [r3, #10]
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	b29b      	uxth	r3, r3
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d206      	bcs.n	800d78c <tcp_enqueue_flags+0xa0>
 800d77e:	4b4a      	ldr	r3, [pc, #296]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d780:	f240 4239 	movw	r2, #1081	; 0x439
 800d784:	494c      	ldr	r1, [pc, #304]	; (800d8b8 <tcp_enqueue_flags+0x1cc>)
 800d786:	484a      	ldr	r0, [pc, #296]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d788:	f003 fe6c 	bl	8011464 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d790:	78fa      	ldrb	r2, [r7, #3]
 800d792:	7ffb      	ldrb	r3, [r7, #31]
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	460b      	mov	r3, r1
 800d798:	6939      	ldr	r1, [r7, #16]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff fd70 	bl	800d280 <tcp_create_segment>
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d109      	bne.n	800d7bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8b5b      	ldrh	r3, [r3, #26]
 800d7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ba:	e070      	b.n	800d89e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f003 0303 	and.w	r3, r3, #3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d006      	beq.n	800d7d6 <tcp_enqueue_flags+0xea>
 800d7c8:	4b37      	ldr	r3, [pc, #220]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d7ca:	f240 4242 	movw	r2, #1090	; 0x442
 800d7ce:	493b      	ldr	r1, [pc, #236]	; (800d8bc <tcp_enqueue_flags+0x1d0>)
 800d7d0:	4837      	ldr	r0, [pc, #220]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d7d2:	f003 fe47 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	891b      	ldrh	r3, [r3, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d006      	beq.n	800d7ec <tcp_enqueue_flags+0x100>
 800d7de:	4b32      	ldr	r3, [pc, #200]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d7e0:	f240 4243 	movw	r2, #1091	; 0x443
 800d7e4:	4936      	ldr	r1, [pc, #216]	; (800d8c0 <tcp_enqueue_flags+0x1d4>)
 800d7e6:	4832      	ldr	r0, [pc, #200]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d7e8:	f003 fe3c 	bl	8011464 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7fa:	e00d      	b.n	800d818 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d800:	61bb      	str	r3, [r7, #24]
 800d802:	e002      	b.n	800d80a <tcp_enqueue_flags+0x11e>
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	61bb      	str	r3, [r7, #24]
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1f8      	bne.n	800d804 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	f003 0302 	and.w	r3, r3, #2
 800d826:	2b00      	cmp	r3, #0
 800d828:	d104      	bne.n	800d834 <tcp_enqueue_flags+0x148>
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d83e:	78fb      	ldrb	r3, [r7, #3]
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	8b5b      	ldrh	r3, [r3, #26]
 800d84c:	f043 0320 	orr.w	r3, r3, #32
 800d850:	b29a      	uxth	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fb fc48 	bl	80090f0 <pbuf_clen>
 800d860:	4603      	mov	r3, r0
 800d862:	461a      	mov	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d86a:	4413      	add	r3, r2
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00e      	beq.n	800d89c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <tcp_enqueue_flags+0x1b0>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_enqueue_flags+0x1b0>
 800d88e:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <tcp_enqueue_flags+0x1bc>)
 800d890:	f240 4265 	movw	r2, #1125	; 0x465
 800d894:	490b      	ldr	r1, [pc, #44]	; (800d8c4 <tcp_enqueue_flags+0x1d8>)
 800d896:	4806      	ldr	r0, [pc, #24]	; (800d8b0 <tcp_enqueue_flags+0x1c4>)
 800d898:	f003 fde4 	bl	8011464 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	08013ab8 	.word	0x08013ab8
 800d8ac:	08013edc 	.word	0x08013edc
 800d8b0:	08013b0c 	.word	0x08013b0c
 800d8b4:	08013f34 	.word	0x08013f34
 800d8b8:	08013f54 	.word	0x08013f54
 800d8bc:	08013f90 	.word	0x08013f90
 800d8c0:	08013fa8 	.word	0x08013fa8
 800d8c4:	08013fd4 	.word	0x08013fd4

0800d8c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d8c8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ca:	b08a      	sub	sp, #40	; 0x28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <tcp_output+0x1c>
 800d8d6:	4b8a      	ldr	r3, [pc, #552]	; (800db00 <tcp_output+0x238>)
 800d8d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d8dc:	4989      	ldr	r1, [pc, #548]	; (800db04 <tcp_output+0x23c>)
 800d8de:	488a      	ldr	r0, [pc, #552]	; (800db08 <tcp_output+0x240>)
 800d8e0:	f003 fdc0 	bl	8011464 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d106      	bne.n	800d8fa <tcp_output+0x32>
 800d8ec:	4b84      	ldr	r3, [pc, #528]	; (800db00 <tcp_output+0x238>)
 800d8ee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d8f2:	4986      	ldr	r1, [pc, #536]	; (800db0c <tcp_output+0x244>)
 800d8f4:	4884      	ldr	r0, [pc, #528]	; (800db08 <tcp_output+0x240>)
 800d8f6:	f003 fdb5 	bl	8011464 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d8fa:	4b85      	ldr	r3, [pc, #532]	; (800db10 <tcp_output+0x248>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	429a      	cmp	r2, r3
 800d902:	d101      	bne.n	800d908 <tcp_output+0x40>
    return ERR_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	e1ce      	b.n	800dca6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d914:	4293      	cmp	r3, r2
 800d916:	bf28      	it	cs
 800d918:	4613      	movcs	r3, r2
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d922:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10b      	bne.n	800d942 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	8b5b      	ldrh	r3, [r3, #26]
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	f000 81aa 	beq.w	800dc8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fdcb 	bl	800e4d4 <tcp_send_empty_ack>
 800d93e:	4603      	mov	r3, r0
 800d940:	e1b1      	b.n	800dca6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3304      	adds	r3, #4
 800d948:	461a      	mov	r2, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff fc7c 	bl	800d248 <tcp_route>
 800d950:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d102      	bne.n	800d95e <tcp_output+0x96>
    return ERR_RTE;
 800d958:	f06f 0303 	mvn.w	r3, #3
 800d95c:	e1a3      	b.n	800dca6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d003      	beq.n	800d96c <tcp_output+0xa4>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d111      	bne.n	800d990 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <tcp_output+0xb0>
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	3304      	adds	r3, #4
 800d976:	e000      	b.n	800d97a <tcp_output+0xb2>
 800d978:	2300      	movs	r3, #0
 800d97a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <tcp_output+0xc0>
      return ERR_RTE;
 800d982:	f06f 0303 	mvn.w	r3, #3
 800d986:	e18e      	b.n	800dca6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	f7fa f8d6 	bl	8007b48 <lwip_htonl>
 800d99c:	4602      	mov	r2, r0
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a6:	8912      	ldrh	r2, [r2, #8]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	69ba      	ldr	r2, [r7, #24]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d227      	bcs.n	800da00 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d114      	bne.n	800d9e8 <tcp_output+0x120>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d110      	bne.n	800d9e8 <tcp_output+0x120>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10b      	bne.n	800d9e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8b5b      	ldrh	r3, [r3, #26]
 800d9ec:	f003 0302 	and.w	r3, r3, #2
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 814d 	beq.w	800dc90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fd6c 	bl	800e4d4 <tcp_send_empty_ack>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	e152      	b.n	800dca6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 811c 	beq.w	800dc4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800da16:	e002      	b.n	800da1e <tcp_output+0x156>
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	623b      	str	r3, [r7, #32]
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1f8      	bne.n	800da18 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800da26:	e112      	b.n	800dc4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	899b      	ldrh	r3, [r3, #12]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	4618      	mov	r0, r3
 800da32:	f7fa f874 	bl	8007b1e <lwip_htons>
 800da36:	4603      	mov	r3, r0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f003 0304 	and.w	r3, r3, #4
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d006      	beq.n	800da50 <tcp_output+0x188>
 800da42:	4b2f      	ldr	r3, [pc, #188]	; (800db00 <tcp_output+0x238>)
 800da44:	f240 5236 	movw	r2, #1334	; 0x536
 800da48:	4932      	ldr	r1, [pc, #200]	; (800db14 <tcp_output+0x24c>)
 800da4a:	482f      	ldr	r0, [pc, #188]	; (800db08 <tcp_output+0x240>)
 800da4c:	f003 fd0a 	bl	8011464 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da54:	2b00      	cmp	r3, #0
 800da56:	d01f      	beq.n	800da98 <tcp_output+0x1d0>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8b5b      	ldrh	r3, [r3, #26]
 800da5c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800da60:	2b00      	cmp	r3, #0
 800da62:	d119      	bne.n	800da98 <tcp_output+0x1d0>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <tcp_output+0x1bc>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d110      	bne.n	800da98 <tcp_output+0x1d0>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da7a:	891a      	ldrh	r2, [r3, #8]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da80:	429a      	cmp	r2, r3
 800da82:	d209      	bcs.n	800da98 <tcp_output+0x1d0>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d004      	beq.n	800da98 <tcp_output+0x1d0>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da94:	2b08      	cmp	r3, #8
 800da96:	d901      	bls.n	800da9c <tcp_output+0x1d4>
 800da98:	2301      	movs	r3, #1
 800da9a:	e000      	b.n	800da9e <tcp_output+0x1d6>
 800da9c:	2300      	movs	r3, #0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8b5b      	ldrh	r3, [r3, #26]
 800daa6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 80e4 	beq.w	800dc78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	7d1b      	ldrb	r3, [r3, #20]
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d00d      	beq.n	800dad4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	899b      	ldrh	r3, [r3, #12]
 800dabe:	b29c      	uxth	r4, r3
 800dac0:	2010      	movs	r0, #16
 800dac2:	f7fa f82c 	bl	8007b1e <lwip_htons>
 800dac6:	4603      	mov	r3, r0
 800dac8:	461a      	mov	r2, r3
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	4322      	orrs	r2, r4
 800dad0:	b292      	uxth	r2, r2
 800dad2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dada:	f000 f909 	bl	800dcf0 <tcp_output_segment>
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d016      	beq.n	800db18 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	8b5b      	ldrh	r3, [r3, #26]
 800daee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	835a      	strh	r2, [r3, #26]
      return err;
 800daf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafc:	e0d3      	b.n	800dca6 <tcp_output+0x3de>
 800dafe:	bf00      	nop
 800db00:	08013ab8 	.word	0x08013ab8
 800db04:	08013ffc 	.word	0x08013ffc
 800db08:	08013b0c 	.word	0x08013b0c
 800db0c:	08014014 	.word	0x08014014
 800db10:	20008d50 	.word	0x20008d50
 800db14:	0801403c 	.word	0x0801403c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7d1b      	ldrb	r3, [r3, #20]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d006      	beq.n	800db36 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8b5b      	ldrh	r3, [r3, #26]
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	b29a      	uxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fa f803 	bl	8007b48 <lwip_htonl>
 800db42:	4604      	mov	r4, r0
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	891b      	ldrh	r3, [r3, #8]
 800db48:	461d      	mov	r5, r3
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	899b      	ldrh	r3, [r3, #12]
 800db50:	b29b      	uxth	r3, r3
 800db52:	4618      	mov	r0, r3
 800db54:	f7f9 ffe3 	bl	8007b1e <lwip_htons>
 800db58:	4603      	mov	r3, r0
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <tcp_output+0x2a0>
 800db64:	2301      	movs	r3, #1
 800db66:	e000      	b.n	800db6a <tcp_output+0x2a2>
 800db68:	2300      	movs	r3, #0
 800db6a:	442b      	add	r3, r5
 800db6c:	4423      	add	r3, r4
 800db6e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	da02      	bge.n	800db82 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	891b      	ldrh	r3, [r3, #8]
 800db86:	461c      	mov	r4, r3
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	899b      	ldrh	r3, [r3, #12]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4618      	mov	r0, r3
 800db92:	f7f9 ffc4 	bl	8007b1e <lwip_htons>
 800db96:	4603      	mov	r3, r0
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0303 	and.w	r3, r3, #3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <tcp_output+0x2de>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <tcp_output+0x2e0>
 800dba6:	2300      	movs	r3, #0
 800dba8:	4423      	add	r3, r4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d049      	beq.n	800dc42 <tcp_output+0x37a>
      seg->next = NULL;
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d105      	bne.n	800dbc8 <tcp_output+0x300>
        pcb->unacked = seg;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbc0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	623b      	str	r3, [r7, #32]
 800dbc6:	e03f      	b.n	800dc48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7f9 ffba 	bl	8007b48 <lwip_htonl>
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7f9 ffb3 	bl	8007b48 <lwip_htonl>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	1ae3      	subs	r3, r4, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da24      	bge.n	800dc34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	3370      	adds	r3, #112	; 0x70
 800dbee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dbf0:	e002      	b.n	800dbf8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d011      	beq.n	800dc24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7f9 ff9d 	bl	8007b48 <lwip_htonl>
 800dc0e:	4604      	mov	r4, r0
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7f9 ff96 	bl	8007b48 <lwip_htonl>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dbe6      	blt.n	800dbf2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	e009      	b.n	800dc48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	623b      	str	r3, [r7, #32]
 800dc40:	e002      	b.n	800dc48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800dc42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc44:	f7fc fc3f 	bl	800a4c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d012      	beq.n	800dc7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7f9 ff74 	bl	8007b48 <lwip_htonl>
 800dc60:	4602      	mov	r2, r0
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6a:	8912      	ldrh	r2, [r2, #8]
 800dc6c:	4413      	add	r3, r2
  while (seg != NULL &&
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	f4bf aed9 	bcs.w	800da28 <tcp_output+0x160>
 800dc76:	e000      	b.n	800dc7a <tcp_output+0x3b2>
      break;
 800dc78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d108      	bne.n	800dc94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800dc8a:	e004      	b.n	800dc96 <tcp_output+0x3ce>
    goto output_done;
 800dc8c:	bf00      	nop
 800dc8e:	e002      	b.n	800dc96 <tcp_output+0x3ce>
    goto output_done;
 800dc90:	bf00      	nop
 800dc92:	e000      	b.n	800dc96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800dc94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	8b5b      	ldrh	r3, [r3, #26]
 800dc9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3728      	adds	r7, #40	; 0x28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bdb0      	pop	{r4, r5, r7, pc}
 800dcae:	bf00      	nop

0800dcb0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d106      	bne.n	800dccc <tcp_output_segment_busy+0x1c>
 800dcbe:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <tcp_output_segment_busy+0x34>)
 800dcc0:	f240 529a 	movw	r2, #1434	; 0x59a
 800dcc4:	4908      	ldr	r1, [pc, #32]	; (800dce8 <tcp_output_segment_busy+0x38>)
 800dcc6:	4809      	ldr	r0, [pc, #36]	; (800dcec <tcp_output_segment_busy+0x3c>)
 800dcc8:	f003 fbcc 	bl	8011464 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	7b9b      	ldrb	r3, [r3, #14]
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d001      	beq.n	800dcda <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e000      	b.n	800dcdc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	08013ab8 	.word	0x08013ab8
 800dce8:	08014054 	.word	0x08014054
 800dcec:	08013b0c 	.word	0x08013b0c

0800dcf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dcf0:	b5b0      	push	{r4, r5, r7, lr}
 800dcf2:	b08c      	sub	sp, #48	; 0x30
 800dcf4:	af04      	add	r7, sp, #16
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <tcp_output_segment+0x20>
 800dd02:	4b64      	ldr	r3, [pc, #400]	; (800de94 <tcp_output_segment+0x1a4>)
 800dd04:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dd08:	4963      	ldr	r1, [pc, #396]	; (800de98 <tcp_output_segment+0x1a8>)
 800dd0a:	4864      	ldr	r0, [pc, #400]	; (800de9c <tcp_output_segment+0x1ac>)
 800dd0c:	f003 fbaa 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <tcp_output_segment+0x34>
 800dd16:	4b5f      	ldr	r3, [pc, #380]	; (800de94 <tcp_output_segment+0x1a4>)
 800dd18:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dd1c:	4960      	ldr	r1, [pc, #384]	; (800dea0 <tcp_output_segment+0x1b0>)
 800dd1e:	485f      	ldr	r0, [pc, #380]	; (800de9c <tcp_output_segment+0x1ac>)
 800dd20:	f003 fba0 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <tcp_output_segment+0x48>
 800dd2a:	4b5a      	ldr	r3, [pc, #360]	; (800de94 <tcp_output_segment+0x1a4>)
 800dd2c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dd30:	495c      	ldr	r1, [pc, #368]	; (800dea4 <tcp_output_segment+0x1b4>)
 800dd32:	485a      	ldr	r0, [pc, #360]	; (800de9c <tcp_output_segment+0x1ac>)
 800dd34:	f003 fb96 	bl	8011464 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ffb9 	bl	800dcb0 <tcp_output_segment_busy>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	e0a1      	b.n	800de8c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	68dc      	ldr	r4, [r3, #12]
 800dd50:	4610      	mov	r0, r2
 800dd52:	f7f9 fef9 	bl	8007b48 <lwip_htonl>
 800dd56:	4603      	mov	r3, r0
 800dd58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	68dc      	ldr	r4, [r3, #12]
 800dd62:	4610      	mov	r0, r2
 800dd64:	f7f9 fedb 	bl	8007b1e <lwip_htons>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dd74:	441a      	add	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	3314      	adds	r3, #20
 800dd80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	7a9b      	ldrb	r3, [r3, #10]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d015      	beq.n	800ddba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	3304      	adds	r3, #4
 800dd92:	461a      	mov	r2, r3
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dd9a:	f7fc fe8b 	bl	800aab4 <tcp_eff_send_mss_netif>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dda2:	8b7b      	ldrh	r3, [r7, #26]
 800dda4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f9 fecd 	bl	8007b48 <lwip_htonl>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	da02      	bge.n	800ddca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10c      	bne.n	800ddec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ddd2:	4b35      	ldr	r3, [pc, #212]	; (800dea8 <tcp_output_segment+0x1b8>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f9 feb1 	bl	8007b48 <lwip_htonl>
 800dde6:	4602      	mov	r2, r0
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	68da      	ldr	r2, [r3, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	8959      	ldrh	r1, [r3, #10]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	8b3a      	ldrh	r2, [r7, #24]
 800de06:	1a8a      	subs	r2, r1, r2
 800de08:	b292      	uxth	r2, r2
 800de0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	8919      	ldrh	r1, [r3, #8]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	8b3a      	ldrh	r2, [r7, #24]
 800de18:	1a8a      	subs	r2, r1, r2
 800de1a:	b292      	uxth	r2, r2
 800de1c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	68d2      	ldr	r2, [r2, #12]
 800de26:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	741a      	strb	r2, [r3, #16]
 800de30:	2200      	movs	r2, #0
 800de32:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	7a9b      	ldrb	r3, [r3, #10]
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <tcp_output_segment+0x158>
 800de44:	2318      	movs	r3, #24
 800de46:	e000      	b.n	800de4a <tcp_output_segment+0x15a>
 800de48:	2314      	movs	r3, #20
 800de4a:	4413      	add	r3, r2
 800de4c:	69fa      	ldr	r2, [r7, #28]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d006      	beq.n	800de60 <tcp_output_segment+0x170>
 800de52:	4b10      	ldr	r3, [pc, #64]	; (800de94 <tcp_output_segment+0x1a4>)
 800de54:	f240 621c 	movw	r2, #1564	; 0x61c
 800de58:	4914      	ldr	r1, [pc, #80]	; (800deac <tcp_output_segment+0x1bc>)
 800de5a:	4810      	ldr	r0, [pc, #64]	; (800de9c <tcp_output_segment+0x1ac>)
 800de5c:	f003 fb02 	bl	8011464 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6858      	ldr	r0, [r3, #4]
 800de64:	68b9      	ldr	r1, [r7, #8]
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	1d1c      	adds	r4, r3, #4
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	7add      	ldrb	r5, [r3, #11]
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	7a9b      	ldrb	r3, [r3, #10]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	9202      	str	r2, [sp, #8]
 800de76:	2206      	movs	r2, #6
 800de78:	9201      	str	r2, [sp, #4]
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	462b      	mov	r3, r5
 800de7e:	4622      	mov	r2, r4
 800de80:	f002 f9c2 	bl	8010208 <ip4_output_if>
 800de84:	4603      	mov	r3, r0
 800de86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800de88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3720      	adds	r7, #32
 800de90:	46bd      	mov	sp, r7
 800de92:	bdb0      	pop	{r4, r5, r7, pc}
 800de94:	08013ab8 	.word	0x08013ab8
 800de98:	0801407c 	.word	0x0801407c
 800de9c:	08013b0c 	.word	0x08013b0c
 800dea0:	0801409c 	.word	0x0801409c
 800dea4:	080140bc 	.word	0x080140bc
 800dea8:	20008d04 	.word	0x20008d04
 800deac:	080140e0 	.word	0x080140e0

0800deb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800deb0:	b5b0      	push	{r4, r5, r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <tcp_rexmit_rto_prepare+0x1c>
 800debe:	4b31      	ldr	r3, [pc, #196]	; (800df84 <tcp_rexmit_rto_prepare+0xd4>)
 800dec0:	f240 6263 	movw	r2, #1635	; 0x663
 800dec4:	4930      	ldr	r1, [pc, #192]	; (800df88 <tcp_rexmit_rto_prepare+0xd8>)
 800dec6:	4831      	ldr	r0, [pc, #196]	; (800df8c <tcp_rexmit_rto_prepare+0xdc>)
 800dec8:	f003 facc 	bl	8011464 <iprintf>

  if (pcb->unacked == NULL) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d102      	bne.n	800deda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ded4:	f06f 0305 	mvn.w	r3, #5
 800ded8:	e050      	b.n	800df7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	60fb      	str	r3, [r7, #12]
 800dee0:	e00b      	b.n	800defa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f7ff fee4 	bl	800dcb0 <tcp_output_segment_busy>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800deee:	f06f 0305 	mvn.w	r3, #5
 800def2:	e043      	b.n	800df7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1ef      	bne.n	800dee2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff fed4 	bl	800dcb0 <tcp_output_segment_busy>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800df0e:	f06f 0305 	mvn.w	r3, #5
 800df12:	e033      	b.n	800df7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	8b5b      	ldrh	r3, [r3, #26]
 800df2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df32:	b29a      	uxth	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f9 fe02 	bl	8007b48 <lwip_htonl>
 800df44:	4604      	mov	r4, r0
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	891b      	ldrh	r3, [r3, #8]
 800df4a:	461d      	mov	r5, r3
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	899b      	ldrh	r3, [r3, #12]
 800df52:	b29b      	uxth	r3, r3
 800df54:	4618      	mov	r0, r3
 800df56:	f7f9 fde2 	bl	8007b1e <lwip_htons>
 800df5a:	4603      	mov	r3, r0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0303 	and.w	r3, r3, #3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <tcp_rexmit_rto_prepare+0xba>
 800df66:	2301      	movs	r3, #1
 800df68:	e000      	b.n	800df6c <tcp_rexmit_rto_prepare+0xbc>
 800df6a:	2300      	movs	r3, #0
 800df6c:	442b      	add	r3, r5
 800df6e:	18e2      	adds	r2, r4, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bdb0      	pop	{r4, r5, r7, pc}
 800df84:	08013ab8 	.word	0x08013ab8
 800df88:	080140f4 	.word	0x080140f4
 800df8c:	08013b0c 	.word	0x08013b0c

0800df90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <tcp_rexmit_rto_commit+0x1c>
 800df9e:	4b0d      	ldr	r3, [pc, #52]	; (800dfd4 <tcp_rexmit_rto_commit+0x44>)
 800dfa0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dfa4:	490c      	ldr	r1, [pc, #48]	; (800dfd8 <tcp_rexmit_rto_commit+0x48>)
 800dfa6:	480d      	ldr	r0, [pc, #52]	; (800dfdc <tcp_rexmit_rto_commit+0x4c>)
 800dfa8:	f003 fa5c 	bl	8011464 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfb2:	2bff      	cmp	r3, #255	; 0xff
 800dfb4:	d007      	beq.n	800dfc6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff fc7e 	bl	800d8c8 <tcp_output>
}
 800dfcc:	bf00      	nop
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	08013ab8 	.word	0x08013ab8
 800dfd8:	08014118 	.word	0x08014118
 800dfdc:	08013b0c 	.word	0x08013b0c

0800dfe0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_rexmit_rto+0x1c>
 800dfee:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <tcp_rexmit_rto+0x38>)
 800dff0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dff4:	4909      	ldr	r1, [pc, #36]	; (800e01c <tcp_rexmit_rto+0x3c>)
 800dff6:	480a      	ldr	r0, [pc, #40]	; (800e020 <tcp_rexmit_rto+0x40>)
 800dff8:	f003 fa34 	bl	8011464 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff57 	bl	800deb0 <tcp_rexmit_rto_prepare>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ffc1 	bl	800df90 <tcp_rexmit_rto_commit>
  }
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	08013ab8 	.word	0x08013ab8
 800e01c:	0801413c 	.word	0x0801413c
 800e020:	08013b0c 	.word	0x08013b0c

0800e024 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <tcp_rexmit+0x1c>
 800e032:	4b2f      	ldr	r3, [pc, #188]	; (800e0f0 <tcp_rexmit+0xcc>)
 800e034:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e038:	492e      	ldr	r1, [pc, #184]	; (800e0f4 <tcp_rexmit+0xd0>)
 800e03a:	482f      	ldr	r0, [pc, #188]	; (800e0f8 <tcp_rexmit+0xd4>)
 800e03c:	f003 fa12 	bl	8011464 <iprintf>

  if (pcb->unacked == NULL) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e048:	f06f 0305 	mvn.w	r3, #5
 800e04c:	e04c      	b.n	800e0e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e052:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e054:	68b8      	ldr	r0, [r7, #8]
 800e056:	f7ff fe2b 	bl	800dcb0 <tcp_output_segment_busy>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e060:	f06f 0305 	mvn.w	r3, #5
 800e064:	e040      	b.n	800e0e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	336c      	adds	r3, #108	; 0x6c
 800e072:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e074:	e002      	b.n	800e07c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d011      	beq.n	800e0a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f9 fd5b 	bl	8007b48 <lwip_htonl>
 800e092:	4604      	mov	r4, r0
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f9 fd54 	bl	8007b48 <lwip_htonl>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dbe6      	blt.n	800e076 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d103      	bne.n	800e0c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0cc:	2bff      	cmp	r3, #255	; 0xff
 800e0ce:	d007      	beq.n	800e0e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3714      	adds	r7, #20
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd90      	pop	{r4, r7, pc}
 800e0f0:	08013ab8 	.word	0x08013ab8
 800e0f4:	08014158 	.word	0x08014158
 800e0f8:	08013b0c 	.word	0x08013b0c

0800e0fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <tcp_rexmit_fast+0x1c>
 800e10a:	4b2a      	ldr	r3, [pc, #168]	; (800e1b4 <tcp_rexmit_fast+0xb8>)
 800e10c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e110:	4929      	ldr	r1, [pc, #164]	; (800e1b8 <tcp_rexmit_fast+0xbc>)
 800e112:	482a      	ldr	r0, [pc, #168]	; (800e1bc <tcp_rexmit_fast+0xc0>)
 800e114:	f003 f9a6 	bl	8011464 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d044      	beq.n	800e1aa <tcp_rexmit_fast+0xae>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	8b5b      	ldrh	r3, [r3, #26]
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d13e      	bne.n	800e1aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff ff79 	bl	800e024 <tcp_rexmit>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d138      	bne.n	800e1aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e144:	4293      	cmp	r3, r2
 800e146:	bf28      	it	cs
 800e148:	4613      	movcs	r3, r2
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	0fda      	lsrs	r2, r3, #31
 800e14e:	4413      	add	r3, r2
 800e150:	105b      	asrs	r3, r3, #1
 800e152:	b29a      	uxth	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e160:	461a      	mov	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	429a      	cmp	r2, r3
 800e16a:	d206      	bcs.n	800e17a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	b29a      	uxth	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e184:	4619      	mov	r1, r3
 800e186:	0049      	lsls	r1, r1, #1
 800e188:	440b      	add	r3, r1
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	4413      	add	r3, r2
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	8b5b      	ldrh	r3, [r3, #26]
 800e19a:	f043 0304 	orr.w	r3, r3, #4
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e1aa:	bf00      	nop
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	08013ab8 	.word	0x08013ab8
 800e1b8:	08014170 	.word	0x08014170
 800e1bc:	08013b0c 	.word	0x08013b0c

0800e1c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	607b      	str	r3, [r7, #4]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	817b      	strh	r3, [r7, #10]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e1d2:	897a      	ldrh	r2, [r7, #10]
 800e1d4:	893b      	ldrh	r3, [r7, #8]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	3314      	adds	r3, #20
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	2022      	movs	r0, #34	; 0x22
 800e1e6:	f7fa fc17 	bl	8008a18 <pbuf_alloc>
 800e1ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d04d      	beq.n	800e28e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e1f2:	897b      	ldrh	r3, [r7, #10]
 800e1f4:	3313      	adds	r3, #19
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	8952      	ldrh	r2, [r2, #10]
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	db06      	blt.n	800e20c <tcp_output_alloc_header_common+0x4c>
 800e1fe:	4b26      	ldr	r3, [pc, #152]	; (800e298 <tcp_output_alloc_header_common+0xd8>)
 800e200:	f240 7223 	movw	r2, #1827	; 0x723
 800e204:	4925      	ldr	r1, [pc, #148]	; (800e29c <tcp_output_alloc_header_common+0xdc>)
 800e206:	4826      	ldr	r0, [pc, #152]	; (800e2a0 <tcp_output_alloc_header_common+0xe0>)
 800e208:	f003 f92c 	bl	8011464 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e212:	8c3b      	ldrh	r3, [r7, #32]
 800e214:	4618      	mov	r0, r3
 800e216:	f7f9 fc82 	bl	8007b1e <lwip_htons>
 800e21a:	4603      	mov	r3, r0
 800e21c:	461a      	mov	r2, r3
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e224:	4618      	mov	r0, r3
 800e226:	f7f9 fc7a 	bl	8007b1e <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	461a      	mov	r2, r3
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7f9 fc85 	bl	8007b48 <lwip_htonl>
 800e23e:	4602      	mov	r2, r0
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e244:	897b      	ldrh	r3, [r7, #10]
 800e246:	089b      	lsrs	r3, r3, #2
 800e248:	b29b      	uxth	r3, r3
 800e24a:	3305      	adds	r3, #5
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	031b      	lsls	r3, r3, #12
 800e250:	b29a      	uxth	r2, r3
 800e252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e256:	b29b      	uxth	r3, r3
 800e258:	4313      	orrs	r3, r2
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f9 fc5e 	bl	8007b1e <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	461a      	mov	r2, r3
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e26a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f9 fc56 	bl	8007b1e <lwip_htons>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2200      	movs	r2, #0
 800e27e:	741a      	strb	r2, [r3, #16]
 800e280:	2200      	movs	r2, #0
 800e282:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	2200      	movs	r2, #0
 800e288:	749a      	strb	r2, [r3, #18]
 800e28a:	2200      	movs	r2, #0
 800e28c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e28e:	697b      	ldr	r3, [r7, #20]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	08013ab8 	.word	0x08013ab8
 800e29c:	08014190 	.word	0x08014190
 800e2a0:	08013b0c 	.word	0x08013b0c

0800e2a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e2a4:	b5b0      	push	{r4, r5, r7, lr}
 800e2a6:	b08a      	sub	sp, #40	; 0x28
 800e2a8:	af04      	add	r7, sp, #16
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	817b      	strh	r3, [r7, #10]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d106      	bne.n	800e2ca <tcp_output_alloc_header+0x26>
 800e2bc:	4b15      	ldr	r3, [pc, #84]	; (800e314 <tcp_output_alloc_header+0x70>)
 800e2be:	f240 7242 	movw	r2, #1858	; 0x742
 800e2c2:	4915      	ldr	r1, [pc, #84]	; (800e318 <tcp_output_alloc_header+0x74>)
 800e2c4:	4815      	ldr	r0, [pc, #84]	; (800e31c <tcp_output_alloc_header+0x78>)
 800e2c6:	f003 f8cd 	bl	8011464 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	8adb      	ldrh	r3, [r3, #22]
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	8b12      	ldrh	r2, [r2, #24]
 800e2d6:	68f9      	ldr	r1, [r7, #12]
 800e2d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e2da:	893d      	ldrh	r5, [r7, #8]
 800e2dc:	897c      	ldrh	r4, [r7, #10]
 800e2de:	9103      	str	r1, [sp, #12]
 800e2e0:	2110      	movs	r1, #16
 800e2e2:	9102      	str	r1, [sp, #8]
 800e2e4:	9201      	str	r2, [sp, #4]
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	f7ff ff67 	bl	800e1c0 <tcp_output_alloc_header_common>
 800e2f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d006      	beq.n	800e308 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e302:	441a      	add	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e308:	697b      	ldr	r3, [r7, #20]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bdb0      	pop	{r4, r5, r7, pc}
 800e312:	bf00      	nop
 800e314:	08013ab8 	.word	0x08013ab8
 800e318:	080141c0 	.word	0x080141c0
 800e31c:	08013b0c 	.word	0x08013b0c

0800e320 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	4611      	mov	r1, r2
 800e32c:	461a      	mov	r2, r3
 800e32e:	460b      	mov	r3, r1
 800e330:	71fb      	strb	r3, [r7, #7]
 800e332:	4613      	mov	r3, r2
 800e334:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <tcp_output_fill_options+0x2e>
 800e340:	4b12      	ldr	r3, [pc, #72]	; (800e38c <tcp_output_fill_options+0x6c>)
 800e342:	f240 7256 	movw	r2, #1878	; 0x756
 800e346:	4912      	ldr	r1, [pc, #72]	; (800e390 <tcp_output_fill_options+0x70>)
 800e348:	4812      	ldr	r0, [pc, #72]	; (800e394 <tcp_output_fill_options+0x74>)
 800e34a:	f003 f88b 	bl	8011464 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	3314      	adds	r3, #20
 800e358:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e35a:	8bfb      	ldrh	r3, [r7, #30]
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	461a      	mov	r2, r3
 800e360:	79fb      	ldrb	r3, [r7, #7]
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	f003 0304 	and.w	r3, r3, #4
 800e368:	4413      	add	r3, r2
 800e36a:	3314      	adds	r3, #20
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	4413      	add	r3, r2
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	429a      	cmp	r2, r3
 800e374:	d006      	beq.n	800e384 <tcp_output_fill_options+0x64>
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <tcp_output_fill_options+0x6c>)
 800e378:	f240 7275 	movw	r2, #1909	; 0x775
 800e37c:	4906      	ldr	r1, [pc, #24]	; (800e398 <tcp_output_fill_options+0x78>)
 800e37e:	4805      	ldr	r0, [pc, #20]	; (800e394 <tcp_output_fill_options+0x74>)
 800e380:	f003 f870 	bl	8011464 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e384:	bf00      	nop
 800e386:	3720      	adds	r7, #32
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	08013ab8 	.word	0x08013ab8
 800e390:	080141e8 	.word	0x080141e8
 800e394:	08013b0c 	.word	0x08013b0c
 800e398:	080140e0 	.word	0x080140e0

0800e39c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08a      	sub	sp, #40	; 0x28
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d106      	bne.n	800e3be <tcp_output_control_segment+0x22>
 800e3b0:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <tcp_output_control_segment+0x88>)
 800e3b2:	f240 7287 	movw	r2, #1927	; 0x787
 800e3b6:	491c      	ldr	r1, [pc, #112]	; (800e428 <tcp_output_control_segment+0x8c>)
 800e3b8:	481c      	ldr	r0, [pc, #112]	; (800e42c <tcp_output_control_segment+0x90>)
 800e3ba:	f003 f853 	bl	8011464 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	6879      	ldr	r1, [r7, #4]
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7fe ff40 	bl	800d248 <tcp_route>
 800e3c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d102      	bne.n	800e3d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e3d0:	23fc      	movs	r3, #252	; 0xfc
 800e3d2:	75fb      	strb	r3, [r7, #23]
 800e3d4:	e01c      	b.n	800e410 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d006      	beq.n	800e3ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	7adb      	ldrb	r3, [r3, #11]
 800e3e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	7a9b      	ldrb	r3, [r3, #10]
 800e3e6:	757b      	strb	r3, [r7, #21]
 800e3e8:	e003      	b.n	800e3f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e3ea:	23ff      	movs	r3, #255	; 0xff
 800e3ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e3f2:	7dba      	ldrb	r2, [r7, #22]
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	9302      	str	r3, [sp, #8]
 800e3f8:	2306      	movs	r3, #6
 800e3fa:	9301      	str	r3, [sp, #4]
 800e3fc:	7d7b      	ldrb	r3, [r7, #21]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	4613      	mov	r3, r2
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	6879      	ldr	r1, [r7, #4]
 800e406:	68b8      	ldr	r0, [r7, #8]
 800e408:	f001 fefe 	bl	8010208 <ip4_output_if>
 800e40c:	4603      	mov	r3, r0
 800e40e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e410:	68b8      	ldr	r0, [r7, #8]
 800e412:	f7fa fde5 	bl	8008fe0 <pbuf_free>
  return err;
 800e416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3718      	adds	r7, #24
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	08013ab8 	.word	0x08013ab8
 800e428:	08014210 	.word	0x08014210
 800e42c:	08013b0c 	.word	0x08013b0c

0800e430 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b08b      	sub	sp, #44	; 0x2c
 800e434:	af04      	add	r7, sp, #16
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d106      	bne.n	800e452 <tcp_rst+0x22>
 800e444:	4b1f      	ldr	r3, [pc, #124]	; (800e4c4 <tcp_rst+0x94>)
 800e446:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e44a:	491f      	ldr	r1, [pc, #124]	; (800e4c8 <tcp_rst+0x98>)
 800e44c:	481f      	ldr	r0, [pc, #124]	; (800e4cc <tcp_rst+0x9c>)
 800e44e:	f003 f809 	bl	8011464 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	2b00      	cmp	r3, #0
 800e456:	d106      	bne.n	800e466 <tcp_rst+0x36>
 800e458:	4b1a      	ldr	r3, [pc, #104]	; (800e4c4 <tcp_rst+0x94>)
 800e45a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e45e:	491c      	ldr	r1, [pc, #112]	; (800e4d0 <tcp_rst+0xa0>)
 800e460:	481a      	ldr	r0, [pc, #104]	; (800e4cc <tcp_rst+0x9c>)
 800e462:	f002 ffff 	bl	8011464 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e466:	2300      	movs	r3, #0
 800e468:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e46a:	f246 0308 	movw	r3, #24584	; 0x6008
 800e46e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e470:	7dfb      	ldrb	r3, [r7, #23]
 800e472:	b29c      	uxth	r4, r3
 800e474:	68b8      	ldr	r0, [r7, #8]
 800e476:	f7f9 fb67 	bl	8007b48 <lwip_htonl>
 800e47a:	4602      	mov	r2, r0
 800e47c:	8abb      	ldrh	r3, [r7, #20]
 800e47e:	9303      	str	r3, [sp, #12]
 800e480:	2314      	movs	r3, #20
 800e482:	9302      	str	r3, [sp, #8]
 800e484:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e486:	9301      	str	r3, [sp, #4]
 800e488:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	4613      	mov	r3, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	4621      	mov	r1, r4
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff fe94 	bl	800e1c0 <tcp_output_alloc_header_common>
 800e498:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00c      	beq.n	800e4ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	6939      	ldr	r1, [r7, #16]
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff ff3a 	bl	800e320 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	6939      	ldr	r1, [r7, #16]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7ff ff72 	bl	800e39c <tcp_output_control_segment>
 800e4b8:	e000      	b.n	800e4bc <tcp_rst+0x8c>
    return;
 800e4ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e4bc:	371c      	adds	r7, #28
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd90      	pop	{r4, r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	08013ab8 	.word	0x08013ab8
 800e4c8:	0801423c 	.word	0x0801423c
 800e4cc:	08013b0c 	.word	0x08013b0c
 800e4d0:	08014258 	.word	0x08014258

0800e4d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e4d4:	b590      	push	{r4, r7, lr}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <tcp_send_empty_ack+0x24>
 800e4ea:	4b28      	ldr	r3, [pc, #160]	; (800e58c <tcp_send_empty_ack+0xb8>)
 800e4ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e4f0:	4927      	ldr	r1, [pc, #156]	; (800e590 <tcp_send_empty_ack+0xbc>)
 800e4f2:	4828      	ldr	r0, [pc, #160]	; (800e594 <tcp_send_empty_ack+0xc0>)
 800e4f4:	f002 ffb6 	bl	8011464 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e4f8:	7dfb      	ldrb	r3, [r7, #23]
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	f003 0304 	and.w	r3, r3, #4
 800e502:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e504:	7d7b      	ldrb	r3, [r7, #21]
 800e506:	b29c      	uxth	r4, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7f9 fb1b 	bl	8007b48 <lwip_htonl>
 800e512:	4603      	mov	r3, r0
 800e514:	2200      	movs	r2, #0
 800e516:	4621      	mov	r1, r4
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff fec3 	bl	800e2a4 <tcp_output_alloc_header>
 800e51e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d109      	bne.n	800e53a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8b5b      	ldrh	r3, [r3, #26]
 800e52a:	f043 0303 	orr.w	r3, r3, #3
 800e52e:	b29a      	uxth	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e534:	f06f 0301 	mvn.w	r3, #1
 800e538:	e023      	b.n	800e582 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e53a:	7dbb      	ldrb	r3, [r7, #22]
 800e53c:	7dfa      	ldrb	r2, [r7, #23]
 800e53e:	6939      	ldr	r1, [r7, #16]
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff feed 	bl	800e320 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3304      	adds	r3, #4
 800e54c:	6939      	ldr	r1, [r7, #16]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7ff ff24 	bl	800e39c <tcp_output_control_segment>
 800e554:	4603      	mov	r3, r0
 800e556:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d007      	beq.n	800e570 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	8b5b      	ldrh	r3, [r3, #26]
 800e564:	f043 0303 	orr.w	r3, r3, #3
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	835a      	strh	r2, [r3, #26]
 800e56e:	e006      	b.n	800e57e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	8b5b      	ldrh	r3, [r3, #26]
 800e574:	f023 0303 	bic.w	r3, r3, #3
 800e578:	b29a      	uxth	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e582:	4618      	mov	r0, r3
 800e584:	371c      	adds	r7, #28
 800e586:	46bd      	mov	sp, r7
 800e588:	bd90      	pop	{r4, r7, pc}
 800e58a:	bf00      	nop
 800e58c:	08013ab8 	.word	0x08013ab8
 800e590:	08014274 	.word	0x08014274
 800e594:	08013b0c 	.word	0x08013b0c

0800e598 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e598:	b590      	push	{r4, r7, lr}
 800e59a:	b087      	sub	sp, #28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <tcp_keepalive+0x20>
 800e5aa:	4b18      	ldr	r3, [pc, #96]	; (800e60c <tcp_keepalive+0x74>)
 800e5ac:	f640 0224 	movw	r2, #2084	; 0x824
 800e5b0:	4917      	ldr	r1, [pc, #92]	; (800e610 <tcp_keepalive+0x78>)
 800e5b2:	4818      	ldr	r0, [pc, #96]	; (800e614 <tcp_keepalive+0x7c>)
 800e5b4:	f002 ff56 	bl	8011464 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	b29c      	uxth	r4, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f9 fac0 	bl	8007b48 <lwip_htonl>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff fe68 	bl	800e2a4 <tcp_output_alloc_header>
 800e5d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e0:	e010      	b.n	800e604 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	6939      	ldr	r1, [r7, #16]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff fe99 	bl	800e320 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	3304      	adds	r3, #4
 800e5f4:	6939      	ldr	r1, [r7, #16]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff fed0 	bl	800e39c <tcp_output_control_segment>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e604:	4618      	mov	r0, r3
 800e606:	371c      	adds	r7, #28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd90      	pop	{r4, r7, pc}
 800e60c:	08013ab8 	.word	0x08013ab8
 800e610:	08014294 	.word	0x08014294
 800e614:	08013b0c 	.word	0x08013b0c

0800e618 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e618:	b590      	push	{r4, r7, lr}
 800e61a:	b08b      	sub	sp, #44	; 0x2c
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e620:	2300      	movs	r3, #0
 800e622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <tcp_zero_window_probe+0x22>
 800e62c:	4b4c      	ldr	r3, [pc, #304]	; (800e760 <tcp_zero_window_probe+0x148>)
 800e62e:	f640 024f 	movw	r2, #2127	; 0x84f
 800e632:	494c      	ldr	r1, [pc, #304]	; (800e764 <tcp_zero_window_probe+0x14c>)
 800e634:	484c      	ldr	r0, [pc, #304]	; (800e768 <tcp_zero_window_probe+0x150>)
 800e636:	f002 ff15 	bl	8011464 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e63e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e640:	6a3b      	ldr	r3, [r7, #32]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	e086      	b.n	800e758 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e650:	2bff      	cmp	r3, #255	; 0xff
 800e652:	d007      	beq.n	800e664 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e65a:	3301      	adds	r3, #1
 800e65c:	b2da      	uxtb	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f9 fa56 	bl	8007b1e <lwip_htons>
 800e672:	4603      	mov	r3, r0
 800e674:	b2db      	uxtb	r3, r3
 800e676:	f003 0301 	and.w	r3, r3, #1
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d005      	beq.n	800e68a <tcp_zero_window_probe+0x72>
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	891b      	ldrh	r3, [r3, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <tcp_zero_window_probe+0x72>
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <tcp_zero_window_probe+0x74>
 800e68a:	2300      	movs	r3, #0
 800e68c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e68e:	7ffb      	ldrb	r3, [r7, #31]
 800e690:	2b00      	cmp	r3, #0
 800e692:	bf0c      	ite	eq
 800e694:	2301      	moveq	r3, #1
 800e696:	2300      	movne	r3, #0
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6a0:	b299      	uxth	r1, r3
 800e6a2:	6a3b      	ldr	r3, [r7, #32]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	8bba      	ldrh	r2, [r7, #28]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7ff fdfa 	bl	800e2a4 <tcp_output_alloc_header>
 800e6b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6bc:	e04c      	b.n	800e758 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e6c4:	7ffb      	ldrb	r3, [r7, #31]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d011      	beq.n	800e6ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	899b      	ldrh	r3, [r3, #12]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	b21b      	sxth	r3, r3
 800e6d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e6d6:	b21c      	sxth	r4, r3
 800e6d8:	2011      	movs	r0, #17
 800e6da:	f7f9 fa20 	bl	8007b1e <lwip_htons>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	b21b      	sxth	r3, r3
 800e6e2:	4323      	orrs	r3, r4
 800e6e4:	b21b      	sxth	r3, r3
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	819a      	strh	r2, [r3, #12]
 800e6ec:	e010      	b.n	800e710 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	3314      	adds	r3, #20
 800e6f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	6858      	ldr	r0, [r3, #4]
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	891a      	ldrh	r2, [r3, #8]
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	891b      	ldrh	r3, [r3, #8]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	b29b      	uxth	r3, r3
 800e708:	2201      	movs	r2, #1
 800e70a:	6939      	ldr	r1, [r7, #16]
 800e70c:	f7fa fe52 	bl	80093b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	4618      	mov	r0, r3
 800e718:	f7f9 fa16 	bl	8007b48 <lwip_htonl>
 800e71c:	4603      	mov	r3, r0
 800e71e:	3301      	adds	r3, #1
 800e720:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da02      	bge.n	800e734 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e738:	2200      	movs	r2, #0
 800e73a:	69b9      	ldr	r1, [r7, #24]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fdef 	bl	800e320 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3304      	adds	r3, #4
 800e748:	69b9      	ldr	r1, [r7, #24]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff fe26 	bl	800e39c <tcp_output_control_segment>
 800e750:	4603      	mov	r3, r0
 800e752:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e754:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	372c      	adds	r7, #44	; 0x2c
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd90      	pop	{r4, r7, pc}
 800e760:	08013ab8 	.word	0x08013ab8
 800e764:	080142b0 	.word	0x080142b0
 800e768:	08013b0c 	.word	0x08013b0c

0800e76c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e774:	f7fa ff0c 	bl	8009590 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <tcpip_tcp_timer+0x38>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d103      	bne.n	800e788 <tcpip_tcp_timer+0x1c>
 800e780:	4b09      	ldr	r3, [pc, #36]	; (800e7a8 <tcpip_tcp_timer+0x3c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d005      	beq.n	800e794 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e788:	2200      	movs	r2, #0
 800e78a:	4908      	ldr	r1, [pc, #32]	; (800e7ac <tcpip_tcp_timer+0x40>)
 800e78c:	20fa      	movs	r0, #250	; 0xfa
 800e78e:	f000 f8f3 	bl	800e978 <sys_timeout>
 800e792:	e003      	b.n	800e79c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e794:	4b06      	ldr	r3, [pc, #24]	; (800e7b0 <tcpip_tcp_timer+0x44>)
 800e796:	2200      	movs	r2, #0
 800e798:	601a      	str	r2, [r3, #0]
  }
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20008d10 	.word	0x20008d10
 800e7a8:	20008d14 	.word	0x20008d14
 800e7ac:	0800e76d 	.word	0x0800e76d
 800e7b0:	20008d5c 	.word	0x20008d5c

0800e7b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <tcp_timer_needed+0x30>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10f      	bne.n	800e7e0 <tcp_timer_needed+0x2c>
 800e7c0:	4b09      	ldr	r3, [pc, #36]	; (800e7e8 <tcp_timer_needed+0x34>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d103      	bne.n	800e7d0 <tcp_timer_needed+0x1c>
 800e7c8:	4b08      	ldr	r3, [pc, #32]	; (800e7ec <tcp_timer_needed+0x38>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d007      	beq.n	800e7e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e7d0:	4b04      	ldr	r3, [pc, #16]	; (800e7e4 <tcp_timer_needed+0x30>)
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	4905      	ldr	r1, [pc, #20]	; (800e7f0 <tcp_timer_needed+0x3c>)
 800e7da:	20fa      	movs	r0, #250	; 0xfa
 800e7dc:	f000 f8cc 	bl	800e978 <sys_timeout>
  }
}
 800e7e0:	bf00      	nop
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	20008d5c 	.word	0x20008d5c
 800e7e8:	20008d10 	.word	0x20008d10
 800e7ec:	20008d14 	.word	0x20008d14
 800e7f0:	0800e76d 	.word	0x0800e76d

0800e7f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e800:	2006      	movs	r0, #6
 800e802:	f7f9 fde1 	bl	80083c8 <memp_malloc>
 800e806:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d109      	bne.n	800e822 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d151      	bne.n	800e8b8 <sys_timeout_abs+0xc4>
 800e814:	4b2a      	ldr	r3, [pc, #168]	; (800e8c0 <sys_timeout_abs+0xcc>)
 800e816:	22be      	movs	r2, #190	; 0xbe
 800e818:	492a      	ldr	r1, [pc, #168]	; (800e8c4 <sys_timeout_abs+0xd0>)
 800e81a:	482b      	ldr	r0, [pc, #172]	; (800e8c8 <sys_timeout_abs+0xd4>)
 800e81c:	f002 fe22 	bl	8011464 <iprintf>
    return;
 800e820:	e04a      	b.n	800e8b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e83a:	4b24      	ldr	r3, [pc, #144]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d103      	bne.n	800e84a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e842:	4a22      	ldr	r2, [pc, #136]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	6013      	str	r3, [r2, #0]
    return;
 800e848:	e037      	b.n	800e8ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	4b1f      	ldr	r3, [pc, #124]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	0fdb      	lsrs	r3, r3, #31
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e862:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e86a:	4a18      	ldr	r2, [pc, #96]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	e023      	b.n	800e8ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e872:	4b16      	ldr	r3, [pc, #88]	; (800e8cc <sys_timeout_abs+0xd8>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	e01a      	b.n	800e8b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00b      	beq.n	800e89a <sys_timeout_abs+0xa6>
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	0fdb      	lsrs	r3, r3, #31
 800e890:	f003 0301 	and.w	r3, r3, #1
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	601a      	str	r2, [r3, #0]
        break;
 800e8a8:	e007      	b.n	800e8ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e1      	bne.n	800e87a <sys_timeout_abs+0x86>
 800e8b6:	e000      	b.n	800e8ba <sys_timeout_abs+0xc6>
    return;
 800e8b8:	bf00      	nop
      }
    }
  }
}
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	080142d4 	.word	0x080142d4
 800e8c4:	08014308 	.word	0x08014308
 800e8c8:	08014348 	.word	0x08014348
 800e8cc:	20008d54 	.word	0x20008d54

0800e8d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	4798      	blx	r3

  now = sys_now();
 800e8e2:	f7f9 f90b 	bl	8007afc <sys_now>
 800e8e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	; (800e92c <lwip_cyclic_timer+0x5c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	0fdb      	lsrs	r3, r3, #31
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	b2db      	uxtb	r3, r3
 800e902:	2b00      	cmp	r3, #0
 800e904:	d009      	beq.n	800e91a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	4413      	add	r3, r2
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	4907      	ldr	r1, [pc, #28]	; (800e930 <lwip_cyclic_timer+0x60>)
 800e912:	4618      	mov	r0, r3
 800e914:	f7ff ff6e 	bl	800e7f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e918:	e004      	b.n	800e924 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	4904      	ldr	r1, [pc, #16]	; (800e930 <lwip_cyclic_timer+0x60>)
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff ff68 	bl	800e7f4 <sys_timeout_abs>
}
 800e924:	bf00      	nop
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20008d58 	.word	0x20008d58
 800e930:	0800e8d1 	.word	0x0800e8d1

0800e934 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e93a:	2301      	movs	r3, #1
 800e93c:	607b      	str	r3, [r7, #4]
 800e93e:	e00e      	b.n	800e95e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e940:	4a0b      	ldr	r2, [pc, #44]	; (800e970 <sys_timeouts_init+0x3c>)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	4a08      	ldr	r2, [pc, #32]	; (800e970 <sys_timeouts_init+0x3c>)
 800e94e:	4413      	add	r3, r2
 800e950:	461a      	mov	r2, r3
 800e952:	4908      	ldr	r1, [pc, #32]	; (800e974 <sys_timeouts_init+0x40>)
 800e954:	f000 f810 	bl	800e978 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3301      	adds	r3, #1
 800e95c:	607b      	str	r3, [r7, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b02      	cmp	r3, #2
 800e962:	d9ed      	bls.n	800e940 <sys_timeouts_init+0xc>
  }
}
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	08014ec0 	.word	0x08014ec0
 800e974:	0800e8d1 	.word	0x0800e8d1

0800e978 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e98a:	d306      	bcc.n	800e99a <sys_timeout+0x22>
 800e98c:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <sys_timeout+0x40>)
 800e98e:	f240 1229 	movw	r2, #297	; 0x129
 800e992:	490a      	ldr	r1, [pc, #40]	; (800e9bc <sys_timeout+0x44>)
 800e994:	480a      	ldr	r0, [pc, #40]	; (800e9c0 <sys_timeout+0x48>)
 800e996:	f002 fd65 	bl	8011464 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e99a:	f7f9 f8af 	bl	8007afc <sys_now>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	68b9      	ldr	r1, [r7, #8]
 800e9aa:	6978      	ldr	r0, [r7, #20]
 800e9ac:	f7ff ff22 	bl	800e7f4 <sys_timeout_abs>
#endif
}
 800e9b0:	bf00      	nop
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	080142d4 	.word	0x080142d4
 800e9bc:	08014370 	.word	0x08014370
 800e9c0:	08014348 	.word	0x08014348

0800e9c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e9c8:	f002 fc4c 	bl	8011264 <rand>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	4b01      	ldr	r3, [pc, #4]	; (800e9e4 <udp_init+0x20>)
 800e9de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e9e0:	bf00      	nop
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	2000013c 	.word	0x2000013c

0800e9e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d105      	bne.n	800ea08 <udp_input_local_match+0x20>
 800e9fc:	4b27      	ldr	r3, [pc, #156]	; (800ea9c <udp_input_local_match+0xb4>)
 800e9fe:	2287      	movs	r2, #135	; 0x87
 800ea00:	4927      	ldr	r1, [pc, #156]	; (800eaa0 <udp_input_local_match+0xb8>)
 800ea02:	4828      	ldr	r0, [pc, #160]	; (800eaa4 <udp_input_local_match+0xbc>)
 800ea04:	f002 fd2e 	bl	8011464 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d105      	bne.n	800ea1a <udp_input_local_match+0x32>
 800ea0e:	4b23      	ldr	r3, [pc, #140]	; (800ea9c <udp_input_local_match+0xb4>)
 800ea10:	2288      	movs	r2, #136	; 0x88
 800ea12:	4925      	ldr	r1, [pc, #148]	; (800eaa8 <udp_input_local_match+0xc0>)
 800ea14:	4823      	ldr	r0, [pc, #140]	; (800eaa4 <udp_input_local_match+0xbc>)
 800ea16:	f002 fd25 	bl	8011464 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	7a1b      	ldrb	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00b      	beq.n	800ea3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7a1a      	ldrb	r2, [r3, #8]
 800ea26:	4b21      	ldr	r3, [pc, #132]	; (800eaac <udp_input_local_match+0xc4>)
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d001      	beq.n	800ea3a <udp_input_local_match+0x52>
    return 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	e02b      	b.n	800ea92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ea3a:	79fb      	ldrb	r3, [r7, #7]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d018      	beq.n	800ea72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d013      	beq.n	800ea6e <udp_input_local_match+0x86>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00f      	beq.n	800ea6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea4e:	4b17      	ldr	r3, [pc, #92]	; (800eaac <udp_input_local_match+0xc4>)
 800ea50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea56:	d00a      	beq.n	800ea6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	4b13      	ldr	r3, [pc, #76]	; (800eaac <udp_input_local_match+0xc4>)
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	405a      	eors	r2, r3
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	3308      	adds	r3, #8
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d110      	bne.n	800ea90 <udp_input_local_match+0xa8>
          return 1;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e00f      	b.n	800ea92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d009      	beq.n	800ea8c <udp_input_local_match+0xa4>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d005      	beq.n	800ea8c <udp_input_local_match+0xa4>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	4b09      	ldr	r3, [pc, #36]	; (800eaac <udp_input_local_match+0xc4>)
 800ea86:	695b      	ldr	r3, [r3, #20]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d101      	bne.n	800ea90 <udp_input_local_match+0xa8>
        return 1;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e000      	b.n	800ea92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	080143bc 	.word	0x080143bc
 800eaa0:	080143ec 	.word	0x080143ec
 800eaa4:	08014410 	.word	0x08014410
 800eaa8:	08014438 	.word	0x08014438
 800eaac:	20005794 	.word	0x20005794

0800eab0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eab0:	b590      	push	{r4, r7, lr}
 800eab2:	b08d      	sub	sp, #52	; 0x34
 800eab4:	af02      	add	r7, sp, #8
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d105      	bne.n	800ead0 <udp_input+0x20>
 800eac4:	4b7c      	ldr	r3, [pc, #496]	; (800ecb8 <udp_input+0x208>)
 800eac6:	22cf      	movs	r2, #207	; 0xcf
 800eac8:	497c      	ldr	r1, [pc, #496]	; (800ecbc <udp_input+0x20c>)
 800eaca:	487d      	ldr	r0, [pc, #500]	; (800ecc0 <udp_input+0x210>)
 800eacc:	f002 fcca 	bl	8011464 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d105      	bne.n	800eae2 <udp_input+0x32>
 800ead6:	4b78      	ldr	r3, [pc, #480]	; (800ecb8 <udp_input+0x208>)
 800ead8:	22d0      	movs	r2, #208	; 0xd0
 800eada:	497a      	ldr	r1, [pc, #488]	; (800ecc4 <udp_input+0x214>)
 800eadc:	4878      	ldr	r0, [pc, #480]	; (800ecc0 <udp_input+0x210>)
 800eade:	f002 fcc1 	bl	8011464 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	895b      	ldrh	r3, [r3, #10]
 800eae6:	2b07      	cmp	r3, #7
 800eae8:	d803      	bhi.n	800eaf2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7fa fa78 	bl	8008fe0 <pbuf_free>
    goto end;
 800eaf0:	e0de      	b.n	800ecb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eaf8:	4b73      	ldr	r3, [pc, #460]	; (800ecc8 <udp_input+0x218>)
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	4a72      	ldr	r2, [pc, #456]	; (800ecc8 <udp_input+0x218>)
 800eafe:	6812      	ldr	r2, [r2, #0]
 800eb00:	4611      	mov	r1, r2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 fc58 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	881b      	ldrh	r3, [r3, #0]
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f9 f803 	bl	8007b1e <lwip_htons>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	885b      	ldrh	r3, [r3, #2]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7f8 fffb 	bl	8007b1e <lwip_htons>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb38:	4b64      	ldr	r3, [pc, #400]	; (800eccc <udp_input+0x21c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb3e:	e054      	b.n	800ebea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	8a5b      	ldrh	r3, [r3, #18]
 800eb44:	89fa      	ldrh	r2, [r7, #14]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d14a      	bne.n	800ebe0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800eb4a:	7cfb      	ldrb	r3, [r7, #19]
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb52:	f7ff ff49 	bl	800e9e8 <udp_input_local_match>
 800eb56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d041      	beq.n	800ebe0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	7c1b      	ldrb	r3, [r3, #16]
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d11d      	bne.n	800eba4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb70:	61fb      	str	r3, [r7, #28]
 800eb72:	e017      	b.n	800eba4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800eb74:	7cfb      	ldrb	r3, [r7, #19]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d014      	beq.n	800eba4 <udp_input+0xf4>
 800eb7a:	4b53      	ldr	r3, [pc, #332]	; (800ecc8 <udp_input+0x218>)
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d10f      	bne.n	800eba4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3304      	adds	r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d008      	beq.n	800eba4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d101      	bne.n	800eba4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	8a9b      	ldrh	r3, [r3, #20]
 800eba8:	8a3a      	ldrh	r2, [r7, #16]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d118      	bne.n	800ebe0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d005      	beq.n	800ebc2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	685a      	ldr	r2, [r3, #4]
 800ebba:	4b43      	ldr	r3, [pc, #268]	; (800ecc8 <udp_input+0x218>)
 800ebbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d10e      	bne.n	800ebe0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ebc2:	6a3b      	ldr	r3, [r7, #32]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d014      	beq.n	800ebf2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	68da      	ldr	r2, [r3, #12]
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ebd0:	4b3e      	ldr	r3, [pc, #248]	; (800eccc <udp_input+0x21c>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ebd8:	4a3c      	ldr	r2, [pc, #240]	; (800eccc <udp_input+0x21c>)
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ebde:	e008      	b.n	800ebf2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1a7      	bne.n	800eb40 <udp_input+0x90>
 800ebf0:	e000      	b.n	800ebf4 <udp_input+0x144>
        break;
 800ebf2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <udp_input+0x14e>
    pcb = uncon_pcb;
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <udp_input+0x15a>
    for_us = 1;
 800ec04:	2301      	movs	r3, #1
 800ec06:	76fb      	strb	r3, [r7, #27]
 800ec08:	e00a      	b.n	800ec20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	4b2d      	ldr	r3, [pc, #180]	; (800ecc8 <udp_input+0x218>)
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	bf0c      	ite	eq
 800ec18:	2301      	moveq	r3, #1
 800ec1a:	2300      	movne	r3, #0
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ec20:	7efb      	ldrb	r3, [r7, #27]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d041      	beq.n	800ecaa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec26:	2108      	movs	r1, #8
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7fa f953 	bl	8008ed4 <pbuf_remove_header>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00a      	beq.n	800ec4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ec34:	4b20      	ldr	r3, [pc, #128]	; (800ecb8 <udp_input+0x208>)
 800ec36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ec3a:	4925      	ldr	r1, [pc, #148]	; (800ecd0 <udp_input+0x220>)
 800ec3c:	4820      	ldr	r0, [pc, #128]	; (800ecc0 <udp_input+0x210>)
 800ec3e:	f002 fc11 	bl	8011464 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7fa f9cc 	bl	8008fe0 <pbuf_free>
      goto end;
 800ec48:	e032      	b.n	800ecb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d012      	beq.n	800ec76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00a      	beq.n	800ec6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ec58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5a:	699c      	ldr	r4, [r3, #24]
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	69d8      	ldr	r0, [r3, #28]
 800ec60:	8a3b      	ldrh	r3, [r7, #16]
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	4b1b      	ldr	r3, [pc, #108]	; (800ecd4 <udp_input+0x224>)
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ec6c:	e021      	b.n	800ecb2 <udp_input+0x202>
        pbuf_free(p);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7fa f9b6 	bl	8008fe0 <pbuf_free>
        goto end;
 800ec74:	e01c      	b.n	800ecb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec76:	7cfb      	ldrb	r3, [r7, #19]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d112      	bne.n	800eca2 <udp_input+0x1f2>
 800ec7c:	4b12      	ldr	r3, [pc, #72]	; (800ecc8 <udp_input+0x218>)
 800ec7e:	695b      	ldr	r3, [r3, #20]
 800ec80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec84:	2be0      	cmp	r3, #224	; 0xe0
 800ec86:	d00c      	beq.n	800eca2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ec88:	4b0f      	ldr	r3, [pc, #60]	; (800ecc8 <udp_input+0x218>)
 800ec8a:	899b      	ldrh	r3, [r3, #12]
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	b21b      	sxth	r3, r3
 800ec92:	4619      	mov	r1, r3
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7fa f990 	bl	8008fba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ec9a:	2103      	movs	r1, #3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f001 f86b 	bl	800fd78 <icmp_dest_unreach>
      pbuf_free(p);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7fa f99c 	bl	8008fe0 <pbuf_free>
  return;
 800eca8:	e003      	b.n	800ecb2 <udp_input+0x202>
    pbuf_free(p);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7fa f998 	bl	8008fe0 <pbuf_free>
  return;
 800ecb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ecb2:	372c      	adds	r7, #44	; 0x2c
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd90      	pop	{r4, r7, pc}
 800ecb8:	080143bc 	.word	0x080143bc
 800ecbc:	08014460 	.word	0x08014460
 800ecc0:	08014410 	.word	0x08014410
 800ecc4:	08014478 	.word	0x08014478
 800ecc8:	20005794 	.word	0x20005794
 800eccc:	20008d60 	.word	0x20008d60
 800ecd0:	08014494 	.word	0x08014494
 800ecd4:	200057a4 	.word	0x200057a4

0800ecd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01e      	beq.n	800ed26 <udp_netif_ip_addr_changed+0x4e>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d01a      	beq.n	800ed26 <udp_netif_ip_addr_changed+0x4e>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d017      	beq.n	800ed26 <udp_netif_ip_addr_changed+0x4e>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d013      	beq.n	800ed26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <udp_netif_ip_addr_changed+0x5c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	e00c      	b.n	800ed20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d103      	bne.n	800ed1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1ef      	bne.n	800ed06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ed26:	bf00      	nop
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	20008d60 	.word	0x20008d60

0800ed38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ed40:	4915      	ldr	r1, [pc, #84]	; (800ed98 <etharp_free_entry+0x60>)
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	4613      	mov	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	440b      	add	r3, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d013      	beq.n	800ed7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ed54:	4910      	ldr	r1, [pc, #64]	; (800ed98 <etharp_free_entry+0x60>)
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	440b      	add	r3, r1
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fa f93b 	bl	8008fe0 <pbuf_free>
    arp_table[i].q = NULL;
 800ed6a:	490b      	ldr	r1, [pc, #44]	; (800ed98 <etharp_free_entry+0x60>)
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	440b      	add	r3, r1
 800ed78:	2200      	movs	r2, #0
 800ed7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ed7c:	4906      	ldr	r1, [pc, #24]	; (800ed98 <etharp_free_entry+0x60>)
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	4613      	mov	r3, r2
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	4413      	add	r3, r2
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	440b      	add	r3, r1
 800ed8a:	3314      	adds	r3, #20
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	20008d64 	.word	0x20008d64

0800ed9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eda2:	2300      	movs	r3, #0
 800eda4:	607b      	str	r3, [r7, #4]
 800eda6:	e096      	b.n	800eed6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800eda8:	494f      	ldr	r1, [pc, #316]	; (800eee8 <etharp_tmr+0x14c>)
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4613      	mov	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	440b      	add	r3, r1
 800edb6:	3314      	adds	r3, #20
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800edbc:	78fb      	ldrb	r3, [r7, #3]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 8086 	beq.w	800eed0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800edc4:	4948      	ldr	r1, [pc, #288]	; (800eee8 <etharp_tmr+0x14c>)
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	4613      	mov	r3, r2
 800edca:	005b      	lsls	r3, r3, #1
 800edcc:	4413      	add	r3, r2
 800edce:	00db      	lsls	r3, r3, #3
 800edd0:	440b      	add	r3, r1
 800edd2:	3312      	adds	r3, #18
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	3301      	adds	r3, #1
 800edd8:	b298      	uxth	r0, r3
 800edda:	4943      	ldr	r1, [pc, #268]	; (800eee8 <etharp_tmr+0x14c>)
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	4613      	mov	r3, r2
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	4413      	add	r3, r2
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	440b      	add	r3, r1
 800ede8:	3312      	adds	r3, #18
 800edea:	4602      	mov	r2, r0
 800edec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800edee:	493e      	ldr	r1, [pc, #248]	; (800eee8 <etharp_tmr+0x14c>)
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	4613      	mov	r3, r2
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	4413      	add	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	440b      	add	r3, r1
 800edfc:	3312      	adds	r3, #18
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ee04:	d215      	bcs.n	800ee32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee06:	4938      	ldr	r1, [pc, #224]	; (800eee8 <etharp_tmr+0x14c>)
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	4413      	add	r3, r2
 800ee10:	00db      	lsls	r3, r3, #3
 800ee12:	440b      	add	r3, r1
 800ee14:	3314      	adds	r3, #20
 800ee16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d10e      	bne.n	800ee3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ee1c:	4932      	ldr	r1, [pc, #200]	; (800eee8 <etharp_tmr+0x14c>)
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	4613      	mov	r3, r2
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	4413      	add	r3, r2
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	440b      	add	r3, r1
 800ee2a:	3312      	adds	r3, #18
 800ee2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d903      	bls.n	800ee3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff ff80 	bl	800ed38 <etharp_free_entry>
 800ee38:	e04a      	b.n	800eed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ee3a:	492b      	ldr	r1, [pc, #172]	; (800eee8 <etharp_tmr+0x14c>)
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	440b      	add	r3, r1
 800ee48:	3314      	adds	r3, #20
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d10a      	bne.n	800ee66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ee50:	4925      	ldr	r1, [pc, #148]	; (800eee8 <etharp_tmr+0x14c>)
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	440b      	add	r3, r1
 800ee5e:	3314      	adds	r3, #20
 800ee60:	2204      	movs	r2, #4
 800ee62:	701a      	strb	r2, [r3, #0]
 800ee64:	e034      	b.n	800eed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ee66:	4920      	ldr	r1, [pc, #128]	; (800eee8 <etharp_tmr+0x14c>)
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	440b      	add	r3, r1
 800ee74:	3314      	adds	r3, #20
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	d10a      	bne.n	800ee92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ee7c:	491a      	ldr	r1, [pc, #104]	; (800eee8 <etharp_tmr+0x14c>)
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	3314      	adds	r3, #20
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	701a      	strb	r2, [r3, #0]
 800ee90:	e01e      	b.n	800eed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ee92:	4915      	ldr	r1, [pc, #84]	; (800eee8 <etharp_tmr+0x14c>)
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	440b      	add	r3, r1
 800eea0:	3314      	adds	r3, #20
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d113      	bne.n	800eed0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eea8:	490f      	ldr	r1, [pc, #60]	; (800eee8 <etharp_tmr+0x14c>)
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	4613      	mov	r3, r2
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	4413      	add	r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	440b      	add	r3, r1
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	6818      	ldr	r0, [r3, #0]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	4a08      	ldr	r2, [pc, #32]	; (800eee8 <etharp_tmr+0x14c>)
 800eec6:	4413      	add	r3, r2
 800eec8:	3304      	adds	r3, #4
 800eeca:	4619      	mov	r1, r3
 800eecc:	f000 fe3e 	bl	800fb4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3301      	adds	r3, #1
 800eed4:	607b      	str	r3, [r7, #4]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b09      	cmp	r3, #9
 800eeda:	f77f af65 	ble.w	800eda8 <etharp_tmr+0xc>
      }
    }
  }
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20008d64 	.word	0x20008d64

0800eeec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b08a      	sub	sp, #40	; 0x28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	460b      	mov	r3, r1
 800eef6:	607a      	str	r2, [r7, #4]
 800eef8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eefa:	230a      	movs	r3, #10
 800eefc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eefe:	230a      	movs	r3, #10
 800ef00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ef02:	230a      	movs	r3, #10
 800ef04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ef0a:	230a      	movs	r3, #10
 800ef0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	83bb      	strh	r3, [r7, #28]
 800ef12:	2300      	movs	r3, #0
 800ef14:	837b      	strh	r3, [r7, #26]
 800ef16:	2300      	movs	r3, #0
 800ef18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	843b      	strh	r3, [r7, #32]
 800ef1e:	e0ae      	b.n	800f07e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ef20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef24:	49a6      	ldr	r1, [pc, #664]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800ef26:	4613      	mov	r3, r2
 800ef28:	005b      	lsls	r3, r3, #1
 800ef2a:	4413      	add	r3, r2
 800ef2c:	00db      	lsls	r3, r3, #3
 800ef2e:	440b      	add	r3, r1
 800ef30:	3314      	adds	r3, #20
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ef36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ef3a:	2b0a      	cmp	r3, #10
 800ef3c:	d105      	bne.n	800ef4a <etharp_find_entry+0x5e>
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d102      	bne.n	800ef4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ef44:	8c3b      	ldrh	r3, [r7, #32]
 800ef46:	847b      	strh	r3, [r7, #34]	; 0x22
 800ef48:	e095      	b.n	800f076 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ef4a:	7dfb      	ldrb	r3, [r7, #23]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f000 8092 	beq.w	800f076 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ef52:	7dfb      	ldrb	r3, [r7, #23]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d009      	beq.n	800ef6c <etharp_find_entry+0x80>
 800ef58:	7dfb      	ldrb	r3, [r7, #23]
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d806      	bhi.n	800ef6c <etharp_find_entry+0x80>
 800ef5e:	4b99      	ldr	r3, [pc, #612]	; (800f1c4 <etharp_find_entry+0x2d8>)
 800ef60:	f240 1223 	movw	r2, #291	; 0x123
 800ef64:	4998      	ldr	r1, [pc, #608]	; (800f1c8 <etharp_find_entry+0x2dc>)
 800ef66:	4899      	ldr	r0, [pc, #612]	; (800f1cc <etharp_find_entry+0x2e0>)
 800ef68:	f002 fa7c 	bl	8011464 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d020      	beq.n	800efb4 <etharp_find_entry+0xc8>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6819      	ldr	r1, [r3, #0]
 800ef76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef7a:	4891      	ldr	r0, [pc, #580]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	4413      	add	r3, r2
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	4403      	add	r3, r0
 800ef86:	3304      	adds	r3, #4
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4299      	cmp	r1, r3
 800ef8c:	d112      	bne.n	800efb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00c      	beq.n	800efae <etharp_find_entry+0xc2>
 800ef94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef98:	4989      	ldr	r1, [pc, #548]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	005b      	lsls	r3, r3, #1
 800ef9e:	4413      	add	r3, r2
 800efa0:	00db      	lsls	r3, r3, #3
 800efa2:	440b      	add	r3, r1
 800efa4:	3308      	adds	r3, #8
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d102      	bne.n	800efb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800efae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efb2:	e100      	b.n	800f1b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d140      	bne.n	800f03c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800efba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efbe:	4980      	ldr	r1, [pc, #512]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800efc0:	4613      	mov	r3, r2
 800efc2:	005b      	lsls	r3, r3, #1
 800efc4:	4413      	add	r3, r2
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	440b      	add	r3, r1
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d01a      	beq.n	800f006 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800efd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efd4:	497a      	ldr	r1, [pc, #488]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800efd6:	4613      	mov	r3, r2
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	4413      	add	r3, r2
 800efdc:	00db      	lsls	r3, r3, #3
 800efde:	440b      	add	r3, r1
 800efe0:	3312      	adds	r3, #18
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	8bba      	ldrh	r2, [r7, #28]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d845      	bhi.n	800f076 <etharp_find_entry+0x18a>
            old_queue = i;
 800efea:	8c3b      	ldrh	r3, [r7, #32]
 800efec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800efee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eff2:	4973      	ldr	r1, [pc, #460]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800eff4:	4613      	mov	r3, r2
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	4413      	add	r3, r2
 800effa:	00db      	lsls	r3, r3, #3
 800effc:	440b      	add	r3, r1
 800effe:	3312      	adds	r3, #18
 800f000:	881b      	ldrh	r3, [r3, #0]
 800f002:	83bb      	strh	r3, [r7, #28]
 800f004:	e037      	b.n	800f076 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f00a:	496d      	ldr	r1, [pc, #436]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f00c:	4613      	mov	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	4413      	add	r3, r2
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	440b      	add	r3, r1
 800f016:	3312      	adds	r3, #18
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	8b7a      	ldrh	r2, [r7, #26]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d82a      	bhi.n	800f076 <etharp_find_entry+0x18a>
            old_pending = i;
 800f020:	8c3b      	ldrh	r3, [r7, #32]
 800f022:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f028:	4965      	ldr	r1, [pc, #404]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f02a:	4613      	mov	r3, r2
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4413      	add	r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	440b      	add	r3, r1
 800f034:	3312      	adds	r3, #18
 800f036:	881b      	ldrh	r3, [r3, #0]
 800f038:	837b      	strh	r3, [r7, #26]
 800f03a:	e01c      	b.n	800f076 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d919      	bls.n	800f076 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f046:	495e      	ldr	r1, [pc, #376]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f048:	4613      	mov	r3, r2
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	4413      	add	r3, r2
 800f04e:	00db      	lsls	r3, r3, #3
 800f050:	440b      	add	r3, r1
 800f052:	3312      	adds	r3, #18
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	8b3a      	ldrh	r2, [r7, #24]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d80c      	bhi.n	800f076 <etharp_find_entry+0x18a>
            old_stable = i;
 800f05c:	8c3b      	ldrh	r3, [r7, #32]
 800f05e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f064:	4956      	ldr	r1, [pc, #344]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f066:	4613      	mov	r3, r2
 800f068:	005b      	lsls	r3, r3, #1
 800f06a:	4413      	add	r3, r2
 800f06c:	00db      	lsls	r3, r3, #3
 800f06e:	440b      	add	r3, r1
 800f070:	3312      	adds	r3, #18
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f076:	8c3b      	ldrh	r3, [r7, #32]
 800f078:	3301      	adds	r3, #1
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	843b      	strh	r3, [r7, #32]
 800f07e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f082:	2b09      	cmp	r3, #9
 800f084:	f77f af4c 	ble.w	800ef20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f088:	7afb      	ldrb	r3, [r7, #11]
 800f08a:	f003 0302 	and.w	r3, r3, #2
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d108      	bne.n	800f0a4 <etharp_find_entry+0x1b8>
 800f092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f096:	2b0a      	cmp	r3, #10
 800f098:	d107      	bne.n	800f0aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f09a:	7afb      	ldrb	r3, [r7, #11]
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a8:	e085      	b.n	800f1b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f0aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	dc02      	bgt.n	800f0b8 <etharp_find_entry+0x1cc>
    i = empty;
 800f0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0b4:	843b      	strh	r3, [r7, #32]
 800f0b6:	e039      	b.n	800f12c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f0b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f0bc:	2b09      	cmp	r3, #9
 800f0be:	dc14      	bgt.n	800f0ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0c8:	493d      	ldr	r1, [pc, #244]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	440b      	add	r3, r1
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d018      	beq.n	800f10c <etharp_find_entry+0x220>
 800f0da:	4b3a      	ldr	r3, [pc, #232]	; (800f1c4 <etharp_find_entry+0x2d8>)
 800f0dc:	f240 126d 	movw	r2, #365	; 0x16d
 800f0e0:	493b      	ldr	r1, [pc, #236]	; (800f1d0 <etharp_find_entry+0x2e4>)
 800f0e2:	483a      	ldr	r0, [pc, #232]	; (800f1cc <etharp_find_entry+0x2e0>)
 800f0e4:	f002 f9be 	bl	8011464 <iprintf>
 800f0e8:	e010      	b.n	800f10c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f0ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f0ee:	2b09      	cmp	r3, #9
 800f0f0:	dc02      	bgt.n	800f0f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f0f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f0f4:	843b      	strh	r3, [r7, #32]
 800f0f6:	e009      	b.n	800f10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f0f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f0fc:	2b09      	cmp	r3, #9
 800f0fe:	dc02      	bgt.n	800f106 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f100:	8bfb      	ldrh	r3, [r7, #30]
 800f102:	843b      	strh	r3, [r7, #32]
 800f104:	e002      	b.n	800f10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f106:	f04f 33ff 	mov.w	r3, #4294967295
 800f10a:	e054      	b.n	800f1b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f10c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f110:	2b09      	cmp	r3, #9
 800f112:	dd06      	ble.n	800f122 <etharp_find_entry+0x236>
 800f114:	4b2b      	ldr	r3, [pc, #172]	; (800f1c4 <etharp_find_entry+0x2d8>)
 800f116:	f240 127f 	movw	r2, #383	; 0x17f
 800f11a:	492e      	ldr	r1, [pc, #184]	; (800f1d4 <etharp_find_entry+0x2e8>)
 800f11c:	482b      	ldr	r0, [pc, #172]	; (800f1cc <etharp_find_entry+0x2e0>)
 800f11e:	f002 f9a1 	bl	8011464 <iprintf>
    etharp_free_entry(i);
 800f122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f126:	4618      	mov	r0, r3
 800f128:	f7ff fe06 	bl	800ed38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f12c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f130:	2b09      	cmp	r3, #9
 800f132:	dd06      	ble.n	800f142 <etharp_find_entry+0x256>
 800f134:	4b23      	ldr	r3, [pc, #140]	; (800f1c4 <etharp_find_entry+0x2d8>)
 800f136:	f240 1283 	movw	r2, #387	; 0x183
 800f13a:	4926      	ldr	r1, [pc, #152]	; (800f1d4 <etharp_find_entry+0x2e8>)
 800f13c:	4823      	ldr	r0, [pc, #140]	; (800f1cc <etharp_find_entry+0x2e0>)
 800f13e:	f002 f991 	bl	8011464 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f146:	491e      	ldr	r1, [pc, #120]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f148:	4613      	mov	r3, r2
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	4413      	add	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	440b      	add	r3, r1
 800f152:	3314      	adds	r3, #20
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d006      	beq.n	800f168 <etharp_find_entry+0x27c>
 800f15a:	4b1a      	ldr	r3, [pc, #104]	; (800f1c4 <etharp_find_entry+0x2d8>)
 800f15c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f160:	491d      	ldr	r1, [pc, #116]	; (800f1d8 <etharp_find_entry+0x2ec>)
 800f162:	481a      	ldr	r0, [pc, #104]	; (800f1cc <etharp_find_entry+0x2e0>)
 800f164:	f002 f97e 	bl	8011464 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f16e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	4812      	ldr	r0, [pc, #72]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f178:	4613      	mov	r3, r2
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	4413      	add	r3, r2
 800f17e:	00db      	lsls	r3, r3, #3
 800f180:	4403      	add	r3, r0
 800f182:	3304      	adds	r3, #4
 800f184:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f18a:	490d      	ldr	r1, [pc, #52]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f18c:	4613      	mov	r3, r2
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	4413      	add	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	3312      	adds	r3, #18
 800f198:	2200      	movs	r2, #0
 800f19a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f19c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1a0:	4907      	ldr	r1, [pc, #28]	; (800f1c0 <etharp_find_entry+0x2d4>)
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	4413      	add	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3308      	adds	r3, #8
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f1b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3728      	adds	r7, #40	; 0x28
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20008d64 	.word	0x20008d64
 800f1c4:	08014720 	.word	0x08014720
 800f1c8:	08014758 	.word	0x08014758
 800f1cc:	08014798 	.word	0x08014798
 800f1d0:	080147c0 	.word	0x080147c0
 800f1d4:	080147d8 	.word	0x080147d8
 800f1d8:	080147ec 	.word	0x080147ec

0800f1dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1f0:	2b06      	cmp	r3, #6
 800f1f2:	d006      	beq.n	800f202 <etharp_update_arp_entry+0x26>
 800f1f4:	4b48      	ldr	r3, [pc, #288]	; (800f318 <etharp_update_arp_entry+0x13c>)
 800f1f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f1fa:	4948      	ldr	r1, [pc, #288]	; (800f31c <etharp_update_arp_entry+0x140>)
 800f1fc:	4848      	ldr	r0, [pc, #288]	; (800f320 <etharp_update_arp_entry+0x144>)
 800f1fe:	f002 f931 	bl	8011464 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d012      	beq.n	800f22e <etharp_update_arp_entry+0x52>
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00e      	beq.n	800f22e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68f9      	ldr	r1, [r7, #12]
 800f216:	4618      	mov	r0, r3
 800f218:	f001 f8ce 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800f21c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d105      	bne.n	800f22e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f22a:	2be0      	cmp	r3, #224	; 0xe0
 800f22c:	d102      	bne.n	800f234 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f22e:	f06f 030f 	mvn.w	r3, #15
 800f232:	e06c      	b.n	800f30e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	4619      	mov	r1, r3
 800f23a:	68b8      	ldr	r0, [r7, #8]
 800f23c:	f7ff fe56 	bl	800eeec <etharp_find_entry>
 800f240:	4603      	mov	r3, r0
 800f242:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	da02      	bge.n	800f252 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f24c:	8afb      	ldrh	r3, [r7, #22]
 800f24e:	b25b      	sxtb	r3, r3
 800f250:	e05d      	b.n	800f30e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f256:	4933      	ldr	r1, [pc, #204]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f258:	4613      	mov	r3, r2
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	4413      	add	r3, r2
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	440b      	add	r3, r1
 800f262:	3314      	adds	r3, #20
 800f264:	2202      	movs	r2, #2
 800f266:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f26c:	492d      	ldr	r1, [pc, #180]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f26e:	4613      	mov	r3, r2
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4413      	add	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	440b      	add	r3, r1
 800f278:	3308      	adds	r3, #8
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f27e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f282:	4613      	mov	r3, r2
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	4413      	add	r3, r2
 800f288:	00db      	lsls	r3, r3, #3
 800f28a:	3308      	adds	r3, #8
 800f28c:	4a25      	ldr	r2, [pc, #148]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f28e:	4413      	add	r3, r2
 800f290:	3304      	adds	r3, #4
 800f292:	2206      	movs	r2, #6
 800f294:	6879      	ldr	r1, [r7, #4]
 800f296:	4618      	mov	r0, r3
 800f298:	f002 faaf 	bl	80117fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f29c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2a0:	4920      	ldr	r1, [pc, #128]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	00db      	lsls	r3, r3, #3
 800f2aa:	440b      	add	r3, r1
 800f2ac:	3312      	adds	r3, #18
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f2b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2b6:	491b      	ldr	r1, [pc, #108]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	005b      	lsls	r3, r3, #1
 800f2bc:	4413      	add	r3, r2
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	440b      	add	r3, r1
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d021      	beq.n	800f30c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f2c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2cc:	4915      	ldr	r1, [pc, #84]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	440b      	add	r3, r1
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f2dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2e0:	4910      	ldr	r1, [pc, #64]	; (800f324 <etharp_update_arp_entry+0x148>)
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	4413      	add	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	440b      	add	r3, r1
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f2f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6939      	ldr	r1, [r7, #16]
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f001 ff67 	bl	80111d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f306:	6938      	ldr	r0, [r7, #16]
 800f308:	f7f9 fe6a 	bl	8008fe0 <pbuf_free>
  }
  return ERR_OK;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3718      	adds	r7, #24
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	08014720 	.word	0x08014720
 800f31c:	08014818 	.word	0x08014818
 800f320:	08014798 	.word	0x08014798
 800f324:	20008d64 	.word	0x20008d64

0800f328 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f328:	b5b0      	push	{r4, r5, r7, lr}
 800f32a:	b08a      	sub	sp, #40	; 0x28
 800f32c:	af04      	add	r7, sp, #16
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d107      	bne.n	800f348 <etharp_input+0x20>
 800f338:	4b3d      	ldr	r3, [pc, #244]	; (800f430 <etharp_input+0x108>)
 800f33a:	f240 228a 	movw	r2, #650	; 0x28a
 800f33e:	493d      	ldr	r1, [pc, #244]	; (800f434 <etharp_input+0x10c>)
 800f340:	483d      	ldr	r0, [pc, #244]	; (800f438 <etharp_input+0x110>)
 800f342:	f002 f88f 	bl	8011464 <iprintf>
 800f346:	e06f      	b.n	800f428 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	b29b      	uxth	r3, r3
 800f354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f358:	d10c      	bne.n	800f374 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f35e:	2b06      	cmp	r3, #6
 800f360:	d108      	bne.n	800f374 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f366:	2b04      	cmp	r3, #4
 800f368:	d104      	bne.n	800f374 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	885b      	ldrh	r3, [r3, #2]
 800f36e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f370:	2b08      	cmp	r3, #8
 800f372:	d003      	beq.n	800f37c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7f9 fe33 	bl	8008fe0 <pbuf_free>
    return;
 800f37a:	e055      	b.n	800f428 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	330e      	adds	r3, #14
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	3318      	adds	r3, #24
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	3304      	adds	r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d102      	bne.n	800f39c <etharp_input+0x74>
    for_us = 0;
 800f396:	2300      	movs	r3, #0
 800f398:	75fb      	strb	r3, [r7, #23]
 800f39a:	e009      	b.n	800f3b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	bf0c      	ite	eq
 800f3a8:	2301      	moveq	r3, #1
 800f3aa:	2300      	movne	r3, #0
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f103 0208 	add.w	r2, r3, #8
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <etharp_input+0x98>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e000      	b.n	800f3c2 <etharp_input+0x9a>
 800f3c0:	2302      	movs	r3, #2
 800f3c2:	f107 010c 	add.w	r1, r7, #12
 800f3c6:	6838      	ldr	r0, [r7, #0]
 800f3c8:	f7ff ff08 	bl	800f1dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	88db      	ldrh	r3, [r3, #6]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3d6:	d003      	beq.n	800f3e0 <etharp_input+0xb8>
 800f3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3dc:	d01e      	beq.n	800f41c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f3de:	e020      	b.n	800f422 <etharp_input+0xfa>
      if (for_us) {
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d01c      	beq.n	800f420 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f400:	2102      	movs	r1, #2
 800f402:	9103      	str	r1, [sp, #12]
 800f404:	f107 010c 	add.w	r1, r7, #12
 800f408:	9102      	str	r1, [sp, #8]
 800f40a:	9201      	str	r2, [sp, #4]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	462b      	mov	r3, r5
 800f410:	4622      	mov	r2, r4
 800f412:	4601      	mov	r1, r0
 800f414:	6838      	ldr	r0, [r7, #0]
 800f416:	f000 faeb 	bl	800f9f0 <etharp_raw>
      break;
 800f41a:	e001      	b.n	800f420 <etharp_input+0xf8>
      break;
 800f41c:	bf00      	nop
 800f41e:	e000      	b.n	800f422 <etharp_input+0xfa>
      break;
 800f420:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7f9 fddc 	bl	8008fe0 <pbuf_free>
}
 800f428:	3718      	adds	r7, #24
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bdb0      	pop	{r4, r5, r7, pc}
 800f42e:	bf00      	nop
 800f430:	08014720 	.word	0x08014720
 800f434:	08014870 	.word	0x08014870
 800f438:	08014798 	.word	0x08014798

0800f43c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4613      	mov	r3, r2
 800f448:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f44a:	79fa      	ldrb	r2, [r7, #7]
 800f44c:	4944      	ldr	r1, [pc, #272]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f44e:	4613      	mov	r3, r2
 800f450:	005b      	lsls	r3, r3, #1
 800f452:	4413      	add	r3, r2
 800f454:	00db      	lsls	r3, r3, #3
 800f456:	440b      	add	r3, r1
 800f458:	3314      	adds	r3, #20
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d806      	bhi.n	800f46e <etharp_output_to_arp_index+0x32>
 800f460:	4b40      	ldr	r3, [pc, #256]	; (800f564 <etharp_output_to_arp_index+0x128>)
 800f462:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f466:	4940      	ldr	r1, [pc, #256]	; (800f568 <etharp_output_to_arp_index+0x12c>)
 800f468:	4840      	ldr	r0, [pc, #256]	; (800f56c <etharp_output_to_arp_index+0x130>)
 800f46a:	f001 fffb 	bl	8011464 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f46e:	79fa      	ldrb	r2, [r7, #7]
 800f470:	493b      	ldr	r1, [pc, #236]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f472:	4613      	mov	r3, r2
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	4413      	add	r3, r2
 800f478:	00db      	lsls	r3, r3, #3
 800f47a:	440b      	add	r3, r1
 800f47c:	3314      	adds	r3, #20
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b02      	cmp	r3, #2
 800f482:	d153      	bne.n	800f52c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f484:	79fa      	ldrb	r2, [r7, #7]
 800f486:	4936      	ldr	r1, [pc, #216]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f488:	4613      	mov	r3, r2
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	440b      	add	r3, r1
 800f492:	3312      	adds	r3, #18
 800f494:	881b      	ldrh	r3, [r3, #0]
 800f496:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f49a:	d919      	bls.n	800f4d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f49c:	79fa      	ldrb	r2, [r7, #7]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	4a2e      	ldr	r2, [pc, #184]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f4a8:	4413      	add	r3, r2
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 fb4c 	bl	800fb4c <etharp_request>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d138      	bne.n	800f52c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f4ba:	79fa      	ldrb	r2, [r7, #7]
 800f4bc:	4928      	ldr	r1, [pc, #160]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f4be:	4613      	mov	r3, r2
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	00db      	lsls	r3, r3, #3
 800f4c6:	440b      	add	r3, r1
 800f4c8:	3314      	adds	r3, #20
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	701a      	strb	r2, [r3, #0]
 800f4ce:	e02d      	b.n	800f52c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f4d0:	79fa      	ldrb	r2, [r7, #7]
 800f4d2:	4923      	ldr	r1, [pc, #140]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	4413      	add	r3, r2
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	440b      	add	r3, r1
 800f4de:	3312      	adds	r3, #18
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f4e6:	d321      	bcc.n	800f52c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4e8:	79fa      	ldrb	r2, [r7, #7]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4413      	add	r3, r2
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	4a1b      	ldr	r2, [pc, #108]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f4f4:	4413      	add	r3, r2
 800f4f6:	1d19      	adds	r1, r3, #4
 800f4f8:	79fa      	ldrb	r2, [r7, #7]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	005b      	lsls	r3, r3, #1
 800f4fe:	4413      	add	r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	3308      	adds	r3, #8
 800f504:	4a16      	ldr	r2, [pc, #88]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f506:	4413      	add	r3, r2
 800f508:	3304      	adds	r3, #4
 800f50a:	461a      	mov	r2, r3
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f000 fafb 	bl	800fb08 <etharp_request_dst>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d109      	bne.n	800f52c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f518:	79fa      	ldrb	r2, [r7, #7]
 800f51a:	4911      	ldr	r1, [pc, #68]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f51c:	4613      	mov	r3, r2
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	4413      	add	r3, r2
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	440b      	add	r3, r1
 800f526:	3314      	adds	r3, #20
 800f528:	2203      	movs	r2, #3
 800f52a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f532:	79fa      	ldrb	r2, [r7, #7]
 800f534:	4613      	mov	r3, r2
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	4413      	add	r3, r2
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	3308      	adds	r3, #8
 800f53e:	4a08      	ldr	r2, [pc, #32]	; (800f560 <etharp_output_to_arp_index+0x124>)
 800f540:	4413      	add	r3, r2
 800f542:	3304      	adds	r3, #4
 800f544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f548:	9200      	str	r2, [sp, #0]
 800f54a:	460a      	mov	r2, r1
 800f54c:	68b9      	ldr	r1, [r7, #8]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f001 fe40 	bl	80111d4 <ethernet_output>
 800f554:	4603      	mov	r3, r0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20008d64 	.word	0x20008d64
 800f564:	08014720 	.word	0x08014720
 800f568:	08014890 	.word	0x08014890
 800f56c:	08014798 	.word	0x08014798

0800f570 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08a      	sub	sp, #40	; 0x28
 800f574:	af02      	add	r7, sp, #8
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d106      	bne.n	800f594 <etharp_output+0x24>
 800f586:	4b73      	ldr	r3, [pc, #460]	; (800f754 <etharp_output+0x1e4>)
 800f588:	f240 321e 	movw	r2, #798	; 0x31e
 800f58c:	4972      	ldr	r1, [pc, #456]	; (800f758 <etharp_output+0x1e8>)
 800f58e:	4873      	ldr	r0, [pc, #460]	; (800f75c <etharp_output+0x1ec>)
 800f590:	f001 ff68 	bl	8011464 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d106      	bne.n	800f5a8 <etharp_output+0x38>
 800f59a:	4b6e      	ldr	r3, [pc, #440]	; (800f754 <etharp_output+0x1e4>)
 800f59c:	f240 321f 	movw	r2, #799	; 0x31f
 800f5a0:	496f      	ldr	r1, [pc, #444]	; (800f760 <etharp_output+0x1f0>)
 800f5a2:	486e      	ldr	r0, [pc, #440]	; (800f75c <etharp_output+0x1ec>)
 800f5a4:	f001 ff5e 	bl	8011464 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d106      	bne.n	800f5bc <etharp_output+0x4c>
 800f5ae:	4b69      	ldr	r3, [pc, #420]	; (800f754 <etharp_output+0x1e4>)
 800f5b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f5b4:	496b      	ldr	r1, [pc, #428]	; (800f764 <etharp_output+0x1f4>)
 800f5b6:	4869      	ldr	r0, [pc, #420]	; (800f75c <etharp_output+0x1ec>)
 800f5b8:	f001 ff54 	bl	8011464 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68f9      	ldr	r1, [r7, #12]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 fef8 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f5ce:	4b66      	ldr	r3, [pc, #408]	; (800f768 <etharp_output+0x1f8>)
 800f5d0:	61fb      	str	r3, [r7, #28]
 800f5d2:	e0af      	b.n	800f734 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5dc:	2be0      	cmp	r3, #224	; 0xe0
 800f5de:	d118      	bne.n	800f612 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f5e8:	235e      	movs	r3, #94	; 0x5e
 800f5ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3302      	adds	r3, #2
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3303      	adds	r3, #3
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f60a:	f107 0310 	add.w	r3, r7, #16
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	e090      	b.n	800f734 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3304      	adds	r3, #4
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	405a      	eors	r2, r3
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3308      	adds	r3, #8
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4013      	ands	r3, r2
 800f626:	2b00      	cmp	r3, #0
 800f628:	d012      	beq.n	800f650 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f630:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f634:	4293      	cmp	r3, r2
 800f636:	d00b      	beq.n	800f650 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	330c      	adds	r3, #12
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d003      	beq.n	800f64a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	330c      	adds	r3, #12
 800f646:	61bb      	str	r3, [r7, #24]
 800f648:	e002      	b.n	800f650 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f64a:	f06f 0303 	mvn.w	r3, #3
 800f64e:	e07d      	b.n	800f74c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f650:	4b46      	ldr	r3, [pc, #280]	; (800f76c <etharp_output+0x1fc>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	4619      	mov	r1, r3
 800f656:	4a46      	ldr	r2, [pc, #280]	; (800f770 <etharp_output+0x200>)
 800f658:	460b      	mov	r3, r1
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	440b      	add	r3, r1
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4413      	add	r3, r2
 800f662:	3314      	adds	r3, #20
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d925      	bls.n	800f6b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f66a:	4b40      	ldr	r3, [pc, #256]	; (800f76c <etharp_output+0x1fc>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	4a3f      	ldr	r2, [pc, #252]	; (800f770 <etharp_output+0x200>)
 800f672:	460b      	mov	r3, r1
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	440b      	add	r3, r1
 800f678:	00db      	lsls	r3, r3, #3
 800f67a:	4413      	add	r3, r2
 800f67c:	3308      	adds	r3, #8
 800f67e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	429a      	cmp	r2, r3
 800f684:	d117      	bne.n	800f6b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	4b38      	ldr	r3, [pc, #224]	; (800f76c <etharp_output+0x1fc>)
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	4618      	mov	r0, r3
 800f690:	4937      	ldr	r1, [pc, #220]	; (800f770 <etharp_output+0x200>)
 800f692:	4603      	mov	r3, r0
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4403      	add	r3, r0
 800f698:	00db      	lsls	r3, r3, #3
 800f69a:	440b      	add	r3, r1
 800f69c:	3304      	adds	r3, #4
 800f69e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d108      	bne.n	800f6b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f6a4:	4b31      	ldr	r3, [pc, #196]	; (800f76c <etharp_output+0x1fc>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68b9      	ldr	r1, [r7, #8]
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f7ff fec5 	bl	800f43c <etharp_output_to_arp_index>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	e04a      	b.n	800f74c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	75fb      	strb	r3, [r7, #23]
 800f6ba:	e031      	b.n	800f720 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f6bc:	7dfa      	ldrb	r2, [r7, #23]
 800f6be:	492c      	ldr	r1, [pc, #176]	; (800f770 <etharp_output+0x200>)
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	4413      	add	r3, r2
 800f6c6:	00db      	lsls	r3, r3, #3
 800f6c8:	440b      	add	r3, r1
 800f6ca:	3314      	adds	r3, #20
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d923      	bls.n	800f71a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f6d2:	7dfa      	ldrb	r2, [r7, #23]
 800f6d4:	4926      	ldr	r1, [pc, #152]	; (800f770 <etharp_output+0x200>)
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	4413      	add	r3, r2
 800f6dc:	00db      	lsls	r3, r3, #3
 800f6de:	440b      	add	r3, r1
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d117      	bne.n	800f71a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	6819      	ldr	r1, [r3, #0]
 800f6ee:	7dfa      	ldrb	r2, [r7, #23]
 800f6f0:	481f      	ldr	r0, [pc, #124]	; (800f770 <etharp_output+0x200>)
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	4403      	add	r3, r0
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f700:	4299      	cmp	r1, r3
 800f702:	d10a      	bne.n	800f71a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f704:	4a19      	ldr	r2, [pc, #100]	; (800f76c <etharp_output+0x1fc>)
 800f706:	7dfb      	ldrb	r3, [r7, #23]
 800f708:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	461a      	mov	r2, r3
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f7ff fe93 	bl	800f43c <etharp_output_to_arp_index>
 800f716:	4603      	mov	r3, r0
 800f718:	e018      	b.n	800f74c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f71a:	7dfb      	ldrb	r3, [r7, #23]
 800f71c:	3301      	adds	r3, #1
 800f71e:	75fb      	strb	r3, [r7, #23]
 800f720:	7dfb      	ldrb	r3, [r7, #23]
 800f722:	2b09      	cmp	r3, #9
 800f724:	d9ca      	bls.n	800f6bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	69b9      	ldr	r1, [r7, #24]
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 f822 	bl	800f774 <etharp_query>
 800f730:	4603      	mov	r3, r0
 800f732:	e00b      	b.n	800f74c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f73a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	68b9      	ldr	r1, [r7, #8]
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f001 fd45 	bl	80111d4 <ethernet_output>
 800f74a:	4603      	mov	r3, r0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	08014720 	.word	0x08014720
 800f758:	08014870 	.word	0x08014870
 800f75c:	08014798 	.word	0x08014798
 800f760:	080148c0 	.word	0x080148c0
 800f764:	08014860 	.word	0x08014860
 800f768:	08014edc 	.word	0x08014edc
 800f76c:	20008e54 	.word	0x20008e54
 800f770:	20008d64 	.word	0x20008d64

0800f774 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b08c      	sub	sp, #48	; 0x30
 800f778:	af02      	add	r7, sp, #8
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	3326      	adds	r3, #38	; 0x26
 800f784:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f786:	23ff      	movs	r3, #255	; 0xff
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68f9      	ldr	r1, [r7, #12]
 800f796:	4618      	mov	r0, r3
 800f798:	f000 fe0e 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10c      	bne.n	800f7bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7aa:	2be0      	cmp	r3, #224	; 0xe0
 800f7ac:	d006      	beq.n	800f7bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d003      	beq.n	800f7bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f7bc:	f06f 030f 	mvn.w	r3, #15
 800f7c0:	e101      	b.n	800f9c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	68b8      	ldr	r0, [r7, #8]
 800f7c8:	f7ff fb90 	bl	800eeec <etharp_find_entry>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f7d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	da02      	bge.n	800f7de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f7d8:	8a7b      	ldrh	r3, [r7, #18]
 800f7da:	b25b      	sxtb	r3, r3
 800f7dc:	e0f3      	b.n	800f9c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f7de:	8a7b      	ldrh	r3, [r7, #18]
 800f7e0:	2b7e      	cmp	r3, #126	; 0x7e
 800f7e2:	d906      	bls.n	800f7f2 <etharp_query+0x7e>
 800f7e4:	4b7a      	ldr	r3, [pc, #488]	; (800f9d0 <etharp_query+0x25c>)
 800f7e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f7ea:	497a      	ldr	r1, [pc, #488]	; (800f9d4 <etharp_query+0x260>)
 800f7ec:	487a      	ldr	r0, [pc, #488]	; (800f9d8 <etharp_query+0x264>)
 800f7ee:	f001 fe39 	bl	8011464 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f7f2:	8a7b      	ldrh	r3, [r7, #18]
 800f7f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f7f6:	7c7a      	ldrb	r2, [r7, #17]
 800f7f8:	4978      	ldr	r1, [pc, #480]	; (800f9dc <etharp_query+0x268>)
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4413      	add	r3, r2
 800f800:	00db      	lsls	r3, r3, #3
 800f802:	440b      	add	r3, r1
 800f804:	3314      	adds	r3, #20
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d115      	bne.n	800f838 <etharp_query+0xc4>
    is_new_entry = 1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f810:	7c7a      	ldrb	r2, [r7, #17]
 800f812:	4972      	ldr	r1, [pc, #456]	; (800f9dc <etharp_query+0x268>)
 800f814:	4613      	mov	r3, r2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	4413      	add	r3, r2
 800f81a:	00db      	lsls	r3, r3, #3
 800f81c:	440b      	add	r3, r1
 800f81e:	3314      	adds	r3, #20
 800f820:	2201      	movs	r2, #1
 800f822:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f824:	7c7a      	ldrb	r2, [r7, #17]
 800f826:	496d      	ldr	r1, [pc, #436]	; (800f9dc <etharp_query+0x268>)
 800f828:	4613      	mov	r3, r2
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	4413      	add	r3, r2
 800f82e:	00db      	lsls	r3, r3, #3
 800f830:	440b      	add	r3, r1
 800f832:	3308      	adds	r3, #8
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f838:	7c7a      	ldrb	r2, [r7, #17]
 800f83a:	4968      	ldr	r1, [pc, #416]	; (800f9dc <etharp_query+0x268>)
 800f83c:	4613      	mov	r3, r2
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	4413      	add	r3, r2
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	440b      	add	r3, r1
 800f846:	3314      	adds	r3, #20
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d011      	beq.n	800f872 <etharp_query+0xfe>
 800f84e:	7c7a      	ldrb	r2, [r7, #17]
 800f850:	4962      	ldr	r1, [pc, #392]	; (800f9dc <etharp_query+0x268>)
 800f852:	4613      	mov	r3, r2
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4413      	add	r3, r2
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	440b      	add	r3, r1
 800f85c:	3314      	adds	r3, #20
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b01      	cmp	r3, #1
 800f862:	d806      	bhi.n	800f872 <etharp_query+0xfe>
 800f864:	4b5a      	ldr	r3, [pc, #360]	; (800f9d0 <etharp_query+0x25c>)
 800f866:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f86a:	495d      	ldr	r1, [pc, #372]	; (800f9e0 <etharp_query+0x26c>)
 800f86c:	485a      	ldr	r0, [pc, #360]	; (800f9d8 <etharp_query+0x264>)
 800f86e:	f001 fdf9 	bl	8011464 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d102      	bne.n	800f87e <etharp_query+0x10a>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10c      	bne.n	800f898 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 f963 	bl	800fb4c <etharp_request>
 800f886:	4603      	mov	r3, r0
 800f888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d102      	bne.n	800f898 <etharp_query+0x124>
      return result;
 800f892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f896:	e096      	b.n	800f9c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <etharp_query+0x138>
 800f89e:	4b4c      	ldr	r3, [pc, #304]	; (800f9d0 <etharp_query+0x25c>)
 800f8a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f8a4:	494f      	ldr	r1, [pc, #316]	; (800f9e4 <etharp_query+0x270>)
 800f8a6:	484c      	ldr	r0, [pc, #304]	; (800f9d8 <etharp_query+0x264>)
 800f8a8:	f001 fddc 	bl	8011464 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f8ac:	7c7a      	ldrb	r2, [r7, #17]
 800f8ae:	494b      	ldr	r1, [pc, #300]	; (800f9dc <etharp_query+0x268>)
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	4413      	add	r3, r2
 800f8b6:	00db      	lsls	r3, r3, #3
 800f8b8:	440b      	add	r3, r1
 800f8ba:	3314      	adds	r3, #20
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d917      	bls.n	800f8f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f8c2:	4a49      	ldr	r2, [pc, #292]	; (800f9e8 <etharp_query+0x274>)
 800f8c4:	7c7b      	ldrb	r3, [r7, #17]
 800f8c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f8c8:	7c7a      	ldrb	r2, [r7, #17]
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	4413      	add	r3, r2
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	4a41      	ldr	r2, [pc, #260]	; (800f9dc <etharp_query+0x268>)
 800f8d6:	4413      	add	r3, r2
 800f8d8:	3304      	adds	r3, #4
 800f8da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8de:	9200      	str	r2, [sp, #0]
 800f8e0:	697a      	ldr	r2, [r7, #20]
 800f8e2:	6879      	ldr	r1, [r7, #4]
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f001 fc75 	bl	80111d4 <ethernet_output>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8f0:	e067      	b.n	800f9c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f8f2:	7c7a      	ldrb	r2, [r7, #17]
 800f8f4:	4939      	ldr	r1, [pc, #228]	; (800f9dc <etharp_query+0x268>)
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	005b      	lsls	r3, r3, #1
 800f8fa:	4413      	add	r3, r2
 800f8fc:	00db      	lsls	r3, r3, #3
 800f8fe:	440b      	add	r3, r1
 800f900:	3314      	adds	r3, #20
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d15c      	bne.n	800f9c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f910:	e01c      	b.n	800f94c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	895a      	ldrh	r2, [r3, #10]
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	891b      	ldrh	r3, [r3, #8]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d10a      	bne.n	800f934 <etharp_query+0x1c0>
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <etharp_query+0x1c0>
 800f926:	4b2a      	ldr	r3, [pc, #168]	; (800f9d0 <etharp_query+0x25c>)
 800f928:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f92c:	492f      	ldr	r1, [pc, #188]	; (800f9ec <etharp_query+0x278>)
 800f92e:	482a      	ldr	r0, [pc, #168]	; (800f9d8 <etharp_query+0x264>)
 800f930:	f001 fd98 	bl	8011464 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	7b1b      	ldrb	r3, [r3, #12]
 800f938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <etharp_query+0x1d2>
        copy_needed = 1;
 800f940:	2301      	movs	r3, #1
 800f942:	61bb      	str	r3, [r7, #24]
        break;
 800f944:	e005      	b.n	800f952 <etharp_query+0x1de>
      }
      p = p->next;
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1df      	bne.n	800f912 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d007      	beq.n	800f968 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f95e:	200e      	movs	r0, #14
 800f960:	f7f9 fd9a 	bl	8009498 <pbuf_clone>
 800f964:	61f8      	str	r0, [r7, #28]
 800f966:	e004      	b.n	800f972 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f96c:	69f8      	ldr	r0, [r7, #28]
 800f96e:	f7f9 fbd7 	bl	8009120 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d021      	beq.n	800f9bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f978:	7c7a      	ldrb	r2, [r7, #17]
 800f97a:	4918      	ldr	r1, [pc, #96]	; (800f9dc <etharp_query+0x268>)
 800f97c:	4613      	mov	r3, r2
 800f97e:	005b      	lsls	r3, r3, #1
 800f980:	4413      	add	r3, r2
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	440b      	add	r3, r1
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00a      	beq.n	800f9a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f98c:	7c7a      	ldrb	r2, [r7, #17]
 800f98e:	4913      	ldr	r1, [pc, #76]	; (800f9dc <etharp_query+0x268>)
 800f990:	4613      	mov	r3, r2
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	4413      	add	r3, r2
 800f996:	00db      	lsls	r3, r3, #3
 800f998:	440b      	add	r3, r1
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7f9 fb1f 	bl	8008fe0 <pbuf_free>
      }
      arp_table[i].q = p;
 800f9a2:	7c7a      	ldrb	r2, [r7, #17]
 800f9a4:	490d      	ldr	r1, [pc, #52]	; (800f9dc <etharp_query+0x268>)
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	005b      	lsls	r3, r3, #1
 800f9aa:	4413      	add	r3, r2
 800f9ac:	00db      	lsls	r3, r3, #3
 800f9ae:	440b      	add	r3, r1
 800f9b0:	69fa      	ldr	r2, [r7, #28]
 800f9b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9ba:	e002      	b.n	800f9c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f9bc:	23ff      	movs	r3, #255	; 0xff
 800f9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f9c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3728      	adds	r7, #40	; 0x28
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	08014720 	.word	0x08014720
 800f9d4:	080148cc 	.word	0x080148cc
 800f9d8:	08014798 	.word	0x08014798
 800f9dc:	20008d64 	.word	0x20008d64
 800f9e0:	080148dc 	.word	0x080148dc
 800f9e4:	080148c0 	.word	0x080148c0
 800f9e8:	20008e54 	.word	0x20008e54
 800f9ec:	08014904 	.word	0x08014904

0800f9f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08a      	sub	sp, #40	; 0x28
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
 800f9fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d106      	bne.n	800fa16 <etharp_raw+0x26>
 800fa08:	4b3a      	ldr	r3, [pc, #232]	; (800faf4 <etharp_raw+0x104>)
 800fa0a:	f240 4257 	movw	r2, #1111	; 0x457
 800fa0e:	493a      	ldr	r1, [pc, #232]	; (800faf8 <etharp_raw+0x108>)
 800fa10:	483a      	ldr	r0, [pc, #232]	; (800fafc <etharp_raw+0x10c>)
 800fa12:	f001 fd27 	bl	8011464 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fa16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa1a:	211c      	movs	r1, #28
 800fa1c:	200e      	movs	r0, #14
 800fa1e:	f7f8 fffb 	bl	8008a18 <pbuf_alloc>
 800fa22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d102      	bne.n	800fa30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2e:	e05d      	b.n	800faec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	895b      	ldrh	r3, [r3, #10]
 800fa34:	2b1b      	cmp	r3, #27
 800fa36:	d806      	bhi.n	800fa46 <etharp_raw+0x56>
 800fa38:	4b2e      	ldr	r3, [pc, #184]	; (800faf4 <etharp_raw+0x104>)
 800fa3a:	f240 4262 	movw	r2, #1122	; 0x462
 800fa3e:	4930      	ldr	r1, [pc, #192]	; (800fb00 <etharp_raw+0x110>)
 800fa40:	482e      	ldr	r0, [pc, #184]	; (800fafc <etharp_raw+0x10c>)
 800fa42:	f001 fd0f 	bl	8011464 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fa4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f8 f865 	bl	8007b1e <lwip_htons>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461a      	mov	r2, r3
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa62:	2b06      	cmp	r3, #6
 800fa64:	d006      	beq.n	800fa74 <etharp_raw+0x84>
 800fa66:	4b23      	ldr	r3, [pc, #140]	; (800faf4 <etharp_raw+0x104>)
 800fa68:	f240 4269 	movw	r2, #1129	; 0x469
 800fa6c:	4925      	ldr	r1, [pc, #148]	; (800fb04 <etharp_raw+0x114>)
 800fa6e:	4823      	ldr	r0, [pc, #140]	; (800fafc <etharp_raw+0x10c>)
 800fa70:	f001 fcf8 	bl	8011464 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	3308      	adds	r3, #8
 800fa78:	2206      	movs	r2, #6
 800fa7a:	6839      	ldr	r1, [r7, #0]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f001 febc 	bl	80117fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	3312      	adds	r3, #18
 800fa86:	2206      	movs	r2, #6
 800fa88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f001 feb5 	bl	80117fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	330e      	adds	r3, #14
 800fa94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa96:	6812      	ldr	r2, [r2, #0]
 800fa98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	3318      	adds	r3, #24
 800fa9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa0:	6812      	ldr	r2, [r2, #0]
 800faa2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	2200      	movs	r2, #0
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	2200      	movs	r2, #0
 800faac:	f042 0201 	orr.w	r2, r2, #1
 800fab0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f042 0208 	orr.w	r2, r2, #8
 800faba:	709a      	strb	r2, [r3, #2]
 800fabc:	2200      	movs	r2, #0
 800fabe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2206      	movs	r2, #6
 800fac4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2204      	movs	r2, #4
 800faca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800facc:	f640 0306 	movw	r3, #2054	; 0x806
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	69b9      	ldr	r1, [r7, #24]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f001 fb7b 	bl	80111d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fade:	69b8      	ldr	r0, [r7, #24]
 800fae0:	f7f9 fa7e 	bl	8008fe0 <pbuf_free>
  p = NULL;
 800fae4:	2300      	movs	r3, #0
 800fae6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3720      	adds	r7, #32
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	08014720 	.word	0x08014720
 800faf8:	08014870 	.word	0x08014870
 800fafc:	08014798 	.word	0x08014798
 800fb00:	08014920 	.word	0x08014920
 800fb04:	08014954 	.word	0x08014954

0800fb08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b088      	sub	sp, #32
 800fb0c:	af04      	add	r7, sp, #16
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb24:	2201      	movs	r2, #1
 800fb26:	9203      	str	r2, [sp, #12]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	9202      	str	r2, [sp, #8]
 800fb2c:	4a06      	ldr	r2, [pc, #24]	; (800fb48 <etharp_request_dst+0x40>)
 800fb2e:	9201      	str	r2, [sp, #4]
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	4603      	mov	r3, r0
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f7ff ff5a 	bl	800f9f0 <etharp_raw>
 800fb3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	08014ee4 	.word	0x08014ee4

0800fb4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fb56:	4a05      	ldr	r2, [pc, #20]	; (800fb6c <etharp_request+0x20>)
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7ff ffd4 	bl	800fb08 <etharp_request_dst>
 800fb60:	4603      	mov	r3, r0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	08014edc 	.word	0x08014edc

0800fb70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b08e      	sub	sp, #56	; 0x38
 800fb74:	af04      	add	r7, sp, #16
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fb7a:	4b79      	ldr	r3, [pc, #484]	; (800fd60 <icmp_input+0x1f0>)
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	f003 030f 	and.w	r3, r3, #15
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fb90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb92:	2b13      	cmp	r3, #19
 800fb94:	f240 80cd 	bls.w	800fd32 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	895b      	ldrh	r3, [r3, #10]
 800fb9c:	2b03      	cmp	r3, #3
 800fb9e:	f240 80ca 	bls.w	800fd36 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fbac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 80b7 	beq.w	800fd24 <icmp_input+0x1b4>
 800fbb6:	2b08      	cmp	r3, #8
 800fbb8:	f040 80b7 	bne.w	800fd2a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fbbc:	4b69      	ldr	r3, [pc, #420]	; (800fd64 <icmp_input+0x1f4>)
 800fbbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fbc0:	4b67      	ldr	r3, [pc, #412]	; (800fd60 <icmp_input+0x1f0>)
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbc8:	2be0      	cmp	r3, #224	; 0xe0
 800fbca:	f000 80bb 	beq.w	800fd44 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fbce:	4b64      	ldr	r3, [pc, #400]	; (800fd60 <icmp_input+0x1f0>)
 800fbd0:	695b      	ldr	r3, [r3, #20]
 800fbd2:	4a63      	ldr	r2, [pc, #396]	; (800fd60 <icmp_input+0x1f0>)
 800fbd4:	6812      	ldr	r2, [r2, #0]
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 fbed 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 80b1 	bne.w	800fd48 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	891b      	ldrh	r3, [r3, #8]
 800fbea:	2b07      	cmp	r3, #7
 800fbec:	f240 80a5 	bls.w	800fd3a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fbf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbf2:	330e      	adds	r3, #14
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7f9 f95c 	bl	8008eb4 <pbuf_add_header>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d04b      	beq.n	800fc9a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	891a      	ldrh	r2, [r3, #8]
 800fc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc08:	4413      	add	r3, r2
 800fc0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	891b      	ldrh	r3, [r3, #8]
 800fc10:	8b7a      	ldrh	r2, [r7, #26]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	f0c0 809a 	bcc.w	800fd4c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fc18:	8b7b      	ldrh	r3, [r7, #26]
 800fc1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc1e:	4619      	mov	r1, r3
 800fc20:	200e      	movs	r0, #14
 800fc22:	f7f8 fef9 	bl	8008a18 <pbuf_alloc>
 800fc26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 8090 	beq.w	800fd50 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	895b      	ldrh	r3, [r3, #10]
 800fc34:	461a      	mov	r2, r3
 800fc36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc38:	3308      	adds	r3, #8
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d203      	bcs.n	800fc46 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7f9 f9ce 	bl	8008fe0 <pbuf_free>
          goto icmperr;
 800fc44:	e085      	b.n	800fd52 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f001 fdd3 	bl	80117fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc56:	4619      	mov	r1, r3
 800fc58:	6978      	ldr	r0, [r7, #20]
 800fc5a:	f7f9 f93b 	bl	8008ed4 <pbuf_remove_header>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d009      	beq.n	800fc78 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fc64:	4b40      	ldr	r3, [pc, #256]	; (800fd68 <icmp_input+0x1f8>)
 800fc66:	22b6      	movs	r2, #182	; 0xb6
 800fc68:	4940      	ldr	r1, [pc, #256]	; (800fd6c <icmp_input+0x1fc>)
 800fc6a:	4841      	ldr	r0, [pc, #260]	; (800fd70 <icmp_input+0x200>)
 800fc6c:	f001 fbfa 	bl	8011464 <iprintf>
          pbuf_free(r);
 800fc70:	6978      	ldr	r0, [r7, #20]
 800fc72:	f7f9 f9b5 	bl	8008fe0 <pbuf_free>
          goto icmperr;
 800fc76:	e06c      	b.n	800fd52 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fc78:	6879      	ldr	r1, [r7, #4]
 800fc7a:	6978      	ldr	r0, [r7, #20]
 800fc7c:	f7f9 fac8 	bl	8009210 <pbuf_copy>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fc86:	6978      	ldr	r0, [r7, #20]
 800fc88:	f7f9 f9aa 	bl	8008fe0 <pbuf_free>
          goto icmperr;
 800fc8c:	e061      	b.n	800fd52 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7f9 f9a6 	bl	8008fe0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	607b      	str	r3, [r7, #4]
 800fc98:	e00f      	b.n	800fcba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc9c:	330e      	adds	r3, #14
 800fc9e:	4619      	mov	r1, r3
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7f9 f917 	bl	8008ed4 <pbuf_remove_header>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d006      	beq.n	800fcba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fcac:	4b2e      	ldr	r3, [pc, #184]	; (800fd68 <icmp_input+0x1f8>)
 800fcae:	22c7      	movs	r2, #199	; 0xc7
 800fcb0:	4930      	ldr	r1, [pc, #192]	; (800fd74 <icmp_input+0x204>)
 800fcb2:	482f      	ldr	r0, [pc, #188]	; (800fd70 <icmp_input+0x200>)
 800fcb4:	f001 fbd6 	bl	8011464 <iprintf>
          goto icmperr;
 800fcb8:	e04b      	b.n	800fd52 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fcc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7f9 f8f5 	bl	8008eb4 <pbuf_add_header>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d12b      	bne.n	800fd28 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fcde:	4b20      	ldr	r3, [pc, #128]	; (800fd60 <icmp_input+0x1f0>)
 800fce0:	691a      	ldr	r2, [r3, #16]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	2200      	movs	r2, #0
 800fcea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	709a      	strb	r2, [r3, #2]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	22ff      	movs	r2, #255	; 0xff
 800fcfa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	729a      	strb	r2, [r3, #10]
 800fd02:	2200      	movs	r2, #0
 800fd04:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	9302      	str	r3, [sp, #8]
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	23ff      	movs	r3, #255	; 0xff
 800fd14:	2200      	movs	r2, #0
 800fd16:	69f9      	ldr	r1, [r7, #28]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fa75 	bl	8010208 <ip4_output_if>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fd22:	e001      	b.n	800fd28 <icmp_input+0x1b8>
      break;
 800fd24:	bf00      	nop
 800fd26:	e000      	b.n	800fd2a <icmp_input+0x1ba>
      break;
 800fd28:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7f9 f958 	bl	8008fe0 <pbuf_free>
  return;
 800fd30:	e013      	b.n	800fd5a <icmp_input+0x1ea>
    goto lenerr;
 800fd32:	bf00      	nop
 800fd34:	e002      	b.n	800fd3c <icmp_input+0x1cc>
    goto lenerr;
 800fd36:	bf00      	nop
 800fd38:	e000      	b.n	800fd3c <icmp_input+0x1cc>
        goto lenerr;
 800fd3a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7f9 f94f 	bl	8008fe0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fd42:	e00a      	b.n	800fd5a <icmp_input+0x1ea>
        goto icmperr;
 800fd44:	bf00      	nop
 800fd46:	e004      	b.n	800fd52 <icmp_input+0x1e2>
        goto icmperr;
 800fd48:	bf00      	nop
 800fd4a:	e002      	b.n	800fd52 <icmp_input+0x1e2>
          goto icmperr;
 800fd4c:	bf00      	nop
 800fd4e:	e000      	b.n	800fd52 <icmp_input+0x1e2>
          goto icmperr;
 800fd50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7f9 f944 	bl	8008fe0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fd58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fd5a:	3728      	adds	r7, #40	; 0x28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	20005794 	.word	0x20005794
 800fd64:	200057a8 	.word	0x200057a8
 800fd68:	08014998 	.word	0x08014998
 800fd6c:	080149d0 	.word	0x080149d0
 800fd70:	08014a08 	.word	0x08014a08
 800fd74:	08014a30 	.word	0x08014a30

0800fd78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	460b      	mov	r3, r1
 800fd82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fd84:	78fb      	ldrb	r3, [r7, #3]
 800fd86:	461a      	mov	r2, r3
 800fd88:	2103      	movs	r1, #3
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f814 	bl	800fdb8 <icmp_send_response>
}
 800fd90:	bf00      	nop
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fda4:	78fb      	ldrb	r3, [r7, #3]
 800fda6:	461a      	mov	r2, r3
 800fda8:	210b      	movs	r1, #11
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 f804 	bl	800fdb8 <icmp_send_response>
}
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08c      	sub	sp, #48	; 0x30
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	70fb      	strb	r3, [r7, #3]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fdc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdcc:	2124      	movs	r1, #36	; 0x24
 800fdce:	2022      	movs	r0, #34	; 0x22
 800fdd0:	f7f8 fe22 	bl	8008a18 <pbuf_alloc>
 800fdd4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d04c      	beq.n	800fe76 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	895b      	ldrh	r3, [r3, #10]
 800fde0:	2b23      	cmp	r3, #35	; 0x23
 800fde2:	d806      	bhi.n	800fdf2 <icmp_send_response+0x3a>
 800fde4:	4b26      	ldr	r3, [pc, #152]	; (800fe80 <icmp_send_response+0xc8>)
 800fde6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fdea:	4926      	ldr	r1, [pc, #152]	; (800fe84 <icmp_send_response+0xcc>)
 800fdec:	4826      	ldr	r0, [pc, #152]	; (800fe88 <icmp_send_response+0xd0>)
 800fdee:	f001 fb39 	bl	8011464 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	78fa      	ldrb	r2, [r7, #3]
 800fe02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	78ba      	ldrb	r2, [r7, #2]
 800fe08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	711a      	strb	r2, [r3, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	2200      	movs	r2, #0
 800fe18:	719a      	strb	r2, [r3, #6]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	f103 0008 	add.w	r0, r3, #8
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	221c      	movs	r2, #28
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	f001 fce4 	bl	80117fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fe38:	f107 030c 	add.w	r3, r7, #12
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f000 f825 	bl	800fe8c <ip4_route>
 800fe42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d011      	beq.n	800fe6e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	709a      	strb	r2, [r3, #2]
 800fe50:	2200      	movs	r2, #0
 800fe52:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fe54:	f107 020c 	add.w	r2, r7, #12
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	9302      	str	r3, [sp, #8]
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	2300      	movs	r3, #0
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	23ff      	movs	r3, #255	; 0xff
 800fe66:	2100      	movs	r1, #0
 800fe68:	69f8      	ldr	r0, [r7, #28]
 800fe6a:	f000 f9cd 	bl	8010208 <ip4_output_if>
  }
  pbuf_free(q);
 800fe6e:	69f8      	ldr	r0, [r7, #28]
 800fe70:	f7f9 f8b6 	bl	8008fe0 <pbuf_free>
 800fe74:	e000      	b.n	800fe78 <icmp_send_response+0xc0>
    return;
 800fe76:	bf00      	nop
}
 800fe78:	3720      	adds	r7, #32
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	08014998 	.word	0x08014998
 800fe84:	08014a64 	.word	0x08014a64
 800fe88:	08014a08 	.word	0x08014a08

0800fe8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fe94:	4b33      	ldr	r3, [pc, #204]	; (800ff64 <ip4_route+0xd8>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	60fb      	str	r3, [r7, #12]
 800fe9a:	e036      	b.n	800ff0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d02b      	beq.n	800ff04 <ip4_route+0x78>
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feb2:	089b      	lsrs	r3, r3, #2
 800feb4:	f003 0301 	and.w	r3, r3, #1
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d022      	beq.n	800ff04 <ip4_route+0x78>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	3304      	adds	r3, #4
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d01d      	beq.n	800ff04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	3304      	adds	r3, #4
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	405a      	eors	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3308      	adds	r3, #8
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4013      	ands	r3, r2
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d101      	bne.n	800fee4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	e038      	b.n	800ff56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feea:	f003 0302 	and.w	r3, r3, #2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d108      	bne.n	800ff04 <ip4_route+0x78>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	330c      	adds	r3, #12
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d101      	bne.n	800ff04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	e028      	b.n	800ff56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	60fb      	str	r3, [r7, #12]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1c5      	bne.n	800fe9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff10:	4b15      	ldr	r3, [pc, #84]	; (800ff68 <ip4_route+0xdc>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d01a      	beq.n	800ff4e <ip4_route+0xc2>
 800ff18:	4b13      	ldr	r3, [pc, #76]	; (800ff68 <ip4_route+0xdc>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d012      	beq.n	800ff4e <ip4_route+0xc2>
 800ff28:	4b0f      	ldr	r3, [pc, #60]	; (800ff68 <ip4_route+0xdc>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff30:	f003 0304 	and.w	r3, r3, #4
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00a      	beq.n	800ff4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff38:	4b0b      	ldr	r3, [pc, #44]	; (800ff68 <ip4_route+0xdc>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ff4c:	d101      	bne.n	800ff52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	e001      	b.n	800ff56 <ip4_route+0xca>
  }

  return netif_default;
 800ff52:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <ip4_route+0xdc>)
 800ff54:	681b      	ldr	r3, [r3, #0]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3714      	adds	r7, #20
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	20008cf8 	.word	0x20008cf8
 800ff68:	20008cfc 	.word	0x20008cfc

0800ff6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff7a:	f003 0301 	and.w	r3, r3, #1
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d016      	beq.n	800ffb2 <ip4_input_accept+0x46>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3304      	adds	r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d011      	beq.n	800ffb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <ip4_input_accept+0x50>)
 800ff90:	695a      	ldr	r2, [r3, #20]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	3304      	adds	r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d008      	beq.n	800ffae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <ip4_input_accept+0x50>)
 800ff9e:	695b      	ldr	r3, [r3, #20]
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f000 fa08 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 800ffa8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e000      	b.n	800ffb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	20005794 	.word	0x20005794

0800ffc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	091b      	lsrs	r3, r3, #4
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	d004      	beq.n	800ffe6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7f8 ffff 	bl	8008fe0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	e107      	b.n	80101f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	f003 030f 	and.w	r3, r3, #15
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	885b      	ldrh	r3, [r3, #2]
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f7 fd8e 	bl	8007b1e <lwip_htons>
 8010002:	4603      	mov	r3, r0
 8010004:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	891b      	ldrh	r3, [r3, #8]
 801000a:	89ba      	ldrh	r2, [r7, #12]
 801000c:	429a      	cmp	r2, r3
 801000e:	d204      	bcs.n	801001a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010010:	89bb      	ldrh	r3, [r7, #12]
 8010012:	4619      	mov	r1, r3
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7f8 fe5d 	bl	8008cd4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	895b      	ldrh	r3, [r3, #10]
 801001e:	89fa      	ldrh	r2, [r7, #14]
 8010020:	429a      	cmp	r2, r3
 8010022:	d807      	bhi.n	8010034 <ip4_input+0x74>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	891b      	ldrh	r3, [r3, #8]
 8010028:	89ba      	ldrh	r2, [r7, #12]
 801002a:	429a      	cmp	r2, r3
 801002c:	d802      	bhi.n	8010034 <ip4_input+0x74>
 801002e:	89fb      	ldrh	r3, [r7, #14]
 8010030:	2b13      	cmp	r3, #19
 8010032:	d804      	bhi.n	801003e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7f8 ffd3 	bl	8008fe0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	e0db      	b.n	80101f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	4a6f      	ldr	r2, [pc, #444]	; (8010200 <ip4_input+0x240>)
 8010044:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	4a6d      	ldr	r2, [pc, #436]	; (8010200 <ip4_input+0x240>)
 801004c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801004e:	4b6c      	ldr	r3, [pc, #432]	; (8010200 <ip4_input+0x240>)
 8010050:	695b      	ldr	r3, [r3, #20]
 8010052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010056:	2be0      	cmp	r3, #224	; 0xe0
 8010058:	d112      	bne.n	8010080 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <ip4_input+0xba>
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3304      	adds	r3, #4
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d002      	beq.n	801007a <ip4_input+0xba>
      netif = inp;
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	613b      	str	r3, [r7, #16]
 8010078:	e02a      	b.n	80100d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801007a:	2300      	movs	r3, #0
 801007c:	613b      	str	r3, [r7, #16]
 801007e:	e027      	b.n	80100d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010080:	6838      	ldr	r0, [r7, #0]
 8010082:	f7ff ff73 	bl	800ff6c <ip4_input_accept>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <ip4_input+0xd2>
      netif = inp;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	613b      	str	r3, [r7, #16]
 8010090:	e01e      	b.n	80100d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010096:	4b5a      	ldr	r3, [pc, #360]	; (8010200 <ip4_input+0x240>)
 8010098:	695b      	ldr	r3, [r3, #20]
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b7f      	cmp	r3, #127	; 0x7f
 801009e:	d017      	beq.n	80100d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80100a0:	4b58      	ldr	r3, [pc, #352]	; (8010204 <ip4_input+0x244>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	613b      	str	r3, [r7, #16]
 80100a6:	e00e      	b.n	80100c6 <ip4_input+0x106>
          if (netif == inp) {
 80100a8:	693a      	ldr	r2, [r7, #16]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d006      	beq.n	80100be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80100b0:	6938      	ldr	r0, [r7, #16]
 80100b2:	f7ff ff5b 	bl	800ff6c <ip4_input_accept>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d108      	bne.n	80100ce <ip4_input+0x10e>
 80100bc:	e000      	b.n	80100c0 <ip4_input+0x100>
            continue;
 80100be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	613b      	str	r3, [r7, #16]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d1ed      	bne.n	80100a8 <ip4_input+0xe8>
 80100cc:	e000      	b.n	80100d0 <ip4_input+0x110>
            break;
 80100ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80100d0:	4b4b      	ldr	r3, [pc, #300]	; (8010200 <ip4_input+0x240>)
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f000 f96e 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d105      	bne.n	80100ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80100e2:	4b47      	ldr	r3, [pc, #284]	; (8010200 <ip4_input+0x240>)
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80100ea:	2be0      	cmp	r3, #224	; 0xe0
 80100ec:	d104      	bne.n	80100f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7f8 ff76 	bl	8008fe0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80100f4:	2300      	movs	r3, #0
 80100f6:	e07e      	b.n	80101f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d104      	bne.n	8010108 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7f8 ff6e 	bl	8008fe0 <pbuf_free>
    return ERR_OK;
 8010104:	2300      	movs	r3, #0
 8010106:	e076      	b.n	80101f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	88db      	ldrh	r3, [r3, #6]
 801010c:	b29b      	uxth	r3, r3
 801010e:	461a      	mov	r2, r3
 8010110:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010114:	4013      	ands	r3, r2
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00b      	beq.n	8010132 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fc92 	bl	8010a44 <ip4_reass>
 8010120:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d101      	bne.n	801012c <ip4_input+0x16c>
      return ERR_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	e064      	b.n	80101f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010132:	4a33      	ldr	r2, [pc, #204]	; (8010200 <ip4_input+0x240>)
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010138:	4a31      	ldr	r2, [pc, #196]	; (8010200 <ip4_input+0x240>)
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801013e:	4a30      	ldr	r2, [pc, #192]	; (8010200 <ip4_input+0x240>)
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f003 030f 	and.w	r3, r3, #15
 801014c:	b2db      	uxtb	r3, r3
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	b2db      	uxtb	r3, r3
 8010152:	b29a      	uxth	r2, r3
 8010154:	4b2a      	ldr	r3, [pc, #168]	; (8010200 <ip4_input+0x240>)
 8010156:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010158:	89fb      	ldrh	r3, [r7, #14]
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f8 feb9 	bl	8008ed4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	7a5b      	ldrb	r3, [r3, #9]
 8010166:	2b11      	cmp	r3, #17
 8010168:	d006      	beq.n	8010178 <ip4_input+0x1b8>
 801016a:	2b11      	cmp	r3, #17
 801016c:	dc13      	bgt.n	8010196 <ip4_input+0x1d6>
 801016e:	2b01      	cmp	r3, #1
 8010170:	d00c      	beq.n	801018c <ip4_input+0x1cc>
 8010172:	2b06      	cmp	r3, #6
 8010174:	d005      	beq.n	8010182 <ip4_input+0x1c2>
 8010176:	e00e      	b.n	8010196 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010178:	6839      	ldr	r1, [r7, #0]
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7fe fc98 	bl	800eab0 <udp_input>
        break;
 8010180:	e026      	b.n	80101d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7fa fd53 	bl	800ac30 <tcp_input>
        break;
 801018a:	e021      	b.n	80101d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801018c:	6839      	ldr	r1, [r7, #0]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7ff fcee 	bl	800fb70 <icmp_input>
        break;
 8010194:	e01c      	b.n	80101d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010196:	4b1a      	ldr	r3, [pc, #104]	; (8010200 <ip4_input+0x240>)
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	6939      	ldr	r1, [r7, #16]
 801019c:	4618      	mov	r0, r3
 801019e:	f000 f90b 	bl	80103b8 <ip4_addr_isbroadcast_u32>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10f      	bne.n	80101c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101a8:	4b15      	ldr	r3, [pc, #84]	; (8010200 <ip4_input+0x240>)
 80101aa:	695b      	ldr	r3, [r3, #20]
 80101ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101b0:	2be0      	cmp	r3, #224	; 0xe0
 80101b2:	d009      	beq.n	80101c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80101b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80101b8:	4619      	mov	r1, r3
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7f8 fefd 	bl	8008fba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80101c0:	2102      	movs	r1, #2
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff fdd8 	bl	800fd78 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f8 ff09 	bl	8008fe0 <pbuf_free>
        break;
 80101ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80101d0:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <ip4_input+0x240>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80101d6:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <ip4_input+0x240>)
 80101d8:	2200      	movs	r2, #0
 80101da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80101dc:	4b08      	ldr	r3, [pc, #32]	; (8010200 <ip4_input+0x240>)
 80101de:	2200      	movs	r2, #0
 80101e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80101e2:	4b07      	ldr	r3, [pc, #28]	; (8010200 <ip4_input+0x240>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80101e8:	4b05      	ldr	r3, [pc, #20]	; (8010200 <ip4_input+0x240>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80101ee:	4b04      	ldr	r3, [pc, #16]	; (8010200 <ip4_input+0x240>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	20005794 	.word	0x20005794
 8010204:	20008cf8 	.word	0x20008cf8

08010208 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08a      	sub	sp, #40	; 0x28
 801020c:	af04      	add	r7, sp, #16
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
 8010214:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d009      	beq.n	8010234 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <ip4_output_if+0x26>
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d102      	bne.n	8010234 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	3304      	adds	r3, #4
 8010232:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010234:	78fa      	ldrb	r2, [r7, #3]
 8010236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010238:	9302      	str	r3, [sp, #8]
 801023a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	4613      	mov	r3, r2
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	6979      	ldr	r1, [r7, #20]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f000 f805 	bl	801025c <ip4_output_if_src>
 8010252:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010254:	4618      	mov	r0, r3
 8010256:	3718      	adds	r7, #24
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b088      	sub	sp, #32
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
 8010268:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	7b9b      	ldrb	r3, [r3, #14]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d006      	beq.n	8010280 <ip4_output_if_src+0x24>
 8010272:	4b4b      	ldr	r3, [pc, #300]	; (80103a0 <ip4_output_if_src+0x144>)
 8010274:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010278:	494a      	ldr	r1, [pc, #296]	; (80103a4 <ip4_output_if_src+0x148>)
 801027a:	484b      	ldr	r0, [pc, #300]	; (80103a8 <ip4_output_if_src+0x14c>)
 801027c:	f001 f8f2 	bl	8011464 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d060      	beq.n	8010348 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010286:	2314      	movs	r3, #20
 8010288:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801028a:	2114      	movs	r1, #20
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7f8 fe11 	bl	8008eb4 <pbuf_add_header>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010298:	f06f 0301 	mvn.w	r3, #1
 801029c:	e07c      	b.n	8010398 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	895b      	ldrh	r3, [r3, #10]
 80102a8:	2b13      	cmp	r3, #19
 80102aa:	d806      	bhi.n	80102ba <ip4_output_if_src+0x5e>
 80102ac:	4b3c      	ldr	r3, [pc, #240]	; (80103a0 <ip4_output_if_src+0x144>)
 80102ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80102b2:	493e      	ldr	r1, [pc, #248]	; (80103ac <ip4_output_if_src+0x150>)
 80102b4:	483c      	ldr	r0, [pc, #240]	; (80103a8 <ip4_output_if_src+0x14c>)
 80102b6:	f001 f8d5 	bl	8011464 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	78fa      	ldrb	r2, [r7, #3]
 80102be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80102c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80102d0:	8b7b      	ldrh	r3, [r7, #26]
 80102d2:	089b      	lsrs	r3, r3, #2
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80102e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	891b      	ldrh	r3, [r3, #8]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7f7 fc15 	bl	8007b1e <lwip_htons>
 80102f4:	4603      	mov	r3, r0
 80102f6:	461a      	mov	r2, r3
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	2200      	movs	r2, #0
 8010300:	719a      	strb	r2, [r3, #6]
 8010302:	2200      	movs	r2, #0
 8010304:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010306:	4b2a      	ldr	r3, [pc, #168]	; (80103b0 <ip4_output_if_src+0x154>)
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	4618      	mov	r0, r3
 801030c:	f7f7 fc07 	bl	8007b1e <lwip_htons>
 8010310:	4603      	mov	r3, r0
 8010312:	461a      	mov	r2, r3
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010318:	4b25      	ldr	r3, [pc, #148]	; (80103b0 <ip4_output_if_src+0x154>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	3301      	adds	r3, #1
 801031e:	b29a      	uxth	r2, r3
 8010320:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <ip4_output_if_src+0x154>)
 8010322:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d104      	bne.n	8010334 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801032a:	4b22      	ldr	r3, [pc, #136]	; (80103b4 <ip4_output_if_src+0x158>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	60da      	str	r2, [r3, #12]
 8010332:	e003      	b.n	801033c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	2200      	movs	r2, #0
 8010340:	729a      	strb	r2, [r3, #10]
 8010342:	2200      	movs	r2, #0
 8010344:	72da      	strb	r2, [r3, #11]
 8010346:	e00f      	b.n	8010368 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	895b      	ldrh	r3, [r3, #10]
 801034c:	2b13      	cmp	r3, #19
 801034e:	d802      	bhi.n	8010356 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010350:	f06f 0301 	mvn.w	r3, #1
 8010354:	e020      	b.n	8010398 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010362:	f107 0314 	add.w	r3, r7, #20
 8010366:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00c      	beq.n	801038a <ip4_output_if_src+0x12e>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	891a      	ldrh	r2, [r3, #8]
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010378:	429a      	cmp	r2, r3
 801037a:	d906      	bls.n	801038a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 fd53 	bl	8010e2c <ip4_frag>
 8010386:	4603      	mov	r3, r0
 8010388:	e006      	b.n	8010398 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038c:	695b      	ldr	r3, [r3, #20]
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	68f9      	ldr	r1, [r7, #12]
 8010392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010394:	4798      	blx	r3
 8010396:	4603      	mov	r3, r0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	08014a90 	.word	0x08014a90
 80103a4:	08014ac4 	.word	0x08014ac4
 80103a8:	08014ad0 	.word	0x08014ad0
 80103ac:	08014af8 	.word	0x08014af8
 80103b0:	20008e56 	.word	0x20008e56
 80103b4:	08014ed8 	.word	0x08014ed8

080103b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103cc:	d002      	beq.n	80103d4 <ip4_addr_isbroadcast_u32+0x1c>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80103d4:	2301      	movs	r3, #1
 80103d6:	e02a      	b.n	801042e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103de:	f003 0302 	and.w	r3, r3, #2
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d101      	bne.n	80103ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80103e6:	2300      	movs	r3, #0
 80103e8:	e021      	b.n	801042e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	3304      	adds	r3, #4
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d101      	bne.n	80103fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	e019      	b.n	801042e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	3304      	adds	r3, #4
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	405a      	eors	r2, r3
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4013      	ands	r3, r2
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10d      	bne.n	801042c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	3308      	adds	r3, #8
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	43da      	mvns	r2, r3
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	3308      	adds	r3, #8
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010424:	429a      	cmp	r2, r3
 8010426:	d101      	bne.n	801042c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010428:	2301      	movs	r3, #1
 801042a:	e000      	b.n	801042e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801042c:	2300      	movs	r3, #0
  }
}
 801042e:	4618      	mov	r0, r3
 8010430:	3714      	adds	r7, #20
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
	...

0801043c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010442:	2300      	movs	r3, #0
 8010444:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010446:	4b12      	ldr	r3, [pc, #72]	; (8010490 <ip_reass_tmr+0x54>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801044c:	e018      	b.n	8010480 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	7fdb      	ldrb	r3, [r3, #31]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00b      	beq.n	801046e <ip_reass_tmr+0x32>
      r->timer--;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	7fdb      	ldrb	r3, [r3, #31]
 801045a:	3b01      	subs	r3, #1
 801045c:	b2da      	uxtb	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	e008      	b.n	8010480 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010478:	68b9      	ldr	r1, [r7, #8]
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f80a 	bl	8010494 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1e3      	bne.n	801044e <ip_reass_tmr+0x12>
    }
  }
}
 8010486:	bf00      	nop
 8010488:	bf00      	nop
 801048a:	3710      	adds	r7, #16
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	20008e58 	.word	0x20008e58

08010494 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d105      	bne.n	80104b6 <ip_reass_free_complete_datagram+0x22>
 80104aa:	4b45      	ldr	r3, [pc, #276]	; (80105c0 <ip_reass_free_complete_datagram+0x12c>)
 80104ac:	22ab      	movs	r2, #171	; 0xab
 80104ae:	4945      	ldr	r1, [pc, #276]	; (80105c4 <ip_reass_free_complete_datagram+0x130>)
 80104b0:	4845      	ldr	r0, [pc, #276]	; (80105c8 <ip_reass_free_complete_datagram+0x134>)
 80104b2:	f000 ffd7 	bl	8011464 <iprintf>
  if (prev != NULL) {
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00a      	beq.n	80104d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d005      	beq.n	80104d2 <ip_reass_free_complete_datagram+0x3e>
 80104c6:	4b3e      	ldr	r3, [pc, #248]	; (80105c0 <ip_reass_free_complete_datagram+0x12c>)
 80104c8:	22ad      	movs	r2, #173	; 0xad
 80104ca:	4940      	ldr	r1, [pc, #256]	; (80105cc <ip_reass_free_complete_datagram+0x138>)
 80104cc:	483e      	ldr	r0, [pc, #248]	; (80105c8 <ip_reass_free_complete_datagram+0x134>)
 80104ce:	f000 ffc9 	bl	8011464 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	889b      	ldrh	r3, [r3, #4]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d12a      	bne.n	801053a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	6858      	ldr	r0, [r3, #4]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	3308      	adds	r3, #8
 80104fa:	2214      	movs	r2, #20
 80104fc:	4619      	mov	r1, r3
 80104fe:	f001 f97c 	bl	80117fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010502:	2101      	movs	r1, #1
 8010504:	69b8      	ldr	r0, [r7, #24]
 8010506:	f7ff fc47 	bl	800fd98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801050a:	69b8      	ldr	r0, [r7, #24]
 801050c:	f7f8 fdf0 	bl	80090f0 <pbuf_clen>
 8010510:	4603      	mov	r3, r0
 8010512:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010514:	8bfa      	ldrh	r2, [r7, #30]
 8010516:	8a7b      	ldrh	r3, [r7, #18]
 8010518:	4413      	add	r3, r2
 801051a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801051e:	db05      	blt.n	801052c <ip_reass_free_complete_datagram+0x98>
 8010520:	4b27      	ldr	r3, [pc, #156]	; (80105c0 <ip_reass_free_complete_datagram+0x12c>)
 8010522:	22bc      	movs	r2, #188	; 0xbc
 8010524:	492a      	ldr	r1, [pc, #168]	; (80105d0 <ip_reass_free_complete_datagram+0x13c>)
 8010526:	4828      	ldr	r0, [pc, #160]	; (80105c8 <ip_reass_free_complete_datagram+0x134>)
 8010528:	f000 ff9c 	bl	8011464 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801052c:	8bfa      	ldrh	r2, [r7, #30]
 801052e:	8a7b      	ldrh	r3, [r7, #18]
 8010530:	4413      	add	r3, r2
 8010532:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010534:	69b8      	ldr	r0, [r7, #24]
 8010536:	f7f8 fd53 	bl	8008fe0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010540:	e01f      	b.n	8010582 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f7f8 fdcc 	bl	80090f0 <pbuf_clen>
 8010558:	4603      	mov	r3, r0
 801055a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801055c:	8bfa      	ldrh	r2, [r7, #30]
 801055e:	8a7b      	ldrh	r3, [r7, #18]
 8010560:	4413      	add	r3, r2
 8010562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010566:	db05      	blt.n	8010574 <ip_reass_free_complete_datagram+0xe0>
 8010568:	4b15      	ldr	r3, [pc, #84]	; (80105c0 <ip_reass_free_complete_datagram+0x12c>)
 801056a:	22cc      	movs	r2, #204	; 0xcc
 801056c:	4918      	ldr	r1, [pc, #96]	; (80105d0 <ip_reass_free_complete_datagram+0x13c>)
 801056e:	4816      	ldr	r0, [pc, #88]	; (80105c8 <ip_reass_free_complete_datagram+0x134>)
 8010570:	f000 ff78 	bl	8011464 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010574:	8bfa      	ldrh	r2, [r7, #30]
 8010576:	8a7b      	ldrh	r3, [r7, #18]
 8010578:	4413      	add	r3, r2
 801057a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7f8 fd2f 	bl	8008fe0 <pbuf_free>
  while (p != NULL) {
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1dc      	bne.n	8010542 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010588:	6839      	ldr	r1, [r7, #0]
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f8c2 	bl	8010714 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010590:	4b10      	ldr	r3, [pc, #64]	; (80105d4 <ip_reass_free_complete_datagram+0x140>)
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	8bfa      	ldrh	r2, [r7, #30]
 8010596:	429a      	cmp	r2, r3
 8010598:	d905      	bls.n	80105a6 <ip_reass_free_complete_datagram+0x112>
 801059a:	4b09      	ldr	r3, [pc, #36]	; (80105c0 <ip_reass_free_complete_datagram+0x12c>)
 801059c:	22d2      	movs	r2, #210	; 0xd2
 801059e:	490e      	ldr	r1, [pc, #56]	; (80105d8 <ip_reass_free_complete_datagram+0x144>)
 80105a0:	4809      	ldr	r0, [pc, #36]	; (80105c8 <ip_reass_free_complete_datagram+0x134>)
 80105a2:	f000 ff5f 	bl	8011464 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80105a6:	4b0b      	ldr	r3, [pc, #44]	; (80105d4 <ip_reass_free_complete_datagram+0x140>)
 80105a8:	881a      	ldrh	r2, [r3, #0]
 80105aa:	8bfb      	ldrh	r3, [r7, #30]
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	4b08      	ldr	r3, [pc, #32]	; (80105d4 <ip_reass_free_complete_datagram+0x140>)
 80105b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80105b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3720      	adds	r7, #32
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	08014b28 	.word	0x08014b28
 80105c4:	08014b64 	.word	0x08014b64
 80105c8:	08014b70 	.word	0x08014b70
 80105cc:	08014b98 	.word	0x08014b98
 80105d0:	08014bac 	.word	0x08014bac
 80105d4:	20008e5c 	.word	0x20008e5c
 80105d8:	08014bcc 	.word	0x08014bcc

080105dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b08a      	sub	sp, #40	; 0x28
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80105e6:	2300      	movs	r3, #0
 80105e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80105ea:	2300      	movs	r3, #0
 80105ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80105ee:	2300      	movs	r3, #0
 80105f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80105f2:	2300      	movs	r3, #0
 80105f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80105fa:	4b28      	ldr	r3, [pc, #160]	; (801069c <ip_reass_remove_oldest_datagram+0xc0>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010600:	e030      	b.n	8010664 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	695a      	ldr	r2, [r3, #20]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68db      	ldr	r3, [r3, #12]
 801060a:	429a      	cmp	r2, r3
 801060c:	d10c      	bne.n	8010628 <ip_reass_remove_oldest_datagram+0x4c>
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	699a      	ldr	r2, [r3, #24]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	429a      	cmp	r2, r3
 8010618:	d106      	bne.n	8010628 <ip_reass_remove_oldest_datagram+0x4c>
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	899a      	ldrh	r2, [r3, #12]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	889b      	ldrh	r3, [r3, #4]
 8010622:	b29b      	uxth	r3, r3
 8010624:	429a      	cmp	r2, r3
 8010626:	d014      	beq.n	8010652 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	3301      	adds	r3, #1
 801062c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801062e:	6a3b      	ldr	r3, [r7, #32]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d104      	bne.n	801063e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	61bb      	str	r3, [r7, #24]
 801063c:	e009      	b.n	8010652 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010640:	7fda      	ldrb	r2, [r3, #31]
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	7fdb      	ldrb	r3, [r3, #31]
 8010646:	429a      	cmp	r2, r3
 8010648:	d803      	bhi.n	8010652 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1cb      	bne.n	8010602 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d008      	beq.n	8010682 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010670:	69b9      	ldr	r1, [r7, #24]
 8010672:	6a38      	ldr	r0, [r7, #32]
 8010674:	f7ff ff0e 	bl	8010494 <ip_reass_free_complete_datagram>
 8010678:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	4413      	add	r3, r2
 8010680:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	429a      	cmp	r2, r3
 8010688:	da02      	bge.n	8010690 <ip_reass_remove_oldest_datagram+0xb4>
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	2b01      	cmp	r3, #1
 801068e:	dcac      	bgt.n	80105ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010690:	697b      	ldr	r3, [r7, #20]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3728      	adds	r7, #40	; 0x28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	20008e58 	.word	0x20008e58

080106a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80106aa:	2004      	movs	r0, #4
 80106ac:	f7f7 fe8c 	bl	80083c8 <memp_malloc>
 80106b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d110      	bne.n	80106da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80106b8:	6839      	ldr	r1, [r7, #0]
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7ff ff8e 	bl	80105dc <ip_reass_remove_oldest_datagram>
 80106c0:	4602      	mov	r2, r0
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	4293      	cmp	r3, r2
 80106c6:	dc03      	bgt.n	80106d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80106c8:	2004      	movs	r0, #4
 80106ca:	f7f7 fe7d 	bl	80083c8 <memp_malloc>
 80106ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d101      	bne.n	80106da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	e016      	b.n	8010708 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80106da:	2220      	movs	r2, #32
 80106dc:	2100      	movs	r1, #0
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f001 f816 	bl	8011710 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	220f      	movs	r2, #15
 80106e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <ip_reass_enqueue_new_datagram+0x70>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80106f2:	4a07      	ldr	r2, [pc, #28]	; (8010710 <ip_reass_enqueue_new_datagram+0x70>)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	3308      	adds	r3, #8
 80106fc:	2214      	movs	r2, #20
 80106fe:	6879      	ldr	r1, [r7, #4]
 8010700:	4618      	mov	r0, r3
 8010702:	f001 f87a 	bl	80117fa <memcpy>
  return ipr;
 8010706:	68fb      	ldr	r3, [r7, #12]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20008e58 	.word	0x20008e58

08010714 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801071e:	4b10      	ldr	r3, [pc, #64]	; (8010760 <ip_reass_dequeue_datagram+0x4c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d104      	bne.n	8010732 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a0c      	ldr	r2, [pc, #48]	; (8010760 <ip_reass_dequeue_datagram+0x4c>)
 801072e:	6013      	str	r3, [r2, #0]
 8010730:	e00d      	b.n	801074e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <ip_reass_dequeue_datagram+0x32>
 8010738:	4b0a      	ldr	r3, [pc, #40]	; (8010764 <ip_reass_dequeue_datagram+0x50>)
 801073a:	f240 1245 	movw	r2, #325	; 0x145
 801073e:	490a      	ldr	r1, [pc, #40]	; (8010768 <ip_reass_dequeue_datagram+0x54>)
 8010740:	480a      	ldr	r0, [pc, #40]	; (801076c <ip_reass_dequeue_datagram+0x58>)
 8010742:	f000 fe8f 	bl	8011464 <iprintf>
    prev->next = ipr->next;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801074e:	6879      	ldr	r1, [r7, #4]
 8010750:	2004      	movs	r0, #4
 8010752:	f7f7 fe85 	bl	8008460 <memp_free>
}
 8010756:	bf00      	nop
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20008e58 	.word	0x20008e58
 8010764:	08014b28 	.word	0x08014b28
 8010768:	08014bf0 	.word	0x08014bf0
 801076c:	08014b70 	.word	0x08014b70

08010770 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08c      	sub	sp, #48	; 0x30
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801077c:	2300      	movs	r3, #0
 801077e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010780:	2301      	movs	r3, #1
 8010782:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	885b      	ldrh	r3, [r3, #2]
 801078e:	b29b      	uxth	r3, r3
 8010790:	4618      	mov	r0, r3
 8010792:	f7f7 f9c4 	bl	8007b1e <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	f003 030f 	and.w	r3, r3, #15
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80107a8:	7e7b      	ldrb	r3, [r7, #25]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	8b7a      	ldrh	r2, [r7, #26]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d202      	bcs.n	80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107b2:	f04f 33ff 	mov.w	r3, #4294967295
 80107b6:	e135      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80107b8:	7e7b      	ldrb	r3, [r7, #25]
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	8b7a      	ldrh	r2, [r7, #26]
 80107be:	1ad3      	subs	r3, r2, r3
 80107c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	88db      	ldrh	r3, [r3, #6]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7f7 f9a8 	bl	8007b1e <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	00db      	lsls	r3, r3, #3
 80107d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	2200      	movs	r2, #0
 80107e4:	701a      	strb	r2, [r3, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	705a      	strb	r2, [r3, #1]
 80107ea:	2200      	movs	r2, #0
 80107ec:	709a      	strb	r2, [r3, #2]
 80107ee:	2200      	movs	r2, #0
 80107f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	8afa      	ldrh	r2, [r7, #22]
 80107f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80107f8:	8afa      	ldrh	r2, [r7, #22]
 80107fa:	8b7b      	ldrh	r3, [r7, #26]
 80107fc:	4413      	add	r3, r2
 80107fe:	b29a      	uxth	r2, r3
 8010800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010802:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010806:	88db      	ldrh	r3, [r3, #6]
 8010808:	b29b      	uxth	r3, r3
 801080a:	8afa      	ldrh	r2, [r7, #22]
 801080c:	429a      	cmp	r2, r3
 801080e:	d902      	bls.n	8010816 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010810:	f04f 33ff 	mov.w	r3, #4294967295
 8010814:	e106      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	627b      	str	r3, [r7, #36]	; 0x24
 801081c:	e068      	b.n	80108f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010826:	889b      	ldrh	r3, [r3, #4]
 8010828:	b29a      	uxth	r2, r3
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	889b      	ldrh	r3, [r3, #4]
 801082e:	b29b      	uxth	r3, r3
 8010830:	429a      	cmp	r2, r3
 8010832:	d235      	bcs.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010838:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	2b00      	cmp	r3, #0
 801083e:	d020      	beq.n	8010882 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010842:	889b      	ldrh	r3, [r3, #4]
 8010844:	b29a      	uxth	r2, r3
 8010846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010848:	88db      	ldrh	r3, [r3, #6]
 801084a:	b29b      	uxth	r3, r3
 801084c:	429a      	cmp	r2, r3
 801084e:	d307      	bcc.n	8010860 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	88db      	ldrh	r3, [r3, #6]
 8010854:	b29a      	uxth	r2, r3
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	889b      	ldrh	r3, [r3, #4]
 801085a:	b29b      	uxth	r3, r3
 801085c:	429a      	cmp	r2, r3
 801085e:	d902      	bls.n	8010866 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010860:	f04f 33ff 	mov.w	r3, #4294967295
 8010864:	e0de      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	88db      	ldrh	r3, [r3, #6]
 8010870:	b29a      	uxth	r2, r3
 8010872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010874:	889b      	ldrh	r3, [r3, #4]
 8010876:	b29b      	uxth	r3, r3
 8010878:	429a      	cmp	r2, r3
 801087a:	d03d      	beq.n	80108f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801087c:	2300      	movs	r3, #0
 801087e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010880:	e03a      	b.n	80108f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010884:	88db      	ldrh	r3, [r3, #6]
 8010886:	b29a      	uxth	r2, r3
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	889b      	ldrh	r3, [r3, #4]
 801088c:	b29b      	uxth	r3, r3
 801088e:	429a      	cmp	r2, r3
 8010890:	d902      	bls.n	8010898 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010892:	f04f 33ff 	mov.w	r3, #4294967295
 8010896:	e0c5      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	605a      	str	r2, [r3, #4]
      break;
 801089e:	e02b      	b.n	80108f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	889b      	ldrh	r3, [r3, #4]
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	889b      	ldrh	r3, [r3, #4]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d102      	bne.n	80108b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108b0:	f04f 33ff 	mov.w	r3, #4294967295
 80108b4:	e0b6      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80108b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b8:	889b      	ldrh	r3, [r3, #4]
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	88db      	ldrh	r3, [r3, #6]
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d202      	bcs.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108c6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ca:	e0ab      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d009      	beq.n	80108e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80108d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d4:	88db      	ldrh	r3, [r3, #6]
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	889b      	ldrh	r3, [r3, #4]
 80108dc:	b29b      	uxth	r3, r3
 80108de:	429a      	cmp	r2, r3
 80108e0:	d001      	beq.n	80108e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d193      	bne.n	801081e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80108f6:	e000      	b.n	80108fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80108f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d12d      	bne.n	801095c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	2b00      	cmp	r3, #0
 8010904:	d01c      	beq.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010908:	88db      	ldrh	r3, [r3, #6]
 801090a:	b29a      	uxth	r2, r3
 801090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090e:	889b      	ldrh	r3, [r3, #4]
 8010910:	b29b      	uxth	r3, r3
 8010912:	429a      	cmp	r2, r3
 8010914:	d906      	bls.n	8010924 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010916:	4b45      	ldr	r3, [pc, #276]	; (8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010918:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801091c:	4944      	ldr	r1, [pc, #272]	; (8010a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801091e:	4845      	ldr	r0, [pc, #276]	; (8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010920:	f000 fda0 	bl	8011464 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092c:	88db      	ldrh	r3, [r3, #6]
 801092e:	b29a      	uxth	r2, r3
 8010930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010932:	889b      	ldrh	r3, [r3, #4]
 8010934:	b29b      	uxth	r3, r3
 8010936:	429a      	cmp	r2, r3
 8010938:	d010      	beq.n	801095c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	623b      	str	r3, [r7, #32]
 801093e:	e00d      	b.n	801095c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d006      	beq.n	8010956 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010948:	4b38      	ldr	r3, [pc, #224]	; (8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801094a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801094e:	493a      	ldr	r1, [pc, #232]	; (8010a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010950:	4838      	ldr	r0, [pc, #224]	; (8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010952:	f000 fd87 	bl	8011464 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d105      	bne.n	801096e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	7f9b      	ldrb	r3, [r3, #30]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d059      	beq.n	8010a22 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801096e:	6a3b      	ldr	r3, [r7, #32]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d04f      	beq.n	8010a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d006      	beq.n	801098a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	889b      	ldrh	r3, [r3, #4]
 8010984:	b29b      	uxth	r3, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d002      	beq.n	8010990 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801098a:	2300      	movs	r3, #0
 801098c:	623b      	str	r3, [r7, #32]
 801098e:	e041      	b.n	8010a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801099a:	e012      	b.n	80109c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	88db      	ldrh	r3, [r3, #6]
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	889b      	ldrh	r3, [r3, #4]
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d002      	beq.n	80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	623b      	str	r3, [r7, #32]
            break;
 80109b6:	e007      	b.n	80109c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80109b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80109c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1e9      	bne.n	801099c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d022      	beq.n	8010a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d106      	bne.n	80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80109d6:	4b15      	ldr	r3, [pc, #84]	; (8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109d8:	f240 12df 	movw	r2, #479	; 0x1df
 80109dc:	4917      	ldr	r1, [pc, #92]	; (8010a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80109de:	4815      	ldr	r0, [pc, #84]	; (8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109e0:	f000 fd40 	bl	8011464 <iprintf>
          LWIP_ASSERT("sanity check",
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d106      	bne.n	80109fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80109f0:	4b0e      	ldr	r3, [pc, #56]	; (8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80109f6:	4911      	ldr	r1, [pc, #68]	; (8010a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80109f8:	480e      	ldr	r0, [pc, #56]	; (8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109fa:	f000 fd33 	bl	8011464 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80109fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d006      	beq.n	8010a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010a06:	4b09      	ldr	r3, [pc, #36]	; (8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a08:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010a0c:	490c      	ldr	r1, [pc, #48]	; (8010a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010a0e:	4809      	ldr	r0, [pc, #36]	; (8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a10:	f000 fd28 	bl	8011464 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	bf14      	ite	ne
 8010a1a:	2301      	movne	r3, #1
 8010a1c:	2300      	moveq	r3, #0
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	e000      	b.n	8010a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3730      	adds	r7, #48	; 0x30
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	08014b28 	.word	0x08014b28
 8010a30:	08014c0c 	.word	0x08014c0c
 8010a34:	08014b70 	.word	0x08014b70
 8010a38:	08014c2c 	.word	0x08014c2c
 8010a3c:	08014c64 	.word	0x08014c64
 8010a40:	08014c74 	.word	0x08014c74

08010a44 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08e      	sub	sp, #56	; 0x38
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	f003 030f 	and.w	r3, r3, #15
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	2b14      	cmp	r3, #20
 8010a62:	f040 8171 	bne.w	8010d48 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	88db      	ldrh	r3, [r3, #6]
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7f7 f856 	bl	8007b1e <lwip_htons>
 8010a72:	4603      	mov	r3, r0
 8010a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	00db      	lsls	r3, r3, #3
 8010a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a80:	885b      	ldrh	r3, [r3, #2]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f7 f84a 	bl	8007b1e <lwip_htons>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 030f 	and.w	r3, r3, #15
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	f0c0 8150 	bcc.w	8010d4c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7f8 fb19 	bl	80090f0 <pbuf_clen>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010ac2:	4b8c      	ldr	r3, [pc, #560]	; (8010cf4 <ip4_reass+0x2b0>)
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	8c3b      	ldrh	r3, [r7, #32]
 8010aca:	4413      	add	r3, r2
 8010acc:	2b0a      	cmp	r3, #10
 8010ace:	dd10      	ble.n	8010af2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010ad0:	8c3b      	ldrh	r3, [r7, #32]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ad6:	f7ff fd81 	bl	80105dc <ip_reass_remove_oldest_datagram>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f000 8137 	beq.w	8010d50 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010ae2:	4b84      	ldr	r3, [pc, #528]	; (8010cf4 <ip4_reass+0x2b0>)
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	8c3b      	ldrh	r3, [r7, #32]
 8010aea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010aec:	2b0a      	cmp	r3, #10
 8010aee:	f300 812f 	bgt.w	8010d50 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010af2:	4b81      	ldr	r3, [pc, #516]	; (8010cf8 <ip4_reass+0x2b4>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	633b      	str	r3, [r7, #48]	; 0x30
 8010af8:	e015      	b.n	8010b26 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	695a      	ldr	r2, [r3, #20]
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d10c      	bne.n	8010b20 <ip4_reass+0xdc>
 8010b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b08:	699a      	ldr	r2, [r3, #24]
 8010b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0c:	691b      	ldr	r3, [r3, #16]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d106      	bne.n	8010b20 <ip4_reass+0xdc>
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	899a      	ldrh	r2, [r3, #12]
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	889b      	ldrh	r3, [r3, #4]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d006      	beq.n	8010b2e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	633b      	str	r3, [r7, #48]	; 0x30
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d1e6      	bne.n	8010afa <ip4_reass+0xb6>
 8010b2c:	e000      	b.n	8010b30 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010b2e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d109      	bne.n	8010b4a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010b36:	8c3b      	ldrh	r3, [r7, #32]
 8010b38:	4619      	mov	r1, r3
 8010b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b3c:	f7ff fdb0 	bl	80106a0 <ip_reass_enqueue_new_datagram>
 8010b40:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d11c      	bne.n	8010b82 <ip4_reass+0x13e>
      goto nullreturn;
 8010b48:	e105      	b.n	8010d56 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	88db      	ldrh	r3, [r3, #6]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f6 ffe4 	bl	8007b1e <lwip_htons>
 8010b56:	4603      	mov	r3, r0
 8010b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d110      	bne.n	8010b82 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b62:	89db      	ldrh	r3, [r3, #14]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7f6 ffda 	bl	8007b1e <lwip_htons>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d006      	beq.n	8010b82 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b76:	3308      	adds	r3, #8
 8010b78:	2214      	movs	r2, #20
 8010b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 fe3c 	bl	80117fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b84:	88db      	ldrh	r3, [r3, #6]
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	f003 0320 	and.w	r3, r3, #32
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	bf0c      	ite	eq
 8010b90:	2301      	moveq	r3, #1
 8010b92:	2300      	movne	r3, #0
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00e      	beq.n	8010bbc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba2:	4413      	add	r3, r2
 8010ba4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010ba6:	8b7a      	ldrh	r2, [r7, #26]
 8010ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010baa:	429a      	cmp	r2, r3
 8010bac:	f0c0 80a0 	bcc.w	8010cf0 <ip4_reass+0x2ac>
 8010bb0:	8b7b      	ldrh	r3, [r7, #26]
 8010bb2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	f200 809a 	bhi.w	8010cf0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010bbc:	69fa      	ldr	r2, [r7, #28]
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bc2:	f7ff fdd5 	bl	8010770 <ip_reass_chain_frag_into_datagram_and_validate>
 8010bc6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bce:	f000 809b 	beq.w	8010d08 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010bd2:	4b48      	ldr	r3, [pc, #288]	; (8010cf4 <ip4_reass+0x2b0>)
 8010bd4:	881a      	ldrh	r2, [r3, #0]
 8010bd6:	8c3b      	ldrh	r3, [r7, #32]
 8010bd8:	4413      	add	r3, r2
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	4b45      	ldr	r3, [pc, #276]	; (8010cf4 <ip4_reass+0x2b0>)
 8010bde:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00d      	beq.n	8010c02 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010be6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bea:	4413      	add	r3, r2
 8010bec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	8a7a      	ldrh	r2, [r7, #18]
 8010bf2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf6:	7f9b      	ldrb	r3, [r3, #30]
 8010bf8:	f043 0301 	orr.w	r3, r3, #1
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c00:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d171      	bne.n	8010cec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	8b9b      	ldrh	r3, [r3, #28]
 8010c0c:	3314      	adds	r3, #20
 8010c0e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	3308      	adds	r3, #8
 8010c26:	2214      	movs	r2, #20
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c2c:	f000 fde5 	bl	80117fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010c30:	8a3b      	ldrh	r3, [r7, #16]
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7f6 ff73 	bl	8007b1e <lwip_htons>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	2200      	movs	r2, #0
 8010c44:	719a      	strb	r2, [r3, #6]
 8010c46:	2200      	movs	r2, #0
 8010c48:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	729a      	strb	r2, [r3, #10]
 8010c50:	2200      	movs	r2, #0
 8010c52:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010c5a:	e00d      	b.n	8010c78 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010c62:	2114      	movs	r1, #20
 8010c64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c66:	f7f8 f935 	bl	8008ed4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010c6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7f8 fa79 	bl	8009164 <pbuf_cat>
      r = iprh->next_pbuf;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1ee      	bne.n	8010c5c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010c7e:	4b1e      	ldr	r3, [pc, #120]	; (8010cf8 <ip4_reass+0x2b4>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d102      	bne.n	8010c8e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c8c:	e010      	b.n	8010cb0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010c8e:	4b1a      	ldr	r3, [pc, #104]	; (8010cf8 <ip4_reass+0x2b4>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c94:	e007      	b.n	8010ca6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d006      	beq.n	8010cae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1f4      	bne.n	8010c96 <ip4_reass+0x252>
 8010cac:	e000      	b.n	8010cb0 <ip4_reass+0x26c>
          break;
 8010cae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cb4:	f7ff fd2e 	bl	8010714 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7f8 fa19 	bl	80090f0 <pbuf_clen>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010cc2:	4b0c      	ldr	r3, [pc, #48]	; (8010cf4 <ip4_reass+0x2b0>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	8c3a      	ldrh	r2, [r7, #32]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d906      	bls.n	8010cda <ip4_reass+0x296>
 8010ccc:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <ip4_reass+0x2b8>)
 8010cce:	f240 229b 	movw	r2, #667	; 0x29b
 8010cd2:	490b      	ldr	r1, [pc, #44]	; (8010d00 <ip4_reass+0x2bc>)
 8010cd4:	480b      	ldr	r0, [pc, #44]	; (8010d04 <ip4_reass+0x2c0>)
 8010cd6:	f000 fbc5 	bl	8011464 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010cda:	4b06      	ldr	r3, [pc, #24]	; (8010cf4 <ip4_reass+0x2b0>)
 8010cdc:	881a      	ldrh	r2, [r3, #0]
 8010cde:	8c3b      	ldrh	r3, [r7, #32]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	4b03      	ldr	r3, [pc, #12]	; (8010cf4 <ip4_reass+0x2b0>)
 8010ce6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	e038      	b.n	8010d5e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010cec:	2300      	movs	r3, #0
 8010cee:	e036      	b.n	8010d5e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010cf0:	bf00      	nop
 8010cf2:	e00a      	b.n	8010d0a <ip4_reass+0x2c6>
 8010cf4:	20008e5c 	.word	0x20008e5c
 8010cf8:	20008e58 	.word	0x20008e58
 8010cfc:	08014b28 	.word	0x08014b28
 8010d00:	08014c98 	.word	0x08014c98
 8010d04:	08014b70 	.word	0x08014b70
    goto nullreturn_ipr;
 8010d08:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d106      	bne.n	8010d1e <ip4_reass+0x2da>
 8010d10:	4b15      	ldr	r3, [pc, #84]	; (8010d68 <ip4_reass+0x324>)
 8010d12:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010d16:	4915      	ldr	r1, [pc, #84]	; (8010d6c <ip4_reass+0x328>)
 8010d18:	4815      	ldr	r0, [pc, #84]	; (8010d70 <ip4_reass+0x32c>)
 8010d1a:	f000 fba3 	bl	8011464 <iprintf>
  if (ipr->p == NULL) {
 8010d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d116      	bne.n	8010d54 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010d26:	4b13      	ldr	r3, [pc, #76]	; (8010d74 <ip4_reass+0x330>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d006      	beq.n	8010d3e <ip4_reass+0x2fa>
 8010d30:	4b0d      	ldr	r3, [pc, #52]	; (8010d68 <ip4_reass+0x324>)
 8010d32:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d36:	4910      	ldr	r1, [pc, #64]	; (8010d78 <ip4_reass+0x334>)
 8010d38:	480d      	ldr	r0, [pc, #52]	; (8010d70 <ip4_reass+0x32c>)
 8010d3a:	f000 fb93 	bl	8011464 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010d3e:	2100      	movs	r1, #0
 8010d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d42:	f7ff fce7 	bl	8010714 <ip_reass_dequeue_datagram>
 8010d46:	e006      	b.n	8010d56 <ip4_reass+0x312>
    goto nullreturn;
 8010d48:	bf00      	nop
 8010d4a:	e004      	b.n	8010d56 <ip4_reass+0x312>
    goto nullreturn;
 8010d4c:	bf00      	nop
 8010d4e:	e002      	b.n	8010d56 <ip4_reass+0x312>
      goto nullreturn;
 8010d50:	bf00      	nop
 8010d52:	e000      	b.n	8010d56 <ip4_reass+0x312>
  }

nullreturn:
 8010d54:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7f8 f942 	bl	8008fe0 <pbuf_free>
  return NULL;
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3738      	adds	r7, #56	; 0x38
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	08014b28 	.word	0x08014b28
 8010d6c:	08014cb4 	.word	0x08014cb4
 8010d70:	08014b70 	.word	0x08014b70
 8010d74:	20008e58 	.word	0x20008e58
 8010d78:	08014cc0 	.word	0x08014cc0

08010d7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010d80:	2005      	movs	r0, #5
 8010d82:	f7f7 fb21 	bl	80083c8 <memp_malloc>
 8010d86:	4603      	mov	r3, r0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010d9a:	4b07      	ldr	r3, [pc, #28]	; (8010db8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010d9c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010da0:	4906      	ldr	r1, [pc, #24]	; (8010dbc <ip_frag_free_pbuf_custom_ref+0x30>)
 8010da2:	4807      	ldr	r0, [pc, #28]	; (8010dc0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010da4:	f000 fb5e 	bl	8011464 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010da8:	6879      	ldr	r1, [r7, #4]
 8010daa:	2005      	movs	r0, #5
 8010dac:	f7f7 fb58 	bl	8008460 <memp_free>
}
 8010db0:	bf00      	nop
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	08014b28 	.word	0x08014b28
 8010dbc:	08014ce0 	.word	0x08014ce0
 8010dc0:	08014b70 	.word	0x08014b70

08010dc4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d106      	bne.n	8010de4 <ipfrag_free_pbuf_custom+0x20>
 8010dd6:	4b11      	ldr	r3, [pc, #68]	; (8010e1c <ipfrag_free_pbuf_custom+0x58>)
 8010dd8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010ddc:	4910      	ldr	r1, [pc, #64]	; (8010e20 <ipfrag_free_pbuf_custom+0x5c>)
 8010dde:	4811      	ldr	r0, [pc, #68]	; (8010e24 <ipfrag_free_pbuf_custom+0x60>)
 8010de0:	f000 fb40 	bl	8011464 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010de4:	68fa      	ldr	r2, [r7, #12]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d006      	beq.n	8010dfa <ipfrag_free_pbuf_custom+0x36>
 8010dec:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <ipfrag_free_pbuf_custom+0x58>)
 8010dee:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010df2:	490d      	ldr	r1, [pc, #52]	; (8010e28 <ipfrag_free_pbuf_custom+0x64>)
 8010df4:	480b      	ldr	r0, [pc, #44]	; (8010e24 <ipfrag_free_pbuf_custom+0x60>)
 8010df6:	f000 fb35 	bl	8011464 <iprintf>
  if (pcr->original != NULL) {
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	695b      	ldr	r3, [r3, #20]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d004      	beq.n	8010e0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	695b      	ldr	r3, [r3, #20]
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7f8 f8ea 	bl	8008fe0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f7ff ffbd 	bl	8010d8c <ip_frag_free_pbuf_custom_ref>
}
 8010e12:	bf00      	nop
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08014b28 	.word	0x08014b28
 8010e20:	08014cec 	.word	0x08014cec
 8010e24:	08014b70 	.word	0x08014b70
 8010e28:	08014cf8 	.word	0x08014cf8

08010e2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b094      	sub	sp, #80	; 0x50
 8010e30:	af02      	add	r7, sp, #8
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010e42:	3b14      	subs	r3, #20
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	da00      	bge.n	8010e4a <ip4_frag+0x1e>
 8010e48:	3307      	adds	r3, #7
 8010e4a:	10db      	asrs	r3, r3, #3
 8010e4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010e4e:	2314      	movs	r3, #20
 8010e50:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	f003 030f 	and.w	r3, r3, #15
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b14      	cmp	r3, #20
 8010e6c:	d002      	beq.n	8010e74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010e6e:	f06f 0305 	mvn.w	r3, #5
 8010e72:	e110      	b.n	8011096 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	895b      	ldrh	r3, [r3, #10]
 8010e78:	2b13      	cmp	r3, #19
 8010e7a:	d809      	bhi.n	8010e90 <ip4_frag+0x64>
 8010e7c:	4b88      	ldr	r3, [pc, #544]	; (80110a0 <ip4_frag+0x274>)
 8010e7e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010e82:	4988      	ldr	r1, [pc, #544]	; (80110a4 <ip4_frag+0x278>)
 8010e84:	4888      	ldr	r0, [pc, #544]	; (80110a8 <ip4_frag+0x27c>)
 8010e86:	f000 faed 	bl	8011464 <iprintf>
 8010e8a:	f06f 0305 	mvn.w	r3, #5
 8010e8e:	e102      	b.n	8011096 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	88db      	ldrh	r3, [r3, #6]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f6 fe41 	bl	8007b1e <lwip_htons>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ea6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	891b      	ldrh	r3, [r3, #8]
 8010eb6:	3b14      	subs	r3, #20
 8010eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010ebc:	e0e1      	b.n	8011082 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010ebe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	bf28      	it	cs
 8010ecc:	4613      	movcs	r3, r2
 8010ece:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010ed0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ed4:	2114      	movs	r1, #20
 8010ed6:	200e      	movs	r0, #14
 8010ed8:	f7f7 fd9e 	bl	8008a18 <pbuf_alloc>
 8010edc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80d5 	beq.w	8011090 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee8:	895b      	ldrh	r3, [r3, #10]
 8010eea:	2b13      	cmp	r3, #19
 8010eec:	d806      	bhi.n	8010efc <ip4_frag+0xd0>
 8010eee:	4b6c      	ldr	r3, [pc, #432]	; (80110a0 <ip4_frag+0x274>)
 8010ef0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010ef4:	496d      	ldr	r1, [pc, #436]	; (80110ac <ip4_frag+0x280>)
 8010ef6:	486c      	ldr	r0, [pc, #432]	; (80110a8 <ip4_frag+0x27c>)
 8010ef8:	f000 fab4 	bl	8011464 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	2214      	movs	r2, #20
 8010f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f04:	4618      	mov	r0, r3
 8010f06:	f000 fc78 	bl	80117fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010f10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010f16:	e064      	b.n	8010fe2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	895a      	ldrh	r2, [r3, #10]
 8010f1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	895b      	ldrh	r3, [r3, #10]
 8010f26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d906      	bls.n	8010f3a <ip4_frag+0x10e>
 8010f2c:	4b5c      	ldr	r3, [pc, #368]	; (80110a0 <ip4_frag+0x274>)
 8010f2e:	f240 322d 	movw	r2, #813	; 0x32d
 8010f32:	495f      	ldr	r1, [pc, #380]	; (80110b0 <ip4_frag+0x284>)
 8010f34:	485c      	ldr	r0, [pc, #368]	; (80110a8 <ip4_frag+0x27c>)
 8010f36:	f000 fa95 	bl	8011464 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010f3a:	8bfa      	ldrh	r2, [r7, #30]
 8010f3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010f40:	4293      	cmp	r3, r2
 8010f42:	bf28      	it	cs
 8010f44:	4613      	movcs	r3, r2
 8010f46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010f4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d105      	bne.n	8010f5e <ip4_frag+0x132>
        poff = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	60fb      	str	r3, [r7, #12]
        continue;
 8010f5c:	e041      	b.n	8010fe2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010f5e:	f7ff ff0d 	bl	8010d7c <ip_frag_alloc_pbuf_custom_ref>
 8010f62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010f64:	69bb      	ldr	r3, [r7, #24]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d103      	bne.n	8010f72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f6c:	f7f8 f838 	bl	8008fe0 <pbuf_free>
        goto memerr;
 8010f70:	e08f      	b.n	8011092 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010f72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010f78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f7a:	4413      	add	r3, r2
 8010f7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010f80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010f84:	9201      	str	r2, [sp, #4]
 8010f86:	9300      	str	r3, [sp, #0]
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2241      	movs	r2, #65	; 0x41
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	f7f7 fe6d 	bl	8008c6c <pbuf_alloced_custom>
 8010f92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010f9a:	69b8      	ldr	r0, [r7, #24]
 8010f9c:	f7ff fef6 	bl	8010d8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fa2:	f7f8 f81d 	bl	8008fe0 <pbuf_free>
        goto memerr;
 8010fa6:	e074      	b.n	8011092 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7f8 f8b9 	bl	8009120 <pbuf_ref>
      pcr->original = p;
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	4a3f      	ldr	r2, [pc, #252]	; (80110b4 <ip4_frag+0x288>)
 8010fb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010fba:	6979      	ldr	r1, [r7, #20]
 8010fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fbe:	f7f8 f8d1 	bl	8009164 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010fc2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010fd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d004      	beq.n	8010fe2 <ip4_frag+0x1b6>
        poff = 0;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010fe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d196      	bne.n	8010f18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010fea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010fec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010ff0:	4413      	add	r3, r2
 8010ff2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010ff8:	f1a3 0213 	sub.w	r2, r3, #19
 8010ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011000:	429a      	cmp	r2, r3
 8011002:	bfcc      	ite	gt
 8011004:	2301      	movgt	r3, #1
 8011006:	2300      	movle	r3, #0
 8011008:	b2db      	uxtb	r3, r3
 801100a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801100c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011014:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011016:	6a3b      	ldr	r3, [r7, #32]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <ip4_frag+0x1f6>
 801101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101e:	2b00      	cmp	r3, #0
 8011020:	d003      	beq.n	801102a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011022:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011028:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801102a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801102c:	4618      	mov	r0, r3
 801102e:	f7f6 fd76 	bl	8007b1e <lwip_htons>
 8011032:	4603      	mov	r3, r0
 8011034:	461a      	mov	r2, r3
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801103a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801103c:	3314      	adds	r3, #20
 801103e:	b29b      	uxth	r3, r3
 8011040:	4618      	mov	r0, r3
 8011042:	f7f6 fd6c 	bl	8007b1e <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	461a      	mov	r2, r3
 801104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	2200      	movs	r2, #0
 8011052:	729a      	strb	r2, [r3, #10]
 8011054:	2200      	movs	r2, #0
 8011056:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	695b      	ldr	r3, [r3, #20]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011060:	68b8      	ldr	r0, [r7, #8]
 8011062:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011066:	f7f7 ffbb 	bl	8008fe0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801106a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801106e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011076:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801107a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801107c:	4413      	add	r3, r2
 801107e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011086:	2b00      	cmp	r3, #0
 8011088:	f47f af19 	bne.w	8010ebe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801108c:	2300      	movs	r3, #0
 801108e:	e002      	b.n	8011096 <ip4_frag+0x26a>
      goto memerr;
 8011090:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011096:	4618      	mov	r0, r3
 8011098:	3748      	adds	r7, #72	; 0x48
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	08014b28 	.word	0x08014b28
 80110a4:	08014d04 	.word	0x08014d04
 80110a8:	08014b70 	.word	0x08014b70
 80110ac:	08014d20 	.word	0x08014d20
 80110b0:	08014d40 	.word	0x08014d40
 80110b4:	08010dc5 	.word	0x08010dc5

080110b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b086      	sub	sp, #24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80110c2:	230e      	movs	r3, #14
 80110c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	895b      	ldrh	r3, [r3, #10]
 80110ca:	2b0e      	cmp	r3, #14
 80110cc:	d96e      	bls.n	80111ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7bdb      	ldrb	r3, [r3, #15]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d106      	bne.n	80110e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110dc:	3301      	adds	r3, #1
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	7b1a      	ldrb	r2, [r3, #12]
 80110ee:	7b5b      	ldrb	r3, [r3, #13]
 80110f0:	021b      	lsls	r3, r3, #8
 80110f2:	4313      	orrs	r3, r2
 80110f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d023      	beq.n	801114a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b01      	cmp	r3, #1
 8011108:	d10f      	bne.n	801112a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	785b      	ldrb	r3, [r3, #1]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d11b      	bne.n	801114a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011116:	2b5e      	cmp	r3, #94	; 0x5e
 8011118:	d117      	bne.n	801114a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	7b5b      	ldrb	r3, [r3, #13]
 801111e:	f043 0310 	orr.w	r3, r3, #16
 8011122:	b2da      	uxtb	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	735a      	strb	r2, [r3, #13]
 8011128:	e00f      	b.n	801114a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	2206      	movs	r2, #6
 801112e:	4928      	ldr	r1, [pc, #160]	; (80111d0 <ethernet_input+0x118>)
 8011130:	4618      	mov	r0, r3
 8011132:	f000 fadd 	bl	80116f0 <memcmp>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	7b5b      	ldrb	r3, [r3, #13]
 8011140:	f043 0308 	orr.w	r3, r3, #8
 8011144:	b2da      	uxtb	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801114a:	89fb      	ldrh	r3, [r7, #14]
 801114c:	2b08      	cmp	r3, #8
 801114e:	d003      	beq.n	8011158 <ethernet_input+0xa0>
 8011150:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011154:	d014      	beq.n	8011180 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011156:	e032      	b.n	80111be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b00      	cmp	r3, #0
 8011164:	d024      	beq.n	80111b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011166:	8afb      	ldrh	r3, [r7, #22]
 8011168:	4619      	mov	r1, r3
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7f7 feb2 	bl	8008ed4 <pbuf_remove_header>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d11e      	bne.n	80111b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011176:	6839      	ldr	r1, [r7, #0]
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f7fe ff21 	bl	800ffc0 <ip4_input>
      break;
 801117e:	e013      	b.n	80111a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011186:	f003 0308 	and.w	r3, r3, #8
 801118a:	2b00      	cmp	r3, #0
 801118c:	d014      	beq.n	80111b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801118e:	8afb      	ldrh	r3, [r7, #22]
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7f7 fe9e 	bl	8008ed4 <pbuf_remove_header>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10e      	bne.n	80111bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7fe f8c1 	bl	800f328 <etharp_input>
      break;
 80111a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80111a8:	2300      	movs	r3, #0
 80111aa:	e00c      	b.n	80111c6 <ethernet_input+0x10e>
    goto free_and_return;
 80111ac:	bf00      	nop
 80111ae:	e006      	b.n	80111be <ethernet_input+0x106>
        goto free_and_return;
 80111b0:	bf00      	nop
 80111b2:	e004      	b.n	80111be <ethernet_input+0x106>
        goto free_and_return;
 80111b4:	bf00      	nop
 80111b6:	e002      	b.n	80111be <ethernet_input+0x106>
        goto free_and_return;
 80111b8:	bf00      	nop
 80111ba:	e000      	b.n	80111be <ethernet_input+0x106>
        goto free_and_return;
 80111bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7f7 ff0e 	bl	8008fe0 <pbuf_free>
  return ERR_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3718      	adds	r7, #24
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	08014edc 	.word	0x08014edc

080111d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80111e2:	8c3b      	ldrh	r3, [r7, #32]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7f6 fc9a 	bl	8007b1e <lwip_htons>
 80111ea:	4603      	mov	r3, r0
 80111ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80111ee:	210e      	movs	r1, #14
 80111f0:	68b8      	ldr	r0, [r7, #8]
 80111f2:	f7f7 fe5f 	bl	8008eb4 <pbuf_add_header>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d125      	bne.n	8011248 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	8afa      	ldrh	r2, [r7, #22]
 8011206:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	2206      	movs	r2, #6
 801120c:	6839      	ldr	r1, [r7, #0]
 801120e:	4618      	mov	r0, r3
 8011210:	f000 faf3 	bl	80117fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	3306      	adds	r3, #6
 8011218:	2206      	movs	r2, #6
 801121a:	6879      	ldr	r1, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	f000 faec 	bl	80117fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011228:	2b06      	cmp	r3, #6
 801122a:	d006      	beq.n	801123a <ethernet_output+0x66>
 801122c:	4b0a      	ldr	r3, [pc, #40]	; (8011258 <ethernet_output+0x84>)
 801122e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011232:	490a      	ldr	r1, [pc, #40]	; (801125c <ethernet_output+0x88>)
 8011234:	480a      	ldr	r0, [pc, #40]	; (8011260 <ethernet_output+0x8c>)
 8011236:	f000 f915 	bl	8011464 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	68b9      	ldr	r1, [r7, #8]
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	4798      	blx	r3
 8011244:	4603      	mov	r3, r0
 8011246:	e002      	b.n	801124e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011248:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801124a:	f06f 0301 	mvn.w	r3, #1
}
 801124e:	4618      	mov	r0, r3
 8011250:	3718      	adds	r7, #24
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	08014d50 	.word	0x08014d50
 801125c:	08014d88 	.word	0x08014d88
 8011260:	08014dbc 	.word	0x08014dbc

08011264 <rand>:
 8011264:	4b16      	ldr	r3, [pc, #88]	; (80112c0 <rand+0x5c>)
 8011266:	b510      	push	{r4, lr}
 8011268:	681c      	ldr	r4, [r3, #0]
 801126a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801126c:	b9b3      	cbnz	r3, 801129c <rand+0x38>
 801126e:	2018      	movs	r0, #24
 8011270:	f000 fb3c 	bl	80118ec <malloc>
 8011274:	4602      	mov	r2, r0
 8011276:	6320      	str	r0, [r4, #48]	; 0x30
 8011278:	b920      	cbnz	r0, 8011284 <rand+0x20>
 801127a:	4b12      	ldr	r3, [pc, #72]	; (80112c4 <rand+0x60>)
 801127c:	4812      	ldr	r0, [pc, #72]	; (80112c8 <rand+0x64>)
 801127e:	2152      	movs	r1, #82	; 0x52
 8011280:	f000 faca 	bl	8011818 <__assert_func>
 8011284:	4911      	ldr	r1, [pc, #68]	; (80112cc <rand+0x68>)
 8011286:	4b12      	ldr	r3, [pc, #72]	; (80112d0 <rand+0x6c>)
 8011288:	e9c0 1300 	strd	r1, r3, [r0]
 801128c:	4b11      	ldr	r3, [pc, #68]	; (80112d4 <rand+0x70>)
 801128e:	6083      	str	r3, [r0, #8]
 8011290:	230b      	movs	r3, #11
 8011292:	8183      	strh	r3, [r0, #12]
 8011294:	2100      	movs	r1, #0
 8011296:	2001      	movs	r0, #1
 8011298:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801129c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801129e:	480e      	ldr	r0, [pc, #56]	; (80112d8 <rand+0x74>)
 80112a0:	690b      	ldr	r3, [r1, #16]
 80112a2:	694c      	ldr	r4, [r1, #20]
 80112a4:	4a0d      	ldr	r2, [pc, #52]	; (80112dc <rand+0x78>)
 80112a6:	4358      	muls	r0, r3
 80112a8:	fb02 0004 	mla	r0, r2, r4, r0
 80112ac:	fba3 3202 	umull	r3, r2, r3, r2
 80112b0:	3301      	adds	r3, #1
 80112b2:	eb40 0002 	adc.w	r0, r0, r2
 80112b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80112ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80112be:	bd10      	pop	{r4, pc}
 80112c0:	20000198 	.word	0x20000198
 80112c4:	08014eea 	.word	0x08014eea
 80112c8:	08014f01 	.word	0x08014f01
 80112cc:	abcd330e 	.word	0xabcd330e
 80112d0:	e66d1234 	.word	0xe66d1234
 80112d4:	0005deec 	.word	0x0005deec
 80112d8:	5851f42d 	.word	0x5851f42d
 80112dc:	4c957f2d 	.word	0x4c957f2d

080112e0 <std>:
 80112e0:	2300      	movs	r3, #0
 80112e2:	b510      	push	{r4, lr}
 80112e4:	4604      	mov	r4, r0
 80112e6:	e9c0 3300 	strd	r3, r3, [r0]
 80112ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112ee:	6083      	str	r3, [r0, #8]
 80112f0:	8181      	strh	r1, [r0, #12]
 80112f2:	6643      	str	r3, [r0, #100]	; 0x64
 80112f4:	81c2      	strh	r2, [r0, #14]
 80112f6:	6183      	str	r3, [r0, #24]
 80112f8:	4619      	mov	r1, r3
 80112fa:	2208      	movs	r2, #8
 80112fc:	305c      	adds	r0, #92	; 0x5c
 80112fe:	f000 fa07 	bl	8011710 <memset>
 8011302:	4b0d      	ldr	r3, [pc, #52]	; (8011338 <std+0x58>)
 8011304:	6263      	str	r3, [r4, #36]	; 0x24
 8011306:	4b0d      	ldr	r3, [pc, #52]	; (801133c <std+0x5c>)
 8011308:	62a3      	str	r3, [r4, #40]	; 0x28
 801130a:	4b0d      	ldr	r3, [pc, #52]	; (8011340 <std+0x60>)
 801130c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801130e:	4b0d      	ldr	r3, [pc, #52]	; (8011344 <std+0x64>)
 8011310:	6323      	str	r3, [r4, #48]	; 0x30
 8011312:	4b0d      	ldr	r3, [pc, #52]	; (8011348 <std+0x68>)
 8011314:	6224      	str	r4, [r4, #32]
 8011316:	429c      	cmp	r4, r3
 8011318:	d006      	beq.n	8011328 <std+0x48>
 801131a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801131e:	4294      	cmp	r4, r2
 8011320:	d002      	beq.n	8011328 <std+0x48>
 8011322:	33d0      	adds	r3, #208	; 0xd0
 8011324:	429c      	cmp	r4, r3
 8011326:	d105      	bne.n	8011334 <std+0x54>
 8011328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011330:	f000 ba60 	b.w	80117f4 <__retarget_lock_init_recursive>
 8011334:	bd10      	pop	{r4, pc}
 8011336:	bf00      	nop
 8011338:	08011541 	.word	0x08011541
 801133c:	08011563 	.word	0x08011563
 8011340:	0801159b 	.word	0x0801159b
 8011344:	080115bf 	.word	0x080115bf
 8011348:	20008e60 	.word	0x20008e60

0801134c <stdio_exit_handler>:
 801134c:	4a02      	ldr	r2, [pc, #8]	; (8011358 <stdio_exit_handler+0xc>)
 801134e:	4903      	ldr	r1, [pc, #12]	; (801135c <stdio_exit_handler+0x10>)
 8011350:	4803      	ldr	r0, [pc, #12]	; (8011360 <stdio_exit_handler+0x14>)
 8011352:	f000 b869 	b.w	8011428 <_fwalk_sglue>
 8011356:	bf00      	nop
 8011358:	20000140 	.word	0x20000140
 801135c:	08012109 	.word	0x08012109
 8011360:	2000014c 	.word	0x2000014c

08011364 <cleanup_stdio>:
 8011364:	6841      	ldr	r1, [r0, #4]
 8011366:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <cleanup_stdio+0x34>)
 8011368:	4299      	cmp	r1, r3
 801136a:	b510      	push	{r4, lr}
 801136c:	4604      	mov	r4, r0
 801136e:	d001      	beq.n	8011374 <cleanup_stdio+0x10>
 8011370:	f000 feca 	bl	8012108 <_fflush_r>
 8011374:	68a1      	ldr	r1, [r4, #8]
 8011376:	4b09      	ldr	r3, [pc, #36]	; (801139c <cleanup_stdio+0x38>)
 8011378:	4299      	cmp	r1, r3
 801137a:	d002      	beq.n	8011382 <cleanup_stdio+0x1e>
 801137c:	4620      	mov	r0, r4
 801137e:	f000 fec3 	bl	8012108 <_fflush_r>
 8011382:	68e1      	ldr	r1, [r4, #12]
 8011384:	4b06      	ldr	r3, [pc, #24]	; (80113a0 <cleanup_stdio+0x3c>)
 8011386:	4299      	cmp	r1, r3
 8011388:	d004      	beq.n	8011394 <cleanup_stdio+0x30>
 801138a:	4620      	mov	r0, r4
 801138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011390:	f000 beba 	b.w	8012108 <_fflush_r>
 8011394:	bd10      	pop	{r4, pc}
 8011396:	bf00      	nop
 8011398:	20008e60 	.word	0x20008e60
 801139c:	20008ec8 	.word	0x20008ec8
 80113a0:	20008f30 	.word	0x20008f30

080113a4 <global_stdio_init.part.0>:
 80113a4:	b510      	push	{r4, lr}
 80113a6:	4b0b      	ldr	r3, [pc, #44]	; (80113d4 <global_stdio_init.part.0+0x30>)
 80113a8:	4c0b      	ldr	r4, [pc, #44]	; (80113d8 <global_stdio_init.part.0+0x34>)
 80113aa:	4a0c      	ldr	r2, [pc, #48]	; (80113dc <global_stdio_init.part.0+0x38>)
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	4620      	mov	r0, r4
 80113b0:	2200      	movs	r2, #0
 80113b2:	2104      	movs	r1, #4
 80113b4:	f7ff ff94 	bl	80112e0 <std>
 80113b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80113bc:	2201      	movs	r2, #1
 80113be:	2109      	movs	r1, #9
 80113c0:	f7ff ff8e 	bl	80112e0 <std>
 80113c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80113c8:	2202      	movs	r2, #2
 80113ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113ce:	2112      	movs	r1, #18
 80113d0:	f7ff bf86 	b.w	80112e0 <std>
 80113d4:	20008f98 	.word	0x20008f98
 80113d8:	20008e60 	.word	0x20008e60
 80113dc:	0801134d 	.word	0x0801134d

080113e0 <__sfp_lock_acquire>:
 80113e0:	4801      	ldr	r0, [pc, #4]	; (80113e8 <__sfp_lock_acquire+0x8>)
 80113e2:	f000 ba08 	b.w	80117f6 <__retarget_lock_acquire_recursive>
 80113e6:	bf00      	nop
 80113e8:	20008fa1 	.word	0x20008fa1

080113ec <__sfp_lock_release>:
 80113ec:	4801      	ldr	r0, [pc, #4]	; (80113f4 <__sfp_lock_release+0x8>)
 80113ee:	f000 ba03 	b.w	80117f8 <__retarget_lock_release_recursive>
 80113f2:	bf00      	nop
 80113f4:	20008fa1 	.word	0x20008fa1

080113f8 <__sinit>:
 80113f8:	b510      	push	{r4, lr}
 80113fa:	4604      	mov	r4, r0
 80113fc:	f7ff fff0 	bl	80113e0 <__sfp_lock_acquire>
 8011400:	6a23      	ldr	r3, [r4, #32]
 8011402:	b11b      	cbz	r3, 801140c <__sinit+0x14>
 8011404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011408:	f7ff bff0 	b.w	80113ec <__sfp_lock_release>
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <__sinit+0x28>)
 801140e:	6223      	str	r3, [r4, #32]
 8011410:	4b04      	ldr	r3, [pc, #16]	; (8011424 <__sinit+0x2c>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1f5      	bne.n	8011404 <__sinit+0xc>
 8011418:	f7ff ffc4 	bl	80113a4 <global_stdio_init.part.0>
 801141c:	e7f2      	b.n	8011404 <__sinit+0xc>
 801141e:	bf00      	nop
 8011420:	08011365 	.word	0x08011365
 8011424:	20008f98 	.word	0x20008f98

08011428 <_fwalk_sglue>:
 8011428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801142c:	4607      	mov	r7, r0
 801142e:	4688      	mov	r8, r1
 8011430:	4614      	mov	r4, r2
 8011432:	2600      	movs	r6, #0
 8011434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011438:	f1b9 0901 	subs.w	r9, r9, #1
 801143c:	d505      	bpl.n	801144a <_fwalk_sglue+0x22>
 801143e:	6824      	ldr	r4, [r4, #0]
 8011440:	2c00      	cmp	r4, #0
 8011442:	d1f7      	bne.n	8011434 <_fwalk_sglue+0xc>
 8011444:	4630      	mov	r0, r6
 8011446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801144a:	89ab      	ldrh	r3, [r5, #12]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d907      	bls.n	8011460 <_fwalk_sglue+0x38>
 8011450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011454:	3301      	adds	r3, #1
 8011456:	d003      	beq.n	8011460 <_fwalk_sglue+0x38>
 8011458:	4629      	mov	r1, r5
 801145a:	4638      	mov	r0, r7
 801145c:	47c0      	blx	r8
 801145e:	4306      	orrs	r6, r0
 8011460:	3568      	adds	r5, #104	; 0x68
 8011462:	e7e9      	b.n	8011438 <_fwalk_sglue+0x10>

08011464 <iprintf>:
 8011464:	b40f      	push	{r0, r1, r2, r3}
 8011466:	b507      	push	{r0, r1, r2, lr}
 8011468:	4906      	ldr	r1, [pc, #24]	; (8011484 <iprintf+0x20>)
 801146a:	ab04      	add	r3, sp, #16
 801146c:	6808      	ldr	r0, [r1, #0]
 801146e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011472:	6881      	ldr	r1, [r0, #8]
 8011474:	9301      	str	r3, [sp, #4]
 8011476:	f000 fb17 	bl	8011aa8 <_vfiprintf_r>
 801147a:	b003      	add	sp, #12
 801147c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011480:	b004      	add	sp, #16
 8011482:	4770      	bx	lr
 8011484:	20000198 	.word	0x20000198

08011488 <_puts_r>:
 8011488:	6a03      	ldr	r3, [r0, #32]
 801148a:	b570      	push	{r4, r5, r6, lr}
 801148c:	6884      	ldr	r4, [r0, #8]
 801148e:	4605      	mov	r5, r0
 8011490:	460e      	mov	r6, r1
 8011492:	b90b      	cbnz	r3, 8011498 <_puts_r+0x10>
 8011494:	f7ff ffb0 	bl	80113f8 <__sinit>
 8011498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801149a:	07db      	lsls	r3, r3, #31
 801149c:	d405      	bmi.n	80114aa <_puts_r+0x22>
 801149e:	89a3      	ldrh	r3, [r4, #12]
 80114a0:	0598      	lsls	r0, r3, #22
 80114a2:	d402      	bmi.n	80114aa <_puts_r+0x22>
 80114a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114a6:	f000 f9a6 	bl	80117f6 <__retarget_lock_acquire_recursive>
 80114aa:	89a3      	ldrh	r3, [r4, #12]
 80114ac:	0719      	lsls	r1, r3, #28
 80114ae:	d513      	bpl.n	80114d8 <_puts_r+0x50>
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	b18b      	cbz	r3, 80114d8 <_puts_r+0x50>
 80114b4:	3e01      	subs	r6, #1
 80114b6:	68a3      	ldr	r3, [r4, #8]
 80114b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80114bc:	3b01      	subs	r3, #1
 80114be:	60a3      	str	r3, [r4, #8]
 80114c0:	b9e9      	cbnz	r1, 80114fe <_puts_r+0x76>
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	da2e      	bge.n	8011524 <_puts_r+0x9c>
 80114c6:	4622      	mov	r2, r4
 80114c8:	210a      	movs	r1, #10
 80114ca:	4628      	mov	r0, r5
 80114cc:	f000 f87b 	bl	80115c6 <__swbuf_r>
 80114d0:	3001      	adds	r0, #1
 80114d2:	d007      	beq.n	80114e4 <_puts_r+0x5c>
 80114d4:	250a      	movs	r5, #10
 80114d6:	e007      	b.n	80114e8 <_puts_r+0x60>
 80114d8:	4621      	mov	r1, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	f000 f8b0 	bl	8011640 <__swsetup_r>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d0e7      	beq.n	80114b4 <_puts_r+0x2c>
 80114e4:	f04f 35ff 	mov.w	r5, #4294967295
 80114e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114ea:	07da      	lsls	r2, r3, #31
 80114ec:	d405      	bmi.n	80114fa <_puts_r+0x72>
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	059b      	lsls	r3, r3, #22
 80114f2:	d402      	bmi.n	80114fa <_puts_r+0x72>
 80114f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114f6:	f000 f97f 	bl	80117f8 <__retarget_lock_release_recursive>
 80114fa:	4628      	mov	r0, r5
 80114fc:	bd70      	pop	{r4, r5, r6, pc}
 80114fe:	2b00      	cmp	r3, #0
 8011500:	da04      	bge.n	801150c <_puts_r+0x84>
 8011502:	69a2      	ldr	r2, [r4, #24]
 8011504:	429a      	cmp	r2, r3
 8011506:	dc06      	bgt.n	8011516 <_puts_r+0x8e>
 8011508:	290a      	cmp	r1, #10
 801150a:	d004      	beq.n	8011516 <_puts_r+0x8e>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	6022      	str	r2, [r4, #0]
 8011512:	7019      	strb	r1, [r3, #0]
 8011514:	e7cf      	b.n	80114b6 <_puts_r+0x2e>
 8011516:	4622      	mov	r2, r4
 8011518:	4628      	mov	r0, r5
 801151a:	f000 f854 	bl	80115c6 <__swbuf_r>
 801151e:	3001      	adds	r0, #1
 8011520:	d1c9      	bne.n	80114b6 <_puts_r+0x2e>
 8011522:	e7df      	b.n	80114e4 <_puts_r+0x5c>
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	250a      	movs	r5, #10
 8011528:	1c5a      	adds	r2, r3, #1
 801152a:	6022      	str	r2, [r4, #0]
 801152c:	701d      	strb	r5, [r3, #0]
 801152e:	e7db      	b.n	80114e8 <_puts_r+0x60>

08011530 <puts>:
 8011530:	4b02      	ldr	r3, [pc, #8]	; (801153c <puts+0xc>)
 8011532:	4601      	mov	r1, r0
 8011534:	6818      	ldr	r0, [r3, #0]
 8011536:	f7ff bfa7 	b.w	8011488 <_puts_r>
 801153a:	bf00      	nop
 801153c:	20000198 	.word	0x20000198

08011540 <__sread>:
 8011540:	b510      	push	{r4, lr}
 8011542:	460c      	mov	r4, r1
 8011544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011548:	f000 f90c 	bl	8011764 <_read_r>
 801154c:	2800      	cmp	r0, #0
 801154e:	bfab      	itete	ge
 8011550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011552:	89a3      	ldrhlt	r3, [r4, #12]
 8011554:	181b      	addge	r3, r3, r0
 8011556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801155a:	bfac      	ite	ge
 801155c:	6563      	strge	r3, [r4, #84]	; 0x54
 801155e:	81a3      	strhlt	r3, [r4, #12]
 8011560:	bd10      	pop	{r4, pc}

08011562 <__swrite>:
 8011562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011566:	461f      	mov	r7, r3
 8011568:	898b      	ldrh	r3, [r1, #12]
 801156a:	05db      	lsls	r3, r3, #23
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	4616      	mov	r6, r2
 8011572:	d505      	bpl.n	8011580 <__swrite+0x1e>
 8011574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011578:	2302      	movs	r3, #2
 801157a:	2200      	movs	r2, #0
 801157c:	f000 f8e0 	bl	8011740 <_lseek_r>
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	4632      	mov	r2, r6
 801158e:	463b      	mov	r3, r7
 8011590:	4628      	mov	r0, r5
 8011592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011596:	f000 b8f7 	b.w	8011788 <_write_r>

0801159a <__sseek>:
 801159a:	b510      	push	{r4, lr}
 801159c:	460c      	mov	r4, r1
 801159e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a2:	f000 f8cd 	bl	8011740 <_lseek_r>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	bf15      	itete	ne
 80115ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115b6:	81a3      	strheq	r3, [r4, #12]
 80115b8:	bf18      	it	ne
 80115ba:	81a3      	strhne	r3, [r4, #12]
 80115bc:	bd10      	pop	{r4, pc}

080115be <__sclose>:
 80115be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115c2:	f000 b8ad 	b.w	8011720 <_close_r>

080115c6 <__swbuf_r>:
 80115c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c8:	460e      	mov	r6, r1
 80115ca:	4614      	mov	r4, r2
 80115cc:	4605      	mov	r5, r0
 80115ce:	b118      	cbz	r0, 80115d8 <__swbuf_r+0x12>
 80115d0:	6a03      	ldr	r3, [r0, #32]
 80115d2:	b90b      	cbnz	r3, 80115d8 <__swbuf_r+0x12>
 80115d4:	f7ff ff10 	bl	80113f8 <__sinit>
 80115d8:	69a3      	ldr	r3, [r4, #24]
 80115da:	60a3      	str	r3, [r4, #8]
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	071a      	lsls	r2, r3, #28
 80115e0:	d525      	bpl.n	801162e <__swbuf_r+0x68>
 80115e2:	6923      	ldr	r3, [r4, #16]
 80115e4:	b31b      	cbz	r3, 801162e <__swbuf_r+0x68>
 80115e6:	6823      	ldr	r3, [r4, #0]
 80115e8:	6922      	ldr	r2, [r4, #16]
 80115ea:	1a98      	subs	r0, r3, r2
 80115ec:	6963      	ldr	r3, [r4, #20]
 80115ee:	b2f6      	uxtb	r6, r6
 80115f0:	4283      	cmp	r3, r0
 80115f2:	4637      	mov	r7, r6
 80115f4:	dc04      	bgt.n	8011600 <__swbuf_r+0x3a>
 80115f6:	4621      	mov	r1, r4
 80115f8:	4628      	mov	r0, r5
 80115fa:	f000 fd85 	bl	8012108 <_fflush_r>
 80115fe:	b9e0      	cbnz	r0, 801163a <__swbuf_r+0x74>
 8011600:	68a3      	ldr	r3, [r4, #8]
 8011602:	3b01      	subs	r3, #1
 8011604:	60a3      	str	r3, [r4, #8]
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	6022      	str	r2, [r4, #0]
 801160c:	701e      	strb	r6, [r3, #0]
 801160e:	6962      	ldr	r2, [r4, #20]
 8011610:	1c43      	adds	r3, r0, #1
 8011612:	429a      	cmp	r2, r3
 8011614:	d004      	beq.n	8011620 <__swbuf_r+0x5a>
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	07db      	lsls	r3, r3, #31
 801161a:	d506      	bpl.n	801162a <__swbuf_r+0x64>
 801161c:	2e0a      	cmp	r6, #10
 801161e:	d104      	bne.n	801162a <__swbuf_r+0x64>
 8011620:	4621      	mov	r1, r4
 8011622:	4628      	mov	r0, r5
 8011624:	f000 fd70 	bl	8012108 <_fflush_r>
 8011628:	b938      	cbnz	r0, 801163a <__swbuf_r+0x74>
 801162a:	4638      	mov	r0, r7
 801162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801162e:	4621      	mov	r1, r4
 8011630:	4628      	mov	r0, r5
 8011632:	f000 f805 	bl	8011640 <__swsetup_r>
 8011636:	2800      	cmp	r0, #0
 8011638:	d0d5      	beq.n	80115e6 <__swbuf_r+0x20>
 801163a:	f04f 37ff 	mov.w	r7, #4294967295
 801163e:	e7f4      	b.n	801162a <__swbuf_r+0x64>

08011640 <__swsetup_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4b2a      	ldr	r3, [pc, #168]	; (80116ec <__swsetup_r+0xac>)
 8011644:	4605      	mov	r5, r0
 8011646:	6818      	ldr	r0, [r3, #0]
 8011648:	460c      	mov	r4, r1
 801164a:	b118      	cbz	r0, 8011654 <__swsetup_r+0x14>
 801164c:	6a03      	ldr	r3, [r0, #32]
 801164e:	b90b      	cbnz	r3, 8011654 <__swsetup_r+0x14>
 8011650:	f7ff fed2 	bl	80113f8 <__sinit>
 8011654:	89a3      	ldrh	r3, [r4, #12]
 8011656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801165a:	0718      	lsls	r0, r3, #28
 801165c:	d422      	bmi.n	80116a4 <__swsetup_r+0x64>
 801165e:	06d9      	lsls	r1, r3, #27
 8011660:	d407      	bmi.n	8011672 <__swsetup_r+0x32>
 8011662:	2309      	movs	r3, #9
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	f04f 30ff 	mov.w	r0, #4294967295
 8011670:	e034      	b.n	80116dc <__swsetup_r+0x9c>
 8011672:	0758      	lsls	r0, r3, #29
 8011674:	d512      	bpl.n	801169c <__swsetup_r+0x5c>
 8011676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011678:	b141      	cbz	r1, 801168c <__swsetup_r+0x4c>
 801167a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801167e:	4299      	cmp	r1, r3
 8011680:	d002      	beq.n	8011688 <__swsetup_r+0x48>
 8011682:	4628      	mov	r0, r5
 8011684:	f000 f8e6 	bl	8011854 <_free_r>
 8011688:	2300      	movs	r3, #0
 801168a:	6363      	str	r3, [r4, #52]	; 0x34
 801168c:	89a3      	ldrh	r3, [r4, #12]
 801168e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011692:	81a3      	strh	r3, [r4, #12]
 8011694:	2300      	movs	r3, #0
 8011696:	6063      	str	r3, [r4, #4]
 8011698:	6923      	ldr	r3, [r4, #16]
 801169a:	6023      	str	r3, [r4, #0]
 801169c:	89a3      	ldrh	r3, [r4, #12]
 801169e:	f043 0308 	orr.w	r3, r3, #8
 80116a2:	81a3      	strh	r3, [r4, #12]
 80116a4:	6923      	ldr	r3, [r4, #16]
 80116a6:	b94b      	cbnz	r3, 80116bc <__swsetup_r+0x7c>
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116b2:	d003      	beq.n	80116bc <__swsetup_r+0x7c>
 80116b4:	4621      	mov	r1, r4
 80116b6:	4628      	mov	r0, r5
 80116b8:	f000 fd86 	bl	80121c8 <__smakebuf_r>
 80116bc:	89a0      	ldrh	r0, [r4, #12]
 80116be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116c2:	f010 0301 	ands.w	r3, r0, #1
 80116c6:	d00a      	beq.n	80116de <__swsetup_r+0x9e>
 80116c8:	2300      	movs	r3, #0
 80116ca:	60a3      	str	r3, [r4, #8]
 80116cc:	6963      	ldr	r3, [r4, #20]
 80116ce:	425b      	negs	r3, r3
 80116d0:	61a3      	str	r3, [r4, #24]
 80116d2:	6923      	ldr	r3, [r4, #16]
 80116d4:	b943      	cbnz	r3, 80116e8 <__swsetup_r+0xa8>
 80116d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80116da:	d1c4      	bne.n	8011666 <__swsetup_r+0x26>
 80116dc:	bd38      	pop	{r3, r4, r5, pc}
 80116de:	0781      	lsls	r1, r0, #30
 80116e0:	bf58      	it	pl
 80116e2:	6963      	ldrpl	r3, [r4, #20]
 80116e4:	60a3      	str	r3, [r4, #8]
 80116e6:	e7f4      	b.n	80116d2 <__swsetup_r+0x92>
 80116e8:	2000      	movs	r0, #0
 80116ea:	e7f7      	b.n	80116dc <__swsetup_r+0x9c>
 80116ec:	20000198 	.word	0x20000198

080116f0 <memcmp>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	3901      	subs	r1, #1
 80116f4:	4402      	add	r2, r0
 80116f6:	4290      	cmp	r0, r2
 80116f8:	d101      	bne.n	80116fe <memcmp+0xe>
 80116fa:	2000      	movs	r0, #0
 80116fc:	e005      	b.n	801170a <memcmp+0x1a>
 80116fe:	7803      	ldrb	r3, [r0, #0]
 8011700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011704:	42a3      	cmp	r3, r4
 8011706:	d001      	beq.n	801170c <memcmp+0x1c>
 8011708:	1b18      	subs	r0, r3, r4
 801170a:	bd10      	pop	{r4, pc}
 801170c:	3001      	adds	r0, #1
 801170e:	e7f2      	b.n	80116f6 <memcmp+0x6>

08011710 <memset>:
 8011710:	4402      	add	r2, r0
 8011712:	4603      	mov	r3, r0
 8011714:	4293      	cmp	r3, r2
 8011716:	d100      	bne.n	801171a <memset+0xa>
 8011718:	4770      	bx	lr
 801171a:	f803 1b01 	strb.w	r1, [r3], #1
 801171e:	e7f9      	b.n	8011714 <memset+0x4>

08011720 <_close_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	4d06      	ldr	r5, [pc, #24]	; (801173c <_close_r+0x1c>)
 8011724:	2300      	movs	r3, #0
 8011726:	4604      	mov	r4, r0
 8011728:	4608      	mov	r0, r1
 801172a:	602b      	str	r3, [r5, #0]
 801172c:	f7f0 f957 	bl	80019de <_close>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d102      	bne.n	801173a <_close_r+0x1a>
 8011734:	682b      	ldr	r3, [r5, #0]
 8011736:	b103      	cbz	r3, 801173a <_close_r+0x1a>
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	20008f9c 	.word	0x20008f9c

08011740 <_lseek_r>:
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4d07      	ldr	r5, [pc, #28]	; (8011760 <_lseek_r+0x20>)
 8011744:	4604      	mov	r4, r0
 8011746:	4608      	mov	r0, r1
 8011748:	4611      	mov	r1, r2
 801174a:	2200      	movs	r2, #0
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	f7f0 f96c 	bl	8001a2c <_lseek>
 8011754:	1c43      	adds	r3, r0, #1
 8011756:	d102      	bne.n	801175e <_lseek_r+0x1e>
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	b103      	cbz	r3, 801175e <_lseek_r+0x1e>
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	bd38      	pop	{r3, r4, r5, pc}
 8011760:	20008f9c 	.word	0x20008f9c

08011764 <_read_r>:
 8011764:	b538      	push	{r3, r4, r5, lr}
 8011766:	4d07      	ldr	r5, [pc, #28]	; (8011784 <_read_r+0x20>)
 8011768:	4604      	mov	r4, r0
 801176a:	4608      	mov	r0, r1
 801176c:	4611      	mov	r1, r2
 801176e:	2200      	movs	r2, #0
 8011770:	602a      	str	r2, [r5, #0]
 8011772:	461a      	mov	r2, r3
 8011774:	f7f0 f8fa 	bl	800196c <_read>
 8011778:	1c43      	adds	r3, r0, #1
 801177a:	d102      	bne.n	8011782 <_read_r+0x1e>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b103      	cbz	r3, 8011782 <_read_r+0x1e>
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	20008f9c 	.word	0x20008f9c

08011788 <_write_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d07      	ldr	r5, [pc, #28]	; (80117a8 <_write_r+0x20>)
 801178c:	4604      	mov	r4, r0
 801178e:	4608      	mov	r0, r1
 8011790:	4611      	mov	r1, r2
 8011792:	2200      	movs	r2, #0
 8011794:	602a      	str	r2, [r5, #0]
 8011796:	461a      	mov	r2, r3
 8011798:	f7f0 f905 	bl	80019a6 <_write>
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	d102      	bne.n	80117a6 <_write_r+0x1e>
 80117a0:	682b      	ldr	r3, [r5, #0]
 80117a2:	b103      	cbz	r3, 80117a6 <_write_r+0x1e>
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	bd38      	pop	{r3, r4, r5, pc}
 80117a8:	20008f9c 	.word	0x20008f9c

080117ac <__libc_init_array>:
 80117ac:	b570      	push	{r4, r5, r6, lr}
 80117ae:	4d0d      	ldr	r5, [pc, #52]	; (80117e4 <__libc_init_array+0x38>)
 80117b0:	4c0d      	ldr	r4, [pc, #52]	; (80117e8 <__libc_init_array+0x3c>)
 80117b2:	1b64      	subs	r4, r4, r5
 80117b4:	10a4      	asrs	r4, r4, #2
 80117b6:	2600      	movs	r6, #0
 80117b8:	42a6      	cmp	r6, r4
 80117ba:	d109      	bne.n	80117d0 <__libc_init_array+0x24>
 80117bc:	4d0b      	ldr	r5, [pc, #44]	; (80117ec <__libc_init_array+0x40>)
 80117be:	4c0c      	ldr	r4, [pc, #48]	; (80117f0 <__libc_init_array+0x44>)
 80117c0:	f000 fdbc 	bl	801233c <_init>
 80117c4:	1b64      	subs	r4, r4, r5
 80117c6:	10a4      	asrs	r4, r4, #2
 80117c8:	2600      	movs	r6, #0
 80117ca:	42a6      	cmp	r6, r4
 80117cc:	d105      	bne.n	80117da <__libc_init_array+0x2e>
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80117d4:	4798      	blx	r3
 80117d6:	3601      	adds	r6, #1
 80117d8:	e7ee      	b.n	80117b8 <__libc_init_array+0xc>
 80117da:	f855 3b04 	ldr.w	r3, [r5], #4
 80117de:	4798      	blx	r3
 80117e0:	3601      	adds	r6, #1
 80117e2:	e7f2      	b.n	80117ca <__libc_init_array+0x1e>
 80117e4:	08014fd0 	.word	0x08014fd0
 80117e8:	08014fd0 	.word	0x08014fd0
 80117ec:	08014fd0 	.word	0x08014fd0
 80117f0:	08014fd4 	.word	0x08014fd4

080117f4 <__retarget_lock_init_recursive>:
 80117f4:	4770      	bx	lr

080117f6 <__retarget_lock_acquire_recursive>:
 80117f6:	4770      	bx	lr

080117f8 <__retarget_lock_release_recursive>:
 80117f8:	4770      	bx	lr

080117fa <memcpy>:
 80117fa:	440a      	add	r2, r1
 80117fc:	4291      	cmp	r1, r2
 80117fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8011802:	d100      	bne.n	8011806 <memcpy+0xc>
 8011804:	4770      	bx	lr
 8011806:	b510      	push	{r4, lr}
 8011808:	f811 4b01 	ldrb.w	r4, [r1], #1
 801180c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011810:	4291      	cmp	r1, r2
 8011812:	d1f9      	bne.n	8011808 <memcpy+0xe>
 8011814:	bd10      	pop	{r4, pc}
	...

08011818 <__assert_func>:
 8011818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801181a:	4614      	mov	r4, r2
 801181c:	461a      	mov	r2, r3
 801181e:	4b09      	ldr	r3, [pc, #36]	; (8011844 <__assert_func+0x2c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4605      	mov	r5, r0
 8011824:	68d8      	ldr	r0, [r3, #12]
 8011826:	b14c      	cbz	r4, 801183c <__assert_func+0x24>
 8011828:	4b07      	ldr	r3, [pc, #28]	; (8011848 <__assert_func+0x30>)
 801182a:	9100      	str	r1, [sp, #0]
 801182c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011830:	4906      	ldr	r1, [pc, #24]	; (801184c <__assert_func+0x34>)
 8011832:	462b      	mov	r3, r5
 8011834:	f000 fc90 	bl	8012158 <fiprintf>
 8011838:	f000 fd34 	bl	80122a4 <abort>
 801183c:	4b04      	ldr	r3, [pc, #16]	; (8011850 <__assert_func+0x38>)
 801183e:	461c      	mov	r4, r3
 8011840:	e7f3      	b.n	801182a <__assert_func+0x12>
 8011842:	bf00      	nop
 8011844:	20000198 	.word	0x20000198
 8011848:	08014f59 	.word	0x08014f59
 801184c:	08014f66 	.word	0x08014f66
 8011850:	08014f94 	.word	0x08014f94

08011854 <_free_r>:
 8011854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011856:	2900      	cmp	r1, #0
 8011858:	d044      	beq.n	80118e4 <_free_r+0x90>
 801185a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801185e:	9001      	str	r0, [sp, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	f1a1 0404 	sub.w	r4, r1, #4
 8011866:	bfb8      	it	lt
 8011868:	18e4      	addlt	r4, r4, r3
 801186a:	f000 f8e7 	bl	8011a3c <__malloc_lock>
 801186e:	4a1e      	ldr	r2, [pc, #120]	; (80118e8 <_free_r+0x94>)
 8011870:	9801      	ldr	r0, [sp, #4]
 8011872:	6813      	ldr	r3, [r2, #0]
 8011874:	b933      	cbnz	r3, 8011884 <_free_r+0x30>
 8011876:	6063      	str	r3, [r4, #4]
 8011878:	6014      	str	r4, [r2, #0]
 801187a:	b003      	add	sp, #12
 801187c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011880:	f000 b8e2 	b.w	8011a48 <__malloc_unlock>
 8011884:	42a3      	cmp	r3, r4
 8011886:	d908      	bls.n	801189a <_free_r+0x46>
 8011888:	6825      	ldr	r5, [r4, #0]
 801188a:	1961      	adds	r1, r4, r5
 801188c:	428b      	cmp	r3, r1
 801188e:	bf01      	itttt	eq
 8011890:	6819      	ldreq	r1, [r3, #0]
 8011892:	685b      	ldreq	r3, [r3, #4]
 8011894:	1949      	addeq	r1, r1, r5
 8011896:	6021      	streq	r1, [r4, #0]
 8011898:	e7ed      	b.n	8011876 <_free_r+0x22>
 801189a:	461a      	mov	r2, r3
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	b10b      	cbz	r3, 80118a4 <_free_r+0x50>
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d9fa      	bls.n	801189a <_free_r+0x46>
 80118a4:	6811      	ldr	r1, [r2, #0]
 80118a6:	1855      	adds	r5, r2, r1
 80118a8:	42a5      	cmp	r5, r4
 80118aa:	d10b      	bne.n	80118c4 <_free_r+0x70>
 80118ac:	6824      	ldr	r4, [r4, #0]
 80118ae:	4421      	add	r1, r4
 80118b0:	1854      	adds	r4, r2, r1
 80118b2:	42a3      	cmp	r3, r4
 80118b4:	6011      	str	r1, [r2, #0]
 80118b6:	d1e0      	bne.n	801187a <_free_r+0x26>
 80118b8:	681c      	ldr	r4, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	6053      	str	r3, [r2, #4]
 80118be:	440c      	add	r4, r1
 80118c0:	6014      	str	r4, [r2, #0]
 80118c2:	e7da      	b.n	801187a <_free_r+0x26>
 80118c4:	d902      	bls.n	80118cc <_free_r+0x78>
 80118c6:	230c      	movs	r3, #12
 80118c8:	6003      	str	r3, [r0, #0]
 80118ca:	e7d6      	b.n	801187a <_free_r+0x26>
 80118cc:	6825      	ldr	r5, [r4, #0]
 80118ce:	1961      	adds	r1, r4, r5
 80118d0:	428b      	cmp	r3, r1
 80118d2:	bf04      	itt	eq
 80118d4:	6819      	ldreq	r1, [r3, #0]
 80118d6:	685b      	ldreq	r3, [r3, #4]
 80118d8:	6063      	str	r3, [r4, #4]
 80118da:	bf04      	itt	eq
 80118dc:	1949      	addeq	r1, r1, r5
 80118de:	6021      	streq	r1, [r4, #0]
 80118e0:	6054      	str	r4, [r2, #4]
 80118e2:	e7ca      	b.n	801187a <_free_r+0x26>
 80118e4:	b003      	add	sp, #12
 80118e6:	bd30      	pop	{r4, r5, pc}
 80118e8:	20008fa4 	.word	0x20008fa4

080118ec <malloc>:
 80118ec:	4b02      	ldr	r3, [pc, #8]	; (80118f8 <malloc+0xc>)
 80118ee:	4601      	mov	r1, r0
 80118f0:	6818      	ldr	r0, [r3, #0]
 80118f2:	f000 b823 	b.w	801193c <_malloc_r>
 80118f6:	bf00      	nop
 80118f8:	20000198 	.word	0x20000198

080118fc <sbrk_aligned>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	4e0e      	ldr	r6, [pc, #56]	; (8011938 <sbrk_aligned+0x3c>)
 8011900:	460c      	mov	r4, r1
 8011902:	6831      	ldr	r1, [r6, #0]
 8011904:	4605      	mov	r5, r0
 8011906:	b911      	cbnz	r1, 801190e <sbrk_aligned+0x12>
 8011908:	f000 fcbc 	bl	8012284 <_sbrk_r>
 801190c:	6030      	str	r0, [r6, #0]
 801190e:	4621      	mov	r1, r4
 8011910:	4628      	mov	r0, r5
 8011912:	f000 fcb7 	bl	8012284 <_sbrk_r>
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	d00a      	beq.n	8011930 <sbrk_aligned+0x34>
 801191a:	1cc4      	adds	r4, r0, #3
 801191c:	f024 0403 	bic.w	r4, r4, #3
 8011920:	42a0      	cmp	r0, r4
 8011922:	d007      	beq.n	8011934 <sbrk_aligned+0x38>
 8011924:	1a21      	subs	r1, r4, r0
 8011926:	4628      	mov	r0, r5
 8011928:	f000 fcac 	bl	8012284 <_sbrk_r>
 801192c:	3001      	adds	r0, #1
 801192e:	d101      	bne.n	8011934 <sbrk_aligned+0x38>
 8011930:	f04f 34ff 	mov.w	r4, #4294967295
 8011934:	4620      	mov	r0, r4
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	20008fa8 	.word	0x20008fa8

0801193c <_malloc_r>:
 801193c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011940:	1ccd      	adds	r5, r1, #3
 8011942:	f025 0503 	bic.w	r5, r5, #3
 8011946:	3508      	adds	r5, #8
 8011948:	2d0c      	cmp	r5, #12
 801194a:	bf38      	it	cc
 801194c:	250c      	movcc	r5, #12
 801194e:	2d00      	cmp	r5, #0
 8011950:	4607      	mov	r7, r0
 8011952:	db01      	blt.n	8011958 <_malloc_r+0x1c>
 8011954:	42a9      	cmp	r1, r5
 8011956:	d905      	bls.n	8011964 <_malloc_r+0x28>
 8011958:	230c      	movs	r3, #12
 801195a:	603b      	str	r3, [r7, #0]
 801195c:	2600      	movs	r6, #0
 801195e:	4630      	mov	r0, r6
 8011960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011a38 <_malloc_r+0xfc>
 8011968:	f000 f868 	bl	8011a3c <__malloc_lock>
 801196c:	f8d8 3000 	ldr.w	r3, [r8]
 8011970:	461c      	mov	r4, r3
 8011972:	bb5c      	cbnz	r4, 80119cc <_malloc_r+0x90>
 8011974:	4629      	mov	r1, r5
 8011976:	4638      	mov	r0, r7
 8011978:	f7ff ffc0 	bl	80118fc <sbrk_aligned>
 801197c:	1c43      	adds	r3, r0, #1
 801197e:	4604      	mov	r4, r0
 8011980:	d155      	bne.n	8011a2e <_malloc_r+0xf2>
 8011982:	f8d8 4000 	ldr.w	r4, [r8]
 8011986:	4626      	mov	r6, r4
 8011988:	2e00      	cmp	r6, #0
 801198a:	d145      	bne.n	8011a18 <_malloc_r+0xdc>
 801198c:	2c00      	cmp	r4, #0
 801198e:	d048      	beq.n	8011a22 <_malloc_r+0xe6>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	4631      	mov	r1, r6
 8011994:	4638      	mov	r0, r7
 8011996:	eb04 0903 	add.w	r9, r4, r3
 801199a:	f000 fc73 	bl	8012284 <_sbrk_r>
 801199e:	4581      	cmp	r9, r0
 80119a0:	d13f      	bne.n	8011a22 <_malloc_r+0xe6>
 80119a2:	6821      	ldr	r1, [r4, #0]
 80119a4:	1a6d      	subs	r5, r5, r1
 80119a6:	4629      	mov	r1, r5
 80119a8:	4638      	mov	r0, r7
 80119aa:	f7ff ffa7 	bl	80118fc <sbrk_aligned>
 80119ae:	3001      	adds	r0, #1
 80119b0:	d037      	beq.n	8011a22 <_malloc_r+0xe6>
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	442b      	add	r3, r5
 80119b6:	6023      	str	r3, [r4, #0]
 80119b8:	f8d8 3000 	ldr.w	r3, [r8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d038      	beq.n	8011a32 <_malloc_r+0xf6>
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	42a2      	cmp	r2, r4
 80119c4:	d12b      	bne.n	8011a1e <_malloc_r+0xe2>
 80119c6:	2200      	movs	r2, #0
 80119c8:	605a      	str	r2, [r3, #4]
 80119ca:	e00f      	b.n	80119ec <_malloc_r+0xb0>
 80119cc:	6822      	ldr	r2, [r4, #0]
 80119ce:	1b52      	subs	r2, r2, r5
 80119d0:	d41f      	bmi.n	8011a12 <_malloc_r+0xd6>
 80119d2:	2a0b      	cmp	r2, #11
 80119d4:	d917      	bls.n	8011a06 <_malloc_r+0xca>
 80119d6:	1961      	adds	r1, r4, r5
 80119d8:	42a3      	cmp	r3, r4
 80119da:	6025      	str	r5, [r4, #0]
 80119dc:	bf18      	it	ne
 80119de:	6059      	strne	r1, [r3, #4]
 80119e0:	6863      	ldr	r3, [r4, #4]
 80119e2:	bf08      	it	eq
 80119e4:	f8c8 1000 	streq.w	r1, [r8]
 80119e8:	5162      	str	r2, [r4, r5]
 80119ea:	604b      	str	r3, [r1, #4]
 80119ec:	4638      	mov	r0, r7
 80119ee:	f104 060b 	add.w	r6, r4, #11
 80119f2:	f000 f829 	bl	8011a48 <__malloc_unlock>
 80119f6:	f026 0607 	bic.w	r6, r6, #7
 80119fa:	1d23      	adds	r3, r4, #4
 80119fc:	1af2      	subs	r2, r6, r3
 80119fe:	d0ae      	beq.n	801195e <_malloc_r+0x22>
 8011a00:	1b9b      	subs	r3, r3, r6
 8011a02:	50a3      	str	r3, [r4, r2]
 8011a04:	e7ab      	b.n	801195e <_malloc_r+0x22>
 8011a06:	42a3      	cmp	r3, r4
 8011a08:	6862      	ldr	r2, [r4, #4]
 8011a0a:	d1dd      	bne.n	80119c8 <_malloc_r+0x8c>
 8011a0c:	f8c8 2000 	str.w	r2, [r8]
 8011a10:	e7ec      	b.n	80119ec <_malloc_r+0xb0>
 8011a12:	4623      	mov	r3, r4
 8011a14:	6864      	ldr	r4, [r4, #4]
 8011a16:	e7ac      	b.n	8011972 <_malloc_r+0x36>
 8011a18:	4634      	mov	r4, r6
 8011a1a:	6876      	ldr	r6, [r6, #4]
 8011a1c:	e7b4      	b.n	8011988 <_malloc_r+0x4c>
 8011a1e:	4613      	mov	r3, r2
 8011a20:	e7cc      	b.n	80119bc <_malloc_r+0x80>
 8011a22:	230c      	movs	r3, #12
 8011a24:	603b      	str	r3, [r7, #0]
 8011a26:	4638      	mov	r0, r7
 8011a28:	f000 f80e 	bl	8011a48 <__malloc_unlock>
 8011a2c:	e797      	b.n	801195e <_malloc_r+0x22>
 8011a2e:	6025      	str	r5, [r4, #0]
 8011a30:	e7dc      	b.n	80119ec <_malloc_r+0xb0>
 8011a32:	605b      	str	r3, [r3, #4]
 8011a34:	deff      	udf	#255	; 0xff
 8011a36:	bf00      	nop
 8011a38:	20008fa4 	.word	0x20008fa4

08011a3c <__malloc_lock>:
 8011a3c:	4801      	ldr	r0, [pc, #4]	; (8011a44 <__malloc_lock+0x8>)
 8011a3e:	f7ff beda 	b.w	80117f6 <__retarget_lock_acquire_recursive>
 8011a42:	bf00      	nop
 8011a44:	20008fa0 	.word	0x20008fa0

08011a48 <__malloc_unlock>:
 8011a48:	4801      	ldr	r0, [pc, #4]	; (8011a50 <__malloc_unlock+0x8>)
 8011a4a:	f7ff bed5 	b.w	80117f8 <__retarget_lock_release_recursive>
 8011a4e:	bf00      	nop
 8011a50:	20008fa0 	.word	0x20008fa0

08011a54 <__sfputc_r>:
 8011a54:	6893      	ldr	r3, [r2, #8]
 8011a56:	3b01      	subs	r3, #1
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	b410      	push	{r4}
 8011a5c:	6093      	str	r3, [r2, #8]
 8011a5e:	da08      	bge.n	8011a72 <__sfputc_r+0x1e>
 8011a60:	6994      	ldr	r4, [r2, #24]
 8011a62:	42a3      	cmp	r3, r4
 8011a64:	db01      	blt.n	8011a6a <__sfputc_r+0x16>
 8011a66:	290a      	cmp	r1, #10
 8011a68:	d103      	bne.n	8011a72 <__sfputc_r+0x1e>
 8011a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a6e:	f7ff bdaa 	b.w	80115c6 <__swbuf_r>
 8011a72:	6813      	ldr	r3, [r2, #0]
 8011a74:	1c58      	adds	r0, r3, #1
 8011a76:	6010      	str	r0, [r2, #0]
 8011a78:	7019      	strb	r1, [r3, #0]
 8011a7a:	4608      	mov	r0, r1
 8011a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <__sfputs_r>:
 8011a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a84:	4606      	mov	r6, r0
 8011a86:	460f      	mov	r7, r1
 8011a88:	4614      	mov	r4, r2
 8011a8a:	18d5      	adds	r5, r2, r3
 8011a8c:	42ac      	cmp	r4, r5
 8011a8e:	d101      	bne.n	8011a94 <__sfputs_r+0x12>
 8011a90:	2000      	movs	r0, #0
 8011a92:	e007      	b.n	8011aa4 <__sfputs_r+0x22>
 8011a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a98:	463a      	mov	r2, r7
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	f7ff ffda 	bl	8011a54 <__sfputc_r>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	d1f3      	bne.n	8011a8c <__sfputs_r+0xa>
 8011aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011aa8 <_vfiprintf_r>:
 8011aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aac:	460d      	mov	r5, r1
 8011aae:	b09d      	sub	sp, #116	; 0x74
 8011ab0:	4614      	mov	r4, r2
 8011ab2:	4698      	mov	r8, r3
 8011ab4:	4606      	mov	r6, r0
 8011ab6:	b118      	cbz	r0, 8011ac0 <_vfiprintf_r+0x18>
 8011ab8:	6a03      	ldr	r3, [r0, #32]
 8011aba:	b90b      	cbnz	r3, 8011ac0 <_vfiprintf_r+0x18>
 8011abc:	f7ff fc9c 	bl	80113f8 <__sinit>
 8011ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ac2:	07d9      	lsls	r1, r3, #31
 8011ac4:	d405      	bmi.n	8011ad2 <_vfiprintf_r+0x2a>
 8011ac6:	89ab      	ldrh	r3, [r5, #12]
 8011ac8:	059a      	lsls	r2, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_vfiprintf_r+0x2a>
 8011acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ace:	f7ff fe92 	bl	80117f6 <__retarget_lock_acquire_recursive>
 8011ad2:	89ab      	ldrh	r3, [r5, #12]
 8011ad4:	071b      	lsls	r3, r3, #28
 8011ad6:	d501      	bpl.n	8011adc <_vfiprintf_r+0x34>
 8011ad8:	692b      	ldr	r3, [r5, #16]
 8011ada:	b99b      	cbnz	r3, 8011b04 <_vfiprintf_r+0x5c>
 8011adc:	4629      	mov	r1, r5
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7ff fdae 	bl	8011640 <__swsetup_r>
 8011ae4:	b170      	cbz	r0, 8011b04 <_vfiprintf_r+0x5c>
 8011ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ae8:	07dc      	lsls	r4, r3, #31
 8011aea:	d504      	bpl.n	8011af6 <_vfiprintf_r+0x4e>
 8011aec:	f04f 30ff 	mov.w	r0, #4294967295
 8011af0:	b01d      	add	sp, #116	; 0x74
 8011af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af6:	89ab      	ldrh	r3, [r5, #12]
 8011af8:	0598      	lsls	r0, r3, #22
 8011afa:	d4f7      	bmi.n	8011aec <_vfiprintf_r+0x44>
 8011afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011afe:	f7ff fe7b 	bl	80117f8 <__retarget_lock_release_recursive>
 8011b02:	e7f3      	b.n	8011aec <_vfiprintf_r+0x44>
 8011b04:	2300      	movs	r3, #0
 8011b06:	9309      	str	r3, [sp, #36]	; 0x24
 8011b08:	2320      	movs	r3, #32
 8011b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b12:	2330      	movs	r3, #48	; 0x30
 8011b14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011cc8 <_vfiprintf_r+0x220>
 8011b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b1c:	f04f 0901 	mov.w	r9, #1
 8011b20:	4623      	mov	r3, r4
 8011b22:	469a      	mov	sl, r3
 8011b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b28:	b10a      	cbz	r2, 8011b2e <_vfiprintf_r+0x86>
 8011b2a:	2a25      	cmp	r2, #37	; 0x25
 8011b2c:	d1f9      	bne.n	8011b22 <_vfiprintf_r+0x7a>
 8011b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8011b32:	d00b      	beq.n	8011b4c <_vfiprintf_r+0xa4>
 8011b34:	465b      	mov	r3, fp
 8011b36:	4622      	mov	r2, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	4630      	mov	r0, r6
 8011b3c:	f7ff ffa1 	bl	8011a82 <__sfputs_r>
 8011b40:	3001      	adds	r0, #1
 8011b42:	f000 80a9 	beq.w	8011c98 <_vfiprintf_r+0x1f0>
 8011b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b48:	445a      	add	r2, fp
 8011b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8011b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f000 80a1 	beq.w	8011c98 <_vfiprintf_r+0x1f0>
 8011b56:	2300      	movs	r3, #0
 8011b58:	f04f 32ff 	mov.w	r2, #4294967295
 8011b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b60:	f10a 0a01 	add.w	sl, sl, #1
 8011b64:	9304      	str	r3, [sp, #16]
 8011b66:	9307      	str	r3, [sp, #28]
 8011b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8011b6e:	4654      	mov	r4, sl
 8011b70:	2205      	movs	r2, #5
 8011b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b76:	4854      	ldr	r0, [pc, #336]	; (8011cc8 <_vfiprintf_r+0x220>)
 8011b78:	f7ee fb3a 	bl	80001f0 <memchr>
 8011b7c:	9a04      	ldr	r2, [sp, #16]
 8011b7e:	b9d8      	cbnz	r0, 8011bb8 <_vfiprintf_r+0x110>
 8011b80:	06d1      	lsls	r1, r2, #27
 8011b82:	bf44      	itt	mi
 8011b84:	2320      	movmi	r3, #32
 8011b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b8a:	0713      	lsls	r3, r2, #28
 8011b8c:	bf44      	itt	mi
 8011b8e:	232b      	movmi	r3, #43	; 0x2b
 8011b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b94:	f89a 3000 	ldrb.w	r3, [sl]
 8011b98:	2b2a      	cmp	r3, #42	; 0x2a
 8011b9a:	d015      	beq.n	8011bc8 <_vfiprintf_r+0x120>
 8011b9c:	9a07      	ldr	r2, [sp, #28]
 8011b9e:	4654      	mov	r4, sl
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	f04f 0c0a 	mov.w	ip, #10
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bac:	3b30      	subs	r3, #48	; 0x30
 8011bae:	2b09      	cmp	r3, #9
 8011bb0:	d94d      	bls.n	8011c4e <_vfiprintf_r+0x1a6>
 8011bb2:	b1b0      	cbz	r0, 8011be2 <_vfiprintf_r+0x13a>
 8011bb4:	9207      	str	r2, [sp, #28]
 8011bb6:	e014      	b.n	8011be2 <_vfiprintf_r+0x13a>
 8011bb8:	eba0 0308 	sub.w	r3, r0, r8
 8011bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	9304      	str	r3, [sp, #16]
 8011bc4:	46a2      	mov	sl, r4
 8011bc6:	e7d2      	b.n	8011b6e <_vfiprintf_r+0xc6>
 8011bc8:	9b03      	ldr	r3, [sp, #12]
 8011bca:	1d19      	adds	r1, r3, #4
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	9103      	str	r1, [sp, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	bfbb      	ittet	lt
 8011bd4:	425b      	neglt	r3, r3
 8011bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8011bda:	9307      	strge	r3, [sp, #28]
 8011bdc:	9307      	strlt	r3, [sp, #28]
 8011bde:	bfb8      	it	lt
 8011be0:	9204      	strlt	r2, [sp, #16]
 8011be2:	7823      	ldrb	r3, [r4, #0]
 8011be4:	2b2e      	cmp	r3, #46	; 0x2e
 8011be6:	d10c      	bne.n	8011c02 <_vfiprintf_r+0x15a>
 8011be8:	7863      	ldrb	r3, [r4, #1]
 8011bea:	2b2a      	cmp	r3, #42	; 0x2a
 8011bec:	d134      	bne.n	8011c58 <_vfiprintf_r+0x1b0>
 8011bee:	9b03      	ldr	r3, [sp, #12]
 8011bf0:	1d1a      	adds	r2, r3, #4
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	9203      	str	r2, [sp, #12]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	bfb8      	it	lt
 8011bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bfe:	3402      	adds	r4, #2
 8011c00:	9305      	str	r3, [sp, #20]
 8011c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011cd8 <_vfiprintf_r+0x230>
 8011c06:	7821      	ldrb	r1, [r4, #0]
 8011c08:	2203      	movs	r2, #3
 8011c0a:	4650      	mov	r0, sl
 8011c0c:	f7ee faf0 	bl	80001f0 <memchr>
 8011c10:	b138      	cbz	r0, 8011c22 <_vfiprintf_r+0x17a>
 8011c12:	9b04      	ldr	r3, [sp, #16]
 8011c14:	eba0 000a 	sub.w	r0, r0, sl
 8011c18:	2240      	movs	r2, #64	; 0x40
 8011c1a:	4082      	lsls	r2, r0
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	3401      	adds	r4, #1
 8011c20:	9304      	str	r3, [sp, #16]
 8011c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c26:	4829      	ldr	r0, [pc, #164]	; (8011ccc <_vfiprintf_r+0x224>)
 8011c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c2c:	2206      	movs	r2, #6
 8011c2e:	f7ee fadf 	bl	80001f0 <memchr>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d03f      	beq.n	8011cb6 <_vfiprintf_r+0x20e>
 8011c36:	4b26      	ldr	r3, [pc, #152]	; (8011cd0 <_vfiprintf_r+0x228>)
 8011c38:	bb1b      	cbnz	r3, 8011c82 <_vfiprintf_r+0x1da>
 8011c3a:	9b03      	ldr	r3, [sp, #12]
 8011c3c:	3307      	adds	r3, #7
 8011c3e:	f023 0307 	bic.w	r3, r3, #7
 8011c42:	3308      	adds	r3, #8
 8011c44:	9303      	str	r3, [sp, #12]
 8011c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c48:	443b      	add	r3, r7
 8011c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c4c:	e768      	b.n	8011b20 <_vfiprintf_r+0x78>
 8011c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c52:	460c      	mov	r4, r1
 8011c54:	2001      	movs	r0, #1
 8011c56:	e7a6      	b.n	8011ba6 <_vfiprintf_r+0xfe>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	3401      	adds	r4, #1
 8011c5c:	9305      	str	r3, [sp, #20]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	f04f 0c0a 	mov.w	ip, #10
 8011c64:	4620      	mov	r0, r4
 8011c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c6a:	3a30      	subs	r2, #48	; 0x30
 8011c6c:	2a09      	cmp	r2, #9
 8011c6e:	d903      	bls.n	8011c78 <_vfiprintf_r+0x1d0>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d0c6      	beq.n	8011c02 <_vfiprintf_r+0x15a>
 8011c74:	9105      	str	r1, [sp, #20]
 8011c76:	e7c4      	b.n	8011c02 <_vfiprintf_r+0x15a>
 8011c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e7f0      	b.n	8011c64 <_vfiprintf_r+0x1bc>
 8011c82:	ab03      	add	r3, sp, #12
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	462a      	mov	r2, r5
 8011c88:	4b12      	ldr	r3, [pc, #72]	; (8011cd4 <_vfiprintf_r+0x22c>)
 8011c8a:	a904      	add	r1, sp, #16
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f3af 8000 	nop.w
 8011c92:	4607      	mov	r7, r0
 8011c94:	1c78      	adds	r0, r7, #1
 8011c96:	d1d6      	bne.n	8011c46 <_vfiprintf_r+0x19e>
 8011c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c9a:	07d9      	lsls	r1, r3, #31
 8011c9c:	d405      	bmi.n	8011caa <_vfiprintf_r+0x202>
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	059a      	lsls	r2, r3, #22
 8011ca2:	d402      	bmi.n	8011caa <_vfiprintf_r+0x202>
 8011ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ca6:	f7ff fda7 	bl	80117f8 <__retarget_lock_release_recursive>
 8011caa:	89ab      	ldrh	r3, [r5, #12]
 8011cac:	065b      	lsls	r3, r3, #25
 8011cae:	f53f af1d 	bmi.w	8011aec <_vfiprintf_r+0x44>
 8011cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cb4:	e71c      	b.n	8011af0 <_vfiprintf_r+0x48>
 8011cb6:	ab03      	add	r3, sp, #12
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	462a      	mov	r2, r5
 8011cbc:	4b05      	ldr	r3, [pc, #20]	; (8011cd4 <_vfiprintf_r+0x22c>)
 8011cbe:	a904      	add	r1, sp, #16
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f000 f879 	bl	8011db8 <_printf_i>
 8011cc6:	e7e4      	b.n	8011c92 <_vfiprintf_r+0x1ea>
 8011cc8:	08014f95 	.word	0x08014f95
 8011ccc:	08014f9f 	.word	0x08014f9f
 8011cd0:	00000000 	.word	0x00000000
 8011cd4:	08011a83 	.word	0x08011a83
 8011cd8:	08014f9b 	.word	0x08014f9b

08011cdc <_printf_common>:
 8011cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	4699      	mov	r9, r3
 8011ce4:	688a      	ldr	r2, [r1, #8]
 8011ce6:	690b      	ldr	r3, [r1, #16]
 8011ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cec:	4293      	cmp	r3, r2
 8011cee:	bfb8      	it	lt
 8011cf0:	4613      	movlt	r3, r2
 8011cf2:	6033      	str	r3, [r6, #0]
 8011cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cf8:	4607      	mov	r7, r0
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	b10a      	cbz	r2, 8011d02 <_printf_common+0x26>
 8011cfe:	3301      	adds	r3, #1
 8011d00:	6033      	str	r3, [r6, #0]
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	0699      	lsls	r1, r3, #26
 8011d06:	bf42      	ittt	mi
 8011d08:	6833      	ldrmi	r3, [r6, #0]
 8011d0a:	3302      	addmi	r3, #2
 8011d0c:	6033      	strmi	r3, [r6, #0]
 8011d0e:	6825      	ldr	r5, [r4, #0]
 8011d10:	f015 0506 	ands.w	r5, r5, #6
 8011d14:	d106      	bne.n	8011d24 <_printf_common+0x48>
 8011d16:	f104 0a19 	add.w	sl, r4, #25
 8011d1a:	68e3      	ldr	r3, [r4, #12]
 8011d1c:	6832      	ldr	r2, [r6, #0]
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	42ab      	cmp	r3, r5
 8011d22:	dc26      	bgt.n	8011d72 <_printf_common+0x96>
 8011d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d28:	1e13      	subs	r3, r2, #0
 8011d2a:	6822      	ldr	r2, [r4, #0]
 8011d2c:	bf18      	it	ne
 8011d2e:	2301      	movne	r3, #1
 8011d30:	0692      	lsls	r2, r2, #26
 8011d32:	d42b      	bmi.n	8011d8c <_printf_common+0xb0>
 8011d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d38:	4649      	mov	r1, r9
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	47c0      	blx	r8
 8011d3e:	3001      	adds	r0, #1
 8011d40:	d01e      	beq.n	8011d80 <_printf_common+0xa4>
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	6922      	ldr	r2, [r4, #16]
 8011d46:	f003 0306 	and.w	r3, r3, #6
 8011d4a:	2b04      	cmp	r3, #4
 8011d4c:	bf02      	ittt	eq
 8011d4e:	68e5      	ldreq	r5, [r4, #12]
 8011d50:	6833      	ldreq	r3, [r6, #0]
 8011d52:	1aed      	subeq	r5, r5, r3
 8011d54:	68a3      	ldr	r3, [r4, #8]
 8011d56:	bf0c      	ite	eq
 8011d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d5c:	2500      	movne	r5, #0
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	bfc4      	itt	gt
 8011d62:	1a9b      	subgt	r3, r3, r2
 8011d64:	18ed      	addgt	r5, r5, r3
 8011d66:	2600      	movs	r6, #0
 8011d68:	341a      	adds	r4, #26
 8011d6a:	42b5      	cmp	r5, r6
 8011d6c:	d11a      	bne.n	8011da4 <_printf_common+0xc8>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	e008      	b.n	8011d84 <_printf_common+0xa8>
 8011d72:	2301      	movs	r3, #1
 8011d74:	4652      	mov	r2, sl
 8011d76:	4649      	mov	r1, r9
 8011d78:	4638      	mov	r0, r7
 8011d7a:	47c0      	blx	r8
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	d103      	bne.n	8011d88 <_printf_common+0xac>
 8011d80:	f04f 30ff 	mov.w	r0, #4294967295
 8011d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d88:	3501      	adds	r5, #1
 8011d8a:	e7c6      	b.n	8011d1a <_printf_common+0x3e>
 8011d8c:	18e1      	adds	r1, r4, r3
 8011d8e:	1c5a      	adds	r2, r3, #1
 8011d90:	2030      	movs	r0, #48	; 0x30
 8011d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d96:	4422      	add	r2, r4
 8011d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011da0:	3302      	adds	r3, #2
 8011da2:	e7c7      	b.n	8011d34 <_printf_common+0x58>
 8011da4:	2301      	movs	r3, #1
 8011da6:	4622      	mov	r2, r4
 8011da8:	4649      	mov	r1, r9
 8011daa:	4638      	mov	r0, r7
 8011dac:	47c0      	blx	r8
 8011dae:	3001      	adds	r0, #1
 8011db0:	d0e6      	beq.n	8011d80 <_printf_common+0xa4>
 8011db2:	3601      	adds	r6, #1
 8011db4:	e7d9      	b.n	8011d6a <_printf_common+0x8e>
	...

08011db8 <_printf_i>:
 8011db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dbc:	7e0f      	ldrb	r7, [r1, #24]
 8011dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011dc0:	2f78      	cmp	r7, #120	; 0x78
 8011dc2:	4691      	mov	r9, r2
 8011dc4:	4680      	mov	r8, r0
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	469a      	mov	sl, r3
 8011dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011dce:	d807      	bhi.n	8011de0 <_printf_i+0x28>
 8011dd0:	2f62      	cmp	r7, #98	; 0x62
 8011dd2:	d80a      	bhi.n	8011dea <_printf_i+0x32>
 8011dd4:	2f00      	cmp	r7, #0
 8011dd6:	f000 80d4 	beq.w	8011f82 <_printf_i+0x1ca>
 8011dda:	2f58      	cmp	r7, #88	; 0x58
 8011ddc:	f000 80c0 	beq.w	8011f60 <_printf_i+0x1a8>
 8011de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011de8:	e03a      	b.n	8011e60 <_printf_i+0xa8>
 8011dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dee:	2b15      	cmp	r3, #21
 8011df0:	d8f6      	bhi.n	8011de0 <_printf_i+0x28>
 8011df2:	a101      	add	r1, pc, #4	; (adr r1, 8011df8 <_printf_i+0x40>)
 8011df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011df8:	08011e51 	.word	0x08011e51
 8011dfc:	08011e65 	.word	0x08011e65
 8011e00:	08011de1 	.word	0x08011de1
 8011e04:	08011de1 	.word	0x08011de1
 8011e08:	08011de1 	.word	0x08011de1
 8011e0c:	08011de1 	.word	0x08011de1
 8011e10:	08011e65 	.word	0x08011e65
 8011e14:	08011de1 	.word	0x08011de1
 8011e18:	08011de1 	.word	0x08011de1
 8011e1c:	08011de1 	.word	0x08011de1
 8011e20:	08011de1 	.word	0x08011de1
 8011e24:	08011f69 	.word	0x08011f69
 8011e28:	08011e91 	.word	0x08011e91
 8011e2c:	08011f23 	.word	0x08011f23
 8011e30:	08011de1 	.word	0x08011de1
 8011e34:	08011de1 	.word	0x08011de1
 8011e38:	08011f8b 	.word	0x08011f8b
 8011e3c:	08011de1 	.word	0x08011de1
 8011e40:	08011e91 	.word	0x08011e91
 8011e44:	08011de1 	.word	0x08011de1
 8011e48:	08011de1 	.word	0x08011de1
 8011e4c:	08011f2b 	.word	0x08011f2b
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	1d1a      	adds	r2, r3, #4
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	602a      	str	r2, [r5, #0]
 8011e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e60:	2301      	movs	r3, #1
 8011e62:	e09f      	b.n	8011fa4 <_printf_i+0x1ec>
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	682b      	ldr	r3, [r5, #0]
 8011e68:	0607      	lsls	r7, r0, #24
 8011e6a:	f103 0104 	add.w	r1, r3, #4
 8011e6e:	6029      	str	r1, [r5, #0]
 8011e70:	d501      	bpl.n	8011e76 <_printf_i+0xbe>
 8011e72:	681e      	ldr	r6, [r3, #0]
 8011e74:	e003      	b.n	8011e7e <_printf_i+0xc6>
 8011e76:	0646      	lsls	r6, r0, #25
 8011e78:	d5fb      	bpl.n	8011e72 <_printf_i+0xba>
 8011e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e7e:	2e00      	cmp	r6, #0
 8011e80:	da03      	bge.n	8011e8a <_printf_i+0xd2>
 8011e82:	232d      	movs	r3, #45	; 0x2d
 8011e84:	4276      	negs	r6, r6
 8011e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e8a:	485a      	ldr	r0, [pc, #360]	; (8011ff4 <_printf_i+0x23c>)
 8011e8c:	230a      	movs	r3, #10
 8011e8e:	e012      	b.n	8011eb6 <_printf_i+0xfe>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	1d19      	adds	r1, r3, #4
 8011e96:	6029      	str	r1, [r5, #0]
 8011e98:	0605      	lsls	r5, r0, #24
 8011e9a:	d501      	bpl.n	8011ea0 <_printf_i+0xe8>
 8011e9c:	681e      	ldr	r6, [r3, #0]
 8011e9e:	e002      	b.n	8011ea6 <_printf_i+0xee>
 8011ea0:	0641      	lsls	r1, r0, #25
 8011ea2:	d5fb      	bpl.n	8011e9c <_printf_i+0xe4>
 8011ea4:	881e      	ldrh	r6, [r3, #0]
 8011ea6:	4853      	ldr	r0, [pc, #332]	; (8011ff4 <_printf_i+0x23c>)
 8011ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8011eaa:	bf0c      	ite	eq
 8011eac:	2308      	moveq	r3, #8
 8011eae:	230a      	movne	r3, #10
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eb6:	6865      	ldr	r5, [r4, #4]
 8011eb8:	60a5      	str	r5, [r4, #8]
 8011eba:	2d00      	cmp	r5, #0
 8011ebc:	bfa2      	ittt	ge
 8011ebe:	6821      	ldrge	r1, [r4, #0]
 8011ec0:	f021 0104 	bicge.w	r1, r1, #4
 8011ec4:	6021      	strge	r1, [r4, #0]
 8011ec6:	b90e      	cbnz	r6, 8011ecc <_printf_i+0x114>
 8011ec8:	2d00      	cmp	r5, #0
 8011eca:	d04b      	beq.n	8011f64 <_printf_i+0x1ac>
 8011ecc:	4615      	mov	r5, r2
 8011ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8011ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8011ed6:	5dc7      	ldrb	r7, [r0, r7]
 8011ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011edc:	4637      	mov	r7, r6
 8011ede:	42bb      	cmp	r3, r7
 8011ee0:	460e      	mov	r6, r1
 8011ee2:	d9f4      	bls.n	8011ece <_printf_i+0x116>
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	d10b      	bne.n	8011f00 <_printf_i+0x148>
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	07de      	lsls	r6, r3, #31
 8011eec:	d508      	bpl.n	8011f00 <_printf_i+0x148>
 8011eee:	6923      	ldr	r3, [r4, #16]
 8011ef0:	6861      	ldr	r1, [r4, #4]
 8011ef2:	4299      	cmp	r1, r3
 8011ef4:	bfde      	ittt	le
 8011ef6:	2330      	movle	r3, #48	; 0x30
 8011ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f00:	1b52      	subs	r2, r2, r5
 8011f02:	6122      	str	r2, [r4, #16]
 8011f04:	f8cd a000 	str.w	sl, [sp]
 8011f08:	464b      	mov	r3, r9
 8011f0a:	aa03      	add	r2, sp, #12
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4640      	mov	r0, r8
 8011f10:	f7ff fee4 	bl	8011cdc <_printf_common>
 8011f14:	3001      	adds	r0, #1
 8011f16:	d14a      	bne.n	8011fae <_printf_i+0x1f6>
 8011f18:	f04f 30ff 	mov.w	r0, #4294967295
 8011f1c:	b004      	add	sp, #16
 8011f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	f043 0320 	orr.w	r3, r3, #32
 8011f28:	6023      	str	r3, [r4, #0]
 8011f2a:	4833      	ldr	r0, [pc, #204]	; (8011ff8 <_printf_i+0x240>)
 8011f2c:	2778      	movs	r7, #120	; 0x78
 8011f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	6829      	ldr	r1, [r5, #0]
 8011f36:	061f      	lsls	r7, r3, #24
 8011f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f3c:	d402      	bmi.n	8011f44 <_printf_i+0x18c>
 8011f3e:	065f      	lsls	r7, r3, #25
 8011f40:	bf48      	it	mi
 8011f42:	b2b6      	uxthmi	r6, r6
 8011f44:	07df      	lsls	r7, r3, #31
 8011f46:	bf48      	it	mi
 8011f48:	f043 0320 	orrmi.w	r3, r3, #32
 8011f4c:	6029      	str	r1, [r5, #0]
 8011f4e:	bf48      	it	mi
 8011f50:	6023      	strmi	r3, [r4, #0]
 8011f52:	b91e      	cbnz	r6, 8011f5c <_printf_i+0x1a4>
 8011f54:	6823      	ldr	r3, [r4, #0]
 8011f56:	f023 0320 	bic.w	r3, r3, #32
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	2310      	movs	r3, #16
 8011f5e:	e7a7      	b.n	8011eb0 <_printf_i+0xf8>
 8011f60:	4824      	ldr	r0, [pc, #144]	; (8011ff4 <_printf_i+0x23c>)
 8011f62:	e7e4      	b.n	8011f2e <_printf_i+0x176>
 8011f64:	4615      	mov	r5, r2
 8011f66:	e7bd      	b.n	8011ee4 <_printf_i+0x12c>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	6826      	ldr	r6, [r4, #0]
 8011f6c:	6961      	ldr	r1, [r4, #20]
 8011f6e:	1d18      	adds	r0, r3, #4
 8011f70:	6028      	str	r0, [r5, #0]
 8011f72:	0635      	lsls	r5, r6, #24
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	d501      	bpl.n	8011f7c <_printf_i+0x1c4>
 8011f78:	6019      	str	r1, [r3, #0]
 8011f7a:	e002      	b.n	8011f82 <_printf_i+0x1ca>
 8011f7c:	0670      	lsls	r0, r6, #25
 8011f7e:	d5fb      	bpl.n	8011f78 <_printf_i+0x1c0>
 8011f80:	8019      	strh	r1, [r3, #0]
 8011f82:	2300      	movs	r3, #0
 8011f84:	6123      	str	r3, [r4, #16]
 8011f86:	4615      	mov	r5, r2
 8011f88:	e7bc      	b.n	8011f04 <_printf_i+0x14c>
 8011f8a:	682b      	ldr	r3, [r5, #0]
 8011f8c:	1d1a      	adds	r2, r3, #4
 8011f8e:	602a      	str	r2, [r5, #0]
 8011f90:	681d      	ldr	r5, [r3, #0]
 8011f92:	6862      	ldr	r2, [r4, #4]
 8011f94:	2100      	movs	r1, #0
 8011f96:	4628      	mov	r0, r5
 8011f98:	f7ee f92a 	bl	80001f0 <memchr>
 8011f9c:	b108      	cbz	r0, 8011fa2 <_printf_i+0x1ea>
 8011f9e:	1b40      	subs	r0, r0, r5
 8011fa0:	6060      	str	r0, [r4, #4]
 8011fa2:	6863      	ldr	r3, [r4, #4]
 8011fa4:	6123      	str	r3, [r4, #16]
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fac:	e7aa      	b.n	8011f04 <_printf_i+0x14c>
 8011fae:	6923      	ldr	r3, [r4, #16]
 8011fb0:	462a      	mov	r2, r5
 8011fb2:	4649      	mov	r1, r9
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	47d0      	blx	sl
 8011fb8:	3001      	adds	r0, #1
 8011fba:	d0ad      	beq.n	8011f18 <_printf_i+0x160>
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	079b      	lsls	r3, r3, #30
 8011fc0:	d413      	bmi.n	8011fea <_printf_i+0x232>
 8011fc2:	68e0      	ldr	r0, [r4, #12]
 8011fc4:	9b03      	ldr	r3, [sp, #12]
 8011fc6:	4298      	cmp	r0, r3
 8011fc8:	bfb8      	it	lt
 8011fca:	4618      	movlt	r0, r3
 8011fcc:	e7a6      	b.n	8011f1c <_printf_i+0x164>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	4632      	mov	r2, r6
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	4640      	mov	r0, r8
 8011fd6:	47d0      	blx	sl
 8011fd8:	3001      	adds	r0, #1
 8011fda:	d09d      	beq.n	8011f18 <_printf_i+0x160>
 8011fdc:	3501      	adds	r5, #1
 8011fde:	68e3      	ldr	r3, [r4, #12]
 8011fe0:	9903      	ldr	r1, [sp, #12]
 8011fe2:	1a5b      	subs	r3, r3, r1
 8011fe4:	42ab      	cmp	r3, r5
 8011fe6:	dcf2      	bgt.n	8011fce <_printf_i+0x216>
 8011fe8:	e7eb      	b.n	8011fc2 <_printf_i+0x20a>
 8011fea:	2500      	movs	r5, #0
 8011fec:	f104 0619 	add.w	r6, r4, #25
 8011ff0:	e7f5      	b.n	8011fde <_printf_i+0x226>
 8011ff2:	bf00      	nop
 8011ff4:	08014fa6 	.word	0x08014fa6
 8011ff8:	08014fb7 	.word	0x08014fb7

08011ffc <__sflush_r>:
 8011ffc:	898a      	ldrh	r2, [r1, #12]
 8011ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012002:	4605      	mov	r5, r0
 8012004:	0710      	lsls	r0, r2, #28
 8012006:	460c      	mov	r4, r1
 8012008:	d458      	bmi.n	80120bc <__sflush_r+0xc0>
 801200a:	684b      	ldr	r3, [r1, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	dc05      	bgt.n	801201c <__sflush_r+0x20>
 8012010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012012:	2b00      	cmp	r3, #0
 8012014:	dc02      	bgt.n	801201c <__sflush_r+0x20>
 8012016:	2000      	movs	r0, #0
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801201e:	2e00      	cmp	r6, #0
 8012020:	d0f9      	beq.n	8012016 <__sflush_r+0x1a>
 8012022:	2300      	movs	r3, #0
 8012024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012028:	682f      	ldr	r7, [r5, #0]
 801202a:	6a21      	ldr	r1, [r4, #32]
 801202c:	602b      	str	r3, [r5, #0]
 801202e:	d032      	beq.n	8012096 <__sflush_r+0x9a>
 8012030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	075a      	lsls	r2, r3, #29
 8012036:	d505      	bpl.n	8012044 <__sflush_r+0x48>
 8012038:	6863      	ldr	r3, [r4, #4]
 801203a:	1ac0      	subs	r0, r0, r3
 801203c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801203e:	b10b      	cbz	r3, 8012044 <__sflush_r+0x48>
 8012040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012042:	1ac0      	subs	r0, r0, r3
 8012044:	2300      	movs	r3, #0
 8012046:	4602      	mov	r2, r0
 8012048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801204a:	6a21      	ldr	r1, [r4, #32]
 801204c:	4628      	mov	r0, r5
 801204e:	47b0      	blx	r6
 8012050:	1c43      	adds	r3, r0, #1
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	d106      	bne.n	8012064 <__sflush_r+0x68>
 8012056:	6829      	ldr	r1, [r5, #0]
 8012058:	291d      	cmp	r1, #29
 801205a:	d82b      	bhi.n	80120b4 <__sflush_r+0xb8>
 801205c:	4a29      	ldr	r2, [pc, #164]	; (8012104 <__sflush_r+0x108>)
 801205e:	410a      	asrs	r2, r1
 8012060:	07d6      	lsls	r6, r2, #31
 8012062:	d427      	bmi.n	80120b4 <__sflush_r+0xb8>
 8012064:	2200      	movs	r2, #0
 8012066:	6062      	str	r2, [r4, #4]
 8012068:	04d9      	lsls	r1, r3, #19
 801206a:	6922      	ldr	r2, [r4, #16]
 801206c:	6022      	str	r2, [r4, #0]
 801206e:	d504      	bpl.n	801207a <__sflush_r+0x7e>
 8012070:	1c42      	adds	r2, r0, #1
 8012072:	d101      	bne.n	8012078 <__sflush_r+0x7c>
 8012074:	682b      	ldr	r3, [r5, #0]
 8012076:	b903      	cbnz	r3, 801207a <__sflush_r+0x7e>
 8012078:	6560      	str	r0, [r4, #84]	; 0x54
 801207a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801207c:	602f      	str	r7, [r5, #0]
 801207e:	2900      	cmp	r1, #0
 8012080:	d0c9      	beq.n	8012016 <__sflush_r+0x1a>
 8012082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012086:	4299      	cmp	r1, r3
 8012088:	d002      	beq.n	8012090 <__sflush_r+0x94>
 801208a:	4628      	mov	r0, r5
 801208c:	f7ff fbe2 	bl	8011854 <_free_r>
 8012090:	2000      	movs	r0, #0
 8012092:	6360      	str	r0, [r4, #52]	; 0x34
 8012094:	e7c0      	b.n	8012018 <__sflush_r+0x1c>
 8012096:	2301      	movs	r3, #1
 8012098:	4628      	mov	r0, r5
 801209a:	47b0      	blx	r6
 801209c:	1c41      	adds	r1, r0, #1
 801209e:	d1c8      	bne.n	8012032 <__sflush_r+0x36>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d0c5      	beq.n	8012032 <__sflush_r+0x36>
 80120a6:	2b1d      	cmp	r3, #29
 80120a8:	d001      	beq.n	80120ae <__sflush_r+0xb2>
 80120aa:	2b16      	cmp	r3, #22
 80120ac:	d101      	bne.n	80120b2 <__sflush_r+0xb6>
 80120ae:	602f      	str	r7, [r5, #0]
 80120b0:	e7b1      	b.n	8012016 <__sflush_r+0x1a>
 80120b2:	89a3      	ldrh	r3, [r4, #12]
 80120b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120b8:	81a3      	strh	r3, [r4, #12]
 80120ba:	e7ad      	b.n	8012018 <__sflush_r+0x1c>
 80120bc:	690f      	ldr	r7, [r1, #16]
 80120be:	2f00      	cmp	r7, #0
 80120c0:	d0a9      	beq.n	8012016 <__sflush_r+0x1a>
 80120c2:	0793      	lsls	r3, r2, #30
 80120c4:	680e      	ldr	r6, [r1, #0]
 80120c6:	bf08      	it	eq
 80120c8:	694b      	ldreq	r3, [r1, #20]
 80120ca:	600f      	str	r7, [r1, #0]
 80120cc:	bf18      	it	ne
 80120ce:	2300      	movne	r3, #0
 80120d0:	eba6 0807 	sub.w	r8, r6, r7
 80120d4:	608b      	str	r3, [r1, #8]
 80120d6:	f1b8 0f00 	cmp.w	r8, #0
 80120da:	dd9c      	ble.n	8012016 <__sflush_r+0x1a>
 80120dc:	6a21      	ldr	r1, [r4, #32]
 80120de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120e0:	4643      	mov	r3, r8
 80120e2:	463a      	mov	r2, r7
 80120e4:	4628      	mov	r0, r5
 80120e6:	47b0      	blx	r6
 80120e8:	2800      	cmp	r0, #0
 80120ea:	dc06      	bgt.n	80120fa <__sflush_r+0xfe>
 80120ec:	89a3      	ldrh	r3, [r4, #12]
 80120ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120f2:	81a3      	strh	r3, [r4, #12]
 80120f4:	f04f 30ff 	mov.w	r0, #4294967295
 80120f8:	e78e      	b.n	8012018 <__sflush_r+0x1c>
 80120fa:	4407      	add	r7, r0
 80120fc:	eba8 0800 	sub.w	r8, r8, r0
 8012100:	e7e9      	b.n	80120d6 <__sflush_r+0xda>
 8012102:	bf00      	nop
 8012104:	dfbffffe 	.word	0xdfbffffe

08012108 <_fflush_r>:
 8012108:	b538      	push	{r3, r4, r5, lr}
 801210a:	690b      	ldr	r3, [r1, #16]
 801210c:	4605      	mov	r5, r0
 801210e:	460c      	mov	r4, r1
 8012110:	b913      	cbnz	r3, 8012118 <_fflush_r+0x10>
 8012112:	2500      	movs	r5, #0
 8012114:	4628      	mov	r0, r5
 8012116:	bd38      	pop	{r3, r4, r5, pc}
 8012118:	b118      	cbz	r0, 8012122 <_fflush_r+0x1a>
 801211a:	6a03      	ldr	r3, [r0, #32]
 801211c:	b90b      	cbnz	r3, 8012122 <_fflush_r+0x1a>
 801211e:	f7ff f96b 	bl	80113f8 <__sinit>
 8012122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d0f3      	beq.n	8012112 <_fflush_r+0xa>
 801212a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801212c:	07d0      	lsls	r0, r2, #31
 801212e:	d404      	bmi.n	801213a <_fflush_r+0x32>
 8012130:	0599      	lsls	r1, r3, #22
 8012132:	d402      	bmi.n	801213a <_fflush_r+0x32>
 8012134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012136:	f7ff fb5e 	bl	80117f6 <__retarget_lock_acquire_recursive>
 801213a:	4628      	mov	r0, r5
 801213c:	4621      	mov	r1, r4
 801213e:	f7ff ff5d 	bl	8011ffc <__sflush_r>
 8012142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012144:	07da      	lsls	r2, r3, #31
 8012146:	4605      	mov	r5, r0
 8012148:	d4e4      	bmi.n	8012114 <_fflush_r+0xc>
 801214a:	89a3      	ldrh	r3, [r4, #12]
 801214c:	059b      	lsls	r3, r3, #22
 801214e:	d4e1      	bmi.n	8012114 <_fflush_r+0xc>
 8012150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012152:	f7ff fb51 	bl	80117f8 <__retarget_lock_release_recursive>
 8012156:	e7dd      	b.n	8012114 <_fflush_r+0xc>

08012158 <fiprintf>:
 8012158:	b40e      	push	{r1, r2, r3}
 801215a:	b503      	push	{r0, r1, lr}
 801215c:	4601      	mov	r1, r0
 801215e:	ab03      	add	r3, sp, #12
 8012160:	4805      	ldr	r0, [pc, #20]	; (8012178 <fiprintf+0x20>)
 8012162:	f853 2b04 	ldr.w	r2, [r3], #4
 8012166:	6800      	ldr	r0, [r0, #0]
 8012168:	9301      	str	r3, [sp, #4]
 801216a:	f7ff fc9d 	bl	8011aa8 <_vfiprintf_r>
 801216e:	b002      	add	sp, #8
 8012170:	f85d eb04 	ldr.w	lr, [sp], #4
 8012174:	b003      	add	sp, #12
 8012176:	4770      	bx	lr
 8012178:	20000198 	.word	0x20000198

0801217c <__swhatbuf_r>:
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	460c      	mov	r4, r1
 8012180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012184:	2900      	cmp	r1, #0
 8012186:	b096      	sub	sp, #88	; 0x58
 8012188:	4615      	mov	r5, r2
 801218a:	461e      	mov	r6, r3
 801218c:	da0d      	bge.n	80121aa <__swhatbuf_r+0x2e>
 801218e:	89a3      	ldrh	r3, [r4, #12]
 8012190:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012194:	f04f 0100 	mov.w	r1, #0
 8012198:	bf0c      	ite	eq
 801219a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801219e:	2340      	movne	r3, #64	; 0x40
 80121a0:	2000      	movs	r0, #0
 80121a2:	6031      	str	r1, [r6, #0]
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	b016      	add	sp, #88	; 0x58
 80121a8:	bd70      	pop	{r4, r5, r6, pc}
 80121aa:	466a      	mov	r2, sp
 80121ac:	f000 f848 	bl	8012240 <_fstat_r>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	dbec      	blt.n	801218e <__swhatbuf_r+0x12>
 80121b4:	9901      	ldr	r1, [sp, #4]
 80121b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80121ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80121be:	4259      	negs	r1, r3
 80121c0:	4159      	adcs	r1, r3
 80121c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121c6:	e7eb      	b.n	80121a0 <__swhatbuf_r+0x24>

080121c8 <__smakebuf_r>:
 80121c8:	898b      	ldrh	r3, [r1, #12]
 80121ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80121cc:	079d      	lsls	r5, r3, #30
 80121ce:	4606      	mov	r6, r0
 80121d0:	460c      	mov	r4, r1
 80121d2:	d507      	bpl.n	80121e4 <__smakebuf_r+0x1c>
 80121d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80121d8:	6023      	str	r3, [r4, #0]
 80121da:	6123      	str	r3, [r4, #16]
 80121dc:	2301      	movs	r3, #1
 80121de:	6163      	str	r3, [r4, #20]
 80121e0:	b002      	add	sp, #8
 80121e2:	bd70      	pop	{r4, r5, r6, pc}
 80121e4:	ab01      	add	r3, sp, #4
 80121e6:	466a      	mov	r2, sp
 80121e8:	f7ff ffc8 	bl	801217c <__swhatbuf_r>
 80121ec:	9900      	ldr	r1, [sp, #0]
 80121ee:	4605      	mov	r5, r0
 80121f0:	4630      	mov	r0, r6
 80121f2:	f7ff fba3 	bl	801193c <_malloc_r>
 80121f6:	b948      	cbnz	r0, 801220c <__smakebuf_r+0x44>
 80121f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121fc:	059a      	lsls	r2, r3, #22
 80121fe:	d4ef      	bmi.n	80121e0 <__smakebuf_r+0x18>
 8012200:	f023 0303 	bic.w	r3, r3, #3
 8012204:	f043 0302 	orr.w	r3, r3, #2
 8012208:	81a3      	strh	r3, [r4, #12]
 801220a:	e7e3      	b.n	80121d4 <__smakebuf_r+0xc>
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	6020      	str	r0, [r4, #0]
 8012210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012214:	81a3      	strh	r3, [r4, #12]
 8012216:	9b00      	ldr	r3, [sp, #0]
 8012218:	6163      	str	r3, [r4, #20]
 801221a:	9b01      	ldr	r3, [sp, #4]
 801221c:	6120      	str	r0, [r4, #16]
 801221e:	b15b      	cbz	r3, 8012238 <__smakebuf_r+0x70>
 8012220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012224:	4630      	mov	r0, r6
 8012226:	f000 f81d 	bl	8012264 <_isatty_r>
 801222a:	b128      	cbz	r0, 8012238 <__smakebuf_r+0x70>
 801222c:	89a3      	ldrh	r3, [r4, #12]
 801222e:	f023 0303 	bic.w	r3, r3, #3
 8012232:	f043 0301 	orr.w	r3, r3, #1
 8012236:	81a3      	strh	r3, [r4, #12]
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	431d      	orrs	r5, r3
 801223c:	81a5      	strh	r5, [r4, #12]
 801223e:	e7cf      	b.n	80121e0 <__smakebuf_r+0x18>

08012240 <_fstat_r>:
 8012240:	b538      	push	{r3, r4, r5, lr}
 8012242:	4d07      	ldr	r5, [pc, #28]	; (8012260 <_fstat_r+0x20>)
 8012244:	2300      	movs	r3, #0
 8012246:	4604      	mov	r4, r0
 8012248:	4608      	mov	r0, r1
 801224a:	4611      	mov	r1, r2
 801224c:	602b      	str	r3, [r5, #0]
 801224e:	f7ef fbd2 	bl	80019f6 <_fstat>
 8012252:	1c43      	adds	r3, r0, #1
 8012254:	d102      	bne.n	801225c <_fstat_r+0x1c>
 8012256:	682b      	ldr	r3, [r5, #0]
 8012258:	b103      	cbz	r3, 801225c <_fstat_r+0x1c>
 801225a:	6023      	str	r3, [r4, #0]
 801225c:	bd38      	pop	{r3, r4, r5, pc}
 801225e:	bf00      	nop
 8012260:	20008f9c 	.word	0x20008f9c

08012264 <_isatty_r>:
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4d06      	ldr	r5, [pc, #24]	; (8012280 <_isatty_r+0x1c>)
 8012268:	2300      	movs	r3, #0
 801226a:	4604      	mov	r4, r0
 801226c:	4608      	mov	r0, r1
 801226e:	602b      	str	r3, [r5, #0]
 8012270:	f7ef fbd1 	bl	8001a16 <_isatty>
 8012274:	1c43      	adds	r3, r0, #1
 8012276:	d102      	bne.n	801227e <_isatty_r+0x1a>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	b103      	cbz	r3, 801227e <_isatty_r+0x1a>
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	bd38      	pop	{r3, r4, r5, pc}
 8012280:	20008f9c 	.word	0x20008f9c

08012284 <_sbrk_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d06      	ldr	r5, [pc, #24]	; (80122a0 <_sbrk_r+0x1c>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	602b      	str	r3, [r5, #0]
 8012290:	f7ef fbda 	bl	8001a48 <_sbrk>
 8012294:	1c43      	adds	r3, r0, #1
 8012296:	d102      	bne.n	801229e <_sbrk_r+0x1a>
 8012298:	682b      	ldr	r3, [r5, #0]
 801229a:	b103      	cbz	r3, 801229e <_sbrk_r+0x1a>
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	20008f9c 	.word	0x20008f9c

080122a4 <abort>:
 80122a4:	b508      	push	{r3, lr}
 80122a6:	2006      	movs	r0, #6
 80122a8:	f000 f82c 	bl	8012304 <raise>
 80122ac:	2001      	movs	r0, #1
 80122ae:	f7ef fb53 	bl	8001958 <_exit>

080122b2 <_raise_r>:
 80122b2:	291f      	cmp	r1, #31
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4604      	mov	r4, r0
 80122b8:	460d      	mov	r5, r1
 80122ba:	d904      	bls.n	80122c6 <_raise_r+0x14>
 80122bc:	2316      	movs	r3, #22
 80122be:	6003      	str	r3, [r0, #0]
 80122c0:	f04f 30ff 	mov.w	r0, #4294967295
 80122c4:	bd38      	pop	{r3, r4, r5, pc}
 80122c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80122c8:	b112      	cbz	r2, 80122d0 <_raise_r+0x1e>
 80122ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122ce:	b94b      	cbnz	r3, 80122e4 <_raise_r+0x32>
 80122d0:	4620      	mov	r0, r4
 80122d2:	f000 f831 	bl	8012338 <_getpid_r>
 80122d6:	462a      	mov	r2, r5
 80122d8:	4601      	mov	r1, r0
 80122da:	4620      	mov	r0, r4
 80122dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122e0:	f000 b818 	b.w	8012314 <_kill_r>
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d00a      	beq.n	80122fe <_raise_r+0x4c>
 80122e8:	1c59      	adds	r1, r3, #1
 80122ea:	d103      	bne.n	80122f4 <_raise_r+0x42>
 80122ec:	2316      	movs	r3, #22
 80122ee:	6003      	str	r3, [r0, #0]
 80122f0:	2001      	movs	r0, #1
 80122f2:	e7e7      	b.n	80122c4 <_raise_r+0x12>
 80122f4:	2400      	movs	r4, #0
 80122f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80122fa:	4628      	mov	r0, r5
 80122fc:	4798      	blx	r3
 80122fe:	2000      	movs	r0, #0
 8012300:	e7e0      	b.n	80122c4 <_raise_r+0x12>
	...

08012304 <raise>:
 8012304:	4b02      	ldr	r3, [pc, #8]	; (8012310 <raise+0xc>)
 8012306:	4601      	mov	r1, r0
 8012308:	6818      	ldr	r0, [r3, #0]
 801230a:	f7ff bfd2 	b.w	80122b2 <_raise_r>
 801230e:	bf00      	nop
 8012310:	20000198 	.word	0x20000198

08012314 <_kill_r>:
 8012314:	b538      	push	{r3, r4, r5, lr}
 8012316:	4d07      	ldr	r5, [pc, #28]	; (8012334 <_kill_r+0x20>)
 8012318:	2300      	movs	r3, #0
 801231a:	4604      	mov	r4, r0
 801231c:	4608      	mov	r0, r1
 801231e:	4611      	mov	r1, r2
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	f7ef fb07 	bl	8001934 <_kill>
 8012326:	1c43      	adds	r3, r0, #1
 8012328:	d102      	bne.n	8012330 <_kill_r+0x1c>
 801232a:	682b      	ldr	r3, [r5, #0]
 801232c:	b103      	cbz	r3, 8012330 <_kill_r+0x1c>
 801232e:	6023      	str	r3, [r4, #0]
 8012330:	bd38      	pop	{r3, r4, r5, pc}
 8012332:	bf00      	nop
 8012334:	20008f9c 	.word	0x20008f9c

08012338 <_getpid_r>:
 8012338:	f7ef baf4 	b.w	8001924 <_getpid>

0801233c <_init>:
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233e:	bf00      	nop
 8012340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012342:	bc08      	pop	{r3}
 8012344:	469e      	mov	lr, r3
 8012346:	4770      	bx	lr

08012348 <_fini>:
 8012348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801234a:	bf00      	nop
 801234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801234e:	bc08      	pop	{r3}
 8012350:	469e      	mov	lr, r3
 8012352:	4770      	bx	lr
